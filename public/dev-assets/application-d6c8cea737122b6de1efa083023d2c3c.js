/*!
 * jQuery JavaScript Library v1.10.2
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03T13:48Z
 */

(function( window, undefined ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//"use strict";
var
	// The deferred used on DOM ready
	readyList,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// Support: IE<10
	// For `typeof xmlNode.method` instead of `xmlNode.method !== undefined`
	core_strundefined = typeof undefined,

	// Use the correct document accordingly with window argument (sandbox)
	location = window.location,
	document = window.document,
	docElem = document.documentElement,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// [[Class]] -> type pairs
	class2type = {},

	// List of deleted data cache ids, so we can reuse them
	core_deletedIds = [],

	core_version = "1.10.2",

	// Save a reference to some core methods
	core_concat = core_deletedIds.concat,
	core_push = core_deletedIds.push,
	core_slice = core_deletedIds.slice,
	core_indexOf = core_deletedIds.indexOf,
	core_toString = class2type.toString,
	core_hasOwn = class2type.hasOwnProperty,
	core_trim = core_version.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

	// Used for splitting on whitespace
	core_rnotwhite = /\S+/g,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	},

	// The ready event handler
	completed = function( event ) {

		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
			detach();
			jQuery.ready();
		}
	},
	// Clean-up method for dom ready events
	detach = function() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed, false );
			window.removeEventListener( "load", completed, false );

		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: core_version,

	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return String( obj );
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ core_toString.call(obj) ] || "object" :
			typeof obj;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!core_hasOwn.call(obj, "constructor") &&
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( jQuery.support.ownLast ) {
			for ( key in obj ) {
				return core_hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || core_hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );
		if ( scripts ) {
			jQuery( scripts ).remove();
		}
		return jQuery.merge( [], parsed.childNodes );
	},

	parseJSON: function( data ) {
		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		if ( data === null ) {
			return data;
		}

		if ( typeof data === "string" ) {

			// Make sure leading/trailing whitespace is removed (IE can't handle it)
			data = jQuery.trim( data );

			if ( data ) {
				// Make sure the incoming data is actual JSON
				// Logic borrowed from http://json.org/json2.js
				if ( rvalidchars.test( data.replace( rvalidescape, "@" )
					.replace( rvalidtokens, "]" )
					.replace( rvalidbraces, "")) ) {

					return ( new Function( "return " + data ) )();
				}
			}
		}

		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				core_trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				core_push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( core_indexOf ) {
				return core_indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}
		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return core_concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations.
	// Note: this method belongs to the css module but it's needed here for the support module.
	// If support gets modularized, this method should be moved back to the css module.
	swap: function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || type !== "function" &&
		( length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj );
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
/*!
 * Sizzle CSS Selector Engine v1.10.2
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03
 */
(function( window, undefined ) {

var i,
	support,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	outermostContext,
	sortInput,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	hasDuplicate = false,
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}
		return 0;
	},

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rsibling = new RegExp( whitespace + "*[+~]" ),
	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent.attachEvent && parent !== parent.top ) {
		parent.attachEvent( "onbeforeunload", function() {
			setDocument();
		});
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Support: Opera 10-12/IE8
			// ^= $= *= and empty values
			// Should not select anything
			// Support: Windows 8 Native Apps
			// The type attribute is restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "t", "" );

			if ( div.querySelectorAll("[t^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = rnative.test( docElem.contains ) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b );

		if ( compare ) {
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === doc || contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === doc || contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		}

		// Not directly comparable, sort on existence of method
		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val === undefined ?
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null :
		val;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] && match[4] !== undefined ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
				}
				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector )
	);
	return results;
}

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return (val = elem.getAttributeNode( name )) && val.specified ?
				val.value :
				elem[ name ] === true ? name.toLowerCase() : null;
		}
	});
}

jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function( support ) {

	var all, a, input, select, fragment, opt, eventName, isSupported, i,
		div = document.createElement("div");

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// Finish early in limited (non-browser) environments
	all = div.getElementsByTagName("*") || [];
	a = div.getElementsByTagName("a")[ 0 ];
	if ( !a || !a.style || !all.length ) {
		return support;
	}

	// First batch of tests
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px;float:left;opacity:.5";

	// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName("tbody").length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName("link").length;

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute("style") );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute("href") === "/a";

	// Make sure that element opacity exists
	// (IE uses filter instead)
	// Use a regex to work around a WebKit issue. See #5145
	support.opacity = /^0.5/.test( a.style.opacity );

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!a.style.cssFloat;

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement("form").enctype;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone = document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Will be defined later
	support.inlineBlockNeedsLayout = false;
	support.shrinkWrapBlocks = false;
	support.pixelPosition = false;
	support.deleteExpando = true;
	support.noCloneEvent = true;
	support.reliableMarginRight = true;
	support.boxSizingReliable = true;

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<9
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	// Check if we can trust getAttribute("value")
	input = document.createElement("input");
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "checked", "t" );
	input.setAttribute( "name", "t" );

	fragment = document.createDocumentFragment();
	fragment.appendChild( input );

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
	for ( i in { submit: true, change: true, focusin: true }) {
		div.setAttribute( eventName = "on" + i, "t" );

		support[ i + "Bubbles" ] = eventName in window || div.attributes[ eventName ].expando === false;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Support: IE<9
	// Iteration over object's inherited properties before its own.
	for ( i in jQuery( support ) ) {
		break;
	}
	support.ownLast = i !== "0";

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, marginDiv, tds,
			divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

		body.appendChild( container ).appendChild( div );

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Support: IE8
		// Check if empty table cells still have offsetWidth/Height
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check box-sizing and margin behavior.
		div.innerHTML = "";
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";

		// Workaround failing boxSizing test due to offsetWidth returning wrong value
		// with some non-1 values of body zoom, ticket #13543
		jQuery.swap( body, body.style.zoom != null ? { zoom: 1 } : {}, function() {
			support.boxSizing = div.offsetWidth === 4;
		});

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = div.appendChild( document.createElement("div") );
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";

			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		if ( typeof div.style.zoom !== core_strundefined ) {
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.innerHTML = "";
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			div.style.display = "block";
			div.innerHTML = "<div></div>";
			div.firstChild.style.width = "5px";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

			if ( support.inlineBlockNeedsLayout ) {
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild( container );

		// Null elements to avoid leaks in IE
		container = div = tds = marginDiv = null;
	});

	// Null elements to avoid leaks in IE
	all = select = fragment = opt = a = input = null;

	return support;
})({});

var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

function internalData( elem, name, data, pvt /* Internal Use Only */ ){
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = core_deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( jQuery.support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"applet": true,
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		// Do not set data on non-element because it will not be cleared (#8335).
		if ( elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9 ) {
			return false;
		}

		var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

		// nodes accept data unless otherwise specified; rejection can be conditional
		return !noData || noData !== true && elem.getAttribute("classid") === noData;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var attrs, name,
			data = null,
			i = 0,
			elem = this[0];

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attrs = elem.attributes;
					for ( ; i < attrs.length; i++ ) {
						name = attrs[i].name;

						if ( name.indexOf("data-") === 0 ) {
							name = jQuery.camelCase( name.slice(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each(function() {
				jQuery.data( this, key, value );
			}) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook,
	rclass = /[\t\r\n\f]/g,
	rreturn = /\r/g,
	rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	getSetInput = jQuery.support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}
					elem.className = jQuery.trim( cur );

				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}
					elem.className = value ? jQuery.trim( cur ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( core_rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === core_strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var ret, hooks, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// Use proper attribute retrieval(#6932, #12072)
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( jQuery(option).val(), values ) >= 0) ) {
						optionSet = true;
					}
				}

				// force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === core_strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( core_rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;
					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						-1;
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = jQuery.expr.attrHandle[ name ] || jQuery.find.attr;

	jQuery.expr.attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?
		function( elem, name, isXML ) {
			var fn = jQuery.expr.attrHandle[ name ],
				ret = isXML ?
					undefined :
					/* jshint eqeqeq: false */
					(jQuery.expr.attrHandle[ name ] = undefined) !=
						getter( elem, name, isXML ) ?

						name.toLowerCase() :
						null;
			jQuery.expr.attrHandle[ name ] = fn;
			return ret;
		} :
		function( elem, name, isXML ) {
			return isXML ?
				undefined :
				elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
		};
});

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			return name === "value" || value === elem.getAttribute( name ) ?
				value :
				undefined;
		}
	};
	jQuery.expr.attrHandle.id = jQuery.expr.attrHandle.name = jQuery.expr.attrHandle.coords =
		// Some attributes are constructed with empty-string values when not defined
		function( elem, name, isXML ) {
			var ret;
			return isXML ?
				undefined :
				(ret = elem.getAttributeNode( name )) && ret.value !== "" ?
					ret.value :
					null;
		};
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return ret && ret.specified ?
				ret.value :
				undefined;
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	});
}


// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !jQuery.support.hrefNormalized ) {
	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !jQuery.support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});
var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = core_hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = core_slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Even when returnValue equals to undefined Firefox will still show alert
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === core_strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});
var isSimple = /^.[^:#\[\.,]*$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},

	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},

	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					cur = ret.push( cur );
					break;
				}
			}
		}

		return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( jQuery.unique(all) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.unique( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			}));
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;
	});
}
function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var
			// Snapshot the DOM in case .domManip sweeps something relevant into its fragment
			args = jQuery.map( this, function( elem ) {
				return [ elem.nextSibling, elem.parentNode ];
			}),
			i = 0;

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			var next = args[ i++ ],
				parent = args[ i++ ];

			if ( parent ) {
				// Don't use the snapshot next if it has moved (#13810)
				if ( next && next.parentNode !== parent ) {
					next = this.nextSibling;
				}
				jQuery( this ).remove();
				parent.insertBefore( elem, next );
			}
		// Allow new content to include elements from the context set
		}, true );

		// Force removal if there was no new content (e.g., from empty arguments)
		return i ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback, allowIntersection ) {

		// Flatten any nested arrays
		args = core_concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback, allowIntersection );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, !allowIntersection && this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[i], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Hope ajax is available...
								jQuery._evalUrl( node.src );
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType === 1 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			core_push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( manipulation_rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !jQuery.support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== core_strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						core_deletedIds.push( id );
					}
				}
			}
		}
	},

	_evalUrl: function( url ) {
		return jQuery.ajax({
			url: url,
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		});
	}
});
jQuery.fn.extend({
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});
var iframe, getStyles, curCSS,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	// isHidden might be called from jQuery#filter function;
	// in that case, element will be second argument
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			var len, styles,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return window.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, _computed ) {
		var width, minWidth, maxWidth,
			computed = _computed || getStyles( elem ),

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
			style = elem.style;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret;
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, _computed ) {
		var left, rs, rsLeft,
			computed = _computed || getStyles( elem ),
			ret = computed ? computed[ name ] : undefined,
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {
			// Use the already-created iframe if possible
			iframe = ( iframe ||
				jQuery("<iframe frameborder='0' width='0' height='0'/>")
				.css( "cssText", "display:block !important" )
			).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
			doc.write("<!doctype html><html><body>");
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}

// Called ONLY from within css_defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
		display = jQuery.css( elem[0], "display" );
	elem.remove();
	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				if ( computed ) {
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap( elem, { "display": "inline-block" },
						curCSS, [ elem, "marginRight" ] );
				}
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						computed = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( computed ) ?
							jQuery( elem ).position()[ prop ] + "px" :
							computed;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
			(!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function(){
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !manipulation_rcheckableType.test( type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});
var
	// Document location
	ajaxLocParts,
	ajaxLocation,
	ajax_nonce = jQuery.now(),

	ajax_rquery = /\?/,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
	jQuery.fn[ type ] = function( fn ){
		return this.on( type, fn );
	};
});

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});
var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
var xhrCallbacks, xhrSupported,
	xhrId = 0,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject && function() {
		// Abort all pending requests
		var key;
		for ( key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	};

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject("Microsoft.XMLHTTP");
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
xhrSupported = jQuery.ajaxSettings.xhr();
jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = jQuery.support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var handle, i,
						xhr = s.xhr();

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( err ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, responseHeaders, statusText, responses;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occurred
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					if ( !s.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";

			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !jQuery.support.shrinkWrapBlocks ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}


	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {
				continue;
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) ) {
		jQuery.fx.start();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, win,
		box = { top: 0, left: 0 },
		elem = this[ 0 ],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	return {
		top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
		left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
	};
};

jQuery.offset = {

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;
			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || docElem;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Limit scope pollution from any deprecated API
// (function() {

// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;

// })();
if ( typeof module === "object" && module && typeof module.exports === "object" ) {
	// Expose jQuery as module.exports in loaders that implement the Node
	// module pattern (including browserify). Do not create the global, since
	// the user will be storing it themselves locally, and globals are frowned
	// upon in the Node module world.
	module.exports = jQuery;
} else {
	// Otherwise expose jQuery to the global object as usual
	window.jQuery = window.$ = jQuery;

	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	if ( typeof define === "function" && define.amd ) {
		define( "jquery", [], function () { return jQuery; } );
	}
}

})( window );
(function($, undefined) {

/**
 * Unobtrusive scripting adapter for jQuery
 * https://github.com/rails/jquery-ujs
 *
 * Requires jQuery 1.7.0 or later.
 *
 * Released under the MIT license
 *
 */

  // Cut down on the number of issues from people inadvertently including jquery_ujs twice
  // by detecting and raising an error when it happens.
  if ( $.rails !== undefined ) {
    $.error('jquery-ujs has already been loaded!');
  }

  // Shorthand to make it a little easier to call public rails functions from within rails.js
  var rails;
  var $document = $(document);

  $.rails = rails = {
    // Link elements bound by jquery-ujs
    linkClickSelector: 'a[data-confirm], a[data-method], a[data-remote], a[data-disable-with]',

    // Button elements boud jquery-ujs
    buttonClickSelector: 'button[data-remote]',

    // Select elements bound by jquery-ujs
    inputChangeSelector: 'select[data-remote], input[data-remote], textarea[data-remote]',

    // Form elements bound by jquery-ujs
    formSubmitSelector: 'form',

    // Form input elements bound by jquery-ujs
    formInputClickSelector: 'form input[type=submit], form input[type=image], form button[type=submit], form button:not([type])',

    // Form input elements disabled during form submission
    disableSelector: 'input[data-disable-with], button[data-disable-with], textarea[data-disable-with]',

    // Form input elements re-enabled after form submission
    enableSelector: 'input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled',

    // Form required input elements
    requiredInputSelector: 'input[name][required]:not([disabled]),textarea[name][required]:not([disabled])',

    // Form file input elements
    fileInputSelector: 'input[type=file]',

    // Link onClick disable selector with possible reenable after remote submission
    linkDisableSelector: 'a[data-disable-with]',

    // Make sure that every Ajax request sends the CSRF token
    CSRFProtection: function(xhr) {
      var token = $('meta[name="csrf-token"]').attr('content');
      if (token) xhr.setRequestHeader('X-CSRF-Token', token);
    },

    // Triggers an event on an element and returns false if the event result is false
    fire: function(obj, name, data) {
      var event = $.Event(name);
      obj.trigger(event, data);
      return event.result !== false;
    },

    // Default confirm dialog, may be overridden with custom confirm dialog in $.rails.confirm
    confirm: function(message) {
      return confirm(message);
    },

    // Default ajax function, may be overridden with custom function in $.rails.ajax
    ajax: function(options) {
      return $.ajax(options);
    },

    // Default way to get an element's href. May be overridden at $.rails.href.
    href: function(element) {
      return element.attr('href');
    },

    // Submits "remote" forms and links with ajax
    handleRemote: function(element) {
      var method, url, data, elCrossDomain, crossDomain, withCredentials, dataType, options;

      if (rails.fire(element, 'ajax:before')) {
        elCrossDomain = element.data('cross-domain');
        crossDomain = elCrossDomain === undefined ? null : elCrossDomain;
        withCredentials = element.data('with-credentials') || null;
        dataType = element.data('type') || ($.ajaxSettings && $.ajaxSettings.dataType);

        if (element.is('form')) {
          method = element.attr('method');
          url = element.attr('action');
          data = element.serializeArray();
          // memoized value from clicked submit button
          var button = element.data('ujs:submit-button');
          if (button) {
            data.push(button);
            element.data('ujs:submit-button', null);
          }
        } else if (element.is(rails.inputChangeSelector)) {
          method = element.data('method');
          url = element.data('url');
          data = element.serialize();
          if (element.data('params')) data = data + "&" + element.data('params');
        } else if (element.is(rails.buttonClickSelector)) {
          method = element.data('method') || 'get';
          url = element.data('url');
          data = element.serialize();
          if (element.data('params')) data = data + "&" + element.data('params');
        } else {
          method = element.data('method');
          url = rails.href(element);
          data = element.data('params') || null;
        }

        options = {
          type: method || 'GET', data: data, dataType: dataType,
          // stopping the "ajax:beforeSend" event will cancel the ajax request
          beforeSend: function(xhr, settings) {
            if (settings.dataType === undefined) {
              xhr.setRequestHeader('accept', '*/*;q=0.5, ' + settings.accepts.script);
            }
            return rails.fire(element, 'ajax:beforeSend', [xhr, settings]);
          },
          success: function(data, status, xhr) {
            element.trigger('ajax:success', [data, status, xhr]);
          },
          complete: function(xhr, status) {
            element.trigger('ajax:complete', [xhr, status]);
          },
          error: function(xhr, status, error) {
            element.trigger('ajax:error', [xhr, status, error]);
          },
          crossDomain: crossDomain
        };

        // There is no withCredentials for IE6-8 when
        // "Enable native XMLHTTP support" is disabled
        if (withCredentials) {
          options.xhrFields = {
            withCredentials: withCredentials
          };
        }

        // Only pass url to `ajax` options if not blank
        if (url) { options.url = url; }

        var jqxhr = rails.ajax(options);
        element.trigger('ajax:send', jqxhr);
        return jqxhr;
      } else {
        return false;
      }
    },

    // Handles "data-method" on links such as:
    // <a href="/users/5" data-method="delete" rel="nofollow" data-confirm="Are you sure?">Delete</a>
    handleMethod: function(link) {
      var href = rails.href(link),
        method = link.data('method'),
        target = link.attr('target'),
        csrf_token = $('meta[name=csrf-token]').attr('content'),
        csrf_param = $('meta[name=csrf-param]').attr('content'),
        form = $('<form method="post" action="' + href + '"></form>'),
        metadata_input = '<input name="_method" value="' + method + '" type="hidden" />';

      if (csrf_param !== undefined && csrf_token !== undefined) {
        metadata_input += '<input name="' + csrf_param + '" value="' + csrf_token + '" type="hidden" />';
      }

      if (target) { form.attr('target', target); }

      form.hide().append(metadata_input).appendTo('body');
      form.submit();
    },

    /* Disables form elements:
      - Caches element value in 'ujs:enable-with' data store
      - Replaces element text with value of 'data-disable-with' attribute
      - Sets disabled property to true
    */
    disableFormElements: function(form) {
      form.find(rails.disableSelector).each(function() {
        var element = $(this), method = element.is('button') ? 'html' : 'val';
        element.data('ujs:enable-with', element[method]());
        element[method](element.data('disable-with'));
        element.prop('disabled', true);
      });
    },

    /* Re-enables disabled form elements:
      - Replaces element text with cached value from 'ujs:enable-with' data store (created in `disableFormElements`)
      - Sets disabled property to false
    */
    enableFormElements: function(form) {
      form.find(rails.enableSelector).each(function() {
        var element = $(this), method = element.is('button') ? 'html' : 'val';
        if (element.data('ujs:enable-with')) element[method](element.data('ujs:enable-with'));
        element.prop('disabled', false);
      });
    },

   /* For 'data-confirm' attribute:
      - Fires `confirm` event
      - Shows the confirmation dialog
      - Fires the `confirm:complete` event

      Returns `true` if no function stops the chain and user chose yes; `false` otherwise.
      Attaching a handler to the element's `confirm` event that returns a `falsy` value cancels the confirmation dialog.
      Attaching a handler to the element's `confirm:complete` event that returns a `falsy` value makes this function
      return false. The `confirm:complete` event is fired whether or not the user answered true or false to the dialog.
   */
    allowAction: function(element) {
      var message = element.data('confirm'),
          answer = false, callback;
      if (!message) { return true; }

      if (rails.fire(element, 'confirm')) {
        answer = rails.confirm(message);
        callback = rails.fire(element, 'confirm:complete', [answer]);
      }
      return answer && callback;
    },

    // Helper function which checks for blank inputs in a form that match the specified CSS selector
    blankInputs: function(form, specifiedSelector, nonBlank) {
      var inputs = $(), input, valueToCheck,
          selector = specifiedSelector || 'input,textarea',
          allInputs = form.find(selector);

      allInputs.each(function() {
        input = $(this);
        valueToCheck = input.is('input[type=checkbox],input[type=radio]') ? input.is(':checked') : input.val();
        // If nonBlank and valueToCheck are both truthy, or nonBlank and valueToCheck are both falsey
        if (!valueToCheck === !nonBlank) {

          // Don't count unchecked required radio if other radio with same name is checked
          if (input.is('input[type=radio]') && allInputs.filter('input[type=radio]:checked[name="' + input.attr('name') + '"]').length) {
            return true; // Skip to next input
          }

          inputs = inputs.add(input);
        }
      });
      return inputs.length ? inputs : false;
    },

    // Helper function which checks for non-blank inputs in a form that match the specified CSS selector
    nonBlankInputs: function(form, specifiedSelector) {
      return rails.blankInputs(form, specifiedSelector, true); // true specifies nonBlank
    },

    // Helper function, needed to provide consistent behavior in IE
    stopEverything: function(e) {
      $(e.target).trigger('ujs:everythingStopped');
      e.stopImmediatePropagation();
      return false;
    },

    //  replace element's html with the 'data-disable-with' after storing original html
    //  and prevent clicking on it
    disableElement: function(element) {
      element.data('ujs:enable-with', element.html()); // store enabled state
      element.html(element.data('disable-with')); // set to disabled state
      element.bind('click.railsDisable', function(e) { // prevent further clicking
        return rails.stopEverything(e);
      });
    },

    // restore element to its original state which was disabled by 'disableElement' above
    enableElement: function(element) {
      if (element.data('ujs:enable-with') !== undefined) {
        element.html(element.data('ujs:enable-with')); // set to old enabled state
        element.removeData('ujs:enable-with'); // clean up cache
      }
      element.unbind('click.railsDisable'); // enable element
    }

  };

  if (rails.fire($document, 'rails:attachBindings')) {

    $.ajaxPrefilter(function(options, originalOptions, xhr){ if ( !options.crossDomain ) { rails.CSRFProtection(xhr); }});

    $document.delegate(rails.linkDisableSelector, 'ajax:complete', function() {
        rails.enableElement($(this));
    });

    $document.delegate(rails.linkClickSelector, 'click.rails', function(e) {
      var link = $(this), method = link.data('method'), data = link.data('params');
      if (!rails.allowAction(link)) return rails.stopEverything(e);

      if (link.is(rails.linkDisableSelector)) rails.disableElement(link);

      if (link.data('remote') !== undefined) {
        if ( (e.metaKey || e.ctrlKey) && (!method || method === 'GET') && !data ) { return true; }

        var handleRemote = rails.handleRemote(link);
        // response from rails.handleRemote() will either be false or a deferred object promise.
        if (handleRemote === false) {
          rails.enableElement(link);
        } else {
          handleRemote.error( function() { rails.enableElement(link); } );
        }
        return false;

      } else if (link.data('method')) {
        rails.handleMethod(link);
        return false;
      }
    });

    $document.delegate(rails.buttonClickSelector, 'click.rails', function(e) {
      var button = $(this);
      if (!rails.allowAction(button)) return rails.stopEverything(e);

      rails.handleRemote(button);
      return false;
    });

    $document.delegate(rails.inputChangeSelector, 'change.rails', function(e) {
      var link = $(this);
      if (!rails.allowAction(link)) return rails.stopEverything(e);

      rails.handleRemote(link);
      return false;
    });

    $document.delegate(rails.formSubmitSelector, 'submit.rails', function(e) {
      var form = $(this),
        remote = form.data('remote') !== undefined,
        blankRequiredInputs = rails.blankInputs(form, rails.requiredInputSelector),
        nonBlankFileInputs = rails.nonBlankInputs(form, rails.fileInputSelector);

      if (!rails.allowAction(form)) return rails.stopEverything(e);

      // skip other logic when required values are missing or file upload is present
      if (blankRequiredInputs && form.attr("novalidate") == undefined && rails.fire(form, 'ajax:aborted:required', [blankRequiredInputs])) {
        return rails.stopEverything(e);
      }

      if (remote) {
        if (nonBlankFileInputs) {
          // slight timeout so that the submit button gets properly serialized
          // (make it easy for event handler to serialize form without disabled values)
          setTimeout(function(){ rails.disableFormElements(form); }, 13);
          var aborted = rails.fire(form, 'ajax:aborted:file', [nonBlankFileInputs]);

          // re-enable form elements if event bindings return false (canceling normal form submission)
          if (!aborted) { setTimeout(function(){ rails.enableFormElements(form); }, 13); }

          return aborted;
        }

        rails.handleRemote(form);
        return false;

      } else {
        // slight timeout so that the submit button gets properly serialized
        setTimeout(function(){ rails.disableFormElements(form); }, 13);
      }
    });

    $document.delegate(rails.formInputClickSelector, 'click.rails', function(event) {
      var button = $(this);

      if (!rails.allowAction(button)) return rails.stopEverything(event);

      // register the pressed submit button
      var name = button.attr('name'),
        data = name ? {name:name, value:button.val()} : null;

      button.closest('form').data('ujs:submit-button', data);
    });

    $document.delegate(rails.formSubmitSelector, 'ajax:beforeSend.rails', function(event) {
      if (this == event.target) rails.disableFormElements($(this));
    });

    $document.delegate(rails.formSubmitSelector, 'ajax:complete.rails', function(event) {
      if (this == event.target) rails.enableFormElements($(this));
    });

    $(function(){
      // making sure that all forms have actual up-to-date token(cached forms contain old one)
      var csrf_token = $('meta[name=csrf-token]').attr('content');
      var csrf_param = $('meta[name=csrf-param]').attr('content');
      $('form input[name="' + csrf_param + '"]').val(csrf_token);
    });
  }

})( jQuery );
/* ===================================================
 * bootstrap-transition.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#transitions
 * ===================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */



!function ($) {

  "use strict"; // jshint ;_;


  /* CSS TRANSITION SUPPORT (http://www.modernizr.com/)
   * ======================================================= */

  $(function () {

    $.support.transition = (function () {

      var transitionEnd = (function () {

        var el = document.createElement('bootstrap')
          , transEndEventNames = {
               'WebkitTransition' : 'webkitTransitionEnd'
            ,  'MozTransition'    : 'transitionend'
            ,  'OTransition'      : 'oTransitionEnd otransitionend'
            ,  'transition'       : 'transitionend'
            }
          , name

        for (name in transEndEventNames){
          if (el.style[name] !== undefined) {
            return transEndEventNames[name]
          }
        }

      }())

      return transitionEnd && {
        end: transitionEnd
      }

    })()

  })

}(window.jQuery);
/* ==========================================================
 * bootstrap-alert.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#alerts
 * ==========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */



!function ($) {

  "use strict"; // jshint ;_;


 /* ALERT CLASS DEFINITION
  * ====================== */

  var dismiss = '[data-dismiss="alert"]'
    , Alert = function (el) {
        $(el).on('click', dismiss, this.close)
      }

  Alert.prototype.close = function (e) {
    var $this = $(this)
      , selector = $this.attr('data-target')
      , $parent

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
    }

    $parent = $(selector)

    e && e.preventDefault()

    $parent.length || ($parent = $this.hasClass('alert') ? $this : $this.parent())

    $parent.trigger(e = $.Event('close'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      $parent
        .trigger('closed')
        .remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent.on($.support.transition.end, removeElement) :
      removeElement()
  }


 /* ALERT PLUGIN DEFINITION
  * ======================= */

  var old = $.fn.alert

  $.fn.alert = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('alert')
      if (!data) $this.data('alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  $.fn.alert.Constructor = Alert


 /* ALERT NO CONFLICT
  * ================= */

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


 /* ALERT DATA-API
  * ============== */

  $(document).on('click.alert.data-api', dismiss, Alert.prototype.close)

}(window.jQuery);
/* =========================================================
 * bootstrap-modal.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#modals
 * =========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */



!function ($) {

  "use strict"; // jshint ;_;


 /* MODAL CLASS DEFINITION
  * ====================== */

  var Modal = function (element, options) {
    this.options = options
    this.$element = $(element)
      .delegate('[data-dismiss="modal"]', 'click.dismiss.modal', $.proxy(this.hide, this))
    this.options.remote && this.$element.find('.modal-body').load(this.options.remote)
  }

  Modal.prototype = {

      constructor: Modal

    , toggle: function () {
        return this[!this.isShown ? 'show' : 'hide']()
      }

    , show: function () {
        var that = this
          , e = $.Event('show')

        this.$element.trigger(e)

        if (this.isShown || e.isDefaultPrevented()) return

        this.isShown = true

        this.escape()

        this.backdrop(function () {
          var transition = $.support.transition && that.$element.hasClass('fade')

          if (!that.$element.parent().length) {
            that.$element.appendTo(document.body) //don't move modals dom position
          }

          that.$element.show()

          if (transition) {
            that.$element[0].offsetWidth // force reflow
          }

          that.$element
            .addClass('in')
            .attr('aria-hidden', false)

          that.enforceFocus()

          transition ?
            that.$element.one($.support.transition.end, function () { that.$element.focus().trigger('shown') }) :
            that.$element.focus().trigger('shown')

        })
      }

    , hide: function (e) {
        e && e.preventDefault()

        var that = this

        e = $.Event('hide')

        this.$element.trigger(e)

        if (!this.isShown || e.isDefaultPrevented()) return

        this.isShown = false

        this.escape()

        $(document).off('focusin.modal')

        this.$element
          .removeClass('in')
          .attr('aria-hidden', true)

        $.support.transition && this.$element.hasClass('fade') ?
          this.hideWithTransition() :
          this.hideModal()
      }

    , enforceFocus: function () {
        var that = this
        $(document).on('focusin.modal', function (e) {
          if (that.$element[0] !== e.target && !that.$element.has(e.target).length) {
            that.$element.focus()
          }
        })
      }

    , escape: function () {
        var that = this
        if (this.isShown && this.options.keyboard) {
          this.$element.on('keyup.dismiss.modal', function ( e ) {
            e.which == 27 && that.hide()
          })
        } else if (!this.isShown) {
          this.$element.off('keyup.dismiss.modal')
        }
      }

    , hideWithTransition: function () {
        var that = this
          , timeout = setTimeout(function () {
              that.$element.off($.support.transition.end)
              that.hideModal()
            }, 500)

        this.$element.one($.support.transition.end, function () {
          clearTimeout(timeout)
          that.hideModal()
        })
      }

    , hideModal: function () {
        var that = this
        this.$element.hide()
        this.backdrop(function () {
          that.removeBackdrop()
          that.$element.trigger('hidden')
        })
      }

    , removeBackdrop: function () {
        this.$backdrop && this.$backdrop.remove()
        this.$backdrop = null
      }

    , backdrop: function (callback) {
        var that = this
          , animate = this.$element.hasClass('fade') ? 'fade' : ''

        if (this.isShown && this.options.backdrop) {
          var doAnimate = $.support.transition && animate

          this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />')
            .appendTo(document.body)

          this.$backdrop.click(
            this.options.backdrop == 'static' ?
              $.proxy(this.$element[0].focus, this.$element[0])
            : $.proxy(this.hide, this)
          )

          if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

          this.$backdrop.addClass('in')

          if (!callback) return

          doAnimate ?
            this.$backdrop.one($.support.transition.end, callback) :
            callback()

        } else if (!this.isShown && this.$backdrop) {
          this.$backdrop.removeClass('in')

          $.support.transition && this.$element.hasClass('fade')?
            this.$backdrop.one($.support.transition.end, callback) :
            callback()

        } else if (callback) {
          callback()
        }
      }
  }


 /* MODAL PLUGIN DEFINITION
  * ======================= */

  var old = $.fn.modal

  $.fn.modal = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('modal')
        , options = $.extend({}, $.fn.modal.defaults, $this.data(), typeof option == 'object' && option)
      if (!data) $this.data('modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option]()
      else if (options.show) data.show()
    })
  }

  $.fn.modal.defaults = {
      backdrop: true
    , keyboard: true
    , show: true
  }

  $.fn.modal.Constructor = Modal


 /* MODAL NO CONFLICT
  * ================= */

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


 /* MODAL DATA-API
  * ============== */

  $(document).on('click.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this = $(this)
      , href = $this.attr('href')
      , $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) //strip for ie7
      , option = $target.data('modal') ? 'toggle' : $.extend({ remote:!/#/.test(href) && href }, $target.data(), $this.data())

    e.preventDefault()

    $target
      .modal(option)
      .one('hide', function () {
        $this.focus()
      })
  })

}(window.jQuery);
/* ============================================================
 * bootstrap-dropdown.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#dropdowns
 * ============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */



!function ($) {

  "use strict"; // jshint ;_;


 /* DROPDOWN CLASS DEFINITION
  * ========================= */

  var toggle = '[data-toggle=dropdown]'
    , Dropdown = function (element) {
        var $el = $(element).on('click.dropdown.data-api', this.toggle)
        $('html').on('click.dropdown.data-api', function () {
          $el.parent().removeClass('open')
        })
      }

  Dropdown.prototype = {

    constructor: Dropdown

  , toggle: function (e) {
      var $this = $(this)
        , $parent
        , isActive

      if ($this.is('.disabled, :disabled')) return

      $parent = getParent($this)

      isActive = $parent.hasClass('open')

      clearMenus()

      if (!isActive) {
        if ('ontouchstart' in document.documentElement) {
          // if mobile we we use a backdrop because click events don't delegate
          $('<div class="dropdown-backdrop"/>').insertBefore($(this)).on('click', clearMenus)
        }
        $parent.toggleClass('open')
      }

      $this.focus()

      return false
    }

  , keydown: function (e) {
      var $this
        , $items
        , $active
        , $parent
        , isActive
        , index

      if (!/(38|40|27)/.test(e.keyCode)) return

      $this = $(this)

      e.preventDefault()
      e.stopPropagation()

      if ($this.is('.disabled, :disabled')) return

      $parent = getParent($this)

      isActive = $parent.hasClass('open')

      if (!isActive || (isActive && e.keyCode == 27)) {
        if (e.which == 27) $parent.find(toggle).focus()
        return $this.click()
      }

      $items = $('[role=menu] li:not(.divider):visible a', $parent)

      if (!$items.length) return

      index = $items.index($items.filter(':focus'))

      if (e.keyCode == 38 && index > 0) index--                                        // up
      if (e.keyCode == 40 && index < $items.length - 1) index++                        // down
      if (!~index) index = 0

      $items
        .eq(index)
        .focus()
    }

  }

  function clearMenus() {
    $('.dropdown-backdrop').remove()
    $(toggle).each(function () {
      getParent($(this)).removeClass('open')
    })
  }

  function getParent($this) {
    var selector = $this.attr('data-target')
      , $parent

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
    }

    $parent = selector && $(selector)

    if (!$parent || !$parent.length) $parent = $this.parent()

    return $parent
  }


  /* DROPDOWN PLUGIN DEFINITION
   * ========================== */

  var old = $.fn.dropdown

  $.fn.dropdown = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('dropdown')
      if (!data) $this.data('dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  $.fn.dropdown.Constructor = Dropdown


 /* DROPDOWN NO CONFLICT
  * ==================== */

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  /* APPLY TO STANDARD DROPDOWN ELEMENTS
   * =================================== */

  $(document)
    .on('click.dropdown.data-api', clearMenus)
    .on('click.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.dropdown.data-api'  , toggle, Dropdown.prototype.toggle)
    .on('keydown.dropdown.data-api', toggle + ', [role=menu]' , Dropdown.prototype.keydown)

}(window.jQuery);
/* =============================================================
 * bootstrap-scrollspy.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#scrollspy
 * =============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================== */



!function ($) {

  "use strict"; // jshint ;_;


 /* SCROLLSPY CLASS DEFINITION
  * ========================== */

  function ScrollSpy(element, options) {
    var process = $.proxy(this.process, this)
      , $element = $(element).is('body') ? $(window) : $(element)
      , href
    this.options = $.extend({}, $.fn.scrollspy.defaults, options)
    this.$scrollElement = $element.on('scroll.scroll-spy.data-api', process)
    this.selector = (this.options.target
      || ((href = $(element).attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
      || '') + ' .nav li > a'
    this.$body = $('body')
    this.refresh()
    this.process()
  }

  ScrollSpy.prototype = {

      constructor: ScrollSpy

    , refresh: function () {
        var self = this
          , $targets

        this.offsets = $([])
        this.targets = $([])

        $targets = this.$body
          .find(this.selector)
          .map(function () {
            var $el = $(this)
              , href = $el.data('target') || $el.attr('href')
              , $href = /^#\w/.test(href) && $(href)
            return ( $href
              && $href.length
              && [[ $href.position().top + (!$.isWindow(self.$scrollElement.get(0)) && self.$scrollElement.scrollTop()), href ]] ) || null
          })
          .sort(function (a, b) { return a[0] - b[0] })
          .each(function () {
            self.offsets.push(this[0])
            self.targets.push(this[1])
          })
      }

    , process: function () {
        var scrollTop = this.$scrollElement.scrollTop() + this.options.offset
          , scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight
          , maxScroll = scrollHeight - this.$scrollElement.height()
          , offsets = this.offsets
          , targets = this.targets
          , activeTarget = this.activeTarget
          , i

        if (scrollTop >= maxScroll) {
          return activeTarget != (i = targets.last()[0])
            && this.activate ( i )
        }

        for (i = offsets.length; i--;) {
          activeTarget != targets[i]
            && scrollTop >= offsets[i]
            && (!offsets[i + 1] || scrollTop <= offsets[i + 1])
            && this.activate( targets[i] )
        }
      }

    , activate: function (target) {
        var active
          , selector

        this.activeTarget = target

        $(this.selector)
          .parent('.active')
          .removeClass('active')

        selector = this.selector
          + '[data-target="' + target + '"],'
          + this.selector + '[href="' + target + '"]'

        active = $(selector)
          .parent('li')
          .addClass('active')

        if (active.parent('.dropdown-menu').length)  {
          active = active.closest('li.dropdown').addClass('active')
        }

        active.trigger('activate')
      }

  }


 /* SCROLLSPY PLUGIN DEFINITION
  * =========================== */

  var old = $.fn.scrollspy

  $.fn.scrollspy = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('scrollspy')
        , options = typeof option == 'object' && option
      if (!data) $this.data('scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.scrollspy.Constructor = ScrollSpy

  $.fn.scrollspy.defaults = {
    offset: 10
  }


 /* SCROLLSPY NO CONFLICT
  * ===================== */

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


 /* SCROLLSPY DATA-API
  * ================== */

  $(window).on('load', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      $spy.scrollspy($spy.data())
    })
  })

}(window.jQuery);
/* ========================================================
 * bootstrap-tab.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#tabs
 * ========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================== */



!function ($) {

  "use strict"; // jshint ;_;


 /* TAB CLASS DEFINITION
  * ==================== */

  var Tab = function (element) {
    this.element = $(element)
  }

  Tab.prototype = {

    constructor: Tab

  , show: function () {
      var $this = this.element
        , $ul = $this.closest('ul:not(.dropdown-menu)')
        , selector = $this.attr('data-target')
        , previous
        , $target
        , e

      if (!selector) {
        selector = $this.attr('href')
        selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
      }

      if ( $this.parent('li').hasClass('active') ) return

      previous = $ul.find('.active:last a')[0]

      e = $.Event('show', {
        relatedTarget: previous
      })

      $this.trigger(e)

      if (e.isDefaultPrevented()) return

      $target = $(selector)

      this.activate($this.parent('li'), $ul)
      this.activate($target, $target.parent(), function () {
        $this.trigger({
          type: 'shown'
        , relatedTarget: previous
        })
      })
    }

  , activate: function ( element, container, callback) {
      var $active = container.find('> .active')
        , transition = callback
            && $.support.transition
            && $active.hasClass('fade')

      function next() {
        $active
          .removeClass('active')
          .find('> .dropdown-menu > .active')
          .removeClass('active')

        element.addClass('active')

        if (transition) {
          element[0].offsetWidth // reflow for transition
          element.addClass('in')
        } else {
          element.removeClass('fade')
        }

        if ( element.parent('.dropdown-menu') ) {
          element.closest('li.dropdown').addClass('active')
        }

        callback && callback()
      }

      transition ?
        $active.one($.support.transition.end, next) :
        next()

      $active.removeClass('in')
    }
  }


 /* TAB PLUGIN DEFINITION
  * ===================== */

  var old = $.fn.tab

  $.fn.tab = function ( option ) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('tab')
      if (!data) $this.data('tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.tab.Constructor = Tab


 /* TAB NO CONFLICT
  * =============== */

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


 /* TAB DATA-API
  * ============ */

  $(document).on('click.tab.data-api', '[data-toggle="tab"], [data-toggle="pill"]', function (e) {
    e.preventDefault()
    $(this).tab('show')
  })

}(window.jQuery);
/* ===========================================================
 * bootstrap-tooltip.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#tooltips
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ===========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */



!function ($) {

  "use strict"; // jshint ;_;


 /* TOOLTIP PUBLIC CLASS DEFINITION
  * =============================== */

  var Tooltip = function (element, options) {
    this.init('tooltip', element, options)
  }

  Tooltip.prototype = {

    constructor: Tooltip

  , init: function (type, element, options) {
      var eventIn
        , eventOut
        , triggers
        , trigger
        , i

      this.type = type
      this.$element = $(element)
      this.options = this.getOptions(options)
      this.enabled = true

      triggers = this.options.trigger.split(' ')

      for (i = triggers.length; i--;) {
        trigger = triggers[i]
        if (trigger == 'click') {
          this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
        } else if (trigger != 'manual') {
          eventIn = trigger == 'hover' ? 'mouseenter' : 'focus'
          eventOut = trigger == 'hover' ? 'mouseleave' : 'blur'
          this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
          this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
        }
      }

      this.options.selector ?
        (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
        this.fixTitle()
    }

  , getOptions: function (options) {
      options = $.extend({}, $.fn[this.type].defaults, this.$element.data(), options)

      if (options.delay && typeof options.delay == 'number') {
        options.delay = {
          show: options.delay
        , hide: options.delay
        }
      }

      return options
    }

  , enter: function (e) {
      var defaults = $.fn[this.type].defaults
        , options = {}
        , self

      this._options && $.each(this._options, function (key, value) {
        if (defaults[key] != value) options[key] = value
      }, this)

      self = $(e.currentTarget)[this.type](options).data(this.type)

      if (!self.options.delay || !self.options.delay.show) return self.show()

      clearTimeout(this.timeout)
      self.hoverState = 'in'
      this.timeout = setTimeout(function() {
        if (self.hoverState == 'in') self.show()
      }, self.options.delay.show)
    }

  , leave: function (e) {
      var self = $(e.currentTarget)[this.type](this._options).data(this.type)

      if (this.timeout) clearTimeout(this.timeout)
      if (!self.options.delay || !self.options.delay.hide) return self.hide()

      self.hoverState = 'out'
      this.timeout = setTimeout(function() {
        if (self.hoverState == 'out') self.hide()
      }, self.options.delay.hide)
    }

  , show: function () {
      var $tip
        , pos
        , actualWidth
        , actualHeight
        , placement
        , tp
        , e = $.Event('show')

      if (this.hasContent() && this.enabled) {
        this.$element.trigger(e)
        if (e.isDefaultPrevented()) return
        $tip = this.tip()
        this.setContent()

        if (this.options.animation) {
          $tip.addClass('fade')
        }

        placement = typeof this.options.placement == 'function' ?
          this.options.placement.call(this, $tip[0], this.$element[0]) :
          this.options.placement

        $tip
          .detach()
          .css({ top: 0, left: 0, display: 'block' })

        this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)

        pos = this.getPosition()

        actualWidth = $tip[0].offsetWidth
        actualHeight = $tip[0].offsetHeight

        switch (placement) {
          case 'bottom':
            tp = {top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2}
            break
          case 'top':
            tp = {top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2}
            break
          case 'left':
            tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth}
            break
          case 'right':
            tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width}
            break
        }

        this.applyPlacement(tp, placement)
        this.$element.trigger('shown')
      }
    }

  , applyPlacement: function(offset, placement){
      var $tip = this.tip()
        , width = $tip[0].offsetWidth
        , height = $tip[0].offsetHeight
        , actualWidth
        , actualHeight
        , delta
        , replace

      $tip
        .offset(offset)
        .addClass(placement)
        .addClass('in')

      actualWidth = $tip[0].offsetWidth
      actualHeight = $tip[0].offsetHeight

      if (placement == 'top' && actualHeight != height) {
        offset.top = offset.top + height - actualHeight
        replace = true
      }

      if (placement == 'bottom' || placement == 'top') {
        delta = 0

        if (offset.left < 0){
          delta = offset.left * -2
          offset.left = 0
          $tip.offset(offset)
          actualWidth = $tip[0].offsetWidth
          actualHeight = $tip[0].offsetHeight
        }

        this.replaceArrow(delta - width + actualWidth, actualWidth, 'left')
      } else {
        this.replaceArrow(actualHeight - height, actualHeight, 'top')
      }

      if (replace) $tip.offset(offset)
    }

  , replaceArrow: function(delta, dimension, position){
      this
        .arrow()
        .css(position, delta ? (50 * (1 - delta / dimension) + "%") : '')
    }

  , setContent: function () {
      var $tip = this.tip()
        , title = this.getTitle()

      $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
      $tip.removeClass('fade in top bottom left right')
    }

  , hide: function () {
      var that = this
        , $tip = this.tip()
        , e = $.Event('hide')

      this.$element.trigger(e)
      if (e.isDefaultPrevented()) return

      $tip.removeClass('in')

      function removeWithAnimation() {
        var timeout = setTimeout(function () {
          $tip.off($.support.transition.end).detach()
        }, 500)

        $tip.one($.support.transition.end, function () {
          clearTimeout(timeout)
          $tip.detach()
        })
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        removeWithAnimation() :
        $tip.detach()

      this.$element.trigger('hidden')

      return this
    }

  , fixTitle: function () {
      var $e = this.$element
      if ($e.attr('title') || typeof($e.attr('data-original-title')) != 'string') {
        $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
      }
    }

  , hasContent: function () {
      return this.getTitle()
    }

  , getPosition: function () {
      var el = this.$element[0]
      return $.extend({}, (typeof el.getBoundingClientRect == 'function') ? el.getBoundingClientRect() : {
        width: el.offsetWidth
      , height: el.offsetHeight
      }, this.$element.offset())
    }

  , getTitle: function () {
      var title
        , $e = this.$element
        , o = this.options

      title = $e.attr('data-original-title')
        || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

      return title
    }

  , tip: function () {
      return this.$tip = this.$tip || $(this.options.template)
    }

  , arrow: function(){
      return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow")
    }

  , validate: function () {
      if (!this.$element[0].parentNode) {
        this.hide()
        this.$element = null
        this.options = null
      }
    }

  , enable: function () {
      this.enabled = true
    }

  , disable: function () {
      this.enabled = false
    }

  , toggleEnabled: function () {
      this.enabled = !this.enabled
    }

  , toggle: function (e) {
      var self = e ? $(e.currentTarget)[this.type](this._options).data(this.type) : this
      self.tip().hasClass('in') ? self.hide() : self.show()
    }

  , destroy: function () {
      this.hide().$element.off('.' + this.type).removeData(this.type)
    }

  }


 /* TOOLTIP PLUGIN DEFINITION
  * ========================= */

  var old = $.fn.tooltip

  $.fn.tooltip = function ( option ) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('tooltip')
        , options = typeof option == 'object' && option
      if (!data) $this.data('tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.tooltip.Constructor = Tooltip

  $.fn.tooltip.defaults = {
    animation: true
  , placement: 'top'
  , selector: false
  , template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'
  , trigger: 'hover focus'
  , title: ''
  , delay: 0
  , html: false
  , container: false
  }


 /* TOOLTIP NO CONFLICT
  * =================== */

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(window.jQuery);
/* ===========================================================
 * bootstrap-popover.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#popovers
 * ===========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================================================== */



!function ($) {

  "use strict"; // jshint ;_;


 /* POPOVER PUBLIC CLASS DEFINITION
  * =============================== */

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }


  /* NOTE: POPOVER EXTENDS BOOTSTRAP-TOOLTIP.js
     ========================================== */

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype, {

    constructor: Popover

  , setContent: function () {
      var $tip = this.tip()
        , title = this.getTitle()
        , content = this.getContent()

      $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
      $tip.find('.popover-content')[this.options.html ? 'html' : 'text'](content)

      $tip.removeClass('fade top bottom left right in')
    }

  , hasContent: function () {
      return this.getTitle() || this.getContent()
    }

  , getContent: function () {
      var content
        , $e = this.$element
        , o = this.options

      content = (typeof o.content == 'function' ? o.content.call($e[0]) :  o.content)
        || $e.attr('data-content')

      return content
    }

  , tip: function () {
      if (!this.$tip) {
        this.$tip = $(this.options.template)
      }
      return this.$tip
    }

  , destroy: function () {
      this.hide().$element.off('.' + this.type).removeData(this.type)
    }

  })


 /* POPOVER PLUGIN DEFINITION
  * ======================= */

  var old = $.fn.popover

  $.fn.popover = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('popover')
        , options = typeof option == 'object' && option
      if (!data) $this.data('popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.popover.Constructor = Popover

  $.fn.popover.defaults = $.extend({} , $.fn.tooltip.defaults, {
    placement: 'right'
  , trigger: 'click'
  , content: ''
  , template: '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


 /* POPOVER NO CONFLICT
  * =================== */

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(window.jQuery);
/* ============================================================
 * bootstrap-button.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#buttons
 * ============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */



!function ($) {

  "use strict"; // jshint ;_;


 /* BUTTON PUBLIC CLASS DEFINITION
  * ============================== */

  var Button = function (element, options) {
    this.$element = $(element)
    this.options = $.extend({}, $.fn.button.defaults, options)
  }

  Button.prototype.setState = function (state) {
    var d = 'disabled'
      , $el = this.$element
      , data = $el.data()
      , val = $el.is('input') ? 'val' : 'html'

    state = state + 'Text'
    data.resetText || $el.data('resetText', $el[val]())

    $el[val](data[state] || this.options[state])

    // push to event loop to allow forms to submit
    setTimeout(function () {
      state == 'loadingText' ?
        $el.addClass(d).attr(d, d) :
        $el.removeClass(d).removeAttr(d)
    }, 0)
  }

  Button.prototype.toggle = function () {
    var $parent = this.$element.closest('[data-toggle="buttons-radio"]')

    $parent && $parent
      .find('.active')
      .removeClass('active')

    this.$element.toggleClass('active')
  }


 /* BUTTON PLUGIN DEFINITION
  * ======================== */

  var old = $.fn.button

  $.fn.button = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('button')
        , options = typeof option == 'object' && option
      if (!data) $this.data('button', (data = new Button(this, options)))
      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  $.fn.button.defaults = {
    loadingText: 'loading...'
  }

  $.fn.button.Constructor = Button


 /* BUTTON NO CONFLICT
  * ================== */

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


 /* BUTTON DATA-API
  * =============== */

  $(document).on('click.button.data-api', '[data-toggle^=button]', function (e) {
    var $btn = $(e.target)
    if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
    $btn.button('toggle')
  })

}(window.jQuery);
/* =============================================================
 * bootstrap-collapse.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#collapse
 * =============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */



!function ($) {

  "use strict"; // jshint ;_;


 /* COLLAPSE PUBLIC CLASS DEFINITION
  * ================================ */

  var Collapse = function (element, options) {
    this.$element = $(element)
    this.options = $.extend({}, $.fn.collapse.defaults, options)

    if (this.options.parent) {
      this.$parent = $(this.options.parent)
    }

    this.options.toggle && this.toggle()
  }

  Collapse.prototype = {

    constructor: Collapse

  , dimension: function () {
      var hasWidth = this.$element.hasClass('width')
      return hasWidth ? 'width' : 'height'
    }

  , show: function () {
      var dimension
        , scroll
        , actives
        , hasData

      if (this.transitioning || this.$element.hasClass('in')) return

      dimension = this.dimension()
      scroll = $.camelCase(['scroll', dimension].join('-'))
      actives = this.$parent && this.$parent.find('> .accordion-group > .in')

      if (actives && actives.length) {
        hasData = actives.data('collapse')
        if (hasData && hasData.transitioning) return
        actives.collapse('hide')
        hasData || actives.data('collapse', null)
      }

      this.$element[dimension](0)
      this.transition('addClass', $.Event('show'), 'shown')
      $.support.transition && this.$element[dimension](this.$element[0][scroll])
    }

  , hide: function () {
      var dimension
      if (this.transitioning || !this.$element.hasClass('in')) return
      dimension = this.dimension()
      this.reset(this.$element[dimension]())
      this.transition('removeClass', $.Event('hide'), 'hidden')
      this.$element[dimension](0)
    }

  , reset: function (size) {
      var dimension = this.dimension()

      this.$element
        .removeClass('collapse')
        [dimension](size || 'auto')
        [0].offsetWidth

      this.$element[size !== null ? 'addClass' : 'removeClass']('collapse')

      return this
    }

  , transition: function (method, startEvent, completeEvent) {
      var that = this
        , complete = function () {
            if (startEvent.type == 'show') that.reset()
            that.transitioning = 0
            that.$element.trigger(completeEvent)
          }

      this.$element.trigger(startEvent)

      if (startEvent.isDefaultPrevented()) return

      this.transitioning = 1

      this.$element[method]('in')

      $.support.transition && this.$element.hasClass('collapse') ?
        this.$element.one($.support.transition.end, complete) :
        complete()
    }

  , toggle: function () {
      this[this.$element.hasClass('in') ? 'hide' : 'show']()
    }

  }


 /* COLLAPSE PLUGIN DEFINITION
  * ========================== */

  var old = $.fn.collapse

  $.fn.collapse = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('collapse')
        , options = $.extend({}, $.fn.collapse.defaults, $this.data(), typeof option == 'object' && option)
      if (!data) $this.data('collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.collapse.defaults = {
    toggle: true
  }

  $.fn.collapse.Constructor = Collapse


 /* COLLAPSE NO CONFLICT
  * ==================== */

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


 /* COLLAPSE DATA-API
  * ================= */

  $(document).on('click.collapse.data-api', '[data-toggle=collapse]', function (e) {
    var $this = $(this), href
      , target = $this.attr('data-target')
        || e.preventDefault()
        || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') //strip for ie7
      , option = $(target).data('collapse') ? 'toggle' : $this.data()
    $this[$(target).hasClass('in') ? 'addClass' : 'removeClass']('collapsed')
    $(target).collapse(option)
  })

}(window.jQuery);
/* ==========================================================
 * bootstrap-carousel.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#carousel
 * ==========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */



!function ($) {

  "use strict"; // jshint ;_;


 /* CAROUSEL CLASS DEFINITION
  * ========================= */

  var Carousel = function (element, options) {
    this.$element = $(element)
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options = options
    this.options.pause == 'hover' && this.$element
      .on('mouseenter', $.proxy(this.pause, this))
      .on('mouseleave', $.proxy(this.cycle, this))
  }

  Carousel.prototype = {

    cycle: function (e) {
      if (!e) this.paused = false
      if (this.interval) clearInterval(this.interval);
      this.options.interval
        && !this.paused
        && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))
      return this
    }

  , getActiveIndex: function () {
      this.$active = this.$element.find('.item.active')
      this.$items = this.$active.parent().children()
      return this.$items.index(this.$active)
    }

  , to: function (pos) {
      var activeIndex = this.getActiveIndex()
        , that = this

      if (pos > (this.$items.length - 1) || pos < 0) return

      if (this.sliding) {
        return this.$element.one('slid', function () {
          that.to(pos)
        })
      }

      if (activeIndex == pos) {
        return this.pause().cycle()
      }

      return this.slide(pos > activeIndex ? 'next' : 'prev', $(this.$items[pos]))
    }

  , pause: function (e) {
      if (!e) this.paused = true
      if (this.$element.find('.next, .prev').length && $.support.transition.end) {
        this.$element.trigger($.support.transition.end)
        this.cycle(true)
      }
      clearInterval(this.interval)
      this.interval = null
      return this
    }

  , next: function () {
      if (this.sliding) return
      return this.slide('next')
    }

  , prev: function () {
      if (this.sliding) return
      return this.slide('prev')
    }

  , slide: function (type, next) {
      var $active = this.$element.find('.item.active')
        , $next = next || $active[type]()
        , isCycling = this.interval
        , direction = type == 'next' ? 'left' : 'right'
        , fallback  = type == 'next' ? 'first' : 'last'
        , that = this
        , e

      this.sliding = true

      isCycling && this.pause()

      $next = $next.length ? $next : this.$element.find('.item')[fallback]()

      e = $.Event('slide', {
        relatedTarget: $next[0]
      , direction: direction
      })

      if ($next.hasClass('active')) return

      if (this.$indicators.length) {
        this.$indicators.find('.active').removeClass('active')
        this.$element.one('slid', function () {
          var $nextIndicator = $(that.$indicators.children()[that.getActiveIndex()])
          $nextIndicator && $nextIndicator.addClass('active')
        })
      }

      if ($.support.transition && this.$element.hasClass('slide')) {
        this.$element.trigger(e)
        if (e.isDefaultPrevented()) return
        $next.addClass(type)
        $next[0].offsetWidth // force reflow
        $active.addClass(direction)
        $next.addClass(direction)
        this.$element.one($.support.transition.end, function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () { that.$element.trigger('slid') }, 0)
        })
      } else {
        this.$element.trigger(e)
        if (e.isDefaultPrevented()) return
        $active.removeClass('active')
        $next.addClass('active')
        this.sliding = false
        this.$element.trigger('slid')
      }

      isCycling && this.cycle()

      return this
    }

  }


 /* CAROUSEL PLUGIN DEFINITION
  * ========================== */

  var old = $.fn.carousel

  $.fn.carousel = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('carousel')
        , options = $.extend({}, $.fn.carousel.defaults, typeof option == 'object' && option)
        , action = typeof option == 'string' ? option : options.slide
      if (!data) $this.data('carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  $.fn.carousel.defaults = {
    interval: 5000
  , pause: 'hover'
  }

  $.fn.carousel.Constructor = Carousel


 /* CAROUSEL NO CONFLICT
  * ==================== */

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }

 /* CAROUSEL DATA-API
  * ================= */

  $(document).on('click.carousel.data-api', '[data-slide], [data-slide-to]', function (e) {
    var $this = $(this), href
      , $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
      , options = $.extend({}, $target.data(), $this.data())
      , slideIndex

    $target.carousel(options)

    if (slideIndex = $this.attr('data-slide-to')) {
      $target.data('carousel').pause().to(slideIndex).cycle()
    }

    e.preventDefault()
  })

}(window.jQuery);
/* =============================================================
 * bootstrap-typeahead.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#typeahead
 * =============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */



!function($){

  "use strict"; // jshint ;_;


 /* TYPEAHEAD PUBLIC CLASS DEFINITION
  * ================================= */

  var Typeahead = function (element, options) {
    this.$element = $(element)
    this.options = $.extend({}, $.fn.typeahead.defaults, options)
    this.matcher = this.options.matcher || this.matcher
    this.sorter = this.options.sorter || this.sorter
    this.highlighter = this.options.highlighter || this.highlighter
    this.updater = this.options.updater || this.updater
    this.source = this.options.source
    this.$menu = $(this.options.menu)
    this.shown = false
    this.listen()
  }

  Typeahead.prototype = {

    constructor: Typeahead

  , select: function () {
      var val = this.$menu.find('.active').attr('data-value')
      this.$element
        .val(this.updater(val))
        .change()
      return this.hide()
    }

  , updater: function (item) {
      return item
    }

  , show: function () {
      var pos = $.extend({}, this.$element.position(), {
        height: this.$element[0].offsetHeight
      })

      this.$menu
        .insertAfter(this.$element)
        .css({
          top: pos.top + pos.height
        , left: pos.left
        })
        .show()

      this.shown = true
      return this
    }

  , hide: function () {
      this.$menu.hide()
      this.shown = false
      return this
    }

  , lookup: function (event) {
      var items

      this.query = this.$element.val()

      if (!this.query || this.query.length < this.options.minLength) {
        return this.shown ? this.hide() : this
      }

      items = $.isFunction(this.source) ? this.source(this.query, $.proxy(this.process, this)) : this.source

      return items ? this.process(items) : this
    }

  , process: function (items) {
      var that = this

      items = $.grep(items, function (item) {
        return that.matcher(item)
      })

      items = this.sorter(items)

      if (!items.length) {
        return this.shown ? this.hide() : this
      }

      return this.render(items.slice(0, this.options.items)).show()
    }

  , matcher: function (item) {
      return ~item.toLowerCase().indexOf(this.query.toLowerCase())
    }

  , sorter: function (items) {
      var beginswith = []
        , caseSensitive = []
        , caseInsensitive = []
        , item

      while (item = items.shift()) {
        if (!item.toLowerCase().indexOf(this.query.toLowerCase())) beginswith.push(item)
        else if (~item.indexOf(this.query)) caseSensitive.push(item)
        else caseInsensitive.push(item)
      }

      return beginswith.concat(caseSensitive, caseInsensitive)
    }

  , highlighter: function (item) {
      var query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&')
      return item.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
        return '<strong>' + match + '</strong>'
      })
    }

  , render: function (items) {
      var that = this

      items = $(items).map(function (i, item) {
        i = $(that.options.item).attr('data-value', item)
        i.find('a').html(that.highlighter(item))
        return i[0]
      })

      items.first().addClass('active')
      this.$menu.html(items)
      return this
    }

  , next: function (event) {
      var active = this.$menu.find('.active').removeClass('active')
        , next = active.next()

      if (!next.length) {
        next = $(this.$menu.find('li')[0])
      }

      next.addClass('active')
    }

  , prev: function (event) {
      var active = this.$menu.find('.active').removeClass('active')
        , prev = active.prev()

      if (!prev.length) {
        prev = this.$menu.find('li').last()
      }

      prev.addClass('active')
    }

  , listen: function () {
      this.$element
        .on('focus',    $.proxy(this.focus, this))
        .on('blur',     $.proxy(this.blur, this))
        .on('keypress', $.proxy(this.keypress, this))
        .on('keyup',    $.proxy(this.keyup, this))

      if (this.eventSupported('keydown')) {
        this.$element.on('keydown', $.proxy(this.keydown, this))
      }

      this.$menu
        .on('click', $.proxy(this.click, this))
        .on('mouseenter', 'li', $.proxy(this.mouseenter, this))
        .on('mouseleave', 'li', $.proxy(this.mouseleave, this))
    }

  , eventSupported: function(eventName) {
      var isSupported = eventName in this.$element
      if (!isSupported) {
        this.$element.setAttribute(eventName, 'return;')
        isSupported = typeof this.$element[eventName] === 'function'
      }
      return isSupported
    }

  , move: function (e) {
      if (!this.shown) return

      switch(e.keyCode) {
        case 9: // tab
        case 13: // enter
        case 27: // escape
          e.preventDefault()
          break

        case 38: // up arrow
          e.preventDefault()
          this.prev()
          break

        case 40: // down arrow
          e.preventDefault()
          this.next()
          break
      }

      e.stopPropagation()
    }

  , keydown: function (e) {
      this.suppressKeyPressRepeat = ~$.inArray(e.keyCode, [40,38,9,13,27])
      this.move(e)
    }

  , keypress: function (e) {
      if (this.suppressKeyPressRepeat) return
      this.move(e)
    }

  , keyup: function (e) {
      switch(e.keyCode) {
        case 40: // down arrow
        case 38: // up arrow
        case 16: // shift
        case 17: // ctrl
        case 18: // alt
          break

        case 9: // tab
        case 13: // enter
          if (!this.shown) return
          this.select()
          break

        case 27: // escape
          if (!this.shown) return
          this.hide()
          break

        default:
          this.lookup()
      }

      e.stopPropagation()
      e.preventDefault()
  }

  , focus: function (e) {
      this.focused = true
    }

  , blur: function (e) {
      this.focused = false
      if (!this.mousedover && this.shown) this.hide()
    }

  , click: function (e) {
      e.stopPropagation()
      e.preventDefault()
      this.select()
      this.$element.focus()
    }

  , mouseenter: function (e) {
      this.mousedover = true
      this.$menu.find('.active').removeClass('active')
      $(e.currentTarget).addClass('active')
    }

  , mouseleave: function (e) {
      this.mousedover = false
      if (!this.focused && this.shown) this.hide()
    }

  }


  /* TYPEAHEAD PLUGIN DEFINITION
   * =========================== */

  var old = $.fn.typeahead

  $.fn.typeahead = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('typeahead')
        , options = typeof option == 'object' && option
      if (!data) $this.data('typeahead', (data = new Typeahead(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.typeahead.defaults = {
    source: []
  , items: 8
  , menu: '<ul class="typeahead dropdown-menu"></ul>'
  , item: '<li><a href="#"></a></li>'
  , minLength: 1
  }

  $.fn.typeahead.Constructor = Typeahead


 /* TYPEAHEAD NO CONFLICT
  * =================== */

  $.fn.typeahead.noConflict = function () {
    $.fn.typeahead = old
    return this
  }


 /* TYPEAHEAD DATA-API
  * ================== */

  $(document).on('focus.typeahead.data-api', '[data-provide="typeahead"]', function (e) {
    var $this = $(this)
    if ($this.data('typeahead')) return
    $this.typeahead($this.data())
  })

}(window.jQuery);
/* ==========================================================
 * bootstrap-affix.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#affix
 * ==========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */



!function ($) {

  "use strict"; // jshint ;_;


 /* AFFIX CLASS DEFINITION
  * ====================== */

  var Affix = function (element, options) {
    this.options = $.extend({}, $.fn.affix.defaults, options)
    this.$window = $(window)
      .on('scroll.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.affix.data-api',  $.proxy(function () { setTimeout($.proxy(this.checkPosition, this), 1) }, this))
    this.$element = $(element)
    this.checkPosition()
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var scrollHeight = $(document).height()
      , scrollTop = this.$window.scrollTop()
      , position = this.$element.offset()
      , offset = this.options.offset
      , offsetBottom = offset.bottom
      , offsetTop = offset.top
      , reset = 'affix affix-top affix-bottom'
      , affix

    if (typeof offset != 'object') offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function') offsetTop = offset.top()
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom()

    affix = this.unpin != null && (scrollTop + this.unpin <= position.top) ?
      false    : offsetBottom != null && (position.top + this.$element.height() >= scrollHeight - offsetBottom) ?
      'bottom' : offsetTop != null && scrollTop <= offsetTop ?
      'top'    : false

    if (this.affixed === affix) return

    this.affixed = affix
    this.unpin = affix == 'bottom' ? position.top - scrollTop : null

    this.$element.removeClass(reset).addClass('affix' + (affix ? '-' + affix : ''))
  }


 /* AFFIX PLUGIN DEFINITION
  * ======================= */

  var old = $.fn.affix

  $.fn.affix = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('affix')
        , options = typeof option == 'object' && option
      if (!data) $this.data('affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.affix.Constructor = Affix

  $.fn.affix.defaults = {
    offset: 0
  }


 /* AFFIX NO CONFLICT
  * ================= */

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


 /* AFFIX DATA-API
  * ============== */

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
        , data = $spy.data()

      data.offset = data.offset || {}

      data.offsetBottom && (data.offset.bottom = data.offsetBottom)
      data.offsetTop && (data.offset.top = data.offsetTop)

      $spy.affix(data)
    })
  })


}(window.jQuery);













(function() {


}).call(this);
if(!window['googleLT_']){window['googleLT_']=(new Date()).getTime();}if (!window['google']) {
window['google'] = {};
}
if (!window['google']['loader']) {
window['google']['loader'] = {};
google.loader.ServiceBase = 'https://www.google.com/uds';
google.loader.GoogleApisBase = 'https://ajax.googleapis.com/ajax';
google.loader.ApiKey = 'notsupplied';
google.loader.KeyVerified = true;
google.loader.LoadFailure = false;
google.loader.Secure = true;
google.loader.GoogleLocale = 'www.google.com';
google.loader.ClientLocation = {"latitude":35.86,"longitude":-78.833,"address":{"city":"Morrisville","region":"NC","country":"USA","country_code":"US"}};
google.loader.AdditionalParams = '';
(function() {var d=encodeURIComponent,g=window,h=document;function l(a,b){return a.load=b}var m="push",n="replace",q="charAt",r="indexOf",t="ServiceBase",u="name",v="getTime",w="length",x="prototype",y="setTimeout",z="loader",A="substring",B="join",C="toLowerCase";function D(a){return a in E?E[a]:E[a]=-1!=navigator.userAgent[C]()[r](a)}var E={};function F(a,b){var c=function(){};c.prototype=b[x];a.U=b[x];a.prototype=new c}
function G(a,b,c){var e=Array[x].slice.call(arguments,2)||[];return function(){var c=e.concat(Array[x].slice.call(arguments));return a.apply(b,c)}}function H(a){a=Error(a);a.toString=function(){return this.message};return a}function I(a,b){for(var c=a.split(/\./),e=g,f=0;f<c[w]-1;f++)e[c[f]]||(e[c[f]]={}),e=e[c[f]];e[c[c[w]-1]]=b}function J(a,b,c){a[b]=c}if(!K)var K=I;if(!L)var L=J;google[z].v={};K("google.loader.callbacks",google[z].v);var M={},N={};google[z].eval={};K("google.loader.eval",google[z].eval);
l(google,function(a,b,c){function e(a){var b=a.split(".");if(2<b[w])throw H("Module: '"+a+"' not found!");"undefined"!=typeof b[1]&&(f=b[0],c.packages=c.packages||[],c.packages[m](b[1]))}var f=a;c=c||{};if(a instanceof Array||a&&"object"==typeof a&&"function"==typeof a[B]&&"function"==typeof a.reverse)for(var k=0;k<a[w];k++)e(a[k]);else e(a);if(a=M[":"+f]){c&&!c.language&&c.locale&&(c.language=c.locale);c&&"string"==typeof c.callback&&(k=c.callback,k.match(/^[[\]A-Za-z0-9._]+$/)&&(k=g.eval(k),c.callback=
k));if((k=c&&null!=c.callback)&&!a.s(b))throw H("Module: '"+f+"' must be loaded before DOM onLoad!");k?a.m(b,c)?g[y](c.callback,0):a.load(b,c):a.m(b,c)||a.load(b,c)}else throw H("Module: '"+f+"' not found!");});K("google.load",google.load);
google.T=function(a,b){b?(0==O[w]&&(P(g,"load",Q),!D("msie")&&!D("safari")&&!D("konqueror")&&D("mozilla")||g.opera?g.addEventListener("DOMContentLoaded",Q,!1):D("msie")?h.write("<script defer onreadystatechange='google.loader.domReady()' src=//:>\x3c/script>"):(D("safari")||D("konqueror"))&&g[y](S,10)),O[m](a)):P(g,"load",a)};K("google.setOnLoadCallback",google.T);
function P(a,b,c){if(a.addEventListener)a.addEventListener(b,c,!1);else if(a.attachEvent)a.attachEvent("on"+b,c);else{var e=a["on"+b];a["on"+b]=null!=e?aa([c,e]):c}}function aa(a){return function(){for(var b=0;b<a[w];b++)a[b]()}}var O=[];google[z].P=function(){var a=g.event.srcElement;"complete"==a.readyState&&(a.onreadystatechange=null,a.parentNode.removeChild(a),Q())};K("google.loader.domReady",google[z].P);var ba={loaded:!0,complete:!0};function S(){ba[h.readyState]?Q():0<O[w]&&g[y](S,10)}
function Q(){for(var a=0;a<O[w];a++)O[a]();O.length=0}google[z].d=function(a,b,c){if(c){var e;"script"==a?(e=h.createElement("script"),e.type="text/javascript",e.src=b):"css"==a&&(e=h.createElement("link"),e.type="text/css",e.href=b,e.rel="stylesheet");(a=h.getElementsByTagName("head")[0])||(a=h.body.parentNode.appendChild(h.createElement("head")));a.appendChild(e)}else"script"==a?h.write('<script src="'+b+'" type="text/javascript">\x3c/script>'):"css"==a&&h.write('<link href="'+b+'" type="text/css" rel="stylesheet"></link>')};
K("google.loader.writeLoadTag",google[z].d);google[z].Q=function(a){N=a};K("google.loader.rfm",google[z].Q);google[z].S=function(a){for(var b in a)"string"==typeof b&&b&&":"==b[q](0)&&!M[b]&&(M[b]=new T(b[A](1),a[b]))};K("google.loader.rpl",google[z].S);google[z].R=function(a){if((a=a.specs)&&a[w])for(var b=0;b<a[w];++b){var c=a[b];"string"==typeof c?M[":"+c]=new U(c):(c=new V(c[u],c.baseSpec,c.customSpecs),M[":"+c[u]]=c)}};K("google.loader.rm",google[z].R);google[z].loaded=function(a){M[":"+a.module].l(a)};
K("google.loader.loaded",google[z].loaded);google[z].O=function(){return"qid="+((new Date)[v]().toString(16)+Math.floor(1E7*Math.random()).toString(16))};K("google.loader.createGuidArg_",google[z].O);I("google_exportSymbol",I);I("google_exportProperty",J);google[z].a={};K("google.loader.themes",google[z].a);google[z].a.I="//www.google.com/cse/style/look/bubblegum.css";L(google[z].a,"BUBBLEGUM",google[z].a.I);google[z].a.K="//www.google.com/cse/style/look/greensky.css";L(google[z].a,"GREENSKY",google[z].a.K);
google[z].a.J="//www.google.com/cse/style/look/espresso.css";L(google[z].a,"ESPRESSO",google[z].a.J);google[z].a.M="//www.google.com/cse/style/look/shiny.css";L(google[z].a,"SHINY",google[z].a.M);google[z].a.L="//www.google.com/cse/style/look/minimalist.css";L(google[z].a,"MINIMALIST",google[z].a.L);google[z].a.N="//www.google.com/cse/style/look/v2/default.css";L(google[z].a,"V2_DEFAULT",google[z].a.N);function U(a){this.b=a;this.o=[];this.n={};this.e={};this.f={};this.j=!0;this.c=-1}
U[x].g=function(a,b){var c="";void 0!=b&&(void 0!=b.language&&(c+="&hl="+d(b.language)),void 0!=b.nocss&&(c+="&output="+d("nocss="+b.nocss)),void 0!=b.nooldnames&&(c+="&nooldnames="+d(b.nooldnames)),void 0!=b.packages&&(c+="&packages="+d(b.packages)),null!=b.callback&&(c+="&async=2"),void 0!=b.style&&(c+="&style="+d(b.style)),void 0!=b.noexp&&(c+="&noexp=true"),void 0!=b.other_params&&(c+="&"+b.other_params));if(!this.j){google[this.b]&&google[this.b].JSHash&&(c+="&sig="+d(google[this.b].JSHash));
var e=[],f;for(f in this.n)":"==f[q](0)&&e[m](f[A](1));for(f in this.e)":"==f[q](0)&&this.e[f]&&e[m](f[A](1));c+="&have="+d(e[B](","))}return google[z][t]+"/?file="+this.b+"&v="+a+google[z].AdditionalParams+c};U[x].t=function(a){var b=null;a&&(b=a.packages);var c=null;if(b)if("string"==typeof b)c=[a.packages];else if(b[w])for(c=[],a=0;a<b[w];a++)"string"==typeof b[a]&&c[m](b[a][n](/^\s*|\s*$/,"")[C]());c||(c=["default"]);b=[];for(a=0;a<c[w];a++)this.n[":"+c[a]]||b[m](c[a]);return b};
l(U[x],function(a,b){var c=this.t(b),e=b&&null!=b.callback;if(e)var f=new W(b.callback);for(var k=[],p=c[w]-1;0<=p;p--){var s=c[p];e&&f.B(s);if(this.e[":"+s])c.splice(p,1),e&&this.f[":"+s][m](f);else k[m](s)}if(c[w]){b&&b.packages&&(b.packages=c.sort()[B](","));for(p=0;p<k[w];p++)s=k[p],this.f[":"+s]=[],e&&this.f[":"+s][m](f);if(b||null==N[":"+this.b]||null==N[":"+this.b].versions[":"+a]||google[z].AdditionalParams||!this.j)b&&b.autoloaded||google[z].d("script",this.g(a,b),e);else{c=N[":"+this.b];
google[this.b]=google[this.b]||{};for(var R in c.properties)R&&":"==R[q](0)&&(google[this.b][R[A](1)]=c.properties[R]);google[z].d("script",google[z][t]+c.path+c.js,e);c.css&&google[z].d("css",google[z][t]+c.path+c.css,e)}this.j&&(this.j=!1,this.c=(new Date)[v](),1!=this.c%100&&(this.c=-1));for(p=0;p<k[w];p++)s=k[p],this.e[":"+s]=!0}});
U[x].l=function(a){-1!=this.c&&(X("al_"+this.b,"jl."+((new Date)[v]()-this.c),!0),this.c=-1);this.o=this.o.concat(a.components);google[z][this.b]||(google[z][this.b]={});google[z][this.b].packages=this.o.slice(0);for(var b=0;b<a.components[w];b++){this.n[":"+a.components[b]]=!0;this.e[":"+a.components[b]]=!1;var c=this.f[":"+a.components[b]];if(c){for(var e=0;e<c[w];e++)c[e].C(a.components[b]);delete this.f[":"+a.components[b]]}}};U[x].m=function(a,b){return 0==this.t(b)[w]};U[x].s=function(){return!0};
function W(a){this.F=a;this.q={};this.r=0}W[x].B=function(a){this.r++;this.q[":"+a]=!0};W[x].C=function(a){this.q[":"+a]&&(this.q[":"+a]=!1,this.r--,0==this.r&&g[y](this.F,0))};function V(a,b,c){this.name=a;this.D=b;this.p=c;this.u=this.h=!1;this.k=[];google[z].v[this[u]]=G(this.l,this)}F(V,U);l(V[x],function(a,b){var c=b&&null!=b.callback;c?(this.k[m](b.callback),b.callback="google.loader.callbacks."+this[u]):this.h=!0;b&&b.autoloaded||google[z].d("script",this.g(a,b),c)});V[x].m=function(a,b){return b&&null!=b.callback?this.u:this.h};V[x].l=function(){this.u=!0;for(var a=0;a<this.k[w];a++)g[y](this.k[a],0);this.k=[]};
var Y=function(a,b){return a.string?d(a.string)+"="+d(b):a.regex?b[n](/(^.*$)/,a.regex):""};V[x].g=function(a,b){return this.G(this.w(a),a,b)};
V[x].G=function(a,b,c){var e="";a.key&&(e+="&"+Y(a.key,google[z].ApiKey));a.version&&(e+="&"+Y(a.version,b));b=google[z].Secure&&a.ssl?a.ssl:a.uri;if(null!=c)for(var f in c)a.params[f]?e+="&"+Y(a.params[f],c[f]):"other_params"==f?e+="&"+c[f]:"base_domain"==f&&(b="http://"+c[f]+a.uri[A](a.uri[r]("/",7)));google[this[u]]={};-1==b[r]("?")&&e&&(e="?"+e[A](1));return b+e};V[x].s=function(a){return this.w(a).deferred};V[x].w=function(a){if(this.p)for(var b=0;b<this.p[w];++b){var c=this.p[b];if(RegExp(c.pattern).test(a))return c}return this.D};function T(a,b){this.b=a;this.i=b;this.h=!1}F(T,U);l(T[x],function(a,b){this.h=!0;google[z].d("script",this.g(a,b),!1)});T[x].m=function(){return this.h};T[x].l=function(){};T[x].g=function(a,b){if(!this.i.versions[":"+a]){if(this.i.aliases){var c=this.i.aliases[":"+a];c&&(a=c)}if(!this.i.versions[":"+a])throw H("Module: '"+this.b+"' with version '"+a+"' not found!");}return google[z].GoogleApisBase+"/libs/"+this.b+"/"+a+"/"+this.i.versions[":"+a][b&&b.uncompressed?"uncompressed":"compressed"]};
T[x].s=function(){return!1};var ca=!1,Z=[],da=(new Date)[v](),fa=function(){ca||(P(g,"unload",ea),ca=!0)},ga=function(a,b){fa();if(!(google[z].Secure||google[z].Options&&!1!==google[z].Options.csi)){for(var c=0;c<a[w];c++)a[c]=d(a[c][C]()[n](/[^a-z0-9_.]+/g,"_"));for(c=0;c<b[w];c++)b[c]=d(b[c][C]()[n](/[^a-z0-9_.]+/g,"_"));g[y](G($,null,"//gg.google.com/csi?s=uds&v=2&action="+a[B](",")+"&it="+b[B](",")),1E4)}},X=function(a,b,c){c?ga([a],[b]):(fa(),Z[m]("r"+Z[w]+"="+d(a+(b?"|"+b:""))),g[y](ea,5<Z[w]?0:15E3))},ea=function(){if(Z[w]){var a=
google[z][t];0==a[r]("http:")&&(a=a[n](/^http:/,"https:"));$(a+"/stats?"+Z[B]("&")+"&nc="+(new Date)[v]()+"_"+((new Date)[v]()-da));Z.length=0}},$=function(a){var b=new Image,c=$.H++;$.A[c]=b;b.onload=b.onerror=function(){delete $.A[c]};b.src=a;b=null};$.A={};$.H=0;I("google.loader.recordCsiStat",ga);I("google.loader.recordStat",X);I("google.loader.createImageForLogging",$);

}) ();google.loader.rm({"specs":["feeds","spreadsheets","gdata","visualization",{"name":"sharing","baseSpec":{"uri":"http://www.google.com/s2/sharing/js","ssl":null,"key":{"string":"key"},"version":{"string":"v"},"deferred":false,"params":{"language":{"string":"hl"}}}},"search","orkut","ads","elements",{"name":"books","baseSpec":{"uri":"http://books.google.com/books/api.js","ssl":"https://encrypted.google.com/books/api.js","key":{"string":"key"},"version":{"string":"v"},"deferred":true,"params":{"callback":{"string":"callback"},"language":{"string":"hl"}}}},{"name":"friendconnect","baseSpec":{"uri":"http://www.google.com/friendconnect/script/friendconnect.js","ssl":null,"key":{"string":"key"},"version":{"string":"v"},"deferred":false,"params":{}}},"identitytoolkit","ima",{"name":"maps","baseSpec":{"uri":"http://maps.google.com/maps?file\u003dgoogleapi","ssl":"https://maps-api-ssl.google.com/maps?file\u003dgoogleapi","key":{"string":"key"},"version":{"string":"v"},"deferred":true,"params":{"callback":{"regex":"callback\u003d$1\u0026async\u003d2"},"language":{"string":"hl"}}},"customSpecs":[{"uri":"http://maps.googleapis.com/maps/api/js","ssl":"https://maps.googleapis.com/maps/api/js","version":{"string":"v"},"deferred":true,"params":{"callback":{"string":"callback"},"language":{"string":"hl"}},"pattern":"^(3|3..*)$"}]},"payments","wave","annotations_v2","earth","language",{"name":"annotations","baseSpec":{"uri":"http://www.google.com/reviews/scripts/annotations_bootstrap.js","ssl":null,"key":{"string":"key"},"version":{"string":"v"},"deferred":true,"params":{"callback":{"string":"callback"},"language":{"string":"hl"},"country":{"string":"gl"}}}},"picker"]});
google.loader.rfm({":search":{"versions":{":1":"1",":1.0":"1"},"path":"/api/search/1.0/a075bd7791aa5f99550ea5c9db01a0d5/","js":"default+en.I.js","css":"default+en.css","properties":{":JSHash":"a075bd7791aa5f99550ea5c9db01a0d5",":NoOldNames":false,":Version":"1.0"}},":language":{"versions":{":1":"1",":1.0":"1"},"path":"/api/language/1.0/f66252f80431973fa38526a329b0a47b/","js":"default+en.I.js","properties":{":JSHash":"f66252f80431973fa38526a329b0a47b",":Version":"1.0"}},":feeds":{"versions":{":1":"1",":1.0":"1"},"path":"/api/feeds/1.0/c95430d91553a3f34679e480fd8c0961/","js":"default+en.I.js","css":"default+en.css","properties":{":JSHash":"c95430d91553a3f34679e480fd8c0961",":Version":"1.0"}},":spreadsheets":{"versions":{":0":"1",":0.4":"1"},"path":"/api/spreadsheets/0.4/87ff7219e9f8a8164006cbf28d5e911a/","js":"default.I.js","properties":{":JSHash":"87ff7219e9f8a8164006cbf28d5e911a",":Version":"0.4"}},":ima":{"versions":{":3":"1",":3.0":"1"},"path":"/api/ima/3.0/28a914332232c9a8ac0ae8da68b1006e/","js":"default.I.js","properties":{":JSHash":"28a914332232c9a8ac0ae8da68b1006e",":Version":"3.0"}},":wave":{"versions":{":1":"1",":1.0":"1"},"path":"/api/wave/1.0/3b6f7573ff78da6602dda5e09c9025bf/","js":"default.I.js","properties":{":JSHash":"3b6f7573ff78da6602dda5e09c9025bf",":Version":"1.0"}},":annotations":{"versions":{":1":"1",":1.0":"1"},"path":"/api/annotations/1.0/bacce7b6155a1bbadda3c05d65391b22/","js":"default+en.I.js","properties":{":JSHash":"bacce7b6155a1bbadda3c05d65391b22",":Version":"1.0"}},":earth":{"versions":{":1":"1",":1.0":"1"},"path":"/api/earth/1.0/109c7b2bae7fe6cc34ea875176165d81/","js":"default.I.js","properties":{":JSHash":"109c7b2bae7fe6cc34ea875176165d81",":Version":"1.0"}},":picker":{"versions":{":1":"1",":1.0":"1"},"path":"/api/picker/1.0/1c635e91b9d0c082c660a42091913907/","js":"default.I.js","css":"default.css","properties":{":JSHash":"1c635e91b9d0c082c660a42091913907",":Version":"1.0"}}});
google.loader.rpl({":scriptaculous":{"versions":{":1.8.3":{"uncompressed":"scriptaculous.js","compressed":"scriptaculous.js"},":1.9.0":{"uncompressed":"scriptaculous.js","compressed":"scriptaculous.js"},":1.8.2":{"uncompressed":"scriptaculous.js","compressed":"scriptaculous.js"},":1.8.1":{"uncompressed":"scriptaculous.js","compressed":"scriptaculous.js"}},"aliases":{":1.8":"1.8.3",":1":"1.9.0",":1.9":"1.9.0"}},":yui":{"versions":{":2.6.0":{"uncompressed":"build/yuiloader/yuiloader.js","compressed":"build/yuiloader/yuiloader-min.js"},":2.9.0":{"uncompressed":"build/yuiloader/yuiloader.js","compressed":"build/yuiloader/yuiloader-min.js"},":2.7.0":{"uncompressed":"build/yuiloader/yuiloader.js","compressed":"build/yuiloader/yuiloader-min.js"},":2.8.0r4":{"uncompressed":"build/yuiloader/yuiloader.js","compressed":"build/yuiloader/yuiloader-min.js"},":2.8.2r1":{"uncompressed":"build/yuiloader/yuiloader.js","compressed":"build/yuiloader/yuiloader-min.js"},":2.8.1":{"uncompressed":"build/yuiloader/yuiloader.js","compressed":"build/yuiloader/yuiloader-min.js"},":3.3.0":{"uncompressed":"build/yui/yui.js","compressed":"build/yui/yui-min.js"}},"aliases":{":3":"3.3.0",":2":"2.9.0",":2.7":"2.7.0",":2.8.2":"2.8.2r1",":2.6":"2.6.0",":2.9":"2.9.0",":2.8":"2.8.2r1",":2.8.0":"2.8.0r4",":3.3":"3.3.0"}},":swfobject":{"versions":{":2.1":{"uncompressed":"swfobject_src.js","compressed":"swfobject.js"},":2.2":{"uncompressed":"swfobject_src.js","compressed":"swfobject.js"}},"aliases":{":2":"2.2"}},":webfont":{"versions":{":1.0.28":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.27":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.29":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.12":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.13":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.14":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.15":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.10":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.11":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.2":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.1":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.0":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.6":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.19":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.5":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.18":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.4":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.17":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.3":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.16":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.9":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.21":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.22":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.25":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.26":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.23":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.24":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"}},"aliases":{":1":"1.0.29",":1.0":"1.0.29"}},":ext-core":{"versions":{":3.1.0":{"uncompressed":"ext-core-debug.js","compressed":"ext-core.js"},":3.0.0":{"uncompressed":"ext-core-debug.js","compressed":"ext-core.js"}},"aliases":{":3":"3.1.0",":3.0":"3.0.0",":3.1":"3.1.0"}},":mootools":{"versions":{":1.3.1":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.1.1":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.3.0":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.3.2":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.1.2":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.2.3":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.2.4":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.2.1":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.2.2":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.2.5":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.4.0":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.4.1":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.4.2":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"}},"aliases":{":1":"1.1.2",":1.11":"1.1.1",":1.4":"1.4.2",":1.3":"1.3.2",":1.2":"1.2.5",":1.1":"1.1.2"}},":jqueryui":{"versions":{":1.8.0":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.2":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.1":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.15":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.14":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.13":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.12":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.11":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.10":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.17":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.16":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.6.0":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.9":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.7":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.8":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.7.2":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.5":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.7.3":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.6":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.7.0":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.7.1":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.4":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.5.3":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.5.2":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"}},"aliases":{":1.8":"1.8.17",":1.7":"1.7.3",":1.6":"1.6.0",":1":"1.8.17",":1.5":"1.5.3",":1.8.3":"1.8.4"}},":chrome-frame":{"versions":{":1.0.2":{"uncompressed":"CFInstall.js","compressed":"CFInstall.min.js"},":1.0.1":{"uncompressed":"CFInstall.js","compressed":"CFInstall.min.js"},":1.0.0":{"uncompressed":"CFInstall.js","compressed":"CFInstall.min.js"}},"aliases":{":1":"1.0.2",":1.0":"1.0.2"}},":dojo":{"versions":{":1.3.1":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.3.0":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.6.1":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.1.1":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.3.2":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.6.0":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.2.3":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.7.2":{"uncompressed":"dojo/dojo.js.uncompressed.js","compressed":"dojo/dojo.js"},":1.7.0":{"uncompressed":"dojo/dojo.js.uncompressed.js","compressed":"dojo/dojo.js"},":1.7.1":{"uncompressed":"dojo/dojo.js.uncompressed.js","compressed":"dojo/dojo.js"},":1.4.3":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.5.1":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.5.0":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.2.0":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.4.0":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.4.1":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"}},"aliases":{":1.7":"1.7.2",":1":"1.6.1",":1.6":"1.6.1",":1.5":"1.5.1",":1.4":"1.4.3",":1.3":"1.3.2",":1.2":"1.2.3",":1.1":"1.1.1"}},":prototype":{"versions":{":1.7.0.0":{"uncompressed":"prototype.js","compressed":"prototype.js"},":1.6.0.2":{"uncompressed":"prototype.js","compressed":"prototype.js"},":1.6.1.0":{"uncompressed":"prototype.js","compressed":"prototype.js"},":1.6.0.3":{"uncompressed":"prototype.js","compressed":"prototype.js"}},"aliases":{":1.7":"1.7.0.0",":1.6.1":"1.6.1.0",":1":"1.7.0.0",":1.6":"1.6.1.0",":1.7.0":"1.7.0.0",":1.6.0":"1.6.0.3"}},":jquery":{"versions":{":1.6.2":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.3.1":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.6.1":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.3.0":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.6.4":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.6.3":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.3.2":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.6.0":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.2.3":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.7.0":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.7.1":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.2.6":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.4.3":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.4.4":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.5.1":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.5.0":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.4.0":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.5.2":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.4.1":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.4.2":{"uncompressed":"jquery.js","compressed":"jquery.min.js"}},"aliases":{":1.7":"1.7.1",":1.6":"1.6.4",":1":"1.7.1",":1.5":"1.5.2",":1.4":"1.4.4",":1.3":"1.3.2",":1.2":"1.2.6"}}});
}
;
/**
 * jVectorMap version 1.2.2
 *
 * Copyright 2011-2013, Kirill Lebedev
 * Licensed under the MIT license.
 *
 */
(function(e){var t={set:{colors:1,values:1,backgroundColor:1,scaleColors:1,normalizeFunction:1,focus:1},get:{selectedRegions:1,selectedMarkers:1,mapObject:1,regionName:1}};e.fn.vectorMap=function(e){var n,r,i,n=this.children(".jvectormap-container").data("mapObject");if(e==="addMap")jvm.WorldMap.maps[arguments[1]]=arguments[2];else{if(!(e!=="set"&&e!=="get"||!t[e][arguments[1]]))return r=arguments[1].charAt(0).toUpperCase()+arguments[1].substr(1),n[e+r].apply(n,Array.prototype.slice.call(arguments,2));e=e||{},e.container=this,n=new jvm.WorldMap(e)}return this}})(jQuery),function(e){function r(t){var n=t||window.event,r=[].slice.call(arguments,1),i=0,s=!0,o=0,u=0;return t=e.event.fix(n),t.type="mousewheel",n.wheelDelta&&(i=n.wheelDelta/120),n.detail&&(i=-n.detail/3),u=i,n.axis!==undefined&&n.axis===n.HORIZONTAL_AXIS&&(u=0,o=-1*i),n.wheelDeltaY!==undefined&&(u=n.wheelDeltaY/120),n.wheelDeltaX!==undefined&&(o=-1*n.wheelDeltaX/120),r.unshift(t,i,o,u),(e.event.dispatch||e.event.handle).apply(this,r)}var t=["DOMMouseScroll","mousewheel"];if(e.event.fixHooks)for(var n=t.length;n;)e.event.fixHooks[t[--n]]=e.event.mouseHooks;e.event.special.mousewheel={setup:function(){if(this.addEventListener)for(var e=t.length;e;)this.addEventListener(t[--e],r,!1);else this.onmousewheel=r},teardown:function(){if(this.removeEventListener)for(var e=t.length;e;)this.removeEventListener(t[--e],r,!1);else this.onmousewheel=null}},e.fn.extend({mousewheel:function(e){return e?this.bind("mousewheel",e):this.trigger("mousewheel")},unmousewheel:function(e){return this.unbind("mousewheel",e)}})}(jQuery);var jvm={inherits:function(e,t){function n(){}n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e,e.parentClass=t},mixin:function(e,t){var n;for(n in t.prototype)t.prototype.hasOwnProperty(n)&&(e.prototype[n]=t.prototype[n])},min:function(e){var t=Number.MAX_VALUE,n;if(e instanceof Array)for(n=0;n<e.length;n++)e[n]<t&&(t=e[n]);else for(n in e)e[n]<t&&(t=e[n]);return t},max:function(e){var t=Number.MIN_VALUE,n;if(e instanceof Array)for(n=0;n<e.length;n++)e[n]>t&&(t=e[n]);else for(n in e)e[n]>t&&(t=e[n]);return t},keys:function(e){var t=[],n;for(n in e)t.push(n);return t},values:function(e){var t=[],n,r;for(r=0;r<arguments.length;r++){e=arguments[r];for(n in e)t.push(e[n])}return t}};jvm.$=jQuery,jvm.AbstractElement=function(e,t){this.node=this.createElement(e),this.name=e,this.properties={},t&&this.set(t)},jvm.AbstractElement.prototype.set=function(e,t){var n;if(typeof e=="object")for(n in e)this.properties[n]=e[n],this.applyAttr(n,e[n]);else this.properties[e]=t,this.applyAttr(e,t)},jvm.AbstractElement.prototype.get=function(e){return this.properties[e]},jvm.AbstractElement.prototype.applyAttr=function(e,t){this.node.setAttribute(e,t)},jvm.AbstractElement.prototype.remove=function(){jvm.$(this.node).remove()},jvm.AbstractCanvasElement=function(e,t,n){this.container=e,this.setSize(t,n),this.rootElement=new jvm[this.classPrefix+"GroupElement"],this.node.appendChild(this.rootElement.node),this.container.appendChild(this.node)},jvm.AbstractCanvasElement.prototype.add=function(e,t){t=t||this.rootElement,t.add(e),e.canvas=this},jvm.AbstractCanvasElement.prototype.addPath=function(e,t,n){var r=new jvm[this.classPrefix+"PathElement"](e,t);return this.add(r,n),r},jvm.AbstractCanvasElement.prototype.addCircle=function(e,t,n){var r=new jvm[this.classPrefix+"CircleElement"](e,t);return this.add(r,n),r},jvm.AbstractCanvasElement.prototype.addGroup=function(e){var t=new jvm[this.classPrefix+"GroupElement"];return e?e.node.appendChild(t.node):this.node.appendChild(t.node),t.canvas=this,t},jvm.AbstractShapeElement=function(e,t,n){this.style=n||{},this.style.current={},this.isHovered=!1,this.isSelected=!1,this.updateStyle()},jvm.AbstractShapeElement.prototype.setHovered=function(e){this.isHovered!==e&&(this.isHovered=e,this.updateStyle())},jvm.AbstractShapeElement.prototype.setSelected=function(e){this.isSelected!==e&&(this.isSelected=e,this.updateStyle(),jvm.$(this.node).trigger("selected",[e]))},jvm.AbstractShapeElement.prototype.setStyle=function(e,t){var n={};typeof e=="object"?n=e:n[e]=t,jvm.$.extend(this.style.current,n),this.updateStyle()},jvm.AbstractShapeElement.prototype.updateStyle=function(){var e={};jvm.AbstractShapeElement.mergeStyles(e,this.style.initial),jvm.AbstractShapeElement.mergeStyles(e,this.style.current),this.isHovered&&jvm.AbstractShapeElement.mergeStyles(e,this.style.hover),this.isSelected&&(jvm.AbstractShapeElement.mergeStyles(e,this.style.selected),this.isHovered&&jvm.AbstractShapeElement.mergeStyles(e,this.style.selectedHover)),this.set(e)},jvm.AbstractShapeElement.mergeStyles=function(e,t){var n;t=t||{};for(n in t)t[n]===null?delete e[n]:e[n]=t[n]},jvm.SVGElement=function(e,t){jvm.SVGElement.parentClass.apply(this,arguments)},jvm.inherits(jvm.SVGElement,jvm.AbstractElement),jvm.SVGElement.svgns="http://www.w3.org/2000/svg",jvm.SVGElement.prototype.createElement=function(e){return document.createElementNS(jvm.SVGElement.svgns,e)},jvm.SVGElement.prototype.addClass=function(e){this.node.setAttribute("class",e)},jvm.SVGElement.prototype.getElementCtr=function(e){return jvm["SVG"+e]},jvm.SVGElement.prototype.getBBox=function(){return this.node.getBBox()},jvm.SVGGroupElement=function(){jvm.SVGGroupElement.parentClass.call(this,"g")},jvm.inherits(jvm.SVGGroupElement,jvm.SVGElement),jvm.SVGGroupElement.prototype.add=function(e){this.node.appendChild(e.node)},jvm.SVGCanvasElement=function(e,t,n){this.classPrefix="SVG",jvm.SVGCanvasElement.parentClass.call(this,"svg"),jvm.AbstractCanvasElement.apply(this,arguments)},jvm.inherits(jvm.SVGCanvasElement,jvm.SVGElement),jvm.mixin(jvm.SVGCanvasElement,jvm.AbstractCanvasElement),jvm.SVGCanvasElement.prototype.setSize=function(e,t){this.width=e,this.height=t,this.node.setAttribute("width",e),this.node.setAttribute("height",t)},jvm.SVGCanvasElement.prototype.applyTransformParams=function(e,t,n){this.scale=e,this.transX=t,this.transY=n,this.rootElement.node.setAttribute("transform","scale("+e+") translate("+t+", "+n+")")},jvm.SVGShapeElement=function(e,t,n){jvm.SVGShapeElement.parentClass.call(this,e,t),jvm.AbstractShapeElement.apply(this,arguments)},jvm.inherits(jvm.SVGShapeElement,jvm.SVGElement),jvm.mixin(jvm.SVGShapeElement,jvm.AbstractShapeElement),jvm.SVGPathElement=function(e,t){jvm.SVGPathElement.parentClass.call(this,"path",e,t),this.node.setAttribute("fill-rule","evenodd")},jvm.inherits(jvm.SVGPathElement,jvm.SVGShapeElement),jvm.SVGCircleElement=function(e,t){jvm.SVGCircleElement.parentClass.call(this,"circle",e,t)},jvm.inherits(jvm.SVGCircleElement,jvm.SVGShapeElement),jvm.VMLElement=function(e,t){jvm.VMLElement.VMLInitialized||jvm.VMLElement.initializeVML(),jvm.VMLElement.parentClass.apply(this,arguments)},jvm.inherits(jvm.VMLElement,jvm.AbstractElement),jvm.VMLElement.VMLInitialized=!1,jvm.VMLElement.initializeVML=function(){try{document.namespaces.rvml||document.namespaces.add("rvml","urn:schemas-microsoft-com:vml"),jvm.VMLElement.prototype.createElement=function(e){return document.createElement("<rvml:"+e+' class="rvml">')}}catch(e){jvm.VMLElement.prototype.createElement=function(e){return document.createElement("<"+e+' xmlns="urn:schemas-microsoft.com:vml" class="rvml">')}}document.createStyleSheet().addRule(".rvml","behavior:url(#default#VML)"),jvm.VMLElement.VMLInitialized=!0},jvm.VMLElement.prototype.getElementCtr=function(e){return jvm["VML"+e]},jvm.VMLElement.prototype.addClass=function(e){jvm.$(this.node).addClass(e)},jvm.VMLElement.prototype.applyAttr=function(e,t){this.node[e]=t},jvm.VMLElement.prototype.getBBox=function(){var e=jvm.$(this.node);return{x:e.position().left/this.canvas.scale,y:e.position().top/this.canvas.scale,width:e.width()/this.canvas.scale,height:e.height()/this.canvas.scale}},jvm.VMLGroupElement=function(){jvm.VMLGroupElement.parentClass.call(this,"group"),this.node.style.left="0px",this.node.style.top="0px",this.node.coordorigin="0 0"},jvm.inherits(jvm.VMLGroupElement,jvm.VMLElement),jvm.VMLGroupElement.prototype.add=function(e){this.node.appendChild(e.node)},jvm.VMLCanvasElement=function(e,t,n){this.classPrefix="VML",jvm.VMLCanvasElement.parentClass.call(this,"group"),jvm.AbstractCanvasElement.apply(this,arguments),this.node.style.position="absolute"},jvm.inherits(jvm.VMLCanvasElement,jvm.VMLElement),jvm.mixin(jvm.VMLCanvasElement,jvm.AbstractCanvasElement),jvm.VMLCanvasElement.prototype.setSize=function(e,t){var n,r,i,s;this.width=e,this.height=t,this.node.style.width=e+"px",this.node.style.height=t+"px",this.node.coordsize=e+" "+t,this.node.coordorigin="0 0";if(this.rootElement){n=this.rootElement.node.getElementsByTagName("shape");for(i=0,s=n.length;i<s;i++)n[i].coordsize=e+" "+t,n[i].style.width=e+"px",n[i].style.height=t+"px";r=this.node.getElementsByTagName("group");for(i=0,s=r.length;i<s;i++)r[i].coordsize=e+" "+t,r[i].style.width=e+"px",r[i].style.height=t+"px"}},jvm.VMLCanvasElement.prototype.applyTransformParams=function(e,t,n){this.scale=e,this.transX=t,this.transY=n,this.rootElement.node.coordorigin=this.width-t-this.width/100+","+(this.height-n-this.height/100),this.rootElement.node.coordsize=this.width/e+","+this.height/e},jvm.VMLShapeElement=function(e,t){jvm.VMLShapeElement.parentClass.call(this,e,t),this.fillElement=new jvm.VMLElement("fill"),this.strokeElement=new jvm.VMLElement("stroke"),this.node.appendChild(this.fillElement.node),this.node.appendChild(this.strokeElement.node),this.node.stroked=!1,jvm.AbstractShapeElement.apply(this,arguments)},jvm.inherits(jvm.VMLShapeElement,jvm.VMLElement),jvm.mixin(jvm.VMLShapeElement,jvm.AbstractShapeElement),jvm.VMLShapeElement.prototype.applyAttr=function(e,t){switch(e){case"fill":this.node.fillcolor=t;break;case"fill-opacity":this.fillElement.node.opacity=Math.round(t*100)+"%";break;case"stroke":t==="none"?this.node.stroked=!1:this.node.stroked=!0,this.node.strokecolor=t;break;case"stroke-opacity":this.strokeElement.node.opacity=Math.round(t*100)+"%";break;case"stroke-width":parseInt(t,10)===0?this.node.stroked=!1:this.node.stroked=!0,this.node.strokeweight=t;break;case"d":this.node.path=jvm.VMLPathElement.pathSvgToVml(t);break;default:jvm.VMLShapeElement.parentClass.prototype.applyAttr.apply(this,arguments)}},jvm.VMLPathElement=function(e,t){var n=new jvm.VMLElement("skew");jvm.VMLPathElement.parentClass.call(this,"shape",e,t),this.node.coordorigin="0 0",n.node.on=!0,n.node.matrix="0.01,0,0,0.01,0,0",n.node.offset="0,0",this.node.appendChild(n.node)},jvm.inherits(jvm.VMLPathElement,jvm.VMLShapeElement),jvm.VMLPathElement.prototype.applyAttr=function(e,t){e==="d"?this.node.path=jvm.VMLPathElement.pathSvgToVml(t):jvm.VMLShapeElement.prototype.applyAttr.call(this,e,t)},jvm.VMLPathElement.pathSvgToVml=function(e){var t="",n=0,r=0,i,s;return e=e.replace(/(-?\d+)e(-?\d+)/g,"0"),e.replace(/([MmLlHhVvCcSs])\s*((?:-?\d*(?:\.\d+)?\s*,?\s*)+)/g,function(e,t,o,u){o=o.replace(/(\d)-/g,"$1,-").replace(/^\s+/g,"").replace(/\s+$/g,"").replace(/\s+/g,",").split(","),o[0]||o.shift();for(var a=0,f=o.length;a<f;a++)o[a]=Math.round(100*o[a]);switch(t){case"m":return n+=o[0],r+=o[1],"t"+o.join(",");case"M":return n=o[0],r=o[1],"m"+o.join(",");case"l":return n+=o[0],r+=o[1],"r"+o.join(",");case"L":return n=o[0],r=o[1],"l"+o.join(",");case"h":return n+=o[0],"r"+o[0]+",0";case"H":return n=o[0],"l"+n+","+r;case"v":return r+=o[0],"r0,"+o[0];case"V":return r=o[0],"l"+n+","+r;case"c":return i=n+o[o.length-4],s=r+o[o.length-3],n+=o[o.length-2],r+=o[o.length-1],"v"+o.join(",");case"C":return i=o[o.length-4],s=o[o.length-3],n=o[o.length-2],r=o[o.length-1],"c"+o.join(",");case"s":return o.unshift(r-s),o.unshift(n-i),i=n+o[o.length-4],s=r+o[o.length-3],n+=o[o.length-2],r+=o[o.length-1],"v"+o.join(",");case"S":return o.unshift(r+r-s),o.unshift(n+n-i),i=o[o.length-4],s=o[o.length-3],n=o[o.length-2],r=o[o.length-1],"c"+o.join(",")}return""}).replace(/z/g,"e")},jvm.VMLCircleElement=function(e,t){jvm.VMLCircleElement.parentClass.call(this,"oval",e,t)},jvm.inherits(jvm.VMLCircleElement,jvm.VMLShapeElement),jvm.VMLCircleElement.prototype.applyAttr=function(e,t){switch(e){case"r":this.node.style.width=t*2+"px",this.node.style.height=t*2+"px",this.applyAttr("cx",this.get("cx")||0),this.applyAttr("cy",this.get("cy")||0);break;case"cx":if(!t)return;this.node.style.left=t-(this.get("r")||0)+"px";break;case"cy":if(!t)return;this.node.style.top=t-(this.get("r")||0)+"px";break;default:jvm.VMLCircleElement.parentClass.prototype.applyAttr.call(this,e,t)}},jvm.VectorCanvas=function(e,t,n){return this.mode=window.SVGAngle?"svg":"vml",this.mode=="svg"?this.impl=new jvm.SVGCanvasElement(e,t,n):this.impl=new jvm.VMLCanvasElement(e,t,n),this.impl},jvm.SimpleScale=function(e){this.scale=e},jvm.SimpleScale.prototype.getValue=function(e){return e},jvm.OrdinalScale=function(e){this.scale=e},jvm.OrdinalScale.prototype.getValue=function(e){return this.scale[e]},jvm.NumericScale=function(e,t,n,r){this.scale=[],t=t||"linear",e&&this.setScale(e),t&&this.setNormalizeFunction(t),n&&this.setMin(n),r&&this.setMax(r)},jvm.NumericScale.prototype={setMin:function(e){this.clearMinValue=e,typeof this.normalize=="function"?this.minValue=this.normalize(e):this.minValue=e},setMax:function(e){this.clearMaxValue=e,typeof this.normalize=="function"?this.maxValue=this.normalize(e):this.maxValue=e},setScale:function(e){var t;for(t=0;t<e.length;t++)this.scale[t]=[e[t]]},setNormalizeFunction:function(e){e==="polynomial"?this.normalize=function(e){return Math.pow(e,.2)}:e==="linear"?delete this.normalize:this.normalize=e,this.setMin(this.clearMinValue),this.setMax(this.clearMaxValue)},getValue:function(e){var t=[],n=0,r,i=0,s;typeof this.normalize=="function"&&(e=this.normalize(e));for(i=0;i<this.scale.length-1;i++)r=this.vectorLength(this.vectorSubtract(this.scale[i+1],this.scale[i])),t.push(r),n+=r;s=(this.maxValue-this.minValue)/n;for(i=0;i<t.length;i++)t[i]*=s;i=0,e-=this.minValue;while(e-t[i]>=0)e-=t[i],i++;return i==this.scale.length-1?e=this.vectorToNum(this.scale[i]):e=this.vectorToNum(this.vectorAdd(this.scale[i],this.vectorMult(this.vectorSubtract(this.scale[i+1],this.scale[i]),e/t[i]))),e},vectorToNum:function(e){var t=0,n;for(n=0;n<e.length;n++)t+=Math.round(e[n])*Math.pow(256,e.length-n-1);return t},vectorSubtract:function(e,t){var n=[],r;for(r=0;r<e.length;r++)n[r]=e[r]-t[r];return n},vectorAdd:function(e,t){var n=[],r;for(r=0;r<e.length;r++)n[r]=e[r]+t[r];return n},vectorMult:function(e,t){var n=[],r;for(r=0;r<e.length;r++)n[r]=e[r]*t;return n},vectorLength:function(e){var t=0,n;for(n=0;n<e.length;n++)t+=e[n]*e[n];return Math.sqrt(t)}},jvm.ColorScale=function(e,t,n,r){jvm.ColorScale.parentClass.apply(this,arguments)},jvm.inherits(jvm.ColorScale,jvm.NumericScale),jvm.ColorScale.prototype.setScale=function(e){var t;for(t=0;t<e.length;t++)this.scale[t]=jvm.ColorScale.rgbToArray(e[t])},jvm.ColorScale.prototype.getValue=function(e){return jvm.ColorScale.numToRgb(jvm.ColorScale.parentClass.prototype.getValue.call(this,e))},jvm.ColorScale.arrayToRgb=function(e){var t="#",n,r;for(r=0;r<e.length;r++)n=e[r].toString(16),t+=n.length==1?"0"+n:n;return t},jvm.ColorScale.numToRgb=function(e){e=e.toString(16);while(e.length<6)e="0"+e;return"#"+e},jvm.ColorScale.rgbToArray=function(e){return e=e.substr(1),[parseInt(e.substr(0,2),16),parseInt(e.substr(2,2),16),parseInt(e.substr(4,2),16)]},jvm.DataSeries=function(e,t){var n;e=e||{},e.attribute=e.attribute||"fill",this.elements=t,this.params=e,e.attributes&&this.setAttributes(e.attributes),jvm.$.isArray(e.scale)?(n=e.attribute==="fill"||e.attribute==="stroke"?jvm.ColorScale:jvm.NumericScale,this.scale=new n(e.scale,e.normalizeFunction,e.min,e.max)):e.scale?this.scale=new jvm.OrdinalScale(e.scale):this.scale=new jvm.SimpleScale(e.scale),this.values=e.values||{},this.setValues(this.values)},jvm.DataSeries.prototype={setAttributes:function(e,t){var n=e,r;if(typeof e=="string")this.elements[e]&&this.elements[e].setStyle(this.params.attribute,t);else for(r in n)this.elements[r]&&this.elements[r].element.setStyle(this.params.attribute,n[r])},setValues:function(e){var t=Number.MIN_VALUE,n=Number.MAX_VALUE,r,i,s={};if(this.scale instanceof jvm.OrdinalScale||this.scale instanceof jvm.SimpleScale)for(i in e)e[i]?s[i]=this.scale.getValue(e[i]):s[i]=this.elements[i].element.style.initial[this.params.attribute];else{if(!this.params.min||!this.params.max){for(i in e)r=parseFloat(e[i]),r>t&&(t=e[i]),r<n&&(n=r);this.params.min||this.scale.setMin(n),this.params.max||this.scale.setMax(t),this.params.min=n,this.params.max=t}for(i in e)r=parseFloat(e[i]),isNaN(r)?s[i]=this.elements[i].element.style.initial[this.params.attribute]:s[i]=this.scale.getValue(r)}this.setAttributes(s),jvm.$.extend(this.values,e)},clear:function(){var e,t={};for(e in this.values)this.elements[e]&&(t[e]=this.elements[e].element.style.initial[this.params.attribute]);this.setAttributes(t),this.values={}},setScale:function(e){this.scale.setScale(e),this.values&&this.setValues(this.values)},setNormalizeFunction:function(e){this.scale.setNormalizeFunction(e),this.values&&this.setValues(this.values)}},jvm.Proj={degRad:180/Math.PI,radDeg:Math.PI/180,radius:6381372,sgn:function(e){return e>0?1:e<0?-1:e},mill:function(e,t,n){return{x:this.radius*(t-n)*this.radDeg,y:-this.radius*Math.log(Math.tan((45+.4*e)*this.radDeg))/.8}},mill_inv:function(e,t,n){return{lat:(2.5*Math.atan(Math.exp(.8*t/this.radius))-5*Math.PI/8)*this.degRad,lng:(n*this.radDeg+e/this.radius)*this.degRad}},merc:function(e,t,n){return{x:this.radius*(t-n)*this.radDeg,y:-this.radius*Math.log(Math.tan(Math.PI/4+e*Math.PI/360))}},merc_inv:function(e,t,n){return{lat:(2*Math.atan(Math.exp(t/this.radius))-Math.PI/2)*this.degRad,lng:(n*this.radDeg+e/this.radius)*this.degRad}},aea:function(e,t,n){var r=0,i=n*this.radDeg,s=29.5*this.radDeg,o=45.5*this.radDeg,u=e*this.radDeg,a=t*this.radDeg,f=(Math.sin(s)+Math.sin(o))/2,l=Math.cos(s)*Math.cos(s)+2*f*Math.sin(s),c=f*(a-i),h=Math.sqrt(l-2*f*Math.sin(u))/f,p=Math.sqrt(l-2*f*Math.sin(r))/f;return{x:h*Math.sin(c)*this.radius,y:-(p-h*Math.cos(c))*this.radius}},aea_inv:function(e,t,n){var r=e/this.radius,i=t/this.radius,s=0,o=n*this.radDeg,u=29.5*this.radDeg,a=45.5*this.radDeg,f=(Math.sin(u)+Math.sin(a))/2,l=Math.cos(u)*Math.cos(u)+2*f*Math.sin(u),c=Math.sqrt(l-2*f*Math.sin(s))/f,h=Math.sqrt(r*r+(c-i)*(c-i)),p=Math.atan(r/(c-i));return{lat:Math.asin((l-h*h*f*f)/(2*f))*this.degRad,lng:(o+p/f)*this.degRad}},lcc:function(e,t,n){var r=0,i=n*this.radDeg,s=t*this.radDeg,o=33*this.radDeg,u=45*this.radDeg,a=e*this.radDeg,f=Math.log(Math.cos(o)*(1/Math.cos(u)))/Math.log(Math.tan(Math.PI/4+u/2)*(1/Math.tan(Math.PI/4+o/2))),l=Math.cos(o)*Math.pow(Math.tan(Math.PI/4+o/2),f)/f,c=l*Math.pow(1/Math.tan(Math.PI/4+a/2),f),h=l*Math.pow(1/Math.tan(Math.PI/4+r/2),f);return{x:c*Math.sin(f*(s-i))*this.radius,y:-(h-c*Math.cos(f*(s-i)))*this.radius}},lcc_inv:function(e,t,n){var r=e/this.radius,i=t/this.radius,s=0,o=n*this.radDeg,u=33*this.radDeg,a=45*this.radDeg,f=Math.log(Math.cos(u)*(1/Math.cos(a)))/Math.log(Math.tan(Math.PI/4+a/2)*(1/Math.tan(Math.PI/4+u/2))),l=Math.cos(u)*Math.pow(Math.tan(Math.PI/4+u/2),f)/f,c=l*Math.pow(1/Math.tan(Math.PI/4+s/2),f),h=this.sgn(f)*Math.sqrt(r*r+(c-i)*(c-i)),p=Math.atan(r/(c-i));return{lat:(2*Math.atan(Math.pow(l/h,1/f))-Math.PI/2)*this.degRad,lng:(o+p/f)*this.degRad}}},jvm.WorldMap=function(e){var t=this,n;this.params=jvm.$.extend(!0,{},jvm.WorldMap.defaultParams,e);if(!jvm.WorldMap.maps[this.params.map])throw new Error("Attempt to use map which was not loaded: "+this.params.map);this.mapData=jvm.WorldMap.maps[this.params.map],this.markers={},this.regions={},this.regionsColors={},this.regionsData={},this.container=jvm.$("<div>").css({width:"100%",height:"100%"}).addClass("jvectormap-container"),this.params.container.append(this.container),this.container.data("mapObject",this),this.container.css({position:"relative",overflow:"hidden"}),this.defaultWidth=this.mapData.width,this.defaultHeight=this.mapData.height,this.setBackgroundColor(this.params.backgroundColor),this.onResize=function(){t.setSize()},jvm.$(window).resize(this.onResize);for(n in jvm.WorldMap.apiEvents)this.params[n]&&this.container.bind(jvm.WorldMap.apiEvents[n]+".jvectormap",this.params[n]);this.canvas=new jvm.VectorCanvas(this.container[0],this.width,this.height),"ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch?this.params.bindTouchEvents&&this.bindContainerTouchEvents():this.bindContainerEvents(),this.bindElementEvents(),this.createLabel(),this.params.zoomButtons&&this.bindZoomButtons(),this.createRegions(),this.createMarkers(this.params.markers||{}),this.setSize(),this.params.focusOn&&(typeof this.params.focusOn=="object"?this.setFocus.call(this,this.params.focusOn.scale,this.params.focusOn.x,this.params.focusOn.y):this.setFocus.call(this,this.params.focusOn)),this.params.selectedRegions&&this.setSelectedRegions(this.params.selectedRegions),this.params.selectedMarkers&&this.setSelectedMarkers(this.params.selectedMarkers),this.params.series&&this.createSeries()},jvm.WorldMap.prototype={transX:0,transY:0,scale:1,baseTransX:0,baseTransY:0,baseScale:1,width:0,height:0,setBackgroundColor:function(e){this.container.css("background-color",e)},resize:function(){var e=this.baseScale;this.width/this.height>this.defaultWidth/this.defaultHeight?(this.baseScale=this.height/this.defaultHeight,this.baseTransX=Math.abs(this.width-this.defaultWidth*this.baseScale)/(2*this.baseScale)):(this.baseScale=this.width/this.defaultWidth,this.baseTransY=Math.abs(this.height-this.defaultHeight*this.baseScale)/(2*this.baseScale)),this.scale*=this.baseScale/e,this.transX*=this.baseScale/e,this.transY*=this.baseScale/e},setSize:function(){this.width=this.container.width(),this.height=this.container.height(),this.resize(),this.canvas.setSize(this.width,this.height),this.applyTransform()},reset:function(){var e,t;for(e in this.series)for(t=0;t<this.series[e].length;t++)this.series[e][t].clear();this.scale=this.baseScale,this.transX=this.baseTransX,this.transY=this.baseTransY,this.applyTransform()},applyTransform:function(){var e,t,n,r;this.defaultWidth*this.scale<=this.width?(e=(this.width-this.defaultWidth*this.scale)/(2*this.scale),n=(this.width-this.defaultWidth*this.scale)/(2*this.scale)):(e=0,n=(this.width-this.defaultWidth*this.scale)/this.scale),this.defaultHeight*this.scale<=this.height?(t=(this.height-this.defaultHeight*this.scale)/(2*this.scale),r=(this.height-this.defaultHeight*this.scale)/(2*this.scale)):(t=0,r=(this.height-this.defaultHeight*this.scale)/this.scale),this.transY>t?this.transY=t:this.transY<r&&(this.transY=r),this.transX>e?this.transX=e:this.transX<n&&(this.transX=n),this.canvas.applyTransformParams(this.scale,this.transX,this.transY),this.markers&&this.repositionMarkers(),this.container.trigger("viewportChange",[this.scale/this.baseScale,this.transX,this.transY])},bindContainerEvents:function(){var e=!1,t,n,r=this;this.container.mousemove(function(i){return e&&(r.transX-=(t-i.pageX)/r.scale,r.transY-=(n-i.pageY)/r.scale,r.applyTransform(),t=i.pageX,n=i.pageY),!1}).mousedown(function(r){return e=!0,t=r.pageX,n=r.pageY,!1}),jvm.$("body").mouseup(function(){e=!1}),this.params.zoomOnScroll&&this.container.mousewheel(function(e,t,n,i){var s=jvm.$(r.container).offset(),o=e.pageX-s.left,u=e.pageY-s.top,a=Math.pow(1.3,i);r.label.hide(),r.setScale(r.scale*a,o,u),e.preventDefault()})},bindContainerTouchEvents:function(){var e,t,n=this,r,i,s,o,u,a=function(a){var f=a.originalEvent.touches,l,c,h,p;a.type=="touchstart"&&(u=0),f.length==1?(u==1&&(h=n.transX,p=n.transY,n.transX-=(r-f[0].pageX)/n.scale,n.transY-=(i-f[0].pageY)/n.scale,n.applyTransform(),n.label.hide(),(h!=n.transX||p!=n.transY)&&a.preventDefault()),r=f[0].pageX,i=f[0].pageY):f.length==2&&(u==2?(c=Math.sqrt(Math.pow(f[0].pageX-f[1].pageX,2)+Math.pow(f[0].pageY-f[1].pageY,2))/t,n.setScale(e*c,s,o),n.label.hide(),a.preventDefault()):(l=jvm.$(n.container).offset(),f[0].pageX>f[1].pageX?s=f[1].pageX+(f[0].pageX-f[1].pageX)/2:s=f[0].pageX+(f[1].pageX-f[0].pageX)/2,f[0].pageY>f[1].pageY?o=f[1].pageY+(f[0].pageY-f[1].pageY)/2:o=f[0].pageY+(f[1].pageY-f[0].pageY)/2,s-=l.left,o-=l.top,e=n.scale,t=Math.sqrt(Math.pow(f[0].pageX-f[1].pageX,2)+Math.pow(f[0].pageY-f[1].pageY,2)))),u=f.length};jvm.$(this.container).bind("touchstart",a),jvm.$(this.container).bind("touchmove",a)},bindElementEvents:function(){var e=this,t;this.container.mousemove(function(){t=!0}),this.container.delegate("[class~='jvectormap-element']","mouseover mouseout",function(t){var n=this,r=jvm.$(this).attr("class").baseVal?jvm.$(this).attr("class").baseVal:jvm.$(this).attr("class"),i=r.indexOf("jvectormap-region")===-1?"marker":"region",s=i=="region"?jvm.$(this).attr("data-code"):jvm.$(this).attr("data-index"),o=i=="region"?e.regions[s].element:e.markers[s].element,u=i=="region"?e.mapData.paths[s].name:e.markers[s].config.name||"",a=jvm.$.Event(i+"LabelShow.jvectormap"),f=jvm.$.Event(i+"Over.jvectormap");t.type=="mouseover"?(e.container.trigger(f,[s]),f.isDefaultPrevented()||o.setHovered(!0),e.label.text(u),e.container.trigger(a,[e.label,s]),a.isDefaultPrevented()||(e.label.show(),e.labelWidth=e.label.width(),e.labelHeight=e.label.height())):(o.setHovered(!1),e.label.hide(),e.container.trigger(i+"Out.jvectormap",[s]))}),this.container.delegate("[class~='jvectormap-element']","mousedown",function(e){t=!1}),this.container.delegate("[class~='jvectormap-element']","mouseup",function(n){var r=this,i=jvm.$(this).attr("class").baseVal?jvm.$(this).attr("class").baseVal:jvm.$(this).attr("class"),s=i.indexOf("jvectormap-region")===-1?"marker":"region",o=s=="region"?jvm.$(this).attr("data-code"):jvm.$(this).attr("data-index"),u=jvm.$.Event(s+"Click.jvectormap"),a=s=="region"?e.regions[o].element:e.markers[o].element;if(!t){e.container.trigger(u,[o]);if(s==="region"&&e.params.regionsSelectable||s==="marker"&&e.params.markersSelectable)u.isDefaultPrevented()||(e.params[s+"sSelectableOne"]&&e.clearSelected(s+"s"),a.setSelected(!a.isSelected))}})},bindZoomButtons:function(){var e=this;jvm.$("<div/>").addClass("jvectormap-zoomin").text("+").appendTo(this.container),jvm.$("<div/>").addClass("jvectormap-zoomout").html("&#x2212;").appendTo(this.container),this.container.find(".jvectormap-zoomin").click(function(){e.setScale(e.scale*e.params.zoomStep,e.width/2,e.height/2)}),this.container.find(".jvectormap-zoomout").click(function(){e.setScale(e.scale/e.params.zoomStep,e.width/2,e.height/2)})},createLabel:function(){var e=this;this.label=jvm.$("<div/>").addClass("jvectormap-label").appendTo(jvm.$("body")),this.container.mousemove(function(t){var n=t.pageX-15-e.labelWidth,r=t.pageY-15-e.labelHeight;n<5&&(n=t.pageX+15),r<5&&(r=t.pageY+15),e.label.is(":visible")&&e.label.css({left:n,top:r})})},setScale:function(e,t,n,r){var i,s=jvm.$.Event("zoom.jvectormap");e>this.params.zoomMax*this.baseScale?e=this.params.zoomMax*this.baseScale:e<this.params.zoomMin*this.baseScale&&(e=this.params.zoomMin*this.baseScale),typeof t!="undefined"&&typeof n!="undefined"&&(i=e/this.scale,r?(this.transX=t+this.defaultWidth*(this.width/(this.defaultWidth*e))/2,this.transY=n+this.defaultHeight*(this.height/(this.defaultHeight*e))/2):(this.transX-=(i-1)/e*t,this.transY-=(i-1)/e*n)),this.scale=e,this.applyTransform(),this.container.trigger(s,[e/this.baseScale])},setFocus:function(e,t,n){var r,i,s,o,u;if(jvm.$.isArray(e)||this.regions[e]){jvm.$.isArray(e)?o=e:o=[e];for(u=0;u<o.length;u++)this.regions[o[u]]&&(i=this.regions[o[u]].element.getBBox(),i&&(typeof r=="undefined"?r=i:(s={x:Math.min(r.x,i.x),y:Math.min(r.y,i.y),width:Math.max(r.x+r.width,i.x+i.width)-Math.min(r.x,i.x),height:Math.max(r.y+r.height,i.y+i.height)-Math.min(r.y,i.y)},r=s)));this.setScale(Math.min(this.width/r.width,this.height/r.height),-(r.x+r.width/2),-(r.y+r.height/2),!0)}else e*=this.baseScale,this.setScale(e,-t*this.defaultWidth,-n*this.defaultHeight,!0)},getSelected:function(e){var t,n=[];for(t in this[e])this[e][t].element.isSelected&&n.push(t);return n},getSelectedRegions:function(){return this.getSelected("regions")},getSelectedMarkers:function(){return this.getSelected("markers")},setSelected:function(e,t){var n;typeof t!="object"&&(t=[t]);if(jvm.$.isArray(t))for(n=0;n<t.length;n++)this[e][t[n]].element.setSelected(!0);else for(n in t)this[e][n].element.setSelected(!!t[n])},setSelectedRegions:function(e){this.setSelected("regions",e)},setSelectedMarkers:function(e){this.setSelected("markers",e)},clearSelected:function(e){var t={},n=this.getSelected(e),r;for(r=0;r<n.length;r++)t[n[r]]=!1;this.setSelected(e,t)},clearSelectedRegions:function(){this.clearSelected("regions")},clearSelectedMarkers:function(){this.clearSelected("markers")},getMapObject:function(){return this},getRegionName:function(e){return this.mapData.paths[e].name},createRegions:function(){var e,t,n=this;for(e in this.mapData.paths)t=this.canvas.addPath({d:this.mapData.paths[e].path,"data-code":e},jvm.$.extend(!0,{},this.params.regionStyle)),jvm.$(t.node).bind("selected",function(e,t){n.container.trigger("regionSelected.jvectormap",[jvm.$(this).attr("data-code"),t,n.getSelectedRegions()])}),t.addClass("jvectormap-region jvectormap-element"),this.regions[e]={element:t,config:this.mapData.paths[e]}},createMarkers:function(e){var t,n,r,i,s,o=this;this.markersGroup=this.markersGroup||this.canvas.addGroup();if(jvm.$.isArray(e)){s=e.slice(),e={};for(t=0;t<s.length;t++)e[t]=s[t]}for(t in e)i=e[t]instanceof Array?{latLng:e[t]}:e[t],r=this.getMarkerPosition(i),r!==!1&&(n=this.canvas.addCircle({"data-index":t,cx:r.x,cy:r.y},jvm.$.extend(!0,{},this.params.markerStyle,{initial:i.style||{}}),this.markersGroup),n.addClass("jvectormap-marker jvectormap-element"),jvm.$(n.node).bind("selected",function(e,t){o.container.trigger("markerSelected.jvectormap",[jvm.$(this).attr("data-index"),t,o.getSelectedMarkers()])}),this.markers[t]&&this.removeMarkers([t]),this.markers[t]={element:n,config:i})},repositionMarkers:function(){var e,t;for(e in this.markers)t=this.getMarkerPosition(this.markers[e].config),t!==!1&&this.markers[e].element.setStyle({cx:t.x,cy:t.y})},getMarkerPosition:function(e){return jvm.WorldMap.maps[this.params.map].projection?this.latLngToPoint.apply(this,e.latLng||[0,0]):{x:e.coords[0]*this.scale+this.transX*this.scale,y:e.coords[1]*this.scale+this.transY*this.scale}},addMarker:function(e,t,n){var r={},i=[],s,o,n=n||[];r[e]=t;for(o=0;o<n.length;o++)s={},s[e]=n[o],i.push(s);this.addMarkers(r,i)},addMarkers:function(e,t){var n;t=t||[],this.createMarkers(e);for(n=0;n<t.length;n++)this.series.markers[n].setValues(t[n]||{})},removeMarkers:function(e){var t;for(t=0;t<e.length;t++)this.markers[e[t]].element.remove(),delete this.markers[e[t]]},removeAllMarkers:function(){var e,t=[];for(e in this.markers)t.push(e);this.removeMarkers(t)},latLngToPoint:function(e,t){var n,r=jvm.WorldMap.maps[this.params.map].projection,i=r.centralMeridian,s=this.width-this.baseTransX*2*this.baseScale,o=this.height-this.baseTransY*2*this.baseScale,u,a,f=this.scale/this.baseScale;return t<-180+i&&(t+=360),n=jvm.Proj[r.type](e,t,i),u=this.getInsetForPoint(n.x,n.y),u?(a=u.bbox,n.x=(n.x-a[0].x)/(a[1].x-a[0].x)*u.width*this.scale,n.y=(n.y-a[0].y)/(a[1].y-a[0].y)*u.height*this.scale,{x:n.x+this.transX*this.scale+u.left*this.scale,y:n.y+this.transY*this.scale+u.top*this.scale}):!1},pointToLatLng:function(e,t){var n=jvm.WorldMap.maps[this.params.map].projection,r=n.centralMeridian,i=jvm.WorldMap.maps[this.params.map].insets,s,o,u,a,f;for(s=0;s<i.length;s++){o=i[s],u=o.bbox,a=e-(this.transX*this.scale+o.left*this.scale),f=t-(this.transY*this.scale+o.top*this.scale),a=a/(o.width*this.scale)*(u[1].x-u[0].x)+u[0].x,f=f/(o.height*this.scale)*(u[1].y-u[0].y)+u[0].y;if(a>u[0].x&&a<u[1].x&&f>u[0].y&&f<u[1].y)return jvm.Proj[n.type+"_inv"](a,-f,r)}return!1},getInsetForPoint:function(e,t){var n=jvm.WorldMap.maps[this.params.map].insets,r,i;for(r=0;r<n.length;r++){i=n[r].bbox;if(e>i[0].x&&e<i[1].x&&t>i[0].y&&t<i[1].y)return n[r]}},createSeries:function(){var e,t;this.series={markers:[],regions:[]};for(t in this.params.series)for(e=0;e<this.params.series[t].length;e++)this.series[t][e]=new jvm.DataSeries(this.params.series[t][e],this[t])},remove:function(){this.label.remove(),this.container.remove(),jvm.$(window).unbind("resize",this.onResize)}},jvm.WorldMap.maps={},jvm.WorldMap.defaultParams={map:"world_mill_en",backgroundColor:"#505050",zoomButtons:!0,zoomOnScroll:!0,zoomMax:8,zoomMin:1,zoomStep:1.6,regionsSelectable:!1,markersSelectable:!1,bindTouchEvents:!0,regionStyle:{initial:{fill:"white","fill-opacity":1,stroke:"none","stroke-width":0,"stroke-opacity":1},hover:{"fill-opacity":.8},selected:{fill:"yellow"},selectedHover
:{}},markerStyle:{initial:{fill:"grey",stroke:"#505050","fill-opacity":1,"stroke-width":1,"stroke-opacity":1,r:5},hover:{stroke:"black","stroke-width":2},selected:{fill:"blue"},selectedHover:{}}},jvm.WorldMap.apiEvents={onRegionLabelShow:"regionLabelShow",onRegionOver:"regionOver",onRegionOut:"regionOut",onRegionClick:"regionClick",onRegionSelected:"regionSelected",onMarkerLabelShow:"markerLabelShow",onMarkerOver:"markerOver",onMarkerOut:"markerOut",onMarkerClick:"markerClick",onMarkerSelected:"markerSelected",onViewportChange:"viewportChange"};
jQuery.fn.vectorMap('addMap', 'world_mill_en',{"insets": [{"width": 900.0, "top": 0, "height": 727.3195534136593, "bbox": [{"y": -1557030.3082313733, "x": 297199.04349051707}, {"y": -475903.9510145, "x": 1635006.7745330364}], "left": 0}], "paths": {"2051": {"path": "M801.56,14.11l0.26,-0.06l0.29,0.16l0.24,0.05l1.18,-0.11l1.19,0.11l0.54,0.08l0.07,0.0l1.11,-0.02l0.02,-0.0l0.91,-0.07l0.96,-0.05l0.58,0.13l0.1,-0.08l0.0,0.02l0.72,-0.02l5.09,0.02l0.03,-0.0l0.85,-0.07l0.42,0.08l0.07,0.01l1.49,0.01l0.38,0.05l0.16,-0.01l0.32,-0.09l1.03,0.06l0.29,0.06l0.11,0.02l0.26,-0.03l0.2,-0.1l0.91,-0.01l0.05,-0.0l0.02,0.05l0.05,0.13l0.09,0.25l0.13,0.09l-0.01,0.01l1.68,2.35l0.0,0.08l0.1,0.26l0.16,0.18l0.23,0.27l0.24,0.31l0.0,0.0l0.92,1.14l0.73,1.12l0.02,0.03l0.73,0.93l0.02,0.02l0.12,0.14l0.27,0.3l0.07,0.06l0.21,0.15l0.21,0.6l0.05,0.1l2.71,3.88l0.25,0.52l0.1,0.13l0.33,0.27l0.02,0.08l0.05,0.17l0.06,0.12l0.09,0.13l0.79,1.15l0.06,0.07l0.42,0.37l0.12,0.33l0.11,0.3l0.09,0.14l0.67,0.69l0.39,0.56l0.04,0.1l0.24,0.54l0.03,0.06l2.88,4.2l0.2,0.33l0.38,0.61l0.03,0.04l0.51,0.64l0.25,0.44l0.07,0.13l0.11,0.12l0.27,0.2l0.28,0.62l0.05,0.08l0.99,1.28l0.08,0.04l0.32,0.69l0.04,0.06l2.2,3.08l0.76,1.06l0.2,0.28l0.04,0.05l0.22,0.36l0.02,0.02l1.98,2.73l0.12,0.17l0.29,0.41l0.0,0.01l0.57,0.77l0.13,0.11l0.07,0.04l0.16,0.35l0.04,0.07l0.62,0.86l1.09,1.52l0.68,1.0l0.27,0.4l0.02,0.02l0.7,0.88l0.22,0.4l0.06,0.11l0.09,0.17l0.02,0.03l1.17,1.7l0.15,0.28l0.02,0.04l0.15,0.16l0.19,0.11l0.48,0.7l0.5,0.71l0.11,0.29l0.12,0.17l0.3,0.25l0.64,0.86l0.14,0.18l0.12,0.11l0.02,0.01l0.21,1.14l0.27,1.51l0.0,0.0l0.19,1.05l0.15,0.98l0.04,0.28l0.01,0.11l0.11,0.97l0.07,0.18l0.11,0.16l0.12,0.59l0.08,0.38l0.0,0.78l0.01,0.1l0.23,0.92l0.78,4.02l0.04,0.43l0.06,0.69l0.02,0.09l0.17,0.5l0.03,0.1l0.08,0.46l0.04,0.12l0.09,0.16l0.04,0.07l0.17,1.45l0.02,0.18l0.0,0.02l0.25,1.52l0.0,0.01l0.26,1.31l0.76,4.39l0.01,0.22l0.04,0.67l0.08,0.08l0.27,1.25l0.07,0.83l0.01,0.06l0.19,0.81l0.03,0.13l0.07,0.29l0.01,0.25l0.01,0.13l0.01,0.06l0.04,0.22l0.11,0.58l0.77,4.22l0.2,1.11l0.0,0.59l0.01,0.09l0.49,2.09l0.08,1.02l0.02,0.3l0.01,0.05l0.37,1.86l0.07,0.16l0.34,0.46l0.19,0.26l0.15,0.13l0.17,0.08l-0.04,0.11l-0.01,0.25l0.11,0.39l-0.25,0.16l-0.17,0.22l-0.31,1.0l-0.51,0.4l-0.11,0.12l-0.26,0.47l-0.01,0.3l-0.74,0.0l-0.02,0.0l-0.55,0.03l-0.01,0.0l-0.38,0.03l-0.0,0.0l-0.71,0.06l-0.12,0.03l-0.8,0.32l-0.17,0.07l-0.04,0.02l-0.55,0.27l-0.15,0.12l-0.08,0.11l-0.03,0.03l-0.67,-0.01l-0.66,-0.01l-0.04,0.0l-0.34,0.03l-0.06,0.01l-0.34,0.08l-0.26,0.2l-0.34,0.61l-0.13,-0.01l0.1,-0.49l0.0,-0.12l-0.04,-0.33l-0.3,-0.34l-0.91,-0.23l-0.04,-0.01l-0.86,-0.12l-0.07,-0.0l-0.64,0.03l-0.08,0.01l-0.68,0.17l-0.12,0.05l-0.52,0.34l-0.21,0.02l-0.27,-0.15l-0.41,-0.42l-0.31,-0.12l-0.31,0.02l-0.28,-0.23l-0.27,-0.25l0.04,-0.16l0.34,-1.03l-0.14,-0.44l-0.44,-0.34l-0.2,-0.57l0.08,-0.3l0.01,-0.12l-0.06,-0.91l-0.13,-0.27l-0.49,-0.43l-0.15,-0.08l-0.55,-0.17l-0.06,-0.01l-1.09,-0.15l-0.21,-0.09l-0.33,-1.12l-0.25,-0.26l-0.76,-0.27l-0.24,-0.1l-0.27,-0.33l-0.24,-0.46l-0.15,-0.48l-0.18,-0.71l-0.02,-0.06l-0.24,-0.53l-0.21,-0.21l-0.56,-0.24l-0.38,0.03l-0.44,0.29l-0.07,0.06l-0.58,0.6l-0.16,0.14l-0.34,-0.0l-0.52,-0.44l-0.09,-0.49l-0.01,-0.03l-0.29,-1.14l-0.15,-0.22l-0.65,-0.46l-0.36,-0.06l-0.28,0.09l-0.16,-0.11l-0.1,-0.05l-0.52,-0.16l-0.01,-0.0l0.03,-0.1l0.01,-0.03l0.14,-0.77l-0.01,-0.18l-0.24,-0.86l-0.05,-0.11l-0.08,-0.12l-0.32,-0.48l-0.13,-0.12l-0.5,-0.3l-0.23,-0.06l-0.28,0.02l-0.01,-0.15l-0.38,-0.37l-0.75,-0.04l0.56,-0.14l0.22,-0.14l0.69,-0.9l-0.32,-0.64l-1.3,0.02l0.06,-0.04l0.7,-0.2l0.23,-0.17l0.39,-0.61l-0.13,-0.56l-0.45,-0.27l-0.21,-0.06l-0.55,0.01l0.35,-0.66l0.03,-0.08l0.21,-0.77l-0.45,-0.5l-0.2,0.03l-0.47,0.08l-0.08,-0.09l0.01,-0.13l0.14,-0.07l0.51,-0.04l0.06,0.08l0.04,0.09l0.64,0.15l0.59,-0.53l0.12,-0.38l-0.15,-0.72l-0.3,-0.2l0.11,-0.04l0.85,-0.69l0.14,-0.25l0.05,-0.33l-0.39,-0.46l-0.62,-0.01l-0.56,-0.03l0.1,-0.21l0.15,-0.3l-0.12,-0.5l-0.34,-0.25l-0.11,-0.06l-0.64,-0.22l0.76,-0.22l0.1,-0.04l0.69,-0.43l0.1,-0.09l0.32,-0.4l0.04,-0.44l-0.34,-0.65l-0.46,-0.2l-1.27,0.36l-0.35,0.08l-0.19,-0.27l0.59,-1.09l0.57,-0.41l0.15,-0.22l0.28,-0.99l0.01,-0.02l0.14,-0.65l-0.33,-0.48l-0.43,-0.07l0.4,-0.8l0.04,-0.14l0.12,-1.19l-0.0,-0.09l-0.14,-1.17l0.1,-0.44l-0.37,-0.49l-0.39,-0.02l-0.21,0.04l-0.43,0.22l-0.05,0.03l-0.32,0.23l-0.13,0.01l-0.15,-0.15l-0.07,-0.31l0.31,-0.72l0.41,-0.78l0.2,-0.22l0.07,-0.11l0.23,-0.54l0.0,-0.01l0.22,-0.56l0.43,-0.86l0.26,-0.46l0.21,-0.14l0.03,-0.02l0.48,-0.4l0.06,-0.06l0.31,-0.39l0.34,-0.37l0.06,-0.46l-0.13,-0.26l-0.28,-0.84l-0.03,-0.06l-0.24,-0.45l-0.03,-0.22l0.6,-0.22l0.14,-0.02l0.83,-0.11l0.1,-0.03l0.48,-0.2l0.14,-0.1l0.51,-0.57l0.1,-0.24l0.01,-0.23l0.1,-0.43l0.42,-0.21l0.04,-0.02l0.07,-0.05l0.14,0.4l0.01,0.03l0.2,0.46l0.04,0.07l0.25,0.35l0.55,0.1l0.39,-0.26l0.18,-0.32l0.01,-0.4l-0.07,-0.24l-0.29,-0.44l-0.15,-0.33l-0.07,-0.28l0.09,-0.35l-0.0,-0.22l-0.22,-0.7l-0.5,-0.26l-0.34,0.1l0.78,-0.87l0.04,-0.05l0.3,-0.45l0.07,-0.21l0.01,-0.56l-0.49,-0.4l-0.96,0.21l-0.12,0.05l-0.98,0.6l-0.1,0.09l-0.23,0.29l-0.57,0.52l-0.61,0.5l-0.76,0.57l-0.72,0.45l-0.05,0.04l-0.76,0.67l-0.02,0.02l-0.66,0.67l-0.04,0.05l-0.41,0.58l-0.5,0.59l-0.02,0.02l-0.36,0.5l-1.03,0.31l-0.8,0.23l-0.02,0.01l-0.62,0.22l-0.75,0.25l-1.07,0.27l-0.05,-0.07l-0.02,-0.78l0.05,-0.16l0.01,-0.19l-0.09,-0.53l-0.04,-0.12l-0.33,-0.6l-0.01,-0.01l-0.18,-0.31l0.07,0.07l0.52,0.04l0.44,-0.33l0.15,-0.23l0.17,-0.69l0.38,0.01l0.39,-0.52l-0.31,-1.04l-0.21,-0.25l-0.57,-0.27l-0.17,-0.04l-0.72,-0.01l-1.1,-0.28l-0.07,-0.01l-0.96,-0.08l-1.09,-0.22l-0.95,-0.79l-0.03,-0.02l-0.47,-0.32l-0.03,-0.02l-0.48,-0.27l-0.23,-0.05l-0.67,0.06l-1.09,-1.1l-0.38,-0.11l-0.26,0.07l-0.67,-0.28l-0.84,-0.93l-0.0,-0.0l-0.46,-0.5l-0.6,-0.78l-0.41,-0.57l-0.3,-0.47l-0.22,-0.35l-0.35,-0.19l-0.25,0.01l-0.83,-1.62l-0.05,-0.08l-0.69,-0.78l-0.0,-0.0l-0.43,-0.48l-0.75,-1.08l-0.85,-1.35l-0.61,-1.04l-0.2,-0.35l-0.15,-0.63l-0.01,-0.05l-0.23,-0.62l-0.04,-0.07l-0.47,-0.74l-0.21,-0.16l-0.49,-0.17l-0.08,-0.02l-0.25,-0.03l-0.09,-0.16l0.17,-0.13l0.08,-0.08l0.35,-0.47l-0.24,-0.63l-0.96,-0.2l-0.12,-0.01l-0.66,0.07l-1.08,-0.55l-1.14,-1.11l-1.55,-1.76l0.13,-0.81l0.0,-0.05l0.01,-0.62l0.09,-0.57l0.33,-0.62l-0.02,0.16l-0.0,0.04l-0.03,0.77l-0.13,0.42l0.19,0.46l0.49,-0.07l0.55,-0.59l0.11,-0.26l0.04,-1.07l0.13,-0.61l0.01,-0.06l0.06,-1.28l-0.03,-0.18l-0.6,-1.41l-0.04,-0.07l-0.64,-0.91l-0.88,-1.46l-0.01,-0.01l-1.14,-1.72l-0.0,-0.0l-0.36,-0.53l-0.53,-1.31l0.23,-1.55l0.4,-0.53l0.07,-0.15l0.29,-1.26l0.01,-0.13l-0.08,-0.72l-0.03,-0.03l-0.16,-1.3l-0.03,-0.12l-0.19,-0.41l-0.25,-0.97l-0.06,-0.85l-0.01,-1.07l0.13,-0.61l-0.01,-0.19l-0.02,-0.07ZM826.82,61.18l-0.31,-0.18l-0.3,-0.0l-0.1,-0.22l-0.0,-0.0l0.32,-0.02l0.18,-0.16l-0.02,0.15l0.12,0.34l0.1,0.1Z", "name": "Water body"}, "2050": {"path": "M484.65,460.78l-1.01,-0.12l-0.64,-0.34l0.17,-0.51l0.68,-0.97l0.01,-0.01l0.48,-0.72l0.65,-0.7l0.08,-0.14l0.31,-0.84l0.4,-0.33l0.11,-0.15l0.63,-1.4l0.98,-0.88l-0.0,-0.05l0.09,-0.03l0.15,-0.14l0.1,-0.14l0.39,-0.94l0.54,-0.44l0.79,-0.32l0.07,-0.04l1.0,-0.65l0.8,-0.52l0.84,-0.52l0.03,-0.02l0.55,-0.41l0.98,-0.67l1.2,-0.68l0.01,-0.01l0.83,-0.5l0.02,-0.01l0.74,-0.51l0.02,-0.01l0.39,-0.3l0.64,-0.51l0.01,-0.01l0.72,-0.6l1.45,-0.8l0.01,-0.0l0.35,-0.2l0.07,-0.05l0.49,-0.44l0.75,-0.32l0.1,-0.06l0.79,-0.65l0.14,-0.22l0.16,-0.69l0.01,-0.1l-0.03,-0.75l-0.04,-0.16l-0.32,-0.66l-0.42,-0.96l-0.24,-0.59l0.05,-0.15l-0.11,-0.5l-0.02,-0.08l-0.04,-0.08l0.5,-0.59l0.09,-0.29l-0.09,-0.91l-0.0,-0.04l-0.17,-0.93l-0.05,-0.46l-0.03,-0.76l-0.01,-0.07l-0.08,-0.38l-0.09,-0.17l-0.82,-0.97l-0.34,-0.58l-0.04,-0.05l-0.54,-0.65l-0.01,-0.01l-0.71,-0.79l-0.03,-0.03l-0.86,-0.75l-0.02,-0.02l-0.94,-0.7l0.32,-0.63l0.03,-0.08l0.18,-0.73l0.01,-0.08l0.04,-0.9l0.16,-0.77l0.65,-0.94l0.01,-0.02l0.32,-0.52l0.01,-0.02l0.55,-0.99l1.39,-0.94l0.4,-0.05l0.06,0.04l0.27,0.09l1.24,-0.06l0.41,0.35l0.06,0.04l0.68,0.38l0.09,0.04l0.8,0.23l0.64,0.58l0.45,0.6l0.41,0.15l0.41,-0.1l1.17,-0.15l0.25,0.32l0.25,0.15l1.23,0.2l1.25,0.48l0.1,0.02l1.85,0.17l0.98,0.28l0.18,0.01l1.34,-0.25l1.09,-0.19l0.12,-0.04l0.41,-0.21l0.05,-0.03l0.48,-0.35l0.03,-0.03l0.46,-0.42l0.01,-0.01l0.53,-0.52l0.06,-0.08l0.46,-0.78l0.01,-0.01l0.39,-0.7l0.37,-0.62l0.48,-0.7l0.01,-0.02l0.28,-0.45l4.44,0.26l0.09,-0.0l1.93,-0.32l3.03,-0.34l0.04,-0.01l1.06,-0.23l0.0,-0.0l4.28,-0.99l0.09,-0.03l2.95,-1.44l0.13,-0.1l2.05,-2.39l4.22,-4.23l2.96,-2.6l4.24,-2.32l2.88,-1.48l1.43,-0.74l0.14,-0.12l2.53,-3.42l3.19,-3.49l0.07,-0.11l1.51,-3.45l0.89,-1.5l2.87,-1.66l4.3,-0.89l0.08,-0.02l0.0,-0.0l4.7,-1.03l0.01,-0.0l2.33,-0.58l2.24,0.13l0.18,-0.03l4.83,-2.06l0.02,-0.01l5.35,-2.72l0.0,-0.0l4.55,-2.33l0.16,-0.16l2.16,-3.74l0.05,-0.18l0.1,-2.33l-0.0,-0.06l-0.38,-3.33l0.02,-1.0l-0.4,-0.41l-0.16,0.0l-0.05,-0.38l-0.26,-1.89l0.63,-1.52l0.03,-0.2l-0.3,-2.82l-0.02,-0.09l-0.69,-2.0l-0.26,-2.39l-0.05,-0.15l-1.11,-2.03l-0.01,-0.02l-1.62,-2.55l-0.1,-2.13l-0.0,-0.05l-0.81,-4.91l0.43,-1.75l0.01,-0.07l0.17,-3.12l-0.0,-0.06l-0.06,-0.62l-0.19,-1.99l-0.01,-0.05l-0.5,-2.12l-0.03,-0.09l-0.87,-1.72l-0.01,-0.02l-0.38,-0.64l-0.0,-0.0l0.42,-0.4l2.74,-1.51l1.99,-0.99l1.52,0.01l2.79,0.74l0.07,0.01l2.57,0.19l0.21,-0.04l2.75,-1.36l2.08,-0.92l0.01,-0.01l3.01,-1.47l2.79,-1.07l0.03,-0.01l2.06,-0.99l1.92,0.08l2.66,0.62l0.01,0.0l3.04,0.6l0.04,0.01l2.85,0.23l0.04,0.0l1.35,-0.02l0.1,-0.01l0.49,-0.13l0.62,0.22l0.02,0.01l1.63,0.49l0.11,0.02l0.09,0.0l0.74,0.08l0.04,0.0l1.1,0.02l0.06,-0.0l3.61,-0.47l2.22,-0.12l0.02,-0.0l1.27,-0.12l3.22,-0.08l3.55,0.17l0.02,0.0l4.28,-0.06l1.88,-0.0l2.11,-0.0l0.01,-0.0l4.17,-0.15l0.04,-0.0l3.23,-0.4l0.67,1.62l0.02,0.04l1.64,2.9l0.01,0.01l1.47,2.38l1.17,2.17l1.52,2.97l0.04,0.06l1.36,1.81l0.4,0.52l0.29,0.16l0.81,0.06l0.32,0.04l0.38,0.04l1.86,0.46l2.12,0.68l2.41,1.49l1.61,2.41l1.62,3.19l0.84,1.97l0.27,0.63l0.03,0.06l1.16,1.82l0.69,1.58l-0.25,1.21l-0.27,1.29l-0.01,0.1l0.05,1.1l0.0,0.0l0.09,1.6l0.03,0.6l0.0,0.03l0.03,0.21l0.0,0.03l0.21,1.15l0.07,0.17l1.39,1.86l0.05,0.05l0.61,0.56l1.23,1.14l0.08,0.06l1.84,0.99l0.14,0.05l0.5,0.06l1.46,0.39l0.95,0.26l0.19,0.41l0.3,0.64l0.01,0.02l1.87,3.4l0.29,2.06l-0.35,2.03l-0.82,2.2l-1.08,1.91l-1.08,1.8l-0.02,0.04l-0.99,2.23l-1.49,2.93l-0.72,0.9l-0.04,0.05l-1.08,1.89l-0.03,0.06l-0.74,2.1l-0.02,0.12l-0.06,2.15l0.0,0.03l0.01,0.24l0.1,2.04l0.0,0.04l0.23,1.46l0.17,1.04l-0.48,2.29l-1.9,1.4l-0.92,0.63l-0.05,0.04l-2.28,2.14l-0.0,0.0l-2.17,2.07l-0.04,0.04l-2.02,2.61l-0.01,0.01l-1.05,1.44l-0.01,0.02l-1.64,2.58l-0.93,1.17l-1.01,1.27l-2.31,2.91l-0.01,0.01l-1.46,1.94l-1.36,1.28l-0.01,0.01l-1.33,1.3l-0.03,0.03l-3.4,4.03l-2.26,2.0l-2.31,1.88l-0.04,0.04l-2.8,3.11l-0.01,0.02l-2.2,2.7l-0.04,0.07l-0.8,1.52l-0.2,0.39l-0.01,0.35l0.69,1.55l1.39,3.22l0.45,1.93l0.01,0.04l0.5,1.41l0.04,0.09l2.66,3.99l0.83,1.66l0.08,0.11l2.54,2.39l0.02,0.02l0.73,0.59l0.41,0.06l0.93,-0.41l0.08,-0.04l1.1,-0.81l0.05,-0.04l0.38,-0.38l0.87,-0.8l0.05,-0.06l0.72,-1.0l0.81,-0.92l0.07,-0.1l0.34,-0.77l0.66,-0.95l0.74,-1.02l1.73,-0.41l1.55,0.48l1.72,1.28l0.89,1.49l0.05,0.07l2.09,2.25l0.05,0.05l2.39,1.83l1.64,1.68l0.01,0.01l1.14,1.11l2.55,3.1l1.19,2.31l-0.24,2.6l-0.24,1.84l-0.0,0.01l-0.21,2.09l0.03,0.2l0.88,2.05l0.18,1.45l0.26,2.78l0.03,0.12l0.75,1.72l0.01,0.02l1.0,1.97l0.56,1.8l-0.07,1.83l0.17,0.34l1.1,0.78l-0.57,0.56l-0.29,0.29l-0.17,0.17l-0.05,0.05l-0.08,0.1l-0.04,0.09l-0.16,0.32l-0.17,0.07l-0.06,0.03l-0.14,0.1l-2.95,3.3l-0.02,0.02l-0.98,1.27l-0.02,0.03l-0.48,0.77l-0.04,0.06l-0.03,0.05l-0.01,0.03l-0.29,0.69l-0.0,0.0l-0.16,0.39l-0.27,0.32l-0.08,0.16l-0.17,0.64l-0.3,1.16l-0.59,1.72l-0.02,0.09l-0.07,0.63l-0.1,0.87l-0.0,0.06l0.01,0.26l0.06,1.3l0.0,0.04l0.1,0.68l0.08,0.54l0.06,0.15l0.03,0.04l0.11,0.18l0.0,0.04l0.0,0.02l0.12,1.71l0.05,0.71l0.02,-0.0l-0.02,0.06l0.33,1.5l0.12,0.53l0.01,0.04l0.61,1.84l0.06,0.17l0.03,0.06l0.49,0.91l0.41,0.76l0.02,0.03l0.28,0.53l0.1,0.12l0.11,0.09l0.17,0.14l0.03,0.02l0.07,0.41l-0.06,0.34l-0.0,0.02l-0.14,0.27l-0.03,0.06l-0.02,0.04l-0.3,0.33l-0.22,0.08l-0.23,0.09l-0.14,0.09l-0.01,0.01l-0.14,0.14l-1.44,0.13l-2.16,-0.46l-0.12,-0.02l-0.24,-0.05l-0.07,-0.01l-0.67,-0.02l-0.03,0.0l-0.09,0.0l-0.22,0.08l-0.19,0.15l-0.0,0.0l-0.45,0.34l-0.07,0.01l-0.02,0.0l-0.15,0.03l-0.53,-0.2l-0.35,0.03l-0.27,0.16l-0.05,0.03l-0.04,0.0l-0.87,0.0l-0.32,0.17l-0.16,0.22l-0.07,0.09l-0.07,0.24l0.0,0.01l0.0,0.11l0.0,1.19l-0.15,0.02l-0.01,0.0l-0.01,0.0l-0.0,0.0l-0.12,0.02l-0.09,0.02l-0.3,0.11l-0.18,0.07l-0.15,0.06l-0.11,0.04l-0.11,0.06l-0.7,0.56l-0.12,0.16l-0.33,0.77l-0.55,0.62l-0.61,0.2l-0.0,0.0l-0.07,0.02l-0.08,0.03l-0.28,0.4l0.0,0.08l-0.02,0.0l-0.63,0.02l-0.07,0.01l-0.49,0.11l-0.3,0.07l-0.14,0.06l-0.27,0.18l-0.2,0.13l-0.12,0.13l-0.29,0.48l-0.16,0.26l-0.06,0.19l-0.02,0.68l-0.02,0.61l-0.14,0.33l-0.06,0.14l-0.03,0.11l-0.19,1.68l-0.28,0.47l-0.84,0.17l-0.53,0.11l-0.3,0.06l-0.12,0.05l-0.72,0.42l-0.14,0.13l-0.32,0.5l-0.33,0.52l-0.05,0.12l-0.25,0.96l-0.05,0.06l-0.52,0.58l-0.09,0.19l-0.05,0.26l-0.05,0.26l-0.0,0.12l0.04,0.37l0.03,0.24l0.42,0.35l0.51,-0.03l0.5,-0.03l0.12,0.07l0.11,0.15l0.06,0.09l0.08,0.28l0.14,0.49l-0.06,0.46l-0.02,0.18l-0.06,0.51l0.35,0.45l0.4,0.05l0.31,0.04l-0.01,0.24l0.04,0.19l0.05,0.11l-0.35,0.15l-0.47,0.2l-0.18,0.16l-0.28,0.45l-0.32,0.52l-0.04,0.07l-0.1,0.27l-0.05,0.14l-0.0,0.27l0.12,0.36l0.11,0.17l0.16,0.14l0.17,0.16l0.57,1.0l0.04,0.66l-0.03,0.09l-0.04,0.11l-0.02,0.01l-0.9,0.46l-0.55,0.1l-0.05,0.01l-0.23,0.14l-0.55,0.66l-0.09,0.2l-0.05,0.38l-0.01,0.07l-0.19,0.51l-0.14,0.38l0.01,0.3l0.35,0.76l-0.03,0.05l-0.21,0.36l-0.04,0.29l0.12,0.49l-0.0,0.02l-0.05,0.19l-0.07,0.1l-0.1,0.15l-0.1,0.01l-0.17,0.06l-0.53,0.35l-0.17,0.26l-0.01,0.07l-0.03,0.17l-0.49,0.47l-0.08,0.1l-0.0,0.0l-0.03,0.06l-0.5,0.91l-0.04,0.28l0.13,0.54l-0.08,0.17l-0.08,0.18l-0.49,0.05l-0.23,0.1l-0.29,0.27l-0.4,-0.02l-0.31,0.12l-0.39,0.4l-0.3,0.01l-0.47,-0.19l-0.17,-0.13l-0.77,-0.62l-0.52,0.02l-0.44,0.4l-0.21,0.19l-0.69,0.16l-0.0,-0.0l-0.08,-0.0l-0.37,-0.01l-0.16,-0.0l-0.37,0.22l-0.22,0.44l-0.25,0.23l-0.09,0.48l0.5,0.96l-0.13,1.28l-0.06,0.57l-0.45,0.51l-0.02,0.49l-0.44,-0.01l-0.85,-0.01l-0.09,0.01l-0.97,0.2l-0.9,0.19l-0.9,-0.17l-0.26,0.04l-0.5,0.26l-0.21,0.27l-0.17,0.8l0.0,0.18l0.08,0.33l-1.26,-0.17l-0.32,-0.28l-0.03,-0.03l-0.16,-0.09l-0.28,-0.07l-0.31,-0.3l-0.34,-0.33l-0.06,-0.05l-1.23,-0.82l-0.14,-0.1l-0.06,-0.04l-0.06,-0.03l-0.15,-0.06l-0.53,-0.23l-0.18,-0.03l-0.54,0.03l-0.15,0.01l-0.0,0.0l-0.01,0.0l-0.27,0.12l-0.18,0.19l-0.52,0.55l-0.33,-0.01l-0.18,-0.01l-0.25,0.07l-0.3,0.21l-0.23,-0.3l-0.03,-0.04l-0.21,-0.29l-0.21,-0.15l-0.01,-0.0l-0.66,-0.2l-0.11,-0.03l-0.0,-0.0l-0.3,-0.09l-0.13,-0.02l-0.32,0.01l-0.53,0.02l-0.38,-0.07l-0.23,-0.04l-0.27,-0.05l-0.09,-0.04l-0.44,-0.22l-0.02,-0.04l-0.05,-0.09l-0.0,-0.0l-0.03,-0.05l-0.0,-0.01l-0.07,-0.08l-0.9,-0.88l-0.11,-0.07l-0.64,-0.31l-0.21,-0.04l-0.71,0.06l-0.23,0.09l-0.43,0.36l-0.21,0.18l-0.1,0.13l-0.4,0.81l-0.21,0.14l-0.03,-0.0l-0.36,-0.01l-0.14,-0.0l-0.09,-0.0l-0.01,-0.0l-0.12,0.0l-0.03,0.0l-0.25,0.02l-0.49,0.04l-0.04,0.04l-0.43,-0.11l-0.03,-0.13l-0.06,-0.3l0.0,-0.08l0.05,-1.28l0.03,-0.83l0.0,-0.05l0.0,-0.0l0.0,-0.01l0.0,-1.11l0.0,-1.73l0.01,-2.18l0.35,-1.85l0.05,-0.26l0.0,-0.14l-0.0,-0.0l-0.0,-0.0l-0.07,-0.37l-0.11,-0.21l-0.0,-0.0l-0.0,-0.0l-0.67,-0.68l-0.2,-0.2l-0.41,-0.41l-0.71,-1.02l-0.12,-0.11l-0.13,-0.08l-0.28,-0.18l-0.24,-0.06l-0.26,0.02l-0.22,0.08l-0.15,0.12l-0.22,-0.06l-0.05,-0.01l-0.16,-0.03l-0.73,-0.12l-0.13,-0.13l-0.38,-0.1l-0.48,0.12l-0.2,0.12l-0.71,0.79l-0.73,0.55l-0.62,0.47l-0.08,0.06l-0.05,0.04l-0.43,0.45l-0.02,-0.01l-0.43,0.02l-0.1,0.07l-0.2,-0.01l-0.02,-0.0l-0.06,-0.01l-0.09,-0.12l-0.35,-0.16l-0.24,0.02l-0.21,0.08l-0.1,0.07l-0.51,-0.15l-0.83,-0.24l-0.01,-0.0l-0.0,-0.0l-0.0,-0.0l-0.05,-0.01l-0.04,-0.01l-0.05,-0.01l-0.44,0.26l-0.0,0.0l-0.01,0.02l-1.57,-1.21l-0.02,-0.03l-0.06,-0.08l-0.01,-0.04l-0.36,-2.05l0.19,-0.94l0.0,-0.16l-0.04,-0.2l-0.07,-0.43l-0.06,-0.15l-0.02,-0.03l-0.0,-0.0l-0.19,-0.3l-0.0,-0.01l-0.11,-0.18l-0.13,-0.13l-0.01,-0.01l-0.0,-0.0l-0.2,-0.12l-0.08,-0.05l-0.51,0.07l-0.19,0.21l-0.0,0.0l-0.01,0.01l-0.09,0.16l-0.02,0.08l-0.21,-0.23l-0.84,-1.91l-0.05,-0.12l-0.14,-0.17l-1.47,-0.98l-0.47,0.02l-0.23,0.17l-0.29,-0.24l-0.0,-0.0l-0.26,-0.1l-0.18,0.0l-0.23,-0.35l-0.0,-0.0l-0.01,-0.02l-0.05,-0.07l-0.56,-0.55l-0.03,-0.27l-0.05,-0.14l-0.44,-0.82l0.1,-0.13l-0.0,-0.48l-0.08,-0.11l-0.14,-0.18l0.04,-0.12l0.25,-0.16l0.19,-0.38l-0.0,-0.01l-0.0,-0.0l-0.02,-0.16l-0.01,-0.1l-0.03,-0.29l0.69,-1.73l0.92,-2.3l0.02,-0.2l-0.0,-0.0l-0.0,-0.01l-0.0,-0.02l-0.01,-0.04l-0.08,-0.29l-0.0,-0.0l-0.0,-0.01l-0.0,-0.01l-0.08,-0.16l-0.18,-0.21l-0.06,-0.07l-0.0,-0.0l-0.0,-0.0l-0.01,-0.02l-0.0,-0.0l-0.13,-0.11l-0.25,-0.12l-1.25,-0.62l-0.08,-0.03l-0.26,-0.06l-0.35,-0.28l-0.05,-0.07l-0.01,-0.01l-0.29,-0.4l-0.12,-0.17l-0.18,-0.14l-0.01,-0.0l-0.0,-0.0l-0.07,-0.03l-0.05,-0.02l-0.31,0.02l-0.25,0.12l-0.11,0.05l-0.03,-0.0l-0.25,-0.28l-0.13,-0.1l-0.13,-0.06l-0.0,-0.0l-0.0,-0.0l-0.02,-0.01l-0.14,-0.05l-0.2,-0.02l-0.43,0.07l-0.21,0.1l-0.31,0.29l-0.02,0.02l-0.01,0.01l-0.09,0.16l-0.11,-0.17l-0.14,-0.14l-0.69,-0.41l-0.24,-0.43l-0.01,-0.01l-0.57,-0.94l-0.17,-0.16l-0.33,-0.16l-0.19,-0.04l-0.37,0.02l-0.01,0.0l-0.0,0.0l-0.09,0.01l-0.3,0.02l-0.53,-0.4l-0.23,-0.19l-0.28,-0.5l-0.01,-0.02l-0.0,-0.0l-0.14,-0.27l-0.09,-0.11l-0.01,-0.01l-0.37,-0.34l-0.22,-0.1l-0.01,-0.0l-0.0,-0.0l-0.32,-0.04l-0.13,-0.02l-0.22,-0.03l-0.04,-0.0l-0.02,-0.0l-0.15,-0.3l0.03,-0.86l-0.06,-0.23l-0.17,-0.26l-0.0,-0.0l-0.0,-0.01l-0.15,-0.14l-0.88,-0.44l-0.63,-0.32l-0.19,-0.04l0.0,-0.0l-0.0,0.0l-0.0,0.0l-0.01,-0.0l-0.01,0.0l0.0,0.01l-0.36,0.25l-0.1,0.27l-0.01,0.0l-1.22,-0.38l-0.1,-0.02l-0.02,-0.0l-0.27,-0.01l-1.93,-1.66l0.49,-1.42l0.01,-0.04l0.02,-0.11l0.02,-0.39l0.02,-0.22l-0.03,-0.19l-0.43,-0.99l-0.0,-0.28l-0.0,-0.3l-0.0,-0.21l-0.0,-0.24l-0.01,-0.37l-0.1,-0.26l-0.18,-0.2l-0.36,-0.4l-0.17,-0.11l-0.38,-0.13l-0.09,-0.03l-0.27,-0.42l-0.17,-0.15l-0.52,-0.24l-0.5,0.14l-0.19,0.28l-0.06,0.16l-0.15,0.94l-0.11,0.67l-0.0,0.03l-0.13,1.53l-0.1,1.12l-0.04,0.5l0.01,0.14l0.08,0.3l-0.3,0.36l0.09,1.56l-0.19,0.94l0.0,0.17l0.19,0.83l-0.41,1.79l-0.27,1.18l-0.01,0.04l-0.02,0.19l-0.0,0.0l-0.0,0.01l-0.11,0.88l-0.1,0.33l-0.37,0.38l-0.03,0.03l-0.1,0.18l-0.03,0.13l-0.1,0.44l-0.01,0.06l-0.1,1.47l-0.21,0.17l-0.33,0.27l-0.09,0.1l-0.25,0.42l-0.05,0.09l-0.88,0.19l-0.09,0.03l-0.12,0.06l-0.01,0.01l-0.0,0.0l-0.01,0.0l-0.43,0.21l-0.35,0.17l-0.03,0.02l-0.08,0.05l-0.0,0.0l-0.03,0.02l-0.28,0.28l-0.11,0.21l-0.0,0.01l-0.0,0.0l-0.1,0.56l-0.25,0.0l-0.97,-1.0l-0.05,-0.05l-0.32,-0.12l-1.14,0.09l-0.42,0.03l-0.0,0.0l-1.08,0.09l-0.1,0.02l-0.33,0.12l-2.26,0.09l-0.29,0.01l-0.42,0.02l-0.06,0.01l-0.01,0.0l-1.37,0.24l-0.17,0.01l-1.13,0.04l-0.05,0.0l-0.09,0.01l-0.02,0.01l-0.6,0.16l-0.0,0.0l-1.44,0.14l-0.38,0.04l-1.82,0.17l-1.88,0.18l-0.43,0.04l-2.66,0.25l-0.6,0.06l-0.01,0.0l-0.0,0.0l-0.1,0.01l-0.18,-0.14l-0.64,-0.77l-0.48,-0.58l-1.62,-1.97l0.38,-0.33l-0.0,-0.01l0.0,-0.27l-0.0,-0.03l-0.01,-0.17l0.09,-0.22l-0.0,-0.04l0.27,-0.79l-0.04,-0.34l-0.12,-0.19l-0.06,-0.96l-0.0,-0.08l-0.32,-0.37l-0.08,-0.02l-0.1,-0.02l-0.09,-0.15l-0.0,-0.01l-0.0,-0.17l-0.05,-0.2l-0.1,-0.17l0.01,-0.02l0.06,-0.17l0.45,-0.5l0.09,-0.36l-0.04,-0.16l-0.02,-0.07l-0.11,-0.19l-0.02,-0.02l-0.0,-0.0l-0.07,-0.07l-0.26,-0.12l-0.4,-0.02l-0.01,-0.04l0.12,-0.59l-0.21,-0.44l-0.16,-0.08l-0.16,-0.09l-0.01,-0.0l-0.25,-0.12l-0.13,-0.04l-0.1,-0.01l-0.33,-0.06l-0.0,-0.0l-0.03,-0.0l-0.01,-0.0l-0.35,0.11l-0.12,0.12l-0.32,0.31l-0.65,0.63l-0.1,0.1l-0.01,0.01l-0.01,0.01l-0.14,0.15l-0.09,0.13l-0.11,0.27l-0.13,0.11l-0.59,0.5l-0.05,0.05l-0.0,0.0l-0.29,0.34l-0.06,0.07l-0.18,0.21l-0.76,0.65l-0.53,0.46l-0.67,0.57l-0.04,0.03l-0.68,0.52l-0.06,0.04l-0.09,0.1l-0.01,0.02l-0.0,0.0l-0.16,0.25l-0.07,0.03l-0.05,0.02l-0.0,0.0l-0.05,0.02l-0.12,0.08l-0.01,0.01l-0.0,0.0l-1.24,1.2l-0.06,0.05l-0.94,0.74l-0.0,0.0l-0.15,0.12l-1.03,0.82l-0.33,0.26l-0.1,0.12l-0.01,0.01l-0.69,1.21l-0.5,0.11l-0.18,0.09l-0.23,0.19l-2.05,1.74l-0.08,0.1l-0.99,1.64l-0.21,0.35l-0.11,0.17l-0.32,0.21l-0.31,0.2l-0.06,0.05l-0.01,0.01l-0.0,0.0l-0.9,0.9l-0.67,0.67l-0.06,0.06l-0.25,0.13l-0.1,0.08l-0.09,0.09l-0.0,0.0l-0.35,0.36l-0.73,0.77l-0.01,0.01l-0.12,0.13l-0.02,0.03l-0.32,0.43l-0.0,0.0l-0.01,0.01l-0.0,0.0l-0.09,0.13l-0.17,0.23l-0.15,0.21l-0.12,0.13l-0.47,0.51l-0.06,0.07l-0.48,-0.2l-0.06,-0.04l-0.5,-0.33l-0.25,-0.17l-0.2,-0.07l-2.63,-0.11l-0.27,-0.06l-0.26,-0.27l-0.05,-0.05l-0.14,-0.1l-0.29,-0.11l-0.52,0.24l-0.02,0.06l-0.04,-0.01l-0.15,0.01l-0.24,-0.23l-0.11,-0.03l-0.2,-0.05l-0.29,-0.23l-0.0,-0.0l-0.08,-0.06l-0.05,-0.04l-0.6,0.12l-0.4,0.71l-0.04,0.11l-0.05,0.2l-0.2,0.85l-0.39,0.69l-0.01,0.03l0.07,0.48l0.32,0.32l0.01,0.02l-0.04,0.13l-0.32,0.33l-0.29,0.3l-0.07,0.09l-0.11,0.22l-0.08,0.15l-0.07,0.12l-0.05,0.16l-0.09,1.24l-0.0,0.01l-0.33,0.81l0.01,0.32l0.26,0.57l-0.14,0.13l-0.11,0.41l0.27,0.89l0.05,0.15l-0.08,0.06l-0.12,0.09l-0.13,0.5l0.02,0.04l0.09,0.19l-0.03,0.25l-0.01,0.07l-0.01,0.06l-0.01,0.0l-0.23,0.04l-0.25,0.15l-0.17,0.23l-0.07,0.16l-0.13,0.6l-0.33,0.78l-0.03,0.17l0.01,0.37l0.0,0.02l-0.54,1.02l-0.19,0.36l-0.04,0.1l-0.51,2.33l-0.02,0.03l-0.0,0.0l-0.4,0.69l-0.04,0.3l0.03,0.11l-0.45,1.98l-0.12,0.53l-0.09,0.39l-0.02,0.07l-0.02,0.02l-0.19,0.06l-0.16,0.15l-0.02,-0.0l-0.14,-0.2l-0.3,-0.18l-0.21,-0.02l-0.35,0.15l-0.09,0.11l-0.23,-0.07l-0.09,-0.03l-0.04,-0.01l-0.28,0.02l-0.49,0.21l-0.19,-0.41l-0.11,-0.14l-0.3,-0.24l-0.38,-0.57l-0.42,0.07l0.0,-0.01l0.38,-1.12l0.02,-0.14l-0.02,-0.73l0.05,-0.38l0.31,-1.19l0.16,-0.47l0.6,-1.46l0.0,-0.01l0.17,-0.46l0.03,-0.15l-0.02,-1.24l0.29,-0.58l0.03,-0.1l0.23,-1.13l0.0,-0.03l0.09,-0.75l0.0,-0.04l0.05,-1.55l0.12,-0.78l0.0,-0.09l-0.1,-1.72l0.02,-0.67l0.0,-0.02l-0.05,-2.55l0.1,-1.45l-0.01,-0.1l-0.19,-0.98l0.37,-1.22l-0.08,-0.37l-0.59,-0.71l0.46,-1.24l0.02,-0.09l0.4,-3.05l0.0,-0.01l0.23,-2.24l0.76,-4.01l0.61,-3.14l0.27,-0.87l0.75,-1.57l0.8,-1.42l0.01,-0.02l0.67,-1.32l0.61,-0.87l0.01,-0.01l0.81,-1.25l0.88,-0.76l0.1,-0.13l0.06,-0.13l0.71,-0.77l1.34,-1.2l0.0,-0.0l0.99,-0.89l1.21,-0.59l0.02,-0.01l0.23,-0.13l0.0,-0.0l1.0,-0.55l0.07,-0.05l1.25,-1.06l0.06,-0.06l0.62,-0.8l0.04,-0.06l0.5,-0.94l0.04,-0.12l0.18,-0.98l0.0,-0.14l-0.21,-1.21l-0.02,-0.27l-0.08,-1.06l-0.0,-0.02l-0.17,-1.25l-0.0,-0.0l-0.02,-0.16l-0.03,-2.08l0.44,-0.89l0.03,-0.07l0.41,-1.5l0.74,-1.22l0.03,-0.07l0.62,-1.75l0.6,-1.6l0.02,-0.09l0.2,-1.64l0.3,-0.72l0.03,-0.1l0.19,-1.45l0.0,-0.05l-0.01,-1.16l-0.07,-0.22l-0.57,-0.86l0.28,-1.08l-0.08,-0.36l-1.29,-1.5l0.13,-0.6l-0.11,-0.36l-1.73,-1.73l-0.0,-0.0l-0.81,-0.8l-0.01,-0.01l-1.73,-1.57l-0.03,-0.03l-0.25,-0.19l-1.34,-0.99l-0.57,-0.42l-1.24,-1.12l-0.97,-0.98l-0.01,-0.01l-0.24,-0.22l-1.18,-1.1l-0.91,-1.26l-0.03,-0.03l-0.98,-1.09l-1.13,-1.67l-0.07,-0.08l-1.04,-0.87l-0.45,-0.95l-0.06,-0.09l-0.7,-0.82l-0.01,-0.01l-0.93,-0.99l-0.02,-0.02l-0.83,-0.75l-1.09,-1.19l-0.72,-0.93l-0.08,-0.08l-1.27,-0.93l-1.31,-1.09l-0.13,-0.07l-1.7,-0.57l-0.02,-0.01l-0.99,-0.26l-0.04,-0.01l-2.02,-0.3l-1.84,-0.48l-0.02,-0.0l-2.46,-0.52l-0.08,-0.01l-1.85,-0.01l-1.57,-0.06l-1.95,-0.36l-0.06,-0.01l-1.46,-0.05l-0.01,-0.0l-0.92,-0.01l-0.68,-0.01l-1.38,-0.09l-0.1,0.01l-1.88,0.36l-1.6,-0.02l-0.09,0.01l-1.73,0.39l-1.28,0.08l-0.02,0.0l-1.48,0.18l-0.02,0.0l-0.93,0.17l-0.06,0.02l-0.23,0.08l-1.03,0.36l-1.41,0.37l-0.1,0.04l-1.33,0.76l-1.62,0.62l-0.02,0.01l-0.76,0.33l-0.04,0.02l-0.84,0.5l-0.06,0.06Z", "name": "Taraba"}, "2053": {"path": "M266.67,228.18l-0.44,0.54l-0.52,0.53l-0.3,0.29l-0.6,0.5l-0.79,0.33l-1.14,0.16l-0.36,-0.01l0.05,-0.6l-0.03,-0.18l-0.92,-2.37l-0.99,-2.58l-0.03,-0.06l-1.72,-2.83l-1.3,-2.5l-0.01,-0.02l-1.57,-2.68l-0.03,-0.04l-1.27,-1.62l-0.0,-0.01l-0.78,-0.96l-0.96,-1.4l-0.0,-0.0l-0.83,-1.2l-0.08,-0.08l-0.01,-0.01l-0.01,-1.48l0.02,-1.82l-0.02,-0.14l-0.13,-0.36l-0.14,-1.24l0.02,-1.39l-0.01,-0.08l-0.42,-2.35l-0.57,-4.7l-0.02,-0.07l-0.68,-2.1l-0.02,-0.06l-1.0,-2.0l-0.05,-0.08l-1.34,-1.63l-0.1,-0.09l-1.85,-1.14l-0.06,-0.03l-1.83,-0.77l-2.59,-1.26l0.0,-1.11l0.69,-1.34l0.04,-0.1l0.41,-2.05l0.72,-2.18l0.01,-0.02l0.6,-2.15l0.01,-0.11l0.01,-2.98l-0.03,-0.15l-0.24,-0.59l-0.02,-0.05l-0.46,-0.78l-0.04,-0.05l-0.31,-0.37l-0.7,-0.84l-0.15,-0.11l-1.8,-0.79l-0.02,-0.01l-2.32,-0.87l-1.13,-0.48l-0.11,-0.03l-3.2,-0.35l-2.65,-0.39l-0.28,0.06l-1.44,0.95l-1.46,0.49l-1.35,0.18l-1.28,-0.3l-0.08,-0.01l-1.96,-0.06l-1.23,-0.22l-0.17,0.01l-1.85,0.49l-1.8,0.17l-0.06,0.01l-1.25,0.31l-1.46,-0.07l-1.22,-0.65l-0.57,-0.57l-0.76,-0.84l-0.14,-0.1l-1.68,-0.74l-0.1,-0.03l-0.55,-0.08l-0.51,-0.07l-0.06,-0.0l-0.52,0.0l-0.25,0.0l-0.66,0.0l-0.8,0.01l-0.77,-0.94l-0.44,-1.5l-0.03,-0.07l-0.63,-1.26l-0.13,-0.15l-0.7,-0.48l-0.08,-0.06l-0.12,-0.06l-0.53,-0.14l-0.15,-0.01l-0.84,0.09l-0.05,0.01l-1.63,0.38l-1.83,0.29l-1.28,-0.03l-1.05,-0.3l-1.04,-0.74l-0.31,-0.07l-0.96,0.19l-0.13,0.05l-1.28,0.75l-0.15,0.16l-0.63,1.18l-0.04,0.1l-0.31,1.4l-1.77,0.58l-0.9,-0.05l-0.11,0.01l-1.92,0.44l-0.01,0.0l-2.58,0.68l-1.25,-0.56l-0.53,-0.76l-0.19,-0.15l-1.57,-0.59l-0.19,-0.09l-1.12,-0.52l-0.17,-0.04l-2.2,0.01l-0.19,0.05l-0.36,0.2l0.04,-0.36l0.0,-0.02l0.17,-2.63l0.0,-0.02l0.06,-2.3l-0.0,-0.03l-0.12,-2.18l0.33,-2.03l0.0,-0.04l0.17,-3.28l0.0,-0.01l0.06,-3.02l-0.0,-0.04l-0.25,-2.75l0.02,-4.44l0.27,-2.74l0.0,-0.05l-0.08,-2.81l0.12,-2.76l-0.0,-0.04l-0.23,-3.37l0.02,-2.99l0.11,-1.73l0.29,-1.3l0.07,-0.3l0.0,-0.0l0.17,-0.83l0.41,-1.03l0.31,-0.2l0.55,-0.36l0.7,0.16l0.0,0.0l0.81,0.18l0.64,0.2l0.05,0.01l0.75,0.13l4.2,0.76l0.02,0.0l3.99,0.53l0.08,0.0l2.13,-0.15l0.28,-0.02l0.0,-0.0l2.96,-0.22l3.16,0.36l0.12,-0.0l1.3,-0.24l1.58,-0.3l2.84,-0.22l1.49,0.34l0.14,0.01l3.8,-0.51l1.57,0.12l0.08,-0.0l1.94,-0.23l0.18,-0.07l2.13,-1.47l0.85,-0.59l0.16,-0.22l0.14,-0.49l0.37,-1.29l0.01,-0.03l0.38,-1.88l-0.0,-0.16l-0.67,-3.11l-0.11,-1.97l-0.01,-0.08l-0.7,-2.62l-0.44,-1.87l-0.04,-0.1l-0.55,-1.01l-0.02,-1.22l-0.01,-0.08l-0.31,-1.43l0.18,-0.38l0.71,-0.48l0.0,-0.0l1.35,-0.91l0.01,-0.01l0.66,-0.48l0.41,-0.18l0.41,-0.16l0.14,-0.09l1.24,-1.24l1.03,-1.01l0.06,-0.07l1.62,-2.48l0.86,-1.07l0.01,-0.01l1.17,-1.54l0.02,-0.03l1.25,-1.95l0.01,-0.01l0.92,-1.57l0.0,-0.01l0.5,-0.91l0.13,-0.24l0.42,-0.41l0.7,-0.2l0.14,-0.04l1.66,-0.24l2.42,-0.27l0.01,-0.0l2.26,-0.34l2.16,0.01l0.06,-0.0l4.19,-0.57l1.8,-0.04l0.04,-0.0l0.88,-0.11l1.37,-0.09l0.01,-0.0l1.64,-0.14l0.08,-0.02l1.03,-0.31l0.05,-0.02l1.66,-0.77l2.18,-0.9l0.08,-0.05l1.63,-1.2l0.14,-0.19l0.14,-0.39l0.08,-0.21l0.02,-0.17l-0.2,-2.38l0.07,-0.57l0.0,-0.05l0.01,-1.78l-0.0,-0.02l-0.06,-1.67l-0.01,-0.07l-0.29,-1.36l0.16,-1.63l0.0,-0.07l-0.15,-1.9l-0.01,-0.06l-0.33,-1.35l-0.33,-1.39l-0.09,-1.08l-0.03,-0.38l0.1,-0.67l0.68,-0.66l1.7,-1.37l1.42,-0.5l0.0,-0.0l1.5,-0.54l1.64,-0.46l0.0,-0.0l1.17,-0.33l1.28,-0.03l0.92,-0.01l1.04,0.04l0.55,0.22l0.85,0.53l0.13,0.05l0.98,0.21l0.53,0.6l0.46,0.1l0.58,-0.26l0.03,-0.01l0.24,-0.32l0.13,-1.05l0.69,-1.06l0.06,-0.2l0.06,-1.68l0.32,-1.84l0.0,-0.12l-0.14,-1.09l0.26,-0.8l0.01,-0.04l0.12,-0.61l0.86,0.1l0.09,0.0l1.52,-0.17l1.09,-0.01l1.25,0.17l0.01,0.0l0.8,0.09l0.89,0.29l0.34,0.23l0.24,0.07l0.34,-0.02l0.79,0.21l0.3,0.35l0.01,0.01l0.77,0.86l0.89,1.16l0.21,0.14l1.33,0.37l0.92,0.4l0.12,0.03l1.04,0.1l1.64,0.45l0.12,0.01l1.81,-0.04l1.01,0.2l0.0,0.0l2.59,0.47l0.04,0.01l2.19,0.15l1.01,0.2l0.23,-0.02l1.13,-0.47l0.02,-0.01l0.54,-0.25l0.81,-0.38l0.03,-0.02l1.19,-0.69l0.01,-0.01l1.56,-0.98l0.01,-0.01l1.85,-1.24l1.47,-0.8l0.06,-0.04l1.42,-1.15l0.03,-0.03l1.16,-1.17l0.68,-0.51l0.3,0.52l0.09,0.15l0.09,0.15l0.0,0.0l0.05,0.09l0.01,0.02l0.0,0.0l0.06,0.1l0.17,0.3l0.08,0.13l0.03,0.09l0.0,0.0l0.02,0.05l0.01,0.02l0.0,0.0l0.0,0.01l0.04,0.1l0.0,0.0l0.03,0.09l0.04,0.1l0.0,0.0l0.02,0.05l0.04,0.08l0.1,0.14l0.11,0.17l0.08,0.12l0.86,1.29l0.06,0.08l0.25,0.42l0.26,0.43l0.0,0.0l0.26,0.43l0.04,0.05l0.0,0.01l0.18,0.22l0.19,0.23l0.28,0.33l0.25,0.29l0.25,0.3l0.25,0.3l0.04,0.04l0.0,0.0l0.14,0.17l0.01,0.01l0.0,0.0l0.84,0.99l2.79,3.3l0.19,0.32l0.06,0.08l0.96,0.97l0.63,0.96l0.04,0.05l1.09,1.21l0.22,0.12l0.46,0.09l0.17,-0.0l0.89,-0.2l2.18,0.02l0.12,0.0l0.09,0.0l0.74,0.01l0.8,0.01l0.01,-0.0l0.03,-0.0l0.02,-0.0l0.01,-0.0l0.28,-0.01l0.45,-0.02l0.06,-0.01l0.51,-0.11l0.42,-0.09l0.7,-0.15l0.14,-0.03l0.05,-0.01l0.01,-0.0l0.19,-0.04l0.0,-0.0l0.07,-0.01l0.06,-0.01l0.0,-0.0l0.03,-0.01l0.02,-0.0l0.13,-0.02l0.13,-0.02l0.0,-0.0l0.14,-0.02l0.13,-0.02l0.09,-0.02l0.0,-0.0l0.11,-0.02l0.06,-0.01l0.06,-0.01l0.13,-0.02l0.11,-0.01l0.0,-0.0l0.14,-0.02l0.03,-0.0l-0.22,1.17l-0.02,0.02l-0.28,1.53l-0.0,0.0l-0.41,2.38l-0.0,0.04l-0.08,1.13l-0.0,0.01l-0.07,1.52l-0.2,2.32l-0.36,2.42l0.0,0.13l0.44,2.4l0.0,0.01l0.34,1.7l0.04,0.22l0.37,3.07l0.05,2.49l0.0,0.03l0.22,2.32l-0.36,2.36l-0.0,0.12l0.05,0.37l0.15,1.02l0.28,1.97l0.01,0.04l0.73,2.86l0.24,2.56l0.22,3.14l0.01,0.08l0.29,1.07l0.02,0.07l1.27,2.71l-0.16,2.53l-0.17,0.91l-0.14,0.72l0.04,0.26l1.18,2.33l0.99,1.94l0.01,0.02l0.4,0.68l0.41,1.27l0.17,0.53l0.23,1.58l0.01,0.05l0.4,1.44l-0.09,1.17l-0.06,0.78l0.02,0.17l0.54,1.43l0.0,0.0l0.58,1.49l-0.01,1.39l-0.3,1.22l-0.5,1.37l-0.01,0.03l-0.36,1.23l-0.01,0.05l-0.13,0.77l-0.0,0.01l-0.55,1.52l-0.91,1.5l-0.01,0.01l-0.69,1.25l0.06,0.47l0.91,0.96l0.04,0.03l0.61,0.5l0.1,0.06l0.81,0.33l0.83,0.47l0.04,0.02l1.3,0.55l1.28,1.22l0.02,0.02l0.68,0.55l0.01,0.01l1.19,0.93l0.5,0.59l0.85,1.06l0.55,1.13l-0.0,0.73l-0.0,0.16l-0.29,0.42l-0.49,0.54l-0.36,0.28l-0.82,0.43l-0.92,-0.08l-1.79,-0.78l-0.13,-0.03l-1.08,-0.08l-0.42,0.31l-0.2,0.91l-0.01,0.04l-0.1,0.89l-0.21,1.36l-0.11,0.49l-0.43,0.27l-0.15,0.16l-0.11,0.23l-1.02,0.51l-0.18,0.17l-0.35,0.68l-1.14,0.87l-0.73,0.55l-1.59,1.2l-0.18,0.0l-0.28,-0.34l-0.04,-0.04l-0.63,-0.57l-0.29,-0.1l-2.37,0.13l-1.05,-0.02l-0.07,0.0l-1.17,0.18l-1.09,0.03l-0.03,0.0l-0.83,0.09l-1.3,-0.25l-0.19,0.01l-0.97,0.29l-0.15,0.08l-0.85,0.73l-0.11,0.16l-0.34,0.86l-0.03,0.11l-0.18,1.97l-0.26,1.93l-0.96,2.54l-0.02,0.06l-0.56,1.29l-0.01,0.04l-0.32,1.04l-0.02,0.14l0.08,1.36l-0.48,1.35l-0.02,0.11l-0.11,1.68l0.0,0.08l0.18,1.29l0.09,0.2l0.88,1.06l0.05,0.05l1.33,1.16l0.21,1.02l0.22,1.77l0.03,0.11l0.59,1.39l-0.32,1.77l-0.41,1.75l-0.01,0.07l-0.11,1.74l-0.63,1.89l-0.02,0.15l0.09,1.59l0.0,0.04l-0.08,0.75l-0.85,-0.02l-0.32,0.15l-1.1,1.37l-0.56,0.48l-1.11,0.96l-1.9,1.12l-0.04,0.03l-0.46,0.35l-0.91,0.64l-0.09,0.09l-1.03,1.38l-0.01,0.02l-1.15,1.71l-0.04,0.08l-0.92,2.41l-0.02,0.07l-0.44,2.46l-0.0,0.0l-0.32,1.79l-0.92,1.98l-0.86,1.83l-2.02,2.17l-1.58,1.49l-2.71,1.76l-5.59,0.73l-3.57,0.06l-3.11,-0.38l-2.86,-0.35l-0.1,-0.0l-2.74,0.33l-2.55,0.24l-0.1,0.02l-1.53,0.58l-0.06,0.03l-1.13,0.64l-0.06,0.04l-1.26,1.06l-0.07,0.07l-0.76,1.05l-0.92,1.23l-0.83,0.57l-0.02,0.01l-1.38,1.05l-0.07,0.07l-0.76,0.94l-0.04,0.06l-0.65,1.23l-0.0,0.0l-0.69,1.3l-0.02,0.08Z", "name": "Zamfara"}, "2052": {"path": "M548.28,56.95l0.2,-0.11l0.08,-0.13l0.38,-0.27l0.09,-0.09l0.33,-0.45l0.19,-0.12l0.86,-0.52l0.34,-0.21l0.01,-0.01l1.26,-0.63l0.11,-0.08l0.44,-0.45l0.71,-0.46l0.83,-0.54l1.8,-0.81l0.0,-0.0l1.11,-0.5l0.04,-0.02l1.32,-0.56l0.34,-0.15l0.12,-0.08l0.14,-0.13l0.65,-0.28l0.77,-0.33l0.0,-0.0l0.02,-0.01l0.02,-0.01l1.18,-0.57l2.49,-1.09l0.01,-0.0l0.0,-0.0l0.84,-0.32l2.1,-0.1l0.49,-0.02l0.0,-0.0l0.03,-0.0l0.2,-0.01l0.0,-0.0l0.36,-0.02l0.06,-0.01l0.5,-0.1l0.8,0.05l0.05,0.0l1.41,-0.09l0.0,-0.0l0.62,-0.04l0.33,-0.02l0.0,-0.0l0.46,-0.03l1.25,-0.07l0.48,-0.02l1.18,-0.05l0.01,-0.0l2.46,-0.13l0.5,-0.03l0.52,-0.03l0.77,-0.03l0.04,-0.0l0.03,-0.0l0.77,-0.08l0.27,-0.03l0.0,-0.0l1.06,-0.12l0.0,-0.0l0.04,-0.0l0.02,-0.0l0.02,-0.0l0.37,0.02l0.01,0.0l0.01,0.0l0.07,-0.0l0.91,-0.11l0.06,-0.0l0.0,-0.0l1.09,-0.05l0.15,-0.04l0.58,-0.27l0.0,-0.0l0.74,-0.35l0.01,-0.0l3.27,-1.24l0.55,-0.2l0.77,-0.23l0.02,-0.01l0.06,-0.02l1.12,-0.55l0.0,-0.0l0.02,-0.01l0.57,-0.19l0.0,-0.0l0.17,-0.06l0.02,-0.01l1.07,-0.41l1.02,-0.33l0.04,-0.01l0.62,-0.27l0.01,-0.0l0.58,-0.24l1.39,-0.52l1.41,-0.51l0.85,-0.17l0.17,-0.03l2.59,-0.09l0.09,-0.0l0.33,-0.01l0.01,-0.0l1.81,-0.1l1.43,-0.04l0.0,-0.0l0.14,-0.0l0.04,-0.0l0.02,-0.0l1.67,-0.12l1.02,-0.07l0.17,-0.01l2.09,-0.1l0.46,-0.02l0.88,-0.03l0.68,-0.02l0.04,-0.0l0.82,-0.11l1.52,0.01l0.03,0.0l0.04,-0.0l1.38,-0.13l0.53,-0.0l0.0,-0.0l0.31,-0.0l0.07,-0.0l0.03,-0.0l0.7,-0.06l0.12,-0.01l0.43,-0.03l3.54,-0.2l0.0,-0.0l0.01,-0.0l0.04,-0.0l0.05,-0.01l0.58,-0.11l2.05,0.03l0.0,0.0l0.83,0.01l0.08,0.07l0.63,-0.07l1.87,-0.05l0.1,-0.02l0.03,-0.01l0.29,-0.08l0.13,0.06l0.18,0.04l2.09,-0.04l0.0,-0.0l0.02,-0.0l2.68,-0.04l0.03,-0.0l0.12,-0.01l0.14,-0.01l0.18,-0.01l0.03,-0.0l0.34,-0.04l0.12,-0.0l0.01,-0.0l0.65,0.02l0.21,0.01l0.68,0.04l0.01,0.0l0.03,0.0l0.06,-0.0l0.01,-0.0l0.0,-0.0l0.06,-0.01l0.01,-0.0l0.39,-0.05l0.0,-0.0l0.02,-0.0l0.04,-0.0l0.16,0.03l0.25,0.05l0.09,0.01l1.81,-0.04l0.0,-0.0l0.04,-0.0l0.02,-0.0l0.43,-0.03l0.07,0.07l3.4,0.04l0.0,0.0l0.03,0.0l0.23,0.0l0.6,0.01l0.42,0.0l0.0,0.0l0.66,0.0l0.45,0.0l0.26,0.02l0.01,0.0l0.15,0.01l0.01,0.0l0.41,0.09l0.09,-0.08l0.0,0.01l0.01,-0.0l1.72,0.01l0.07,0.0l2.75,0.08l0.22,0.01l0.11,0.0l0.63,0.05l1.44,0.1l1.36,0.21l0.5,0.08l1.02,0.16l0.01,0.0l0.21,0.03l0.0,0.0l1.04,0.13l0.79,0.12l0.15,0.02l0.1,0.05l0.01,0.01l0.17,0.08l0.1,0.03l0.38,0.07l0.01,0.0l0.47,0.07l0.12,0.0l0.2,-0.03l0.0,-0.0l0.15,-0.02l2.33,0.3l0.07,0.0l0.02,-0.0l0.19,-0.01l0.04,0.05l1.27,0.31l3.77,1.71l0.33,0.19l0.01,0.0l0.35,0.19l0.05,0.04l0.04,0.03l0.13,0.06l0.59,0.14l1.15,0.5l0.76,0.33l0.15,0.06l0.06,0.02l1.07,0.27l0.6,0.16l0.27,0.21l0.17,0.08l0.42,0.09l0.0,0.0l0.0,0.0l0.34,0.11l0.72,0.23l0.0,0.0l0.73,0.23l0.0,0.0l0.01,0.0l0.03,0.01l1.93,0.43l0.0,0.0l0.5,0.11l0.75,0.16l0.33,0.15l0.15,0.04l0.51,0.02l0.78,0.17l0.17,0.04l0.05,0.01l0.02,0.0l0.0,0.0l0.45,0.04l0.32,0.21l0.22,0.06l0.63,-0.0l1.65,0.32l0.09,0.02l0.01,0.0l0.01,0.0l0.47,0.13l0.28,0.08l0.03,0.01l3.65,0.78l0.43,0.09l0.53,0.18l0.02,0.01l0.07,0.11l0.34,0.17l1.16,0.58l0.39,0.19l0.04,0.02l0.01,0.0l0.11,0.06l0.0,0.0l0.09,0.05l0.15,0.08l0.0,0.0l0.19,0.1l0.78,0.42l0.41,0.31l1.19,0.92l0.53,0.42l0.0,0.0l0.91,0.7l0.43,0.33l0.0,0.0l0.45,0.34l0.32,0.26l0.0,0.0l0.01,0.01l0.0,0.0l0.25,0.19l0.03,0.02l0.14,0.09l0.04,0.03l0.01,0.01l0.15,0.09l0.02,0.02l0.02,0.01l1.17,1.08l0.1,0.22l0.1,0.23l0.1,0.14l0.92,0.8l0.03,0.02l1.04,0.76l0.14,0.06l0.17,0.04l0.06,0.1l0.15,0.15l1.96,1.12l2.29,1.4l0.09,0.04l0.74,0.24l0.3,-0.02l0.19,-0.09l0.25,0.03l0.03,0.0l0.51,0.03l0.42,-0.34l0.06,-0.4l0.23,0.11l0.16,0.01l0.48,0.16l0.39,-0.08l0.14,-0.12l0.12,-0.41l-0.06,-0.21l0.18,0.21l0.07,0.06l0.12,0.09l0.33,0.06l0.27,-0.07l0.05,0.06l0.11,0.09l0.32,0.17l0.55,-0.17l0.14,-0.28l0.4,-0.16l0.15,-0.64l-0.37,-0.4l0.08,0.01l0.18,-0.01l0.43,-0.13l0.44,-0.03l0.15,0.08l0.23,0.34l0.28,0.17l0.49,0.06l0.81,0.44l0.14,0.04l0.26,0.03l0.37,-0.16l0.27,-0.37l0.05,-0.02l0.98,0.01l0.15,0.09l0.31,0.19l0.18,0.22l0.12,0.15l0.15,0.45l-0.03,0.43l0.03,0.18l0.18,0.42l0.11,0.15l0.21,0.18l0.22,0.09l0.7,0.07l0.3,-0.09l0.11,-0.09l0.12,-0.46l-0.03,-0.09l-0.25,-0.22l0.03,-0.03l0.45,-0.22l0.13,-0.03l0.6,0.03l0.17,0.08l0.36,0.33l0.1,0.07l0.38,0.18l0.04,0.03l0.18,0.07l0.41,0.06l-0.01,0.03l-0.0,0.26l0.09,0.26l0.11,0.17l0.21,0.19l0.45,0.06l0.21,-0.11l0.22,-0.32l0.04,-0.4l0.24,0.2l0.15,0.08l0.25,0.07l0.25,-0.01l0.47,-0.18l0.05,-0.07l0.04,0.13l0.12,0.14l0.26,0.13l0.58,0.05l0.08,-0.0l0.15,-0.02l-0.0,0.01l-0.0,0.03l0.05,2.02l-0.12,2.52l-0.24,1.24l-0.26,1.34l-0.87,3.11l-0.01,0.06l-0.42,3.92l0.01,0.16l0.8,2.73l0.01,0.02l0.69,1.92l0.06,0.11l1.75,2.2l0.07,0.07l2.43,1.89l2.02,1.79l0.04,0.03l1.22,0.84l0.42,1.94l0.1,1.93l0.0,0.0l0.02,0.33l-2.18,4.95l-1.4,1.81l-1.43,1.85l-1.87,2.09l-2.58,1.93l-0.0,0.0l-3.06,2.3l-0.07,0.07l-0.98,1.25l-0.07,0.15l-0.52,2.07l-0.15,0.59l0.01,0.24l1.02,2.68l0.02,0.05l1.03,1.87l0.11,1.39l-0.13,2.41l-0.0,0.01l-0.06,3.02l-0.42,2.5l-0.0,0.02l-0.35,3.32l-0.72,4.0l-0.0,0.01l-0.75,4.66l-0.62,3.85l-0.21,1.29l-0.0,0.05l-0.16,4.23l0.02,0.14l0.88,2.67l0.09,0.29l1.04,5.85l-1.61,3.11l-0.0,0.01l-2.33,4.68l-1.7,3.13l-0.05,0.22l0.18,2.34l0.2,0.32l0.07,0.04l0.7,0.39l0.24,0.05l3.4,-0.42l2.32,0.16l2.06,2.01l1.53,2.29l0.96,3.83l-0.93,1.99l-0.18,0.38l-2.37,2.71l-3.05,2.56l-0.09,0.1l-2.38,4.07l-0.01,0.02l-1.6,3.03l-3.47,4.02l-0.08,0.14l-1.08,3.46l-0.02,0.12l0.05,3.6l0.01,0.07l0.91,4.97l-0.28,3.4l-2.42,3.58l-3.68,2.52l-0.46,0.23l-3.1,1.56l-4.52,1.09l-0.05,0.01l-2.7,1.02l-3.34,0.75l-0.02,0.0l-2.92,0.78l-0.13,0.06l-3.21,2.33l-0.11,0.12l-2.08,3.42l-0.05,0.12l-0.74,3.35l-0.01,0.1l0.25,6.22l0.08,3.79l-0.84,1.23l-1.16,1.69l-1.93,2.33l-2.86,0.63l-0.01,0.0l-0.69,0.18l-1.02,0.26l-2.78,-0.09l-4.07,-0.16l-0.21,-0.35l-0.18,-1.78l-0.16,-2.23l-0.04,-0.5l-0.0,-0.04l-0.54,-3.15l0.14,-2.71l0.44,-2.94l0.69,-4.65l0.0,-0.04l0.18,-3.97l-0.0,-0.06l-0.37,-3.74l-0.01,-0.04l-0.45,-2.15l-0.14,-0.23l-2.03,-1.69l-1.53,-1.59l-0.02,-0.02l-0.86,-0.77l-0.47,-0.05l-0.33,0.19l0.17,-0.27l-0.07,-0.51l-1.24,-1.12l-2.86,-3.17l-2.22,-2.8l-1.6,-2.38l-0.01,-0.02l-1.91,-2.52l-0.06,-0.07l-3.09,-2.54l-0.03,-0.02l-1.51,-1.04l-2.43,-1.95l-0.04,-0.03l-3.21,-2.04l-0.01,-0.01l-2.64,-1.56l-0.07,-0.03l-3.6,-1.22l-0.09,-0.02l-2.25,-0.22l-0.04,-0.0l-2.64,0.01l-0.11,0.02l-2.53,0.72l-0.05,0.02l-2.52,1.1l-0.12,0.08l-0.96,0.94l-1.58,-0.21l-0.01,-0.0l-1.81,-0.21l-1.09,-0.71l-0.62,-0.88l0.1,-2.19l0.41,-1.54l0.51,-1.92l0.01,-0.08l0.14,-2.26l1.26,-3.24l0.02,-0.08l0.22,-1.44l0.14,-0.93l0.0,-0.07l-0.1,-3.57l-0.02,-0.11l-1.24,-3.9l-0.01,-0.03l-2.01,-4.76l-1.73,-4.65l-0.01,-0.02l-1.0,-2.25l-0.03,-0.05l-0.63,-1.0l-0.74,-1.17l-1.22,-3.12l-0.89,-2.58l-0.59,-1.71l-0.36,-2.26l0.12,-2.3l-0.02,-0.15l-1.13,-3.23l-0.39,-3.19l0.04,-3.98l-0.0,-0.03l-0.3,-4.14l-0.06,-0.18l-1.67,-2.74l-0.02,-0.03l-2.05,-2.76l0.21,-2.04l0.0,-0.07l-0.31,-4.67l-0.0,-0.04l-0.36,-2.25l-0.26,-1.63l-0.02,-0.08l-1.38,-3.54l-0.1,-0.15l-2.3,-2.15l-0.03,-0.02l-2.87,-2.23l-0.04,-0.03l-2.7,-1.63l-1.41,-1.4l-0.27,-0.27l-0.67,-3.02l-0.86,-5.35l-0.25,-2.89l-0.09,-1.08l-0.01,-0.05l-0.93,-4.55l-0.06,-0.14l-1.85,-2.83l-0.83,-1.27l-0.16,-0.14l-2.23,-1.07l-0.29,-0.02l-1.78,0.54l-0.55,0.16l-2.71,-1.13l-3.17,-1.49l-0.3,-0.02l-2.99,1.0l-0.01,0.0l-2.26,0.8l-0.11,0.04l-1.69,0.39l-0.12,0.05l-1.0,0.64l-1.52,-2.62l-0.83,-5.18l-0.03,-0.1l-2.58,-5.77l-0.17,-0.18l-0.74,-0.42l-1.93,-1.09l-0.31,-0.04l-4.18,1.21l-0.02,0.0l-3.49,1.16l-0.05,0.02l-3.37,1.63l-3.77,0.74l-0.1,0.03l-3.47,1.7l-2.97,1.43l-0.2,0.22l-0.89,2.34l-1.57,2.34l-1.54,1.24l-2.03,0.81l-3.4,-0.24l-0.97,-0.07l-2.68,-0.56l-1.67,-1.09l0.63,-0.57l0.05,-0.06l0.49,-0.67l1.08,-1.03l0.01,-0.01l3.94,-4.07l0.5,-0.42l0.06,-0.06l0.5,-0.64l0.96,-1.0l0.23,-0.11l0.14,-0.11l0.67,-0.85l0.02,-0.03l0.62,-0.93l0.31,-0.27l0.08,-0.09l1.21,-1.97l1.02,-1.39l1.56,-1.46l0.09,-0.0l0.27,-0.11l0.37,-0.35l0.65,-0.62l1.08,-0.85l0.02,-0.02l0.87,-0.8l0.03,-0.03l2.12,-2.37l0.0,-0.0l2.85,-3.19l0.07,-0.1l0.08,-0.18l0.07,-0.15Z", "name": "Yobe"}, "2037": {"path": "M67.63,173.35l0.4,-0.88l0.5,-1.1l0.51,-0.82l0.08,-0.14l0.0,-0.01l0.0,-0.01l0.04,-0.09l0.29,-1.04l0.06,-0.22l0.02,-0.07l0.43,-0.88l0.17,-0.35l0.32,-0.33l0.09,-0.09l0.2,-0.2l0.05,-0.05l0.03,-0.03l0.05,-0.05l0.78,-0.62l0.7,-0.55l0.02,-0.01l0.0,-0.0l0.1,-0.08l0.02,-0.02l0.89,-0.8l0.66,-0.59l1.0,-0.8l0.24,-0.19l0.69,-0.55l0.15,-0.29l0.02,-0.39l-0.01,-0.12l-0.03,-0.12l-0.56,-2.2l-0.01,-0.33l-0.04,-0.15l-0.4,-0.84l-0.14,-0.16l-0.3,-0.21l-0.86,-0.58l-0.0,-0.0l-0.03,-0.02l-0.01,-0.0l-0.54,-0.35l-0.58,-0.38l-0.48,-0.52l-0.28,-0.89l-0.08,-1.02l-0.01,-0.13l-0.08,-1.1l-0.11,-1.47l-0.08,-1.06l0.09,-0.42l0.25,-0.19l0.05,-0.04l0.0,-0.0l0.02,-0.02l0.04,-0.03l0.06,-0.05l0.02,-0.02l0.56,-0.61l0.15,-0.17l0.73,-0.8l0.14,-0.16l1.06,-1.11l0.39,-0.4l0.07,-0.11l0.04,-0.08l0.12,-0.27l0.04,-0.19l-0.07,-1.04l-0.0,-0.0l-0.0,-0.01l-0.02,-0.09l-0.16,-0.53l-0.28,-0.91l-0.0,-0.0l-0.33,-1.06l-0.02,-0.08l-0.39,-1.47l-0.09,-0.33l-0.06,-0.12l-0.4,-1.4l-0.16,-0.56l-0.85,-2.98l0.25,-1.69l0.0,-0.0l0.0,-0.02l0.0,-0.04l0.01,-0.33l0.04,-1.36l0.02,-0.15l0.02,-0.14l0.13,-1.12l0.01,-0.13l0.06,-0.52l0.0,-0.09l-0.05,-0.48l-0.02,-0.18l0.19,-0.68l0.16,-0.58l0.51,-1.82l0.03,-0.12l0.61,-1.91l0.01,-0.19l-0.16,-0.97l-0.07,-2.81l-0.0,-0.06l-0.0,-0.01l-0.06,-1.11l-0.0,-0.03l-0.28,-2.34l-0.0,-0.0l-0.0,-0.02l0.01,-1.47l0.0,-0.32l-0.0,-0.02l-0.16,-2.75l-0.0,-0.0l-0.02,-0.36l-0.0,-0.25l-0.0,-0.0l-0.01,-0.82l-0.0,-0.05l-0.21,-1.57l-0.0,-0.02l-0.08,-1.79l-0.0,-0.03l-0.0,-0.04l-0.04,-0.29l-0.1,-0.71l0.07,-1.03l2.13,-1.83l0.13,-0.11l1.01,-0.87l0.07,-0.06l0.02,-0.01l0.53,-0.5l0.19,-0.11l0.22,-0.12l0.09,-0.07l0.56,-0.56l0.05,-0.05l0.01,-0.01l0.7,-0.74l0.15,-0.14l0.2,-0.16l0.72,-0.56l0.01,-0.01l1.21,-1.01l0.01,-0.01l1.51,-1.31l0.13,-0.11l1.54,-1.29l0.0,-0.0l1.76,-1.49l0.03,-0.02l0.39,-0.25l0.78,-0.51l0.03,-0.02l0.04,-0.03l0.0,-0.0l0.15,-0.12l0.12,-0.1l0.2,-0.16l1.6,-1.24l0.03,-0.02l0.09,-0.08l0.03,-0.03l0.03,-0.04l0.0,-0.0l0.04,-0.05l0.16,-0.18l0.27,-0.17l0.2,-0.12l0.02,-0.01l0.19,-0.13l0.0,-0.0l0.03,-0.02l0.01,-0.01l0.28,-0.21l2.01,-1.5l1.53,-1.14l0.0,-0.0l0.01,-0.01l0.08,-0.08l0.34,-0.47l0.46,-0.4l0.23,-0.2l0.08,-0.09l1.7,-2.74l0.01,-0.02l0.19,-0.35l1.57,-2.63l0.13,-0.22l0.5,-0.83l0.26,-0.44l0.2,-0.34l0.04,-0.06l0.21,-0.31l0.88,-1.09l0.01,-0.02l0.04,-0.05l0.05,-0.08l0.09,-0.16l0.31,-0.53l0.01,-0.01l0.18,-0.33l0.25,-0.45l1.35,-1.83l0.05,-0.03l0.16,-0.14l0.22,-0.34l0.58,-0.92l0.59,-0.9l1.94,-2.81l0.06,-0.13l0.41,-1.63l0.0,-0.02l0.01,-0.07l0.28,-1.38l0.6,-2.92l0.18,-0.79l0.35,-1.37l0.14,-0.54l0.01,-0.04l0.14,-0.9l0.19,-1.07l0.19,-0.89l0.0,-0.01l0.01,-0.11l-0.02,-0.5l-0.08,-2.37l-0.0,-0.02l0.02,-0.54l0.04,-1.06l5.29,-0.14l0.02,-0.0l0.12,-0.04l0.91,-0.03l1.18,0.05l1.35,0.7l0.11,0.04l0.83,0.15l0.19,-0.01l1.83,-0.57l0.09,-0.04l1.25,-0.78l1.01,-0.37l1.23,-0.12l0.7,0.29l0.56,0.95l0.05,0.07l1.37,1.5l0.08,0.07l1.84,1.19l0.04,0.02l1.95,0.97l1.23,1.27l0.3,0.12l0.74,-0.02l2.03,1.05l0.03,0.02l1.78,0.72l0.05,0.02l1.25,0.32l0.01,0.0l1.66,0.4l2.05,0.64l0.9,0.3l0.89,0.29l1.83,1.28l1.68,1.18l0.1,0.05l1.37,0.48l0.07,0.02l2.34,0.34l0.11,0.0l1.24,-0.16l0.09,-0.02l0.96,-0.36l0.12,-0.08l0.76,-0.68l0.1,-0.13l0.44,-0.95l0.74,-0.92l0.01,-0.01l0.5,-0.66l0.06,-0.13l0.07,-0.24l0.37,-0.63l0.06,-0.1l0.65,-0.67l0.4,-0.22l0.71,-0.07l0.59,0.19l0.39,0.62l0.12,0.46l0.01,0.04l0.11,0.32l0.18,0.5l-0.4,0.77l-0.04,0.12l-0.15,0.9l-0.35,0.75l-0.01,0.01l-0.27,0.62l-0.33,0.42l-0.07,0.12l-0.3,0.94l-0.02,0.13l0.01,0.88l0.0,0.01l0.09,1.86l-0.65,0.75l-0.09,0.2l-0.32,1.97l-0.53,0.53l-0.11,0.24l-0.18,1.78l-0.0,0.0l-0.18,1.78l-0.14,0.89l0.04,0.24l0.27,0.56l0.11,0.23l0.12,0.14l0.75,0.59l0.53,0.58l0.5,0.55l0.17,0.34l0.01,0.02l0.66,1.13l0.09,0.16l0.41,1.44l0.01,0.04l0.74,1.85l-0.29,1.38l-0.04,0.19l-0.01,0.11l0.14,2.25l-0.48,1.82l-0.0,0.0l-0.61,2.34l-0.01,0.04l-0.14,0.95l-0.3,2.02l-0.02,0.11l-0.0,0.07l0.05,2.46l0.02,0.12l1.11,3.19l0.9,3.42l0.17,2.46l-0.02,2.4l-0.09,2.04l-0.24,1.35l-0.0,0.03l-0.12,1.27l-0.19,0.83l-0.42,0.73l-0.87,0.03l-0.83,-0.58l-0.01,-0.01l-1.47,-0.95l-0.01,-0.01l-1.43,-0.86l-0.15,-0.05l-1.62,-0.23l-0.12,0.0l-1.63,0.25l-0.01,0.0l-1.87,0.34l-0.05,0.01l-1.43,0.47l-0.03,0.01l-1.48,0.61l-0.15,0.11l-0.86,1.01l-0.69,0.78l-0.09,0.17l-0.43,1.66l-0.43,1.36l-0.01,0.03l-0.35,1.51l0.0,0.18l0.16,0.67l-0.05,2.56l-0.11,3.05l-0.01,0.13l-0.07,1.7l-0.04,0.45l-0.0,0.03l-0.04,2.53l-0.01,0.79l0.01,0.07l0.34,1.99l-0.16,1.37l-0.0,0.05l0.01,2.07l0.0,0.03l0.09,1.17l0.13,1.74l0.01,0.07l0.44,1.61l0.13,2.1l0.0,0.01l0.08,1.01l-0.12,2.45l-0.47,3.09l-0.76,1.82l-0.02,0.04l-0.47,1.64l-0.01,0.05l-0.17,1.12l-0.24,1.56l-0.43,2.42l-1.18,2.38l-0.01,0.02l-0.91,2.18l-1.03,2.18l-0.02,0.06l-0.87,2.87l-0.01,0.04l-0.19,0.9l-0.12,0.61l-0.0,0.02l-0.22,1.39l0.02,0.21l0.49,1.27l0.05,0.09l1.24,1.7l0.03,0.04l1.29,1.37l0.07,0.07l0.07,0.06l0.83,0.57l0.02,0.01l0.09,0.05l0.13,0.05l0.93,0.16l0.0,0.0l1.2,0.2l0.07,0.01l1.24,-0.01l0.16,-0.04l0.91,-0.41l0.12,-0.09l1.16,-1.22l0.05,-0.07l0.92,-1.54l0.9,-1.01l0.99,-0.96l1.32,-0.74l1.48,-0.79l2.11,-0.68l0.04,-0.02l1.7,-0.76l2.19,-0.7l0.07,-0.03l1.6,-0.9l1.61,-0.57l0.07,-0.03l1.2,-0.7l0.0,-0.0l1.04,-0.62l0.94,-0.29l0.84,0.16l0.72,0.27l0.37,0.34l0.15,0.09l1.04,0.34l0.29,-0.02l1.42,-0.65l0.72,-0.15l0.02,0.02l0.29,0.99l0.03,0.07l0.4,0.77l0.32,0.22l1.14,0.09l0.24,-0.06l1.68,-1.02l0.28,-0.15l0.95,-0.53l2.01,-0.01l1.04,0.48l0.0,0.0l0.2,0.09l0.03,0.01l1.47,0.55l0.52,0.75l0.16,0.14l1.48,0.67l0.27,0.02l2.71,-0.71l1.86,-0.43l0.92,0.06l0.15,-0.02l2.06,-0.67l0.27,-0.29l0.35,-1.56l0.55,-1.03l1.13,-0.66l0.72,-0.14l0.95,0.68l0.12,0.06l1.16,0.33l0.1,0.02l1.37,0.03l0.07,-0.0l1.88,-0.3l0.03,-0.01l1.62,-0.38l0.74,-0.08l0.39,0.11l0.03,0.02l0.61,0.42l0.57,1.14l0.45,1.54l0.08,0.14l0.95,1.15l0.31,0.15l1.0,-0.01l0.66,-0.0l0.25,-0.0l0.49,-0.0l0.48,0.07l0.5,0.07l1.55,0.68l0.71,0.78l0.01,0.01l0.62,0.62l0.1,0.07l1.35,0.72l0.17,0.05l1.61,0.07l0.11,-0.01l1.28,-0.31l1.8,-0.17l0.07,-0.01l1.79,-0.48l1.18,0.21l0.06,0.01l1.94,0.06l1.31,0.31l0.14,0.01l1.46,-0.19l0.08,-0.02l1.54,-0.52l0.09,-0.05l1.35,-0.89l2.51,0.37l0.01,0.0l3.15,0.35l1.09,0.46l0.02,0.01l2.32,0.87l1.7,0.75l0.64,0.77l0.29,0.35l0.43,0.73l0.2,0.49l-0.01,2.85l-0.59,2.08l-0.72,2.19l-0.01,0.05l-0.41,2.02l-0.7,1.38l-0.04,0.18l-0.01,1.45l0.23,0.36l2.83,1.37l0.02,0.01l1.81,0.76l1.77,1.09l1.27,1.55l0.96,1.94l0.65,2.03l0.57,4.67l0.0,0.02l0.41,2.32l-0.02,1.38l0.0,0.05l0.15,1.31l0.02,0.09l0.12,0.33l-0.02,1.75l-0.0,0.01l0.01,0.83l-0.99,-0.8l-0.15,-0.07l-0.99,-0.27l-0.05,-0.01l-1.25,-0.16l-0.2,0.03l-1.02,0.41l-0.18,0.15l-0.7,1.02l-1.25,1.16l-1.04,0.62l-0.15,0.16l-0.8,1.5l-0.63,0.98l-1.84,0.29l-1.19,-0.01l-0.05,0.0l-1.49,0.19l-0.08,0.02l-1.1,0.38l-0.62,0.21l-0.03,0.01l-1.45,0.66l-2.18,0.8l-1.23,0.41l-0.08,0.04l-0.91,0.55l-1.75,0.91l-1.53,0.55l-0.03,0.01l-1.78,0.79l-1.94,0.81l-1.84,0.31l-1.59,0.07l-0.04,0.0l-1.73,0.24l-1.07,-0.06l-0.14,0.02l-0.31,0.1l-1.52,0.1l-1.81,-0.03l-1.9,-0.1l-0.01,-0.0l-0.69,-0.03l-0.26,0.14l-0.79,-0.32l-0.71,-0.87l-0.2,-1.94l-0.14,-1.9l-0.01,-0.1l-0.06,-0.76l0.36,-3.08l0.0,-0.04l0.07,-2.7l-0.01,-0.11l-0.57,-2.15l-0.13,-0.21l-1.42,-1.16l-0.08,-0.05l-1.55,-0.72l-1.45,-1.02l-0.9,-1.41l-0.3,-1.39l-0.01,-1.76l-0.0,-0.04l-0.27,-2.42l-0.01,-0.06l-0.58,-2.15l-0.07,-0.14l-1.14,-1.46l-0.13,-0.11l-0.9,-0.47l-0.1,-0.04l-1.22,-0.27l-0.13,-0.06l-0.0,-0.0l-0.81,-0.37l-0.12,-0.03l-1.2,-0.14l-0.04,-0.0l-1.64,-0.02l-0.02,0.0l-1.34,0.05l-1.38,-0.07l-0.07,0.0l-1.45,0.19l-1.73,0.12l-0.07,0.01l-0.01,0.0l-1.27,0.31l-2.0,0.3l-0.0,0.0l-1.8,0.29l-0.05,0.01l-1.62,0.48l-1.92,0.2l-0.06,0.01l-1.36,0.37l-2.37,0.51l-0.08,0.03l-1.3,0.6l-2.73,0.21l-0.09,0.02l-1.6,0.49l-0.06,0.02l-0.68,0.33l-1.49,0.54l-0.01,0.0l-1.17,0.45l-1.96,0.62l-0.07,0.03l-1.23,0.64l-0.03,0.02l-1.91,1.24l-0.88,0.34l-0.8,0.31l-0.05,0.03l-0.97,0.55l-0.09,0.07l-1.12,1.17l-0.08,0.13l-0.54,1.34l-0.03,0.19l0.2,1.85l0.07,0.18l1.05,1.53l0.11,0.11l1.71,1.14l0.05,0.03l2.68,1.3l0.03,0.01l2.15,0.84l2.08,0.91l0.02,0.01l2.3,0.89l0.08,0.02l2.99,0.46l0.07,0.0l2.11,-0.07l1.11,0.2l0.6,1.15l0.58,1.11l0.46,0.2l0.9,-0.24l0.38,0.08l0.22,0.05l0.27,0.06l0.78,0.73l0.37,1.43l0.41,1.66l0.11,2.03l0.0,0.04l0.41,2.55l-0.24,1.03l-0.91,0.46l-0.06,0.04l-1.57,1.22l-0.12,0.16l-0.76,1.77l-0.01,0.29l0.6,1.76l0.16,0.21l1.53,0.98l0.02,0.01l1.72,0.96l1.26,1.48l-0.07,2.23l-1.08,1.59l-0.01,0.0l-2.24,0.75l-2.17,0.37l-0.09,0.03l-1.54,0.65l-0.02,0.01l-2.14,1.02l-0.03,0.02l-1.52,0.91l-1.04,0.58l-1.21,0.16l-1.34,-0.44l-0.95,-0.39l-0.14,-0.03l-1.16,-0.03l-0.04,0.0l-1.1,0.07l-0.04,0.0l-1.12,0.17l-0.1,0.03l-0.76,0.34l-0.09,0.06l-1.09,0.9l-0.14,0.24l-0.27,1.59l-0.0,0.11l0.22,2.12l-0.22,1.73l-0.0,0.04l-0.05,2.08l0.0,0.06l0.25,2.12l0.01,1.76l-0.52,1.6l-0.01,0.23l0.45,1.68l0.05,0.11l1.07,1.74l0.04,0.05l1.08,1.23l0.01,0.01l1.07,1.13l0.85,1.44l0.01,0.01l1.35,2.14l0.38,1.39l0.01,0.02l0.47,1.4l-0.3,1.64l-0.72,0.76l-0.03,0.04l-0.64,0.9l-0.64,0.76l-1.61,1.09l-1.46,0.73l-1.23,0.29l-1.32,-0.07l-0.05,0.0l-1.38,0.08l-0.12,0.03l-1.79,0.7l-0.01,0.0l-1.32,0.55l-1.85,0.6l-1.46,0.2l-0.02,0.0l-1.64,0.33l-0.16,0.07l-0.84,0.62l-0.16,0.26l-0.2,1.42l-0.0,0.04l-0.1,2.2l-0.11,1.72l-0.18,1.57l-0.41,0.36l-0.68,-0.13l-0.04,-0.01l-1.59,-0.12l-1.55,-0.16l-0.0,-0.0l-1.14,-0.11l-0.68,-0.28l-0.38,-0.16l-0.36,-0.51l-0.15,-1.44l0.13,-1.11l0.37,-1.48l0.3,-1.14l0.55,-1.26l0.03,-0.1l0.35,-2.22l0.0,-0.1l-0.1,-1.11l0.11,-1.36l-0.07,-0.27l-0.77,-1.07l-0.06,-0.07l-0.9,-0.77l-0.02,-0.02l-0.87,-0.63l-0.94,-0.71l-0.61,-0.93l-0.34,-1.02l-0.01,-0.03l-0.3,-0.73l0.06,-1.31l-0.0,-0.07l-0.2,-1.56l0.07,-2.47l0.26,-0.93l0.01,-0.1l0.02,-1.09l0.42,-1.59l1.27,-2.18l1.02,-1.23l0.32,-0.31l0.82,-0.8l0.85,-0.63l0.88,-0.55l0.9,-0.4l1.04,-0.35l1.31,-0.42l0.02,-0.01l1.43,-0.55l0.1,-0.05l0.92,-0.69l0.05,-0.04l0.98,-1.01l1.14,-1.12l1.45,-1.34l0.02,-0.02l1.09,-1.18l0.08,-0.14l0.52,-1.47l0.02,-0.06l0.45,-2.47l0.08,-0.38l0.03,-0.15l0.25,-1.25l0.0,-0.01l0.45,-2.54l0.6,-2.19l0.39,-1.41l0.01,-0.05l0.16,-1.06l0.0,-0.03l0.16,-2.34l0.0,-0.01l0.05,-1.43l0.0,-0.0l0.04,-1.14l-0.07,-0.24l-0.62,-0.89l-0.17,-0.14l-0.64,-0.28l-0.88,-0.51l-0.12,-0.04l-0.95,-0.21l-0.96,-0.27l-0.06,-0.01l-0.77,-0.1l-0.13,0.0l-0.95,0.18l-0.51,-0.44l-0.04,-0.03l-0.92,-0.6l-0.01,-0.01l-1.24,-0.76l-0.96,-0.73l-0.05,-0.03l-1.41,-0.79l-1.63,-1.18l-0.04,-0.03l-1.26,-0.7l-0.82,-0.73l-0.05,-0.04l-1.15,-0.74l-0.13,-0.06l-0.44,-0.09l-1.58,-0.65l-0.05,-0.02l-1.73,-0.47l-1.48,-0.43l-1.01,-0.37l-0.13,-0.02l-1.49,-0.03l-0.03,0.0l-2.06,0.13l-0.03,0.0l-1.43,0.19l-0.02,0.0l-1.45,0.28l-0.06,0.02l-0.71,0.26l-1.24,0.19l-0.51,0.08l-2.44,0.03l-0.35,-0.09l-0.48,-0.13l-0.07,-0.01l-2.07,-0.17l-0.02,-0.0l-2.02,-0.06l-0.06,0.0l-1.1,0.14l-0.0,0.0l-2.56,0.32l-1.22,-0.24l-0.13,-0.0l-2.26,0.34l-2.2,0.01l-0.07,0.01l-2.73,0.51l-2.35,-0.11l-2.18,-0.33l-1.54,-0.68l-0.02,-0.01l-2.61,-1.01l-1.98,-1.03l-0.01,-0.0l-2.6,-1.27l-1.75,-1.07l-2.03,-1.31l-0.01,-0.01l-1.47,-0.88l-0.06,-0.03l-1.58,-0.6l-1.51,-0.86l-0.27,-0.23l-0.16,-0.08l-1.18,-0.32l-0.07,-0.01l-1.19,-0.11l-0.03,-0.0l-1.12,-0.0l-0.19,0.05l-1.07,0.57l-0.13,-0.01l-0.02,-0.0l-0.63,0.0l-0.46,-0.0l-3.6,-3.02l-0.0,-0.0l-1.12,-0.93l-0.1,-0.09l-1.36,-1.16l-2.07,-1.77l-0.98,-0.84l-1.0,-0.91l-0.03,-0.03l-0.17,-0.16l-0.04,-0.03l-0.54,-0.38l-0.01,-0.01l-3.36,-2.86l0.31,-1.9l0.01,-0.03l0.2,-0.95l0.28,-1.3l0.5,-2.22l0.19,-0.86l0.0,-0.0l0.41,-1.83l0.05,-0.23l0.0,-0.0l0.98,-4.4l0.0,-0.01l1.01,-5.23l0.01,-0.06l0.04,-0.2l0.04,-0.21l0.48,-2.25l0.32,-1.51l0.0,-0.02l0.29,-0.98l0.04,-0.14Z", "name": "Kebbi"}, "2036": {"path": "M329.4,69.75l0.02,-0.02l0.28,-1.49l0.45,-0.14l0.48,-0.15l0.37,-0.12l0.13,-0.04l0.24,-0.07l0.16,-0.04l0.42,-0.11l0.24,-0.06l0.01,-0.0l0.03,-0.01l0.12,-0.04l1.24,-0.46l0.42,-0.15l0.41,-0.08l0.37,-0.08l0.07,-0.01l0.09,-0.03l0.46,-0.22l0.06,-0.03l0.68,-0.48l0.06,-0.05l0.48,-0.51l0.43,-0.45l0.15,-0.16l0.56,-0.59l0.45,-0.47l0.03,-0.03l0.59,-0.78l0.02,-0.02l0.36,-0.41l0.36,-0.21l0.1,-0.08l0.7,-0.78l0.13,-0.04l0.27,-0.32l0.01,-0.09l0.26,-0.29l0.07,-0.04l0.0,-0.0l0.18,-0.1l0.12,-0.1l0.02,-0.02l0.32,-0.38l1.01,0.0l0.02,0.0l1.91,0.21l0.0,0.0l0.15,0.01l2.77,0.27l0.08,0.01l1.58,0.24l0.03,0.0l0.88,0.06l0.0,0.0l1.82,0.12l0.05,0.0l0.04,0.0l0.69,-0.01l0.29,-0.0l0.05,-0.0l0.07,-0.01l0.03,-0.0l0.05,-0.0l0.2,-0.03l0.0,-0.0l0.08,-0.01l0.17,-0.03l0.43,-0.06l0.01,-0.0l0.41,-0.07l0.07,-0.02l1.7,-0.59l0.2,-0.07l0.01,-0.01l0.06,-0.03l1.52,-0.85l0.01,-0.01l0.14,-0.08l0.27,-0.08l0.07,-0.03l0.1,-0.05l0.0,-0.0l0.25,-0.13l0.05,-0.03l1.05,-0.76l0.12,-0.08l0.73,-0.3l0.01,-0.0l0.08,-0.05l0.64,-0.45l0.38,-0.16l0.15,-0.05l0.16,-0.1l0.04,-0.04l0.0,-0.0l0.06,-0.06l0.12,-0.11l0.01,-0.01l0.06,-0.06l0.6,-0.35l1.85,-1.09l0.0,-0.0l0.75,-0.44l0.84,-0.5l0.79,-0.47l0.0,-0.0l0.57,-0.34l0.38,-0.12l0.11,-0.06l0.7,-0.52l0.55,-0.26l0.04,-0.02l0.48,-0.29l0.0,-0.0l0.38,-0.23l0.0,-0.0l0.01,-0.01l0.02,-0.01l0.28,-0.2l0.09,-0.0l0.35,-0.22l0.03,-0.06l0.51,-0.21l0.01,-0.0l0.11,-0.06l0.51,-0.41l0.1,-0.08l0.3,-0.2l0.06,-0.04l0.23,-0.07l0.16,-0.15l0.25,-0.07l0.53,-0.42l0.06,-0.04l2.41,-1.51l0.28,-0.17l0.84,-0.53l0.1,-0.06l0.01,-0.01l0.7,-0.48l0.19,-0.11l1.45,-0.87l0.0,-0.0l0.04,-0.03l0.19,-0.11l0.04,0.0l0.4,-0.31l0.06,-0.02l0.13,-0.06l0.32,-0.22l0.81,-0.56l0.2,-0.14l0.07,-0.05l0.46,-0.3l0.0,-0.0l0.12,-0.08l0.0,-0.0l0.05,-0.03l0.01,-0.01l0.01,-0.01l0.17,-0.1l0.63,-0.34l0.73,-0.4l0.0,-0.0l0.2,-0.11l0.77,-0.3l0.57,-0.06l0.53,0.16l0.07,0.01l0.52,0.05l0.56,0.2l0.11,0.02l1.9,0.09l0.45,0.19l0.17,0.03l0.7,-0.03l0.89,0.14l0.03,0.0l0.01,0.0l0.01,0.0l0.1,0.01l0.37,0.02l0.4,0.08l0.05,0.01l1.33,0.13l0.97,0.09l0.02,0.0l0.66,0.11l1.4,0.23l0.74,0.12l0.12,0.02l0.0,0.0l1.03,0.17l0.48,0.08l0.27,0.05l0.87,0.15l0.16,0.1l0.18,0.06l0.46,0.03l0.16,0.12l0.2,0.08l0.41,0.04l0.0,0.0l0.01,0.0l0.12,-0.01l0.19,-0.04l0.27,0.07l0.0,0.0l0.56,0.13l0.15,0.04l0.12,0.03l0.06,0.01l0.02,0.0l0.12,0.01l0.01,0.0l0.21,0.01l0.44,0.18l0.32,0.13l0.03,0.01l0.08,0.03l0.57,0.18l0.63,0.2l0.14,0.05l0.47,0.15l0.18,0.06l0.96,0.47l0.04,0.02l0.33,0.16l0.12,0.06l0.01,0.0l0.1,0.05l0.69,0.31l0.6,0.28l0.73,0.53l0.08,0.13l0.2,0.16l0.01,0.0l0.03,0.01l0.35,0.13l0.68,0.73l0.01,0.01l0.43,0.42l0.01,0.01l0.08,0.08l0.0,0.0l0.24,0.23l0.0,0.0l0.47,0.43l0.03,0.03l0.06,0.05l0.35,0.22l0.19,0.22l0.1,0.08l0.12,0.07l0.79,0.45l0.1,0.04l0.02,0.01l0.0,0.0l1.52,0.4l0.2,0.05l0.68,0.18l0.36,0.1l0.41,0.11l0.35,0.36l0.04,0.04l0.0,0.0l0.01,0.01l0.05,0.06l0.0,0.0l0.63,0.73l0.1,0.11l1.1,1.3l0.06,0.06l0.01,0.01l0.01,0.0l0.47,0.35l0.08,0.05l0.02,0.01l0.89,0.4l0.07,0.14l0.0,0.01l0.04,0.06l0.0,0.01l0.06,0.1l0.0,0.0l0.04,0.07l0.18,0.32l0.16,0.29l0.04,0.06l0.18,0.22l0.01,0.01l0.01,0.01l0.64,0.73l0.0,0.0l0.08,0.09l0.08,0.07l1.48,0.97l0.31,0.2l0.25,0.17l0.67,1.19l0.1,0.11l0.78,0.64l0.31,0.37l0.14,0.1l0.39,0.18l0.05,0.1l0.1,0.08l0.16,0.12l0.26,0.2l0.32,0.24l0.08,0.06l0.2,0.21l0.18,0.19l0.2,0.21l0.07,0.07l0.16,0.16l0.16,0.17l0.13,0.14l0.31,0.12l0.46,-0.03l0.1,-0.02l0.31,-0.1l0.34,-0.11l0.0,-0.0l0.26,-0.08l0.23,-0.07l0.25,-0.08l0.12,-0.04l0.34,-0.09l0.4,-0.11l0.41,-0.11l0.26,-0.07l0.27,-0.08l0.28,-0.08l0.37,-0.02l0.86,-0.04l0.9,0.14l0.27,0.08l0.94,0.28l0.63,0.26l0.19,0.08l0.0,0.0l0.27,0.11l0.01,0.0l0.45,0.24l0.0,0.0l0.12,0.06l0.24,0.13l0.18,0.09l0.44,0.25l0.18,0.1l0.18,0.11l0.25,0.14l0.37,0.21l0.0,0.0l0.08,0.04l0.24,0.17l0.18,0.12l0.14,0.1l0.16,0.11l0.21,0.14l0.12,0.09l0.15,0.1l0.16,0.11l0.11,0.08l0.0,0.0l0.04,0.02l0.3,0.27l0.21,0.19l0.02,0.02l0.07,0.07l0.16,0.17l0.19,0.2l0.15,0.1l0.14,0.05l0.15,0.15l0.34,0.36l0.09,0.09l0.22,0.24l0.11,0.12l0.2,0.21l0.27,0.29l0.13,0.17l0.18,0.23l0.2,0.25l0.22,0.28l0.01,0.02l0.09,0.17l0.05,0.1l0.15,0.3l0.09,0.17l0.0,0.0l0.06,0.12l0.1,0.19l0.0,0.0l0.07,0.14l0.05,0.07l0.25,0.31l0.01,0.25l0.0,0.12l0.0,0.23l0.04,0.17l0.09,0.2l0.18,0.38l0.19,0.19l0.98,0.45l0.03,0.01l0.44,0.16l0.27,0.1l0.25,0.18l0.19,0.13l0.06,-0.03l-0.0,0.0l0.2,0.09l0.18,0.08l0.21,0.09l0.22,0.1l0.11,0.05l0.02,0.01l0.11,0.06l0.29,0.16l0.16,0.05l0.22,0.02l0.06,0.0l0.2,0.02l0.4,0.17l0.22,0.03l0.32,-0.05l0.71,0.12l0.43,0.17l0.74,0.29l1.38,0.54l0.06,0.02l0.92,0.19l0.08,0.01l0.36,0.0l0.19,0.0l0.12,0.06l0.29,0.16l0.09,0.04l1.39,0.35l0.19,0.05l0.17,0.08l0.91,0.44l0.2,0.04l0.16,-0.01l0.0,-0.0l0.19,-0.01l1.58,0.56l0.02,0.01l0.0,0.0l0.58,0.21l0.14,0.02l0.64,0.0l0.51,0.33l0.15,0.1l0.0,0.0l0.12,0.07l0.09,0.04l3.01,0.97l0.03,0.01l0.83,0.2l0.34,0.19l0.08,0.03l0.71,0.21l0.02,0.0l0.52,0.13l0.95,0.5l0.21,0.05l0.11,-0.01l-0.01,0.28l-0.33,0.16l-0.67,0.27l-0.01,0.0l-0.08,0.04l-0.34,0.15l-0.56,0.24l-0.04,0.02l-0.19,0.11l-0.11,0.1l-0.36,0.46l-0.0,0.0l-0.34,0.44l-0.04,0.07l-0.1,0.21l-0.04,0.17l-0.0,0.26l-0.02,0.05l-0.09,0.31l-0.41,0.62l-0.02,0.03l-0.29,0.55l-0.04,0.14l-0.08,0.63l-0.07,0.08l-0.55,0.4l-0.01,0.01l-1.1,0.84l-0.08,0.08l-0.21,0.29l-0.66,0.41l-0.04,0.03l-0.73,0.57l-0.04,0.04l-0.38,0.4l-0.56,0.22l-0.02,0.01l-1.34,0.6l-0.05,0.02l-0.37,0.23l-1.19,0.41l-0.0,0.0l-1.12,0.38l-0.08,0.04l-0.26,0.16l-0.6,0.12l-0.02,0.0l-1.36,0.33l-1.06,0.1l-1.24,0.1l-0.61,-0.12l-0.83,-0.55l-0.01,-0.04l-0.06,-0.21l-0.05,-0.1l-0.23,-0.35l-0.0,-0.0l-0.15,-0.23l-0.08,-0.41l-0.03,-0.1l-0.2,-0.4l-0.57,-0.17l-0.23,0.14l-0.57,0.29l-0.34,0.14l-0.06,0.03l-0.32,0.2l-0.04,0.02l-0.39,0.3l-0.12,0.1l-0.0,0.0l-0.53,0.42l-0.29,0.14l-0.06,0.0l-0.86,-0.14l-0.48,-0.14l-0.93,-0.33l-0.48,-0.24l-0.84,-0.57l-0.04,-0.02l-0.51,-0.26l-0.41,-0.28l-0.05,-0.04l-0.4,-0.25l-0.38,-0.27l-0.36,-0.43l-0.37,-0.57l-0.07,-0.25l-0.07,-0.55l-0.03,-0.11l-0.39,-0.88l-0.38,-1.32l-0.01,-0.03l-0.33,-0.91l-0.03,-0.19l-0.01,-0.04l-0.26,-0.93l-0.0,-0.0l-0.01,-0.02l-0.0,-0.0l-0.1,-0.36l-0.05,-0.11l-0.47,-0.71l-0.08,-0.09l-0.94,-0.76l-0.19,0.09l0.04,-0.15l-0.25,-0.07l-0.12,-0.01l-0.61,0.02l-0.24,-0.01l-0.01,-0.0l-0.4,-0.01l-0.12,0.01l-0.8,0.22l-0.04,0.01l-0.6,0.23l-1.39,-0.21l-0.19,0.02l-0.05,0.02l-0.7,0.04l-0.84,0.05l-0.04,0.0l-0.64,0.09l-0.17,0.02l-0.06,0.01l-0.95,0.28l-0.94,0.06l-1.01,0.06l-1.1,0.06l-0.49,-0.02l-0.13,-0.01l-0.97,-0.18l-0.02,-0.0l-1.14,-0.15l-1.05,-0.14l-1.39,-0.42l-0.03,-0.01l-1.19,-0.27l-0.11,-0.01l-1.47,0.07l-0.05,0.01l-2.1,0.39l-1.64,0.22l-0.44,0.06l-1.56,0.21l-1.32,0.12l-0.0,0.0l-2.09,0.2l-0.04,0.01l-1.92,0.39l-0.14,0.06l-0.56,0.36l-0.18,0.28l-0.1,0.74l-0.0,0.05l-0.0,0.35l-0.0,0.91l0.0,0.04l0.11,1.18l-0.34,1.33l-0.0,0.01l-0.18,0.78l-0.01,0.03l-0.19,1.23l-0.16,0.67l-0.01,0.07l-0.09,1.71l0.0,0.05l0.12,1.61l0.01,0.31l0.04,1.0l0.09,0.24l0.71,0.87l0.17,0.12l1.42,0.55l0.03,0.01l1.21,0.36l0.01,0.0l0.84,0.22l0.06,0.01l1.36,0.14l0.02,0.0l1.52,0.07l0.0,0.0l1.09,0.04l0.95,0.11l0.13,-0.01l0.8,-0.17l0.25,0.28l0.08,0.07l0.52,0.35l0.55,0.95l0.42,0.95l0.24,0.61l-0.36,0.04l-1.05,-0.02l-0.06,0.0l-1.3,0.16l-0.02,0.0l-0.99,0.17l-1.27,0.07l-0.07,0.01l-0.8,0.18l-0.12,0.05l-0.75,0.45l-0.13,0.13l-0.6,0.94l-0.05,0.13l-0.29,1.3l-0.34,0.64l-0.02,0.04l-0.28,0.72l-0.51,0.97l-0.51,0.82l-0.04,0.08l-0.47,1.36l-0.01,0.03l-0.35,1.29l-0.01,0.03l-0.27,1.3l-0.0,0.0l-0.24,1.23l-0.48,0.46l-0.04,0.04l-0.34,0.43l-1.03,0.67l-0.98,0.54l-0.23,0.1l-0.97,0.43l-0.01,0.0l-0.81,0.37l-0.3,0.14l-1.33,0.39l-0.0,0.0l-1.83,0.56l-0.02,0.01l-1.47,0.52l-1.6,0.45l-1.28,0.31l-0.04,0.01l-0.99,0.34l-0.02,0.01l-0.68,0.27l-0.04,0.02l-0.8,0.41l-0.07,0.04l-0.43,0.34l-0.91,0.43l-0.03,0.01l-0.65,0.37l-1.12,0.59l-0.03,0.02l-0.72,0.47l-0.36,0.17l-0.12,0.08l-0.17,0.18l-0.24,0.25l-0.28,0.29l-0.11,0.09l-0.65,0.54l-0.03,0.03l-0.93,0.94l-0.07,0.1l-0.22,0.44l-0.04,0.13l-0.1,0.74l-0.0,0.01l-0.0,0.03l-0.14,1.22l-0.0,0.02l-0.09,1.51l0.0,0.06l0.12,1.46l0.0,0.03l0.35,2.23l0.02,1.78l0.0,0.04l0.15,1.3l0.06,1.18l-0.03,1.61l-0.04,0.78l-0.0,0.01l-0.02,1.07l0.0,0.02l0.05,1.35l-0.13,1.0l0.01,0.16l0.11,0.37l0.01,0.03l0.19,0.49l-0.02,0.87l-0.31,1.09l-0.05,0.18l-0.01,0.13l0.04,0.61l0.0,0.02l0.11,1.02l-0.16,0.66l-0.42,1.36l-0.23,0.76l-0.02,0.13l0.03,0.75l0.15,0.3l0.38,0.3l0.51,1.12l0.32,1.14l0.02,0.05l0.52,1.23l0.09,0.22l0.52,1.22l-0.21,1.26l-0.0,0.09l0.04,0.82l-0.14,0.96l-0.09,0.62l-0.37,0.96l-0.01,0.27l0.35,1.01l0.08,0.13l0.69,0.79l0.31,1.32l0.0,0.01l0.37,1.47l0.03,0.08l0.32,0.64l0.03,0.05l0.6,0.87l0.31,0.55l0.1,0.4l0.03,0.08l0.12,0.24l0.23,0.63l0.04,0.61l0.04,0.16l0.04,0.08l0.05,0.14l-0.05,0.08l-0.19,0.16l-0.48,0.1l-0.51,-0.07l-0.12,0.0l-1.24,0.21l-0.88,0.12l-0.38,-0.14l-0.36,0.05l-0.71,0.48l-0.64,0.39l-0.02,0.01l-0.66,0.46l-0.01,0.01l-0.88,0.67l-0.63,0.21l-0.37,-0.05l-0.14,0.0l-1.05,0.22l-0.01,0.0l-0.4,0.09l-0.03,0.01l-0.77,0.24l-0.07,0.03l-0.48,0.24l-0.58,0.25l-0.12,0.08l-0.35,0.34l-0.05,0.06l-0.24,0.35l-0.01,0.02l-0.17,0.28l-0.4,0.23l-0.08,0.06l-0.43,0.43l-0.31,0.1l-0.25,0.23l-0.24,0.6l0.04,0.37l0.33,0.51l-0.06,0.61l-0.16,0.59l-0.44,0.83l-0.64,1.04l-0.27,0.42l-0.01,0.01l-0.38,0.62l-0.04,0.1l-0.07,0.25l0.02,0.26l0.26,0.63l0.01,0.59l0.03,0.15l0.2,0.46l0.07,0.36l0.23,1.28l0.12,0.8l0.05,0.14l0.13,0.23l0.19,0.75l0.01,0.03l0.17,0.47l0.02,0.21l0.13,0.26l0.45,0.42l0.0,0.0l0.02,0.02l0.26,0.37l0.06,0.07l0.62,0.55l0.24,0.1l0.18,0.01l0.25,0.1l0.43,0.29l0.65,0.6l0.08,0.06l0.47,0.25l0.4,0.25l0.4,0.39l0.0,0.0l0.23,0.22l-0.87,1.23l-0.07,0.15l-0.26,1.33l-0.63,0.89l-1.3,0.48l-0.0,0.0l-2.83,1.08l-0.06,0.03l-1.14,0.69l-1.16,0.33l-1.15,-0.57l-0.52,-0.26l-1.11,-1.81l-0.07,-0.08l-1.26,-1.18l-0.03,-0.03l-1.22,-0.91l-0.08,-0.05l-1.29,-0.54l-0.01,-0.01l-2.52,-0.95l-0.03,-0.01l-2.46,-0.69l-1.92,-0.59l-0.2,-0.01l-1.68,0.33l-0.15,0.07l-1.06,0.75l-0.03,0.02l-1.19,1.03l-0.01,0.01l-0.9,0.84l-0.56,0.52l-0.07,0.09l-0.53,0.92l-0.03,0.06l-0.51,1.37l-0.01,0.02l-0.41,1.3l-0.02,0.17l0.11,0.87l-0.08,0.56l-0.49,0.46l-1.45,0.09l-1.66,-0.73l-0.17,-0.07l-0.03,-0.01l-1.44,-0.49l-0.11,-0.02l-2.36,-0.13l-0.08,0.0l-2.04,0.3l-0.08,0.02l-1.44,0.52l-0.1,0.05l-0.69,0.5l-0.15,0.23l-0.15,0.6l-0.12,0.48l0.0,0.21l0.42,1.4l0.05,0.11l0.94,1.35l0.89,1.4l0.2,0.7l0.08,0.33l-0.59,1.27l-0.9,0.76l-0.67,0.43l-0.56,0.36l-0.01,0.01l-0.83,0.56l-1.01,0.4l-1.89,-0.24l-1.67,-1.57l-0.93,-1.47l-0.09,-0.1l-1.26,-0.98l-1.1,-0.99l-0.12,-0.08l-1.46,-0.56l-0.02,-0.01l-3.02,-1.0l-0.06,-0.01l-2.17,-0.37l-0.64,-0.25l0.34,-1.16l1.11,-1.3l1.2,-1.19l1.03,-0.6l0.19,-0.26l0.28,-1.3l-0.03,-0.25l-0.96,-2.11l-0.14,-0.17l-1.65,-1.09l-0.26,-0.06l-2.29,0.21l-2.42,-0.43l-1.81,-0.59l-0.11,-0.02l-0.58,-0.02l0.07,-0.73l0.0,-0.06l-0.0,-0.07l-0.08,-1.51l0.62,-1.86l0.02,-0.1l0.11,-1.76l0.41,-1.72l0.0,-0.02l0.35,-1.9l-0.03,-0.23l-0.62,-1.45l-0.22,-1.73l-0.0,-0.03l-0.24,-1.17l-0.13,-0.22l-1.41,-1.22l-0.79,-0.95l-0.16,-1.14l0.1,-1.59l0.49,-1.37l0.02,-0.16l-0.08,-1.36l0.29,-0.95l0.56,-1.28l0.01,-0.02l0.03,-0.07l0.98,-2.59l0.02,-0.09l0.26,-1.98l0.0,-0.02l0.17,-1.93l0.28,-0.72l0.71,-0.61l0.8,-0.24l1.26,0.25l0.12,0.01l0.87,-0.1l1.1,-0.03l0.05,-0.0l1.16,-0.18l1.03,0.02l0.03,-0.0l2.22,-0.12l0.49,0.44l0.39,0.46l0.31,0.14l0.5,-0.01l0.24,-0.08l1.7,-1.28l0.0,-0.0l0.73,-0.55l0.0,-0.0l1.21,-0.93l0.11,-0.13l0.33,-0.64l1.03,-0.52l0.18,-0.18l0.12,-0.25l0.47,-0.3l0.18,-0.25l0.15,-0.67l0.01,-0.03l0.22,-1.39l0.0,-0.02l0.1,-0.87l0.12,-0.56l0.67,0.05l1.79,0.78l0.13,0.03l1.1,0.09l0.22,-0.04l0.96,-0.5l0.06,-0.04l0.42,-0.32l0.05,-0.05l0.54,-0.58l0.03,-0.04l0.38,-0.55l0.07,-0.23l0.0,-0.28l0.0,-0.82l-0.04,-0.18l-0.61,-1.26l-0.05,-0.08l-0.88,-1.1l-0.01,-0.01l-0.53,-0.63l-0.06,-0.06l-1.22,-0.95l-0.67,-0.54l-1.32,-1.26l-0.12,-0.08l-1.34,-0.57l-0.84,-0.47l-0.05,-0.02l-0.78,-0.32l-0.55,-0.45l-0.69,-0.73l0.54,-0.99l0.92,-1.53l0.03,-0.07l0.56,-1.56l0.0,-0.0l0.01,-0.04l0.02,-0.07l0.13,-0.79l0.35,-1.2l0.51,-1.38l0.01,-0.04l0.32,-1.28l0.01,-0.1l0.01,-1.51l-0.03,-0.15l-0.6,-1.55l-0.51,-1.35l0.05,-0.69l0.09,-1.24l-0.01,-0.14l-0.41,-1.48l-0.23,-1.59l-0.02,-0.06l-0.18,-0.57l-0.42,-1.31l-0.04,-0.08l-0.42,-0.71l-0.98,-1.93l-1.12,-2.2l0.11,-0.59l0.18,-0.94l0.01,-0.05l0.17,-2.66l-0.04,-0.2l-1.3,-2.77l-0.27,-1.0l-0.21,-3.11l-0.0,-0.01l-0.25,-2.6l-0.01,-0.06l-0.73,-2.87l-0.28,-1.95l-0.15,-1.02l-0.04,-0.31l0.36,-2.35l0.0,-0.1l-0.23,-2.36l-0.05,-2.5l-0.0,-0.04l-0.37,-3.11l-0.01,-0.03l-0.05,-0.23l-0.34,-1.69l-0.42,-2.34l0.35,-2.37l0.0,-0.02l0.2,-2.34l0.0,-0.02l0.07,-1.53l0.08,-1.1l0.4,-2.36l0.27,-1.51Z", "name": "Katsina"}, "2035": {"path": "M420.42,101.2l0.38,0.66l0.02,0.04l0.85,1.17l0.54,0.95l0.75,1.56l0.0,0.01l0.6,1.15l0.01,0.02l0.64,1.09l0.32,0.65l0.03,0.36l0.0,0.03l0.06,0.38l-0.13,0.57l-0.0,0.16l0.15,0.82l0.1,0.2l0.48,0.52l0.02,0.02l0.6,0.55l0.17,0.23l0.57,0.07l0.3,-0.24l0.14,-0.11l0.1,-0.13l0.22,-0.44l0.0,-0.01l0.18,-0.38l0.2,-0.36l0.04,-0.09l0.11,-0.38l0.46,-0.86l0.01,-0.03l0.14,-0.32l0.01,-0.02l0.23,-0.62l0.23,-0.52l0.03,-0.12l0.06,-0.53l0.0,-0.01l0.05,-0.43l0.06,-0.33l0.17,-0.44l0.02,-0.06l0.1,-0.44l0.01,-0.06l0.02,-0.29l0.19,-0.37l0.61,-0.59l0.6,-0.43l0.77,-0.52l1.47,-0.71l0.04,-0.02l0.03,-0.01l0.81,-0.46l0.96,-0.48l0.96,-0.41l0.48,-0.2l0.62,-0.09l0.83,-0.04l0.04,-0.0l1.13,-0.17l0.07,-0.01l1.0,-0.11l0.7,0.01l1.15,0.4l0.0,0.0l0.45,0.15l0.04,0.01l0.91,0.2l0.01,0.0l1.59,0.31l0.0,0.0l0.43,0.08l0.14,0.03l0.81,0.36l0.04,0.01l0.94,0.3l0.03,0.01l1.07,0.25l0.07,0.01l0.89,0.05l0.64,0.2l0.17,0.25l0.04,0.49l-0.06,0.39l-0.0,0.11l0.09,0.86l-0.07,1.32l0.0,0.06l0.07,0.81l0.0,0.01l0.08,0.76l-0.11,0.99l0.01,0.14l0.18,0.72l0.02,0.07l0.41,0.91l0.12,0.15l0.96,0.76l0.09,0.05l0.47,0.2l0.0,0.0l0.6,0.25l0.89,0.64l0.03,0.02l1.09,0.65l0.11,0.04l0.79,0.2l0.49,0.45l0.28,0.47l0.18,0.3l0.12,0.67l0.02,0.07l0.32,0.82l0.3,1.16l-0.03,0.59l-0.41,0.81l-0.03,0.08l-0.2,0.81l0.06,0.33l0.89,1.23l0.0,0.01l0.34,0.46l0.14,0.12l0.35,0.17l0.65,0.33l0.19,0.04l0.78,-0.02l0.0,-0.0l0.97,-0.04l1.04,0.23l1.23,0.3l0.06,0.01l1.27,0.13l0.02,0.0l1.12,0.06l0.97,0.3l0.32,0.1l0.01,0.0l0.84,0.24l0.42,0.27l0.5,0.54l0.4,1.17l0.37,1.89l0.03,0.09l0.13,0.28l-0.1,6.55l-0.32,0.42l-1.01,1.12l-0.08,0.13l-0.39,1.09l-0.01,0.03l-0.26,0.99l0.09,0.37l0.43,0.47l0.19,0.11l0.9,0.26l0.02,0.01l0.35,0.08l-0.0,0.92l0.64,0.32l0.89,-0.69l0.02,-0.02l0.28,-0.25l0.19,-0.1l0.05,-0.04l0.44,-0.04l0.08,-0.02l0.23,-0.07l0.09,-0.12l0.92,0.03l0.07,-0.0l2.35,-0.31l0.54,1.38l0.01,3.03l0.33,0.39l1.66,0.3l0.11,0.0l2.2,-0.22l0.17,-0.06l2.8,-1.71l0.1,-0.08l1.72,-2.05l1.03,-0.44l0.72,2.03l1.76,5.79l0.12,0.4l0.23,2.8l-1.22,2.13l-0.05,0.16l-0.06,0.6l-0.0,0.0l-0.17,1.78l-1.83,2.81l-2.16,2.75l-0.08,0.16l-0.6,2.53l-0.01,0.13l0.24,2.36l0.09,0.22l0.13,0.15l0.31,0.14l2.8,-0.07l0.73,-0.02l0.03,-0.0l2.29,-0.23l1.1,1.0l0.58,2.29l0.03,0.09l1.0,1.89l0.0,0.01l0.79,1.43l0.06,0.09l2.02,2.08l0.04,0.03l1.4,1.12l0.15,0.08l0.5,0.13l1.9,0.48l0.77,1.01l-1.4,1.43l-1.14,1.17l-2.36,1.9l-0.02,0.02l-2.53,2.31l-0.05,0.06l-0.9,1.23l-0.06,0.11l-0.78,2.41l-0.01,0.03l-0.53,2.08l-0.01,0.17l0.34,1.89l-0.15,0.4l-0.01,0.0l-2.52,0.92l-0.06,0.01l-0.12,0.04l-1.29,0.72l-2.43,0.87l-1.15,-0.1l-1.28,-1.19l-0.34,-0.1l-1.41,0.24l-0.64,0.11l-0.15,0.06l-3.0,1.9l-0.13,0.13l-0.78,1.28l-1.56,1.29l-0.03,0.02l-1.33,1.3l-0.66,0.44l-0.61,0.41l-0.15,0.19l-0.18,0.49l-1.15,0.84l-0.08,0.08l-1.64,2.09l-0.04,0.06l-1.56,2.86l-2.04,2.56l-1.15,1.2l-2.29,0.57l-3.22,-0.19l-0.18,0.03l-0.65,0.28l-0.58,0.24l-0.2,0.19l-1.03,2.01l-0.03,0.08l-0.9,3.51l-0.01,0.05l-0.47,3.62l-0.0,0.0l-0.07,0.62l-0.0,0.06l0.19,4.75l0.0,0.02l0.29,3.59l0.01,0.06l0.55,2.4l0.06,0.14l1.35,1.97l0.06,0.07l1.63,1.52l0.37,0.38l1.26,1.32l0.87,1.88l0.09,2.29l-0.57,2.34l-0.99,2.17l-1.37,2.15l-0.82,1.06l-0.04,0.06l-0.86,1.6l-0.73,0.5l-0.26,0.07l-1.18,0.33l-3.47,-0.75l-1.37,-0.8l-0.43,-0.36l-0.75,-0.97l-0.02,-0.02l-1.0,-1.13l-0.56,-1.11l-0.27,-0.21l-3.34,-0.77l-0.05,-0.01l-2.07,-0.2l-0.04,-0.0l-1.69,0.02l-1.2,-0.2l-1.13,-1.14l-0.29,-1.02l-0.0,-0.0l-0.11,-0.37l-0.25,-0.85l0.51,-0.72l0.63,-0.36l1.94,-0.12l0.12,-0.03l1.47,-0.59l0.19,-0.15l0.88,-1.34l0.06,-0.17l0.25,-2.09l-0.01,-0.14l-0.62,-2.73l-0.38,-2.23l-0.0,-0.01l-0.44,-2.29l0.09,-1.69l0.51,-1.69l0.0,-0.02l0.6,-2.39l0.61,-1.34l0.01,-0.02l0.6,-1.58l0.02,-0.18l-0.15,-1.47l-0.03,-1.82l-0.01,-0.08l-0.29,-1.36l-0.05,-0.12l-1.19,-2.02l-0.89,-2.07l-0.01,-0.03l-1.14,-2.2l-0.04,-0.06l-0.82,-1.07l-0.29,-0.38l-0.1,-0.09l-1.55,-1.03l-1.72,-1.86l-0.05,-0.04l-1.77,-1.37l-0.01,-0.01l-1.41,-1.04l-0.14,-0.07l-2.96,-0.71l-0.05,-0.01l-1.3,-0.13l-0.07,-0.0l-1.98,0.15l-1.7,-0.61l-1.21,-1.02l-1.07,-1.91l-0.06,-0.08l-1.83,-1.91l-0.13,-0.09l-2.06,-0.86l-0.06,-0.02l-1.87,-0.46l-0.57,-0.16l-2.28,-1.0l-1.86,-1.14l-1.18,-1.33l-0.56,-1.5l-0.02,-1.3l0.72,-1.28l0.0,-0.01l0.98,-1.82l0.01,-0.02l0.8,-1.67l0.03,-0.27l-0.38,-1.51l-0.15,-0.23l-1.37,-0.99l-0.17,-0.07l-1.48,-0.23l-0.13,0.0l-1.45,0.25l-0.05,0.01l-1.86,0.57l-0.04,0.01l-1.55,0.65l-0.48,-0.0l-1.44,-0.01l-0.19,0.05l-2.53,1.39l-0.37,0.2l-0.03,0.02l-1.09,0.74l-1.81,1.09l-0.06,0.04l-1.07,0.96l-0.01,0.01l-1.44,1.4l-1.68,1.5l-0.8,0.72l-1.01,0.44l-0.02,0.0l-0.0,0.0l-1.74,0.31l-1.89,0.06l-1.61,-0.07l-0.17,-0.2l-0.03,-0.03l-0.33,-0.31l-0.42,-0.41l-0.07,-0.05l-0.44,-0.27l-0.02,-0.01l-0.43,-0.23l-0.64,-0.59l-0.05,-0.04l-0.5,-0.33l-0.08,-0.04l-0.35,-0.14l-0.12,-0.03l-0.11,-0.01l-0.49,-0.43l-0.26,-0.36l-0.05,-0.06l-0.05,-0.04l-0.34,-0.32l-0.01,-0.11l-0.02,-0.1l-0.18,-0.51l-0.2,-0.79l-0.04,-0.1l-0.12,-0.21l-0.11,-0.73l-0.0,-0.01l-0.23,-1.29l-0.0,-0.0l-0.08,-0.4l-0.03,-0.08l-0.19,-0.43l-0.01,-0.59l-0.03,-0.15l-0.24,-0.57l0.02,-0.06l0.35,-0.56l0.27,-0.42l0.01,-0.01l0.65,-1.06l0.01,-0.02l0.46,-0.88l0.03,-0.08l0.18,-0.67l0.01,-0.07l0.08,-0.79l-0.06,-0.26l-0.3,-0.45l0.09,-0.23l0.22,-0.07l0.16,-0.1l0.47,-0.46l0.44,-0.26l0.14,-0.14l0.22,-0.36l0.21,-0.31l0.26,-0.26l0.52,-0.22l0.03,-0.01l0.46,-0.23l0.72,-0.22l0.39,-0.09l0.98,-0.21l0.39,0.05l0.18,-0.02l0.79,-0.25l0.12,-0.06l0.93,-0.71l0.64,-0.45l0.63,-0.39l0.02,-0.01l0.55,-0.37l0.29,0.1l0.19,0.02l0.98,-0.13l0.01,-0.0l1.18,-0.2l0.52,0.07l0.13,-0.0l0.65,-0.13l0.18,-0.09l0.31,-0.27l0.08,-0.09l0.14,-0.22l0.05,-0.08l0.04,-0.35l-0.13,-0.35l-0.02,-0.05l-0.02,-0.03l-0.04,-0.58l-0.02,-0.11l-0.26,-0.7l-0.02,-0.04l-0.11,-0.22l-0.1,-0.41l-0.04,-0.1l-0.34,-0.61l-0.02,-0.03l-0.59,-0.86l-0.29,-0.58l-0.36,-1.42l-0.33,-1.41l-0.09,-0.17l-0.7,-0.81l-0.27,-0.8l0.34,-0.87l0.02,-0.09l0.1,-0.66l0.14,-1.0l0.0,-0.08l-0.04,-0.81l0.22,-1.33l-0.03,-0.22l-0.56,-1.33l-0.0,-0.0l-0.09,-0.22l-0.51,-1.21l-0.33,-1.15l-0.02,-0.06l-0.56,-1.24l-0.12,-0.15l-0.32,-0.25l-0.02,-0.5l0.21,-0.69l0.42,-1.37l0.01,-0.02l0.18,-0.74l0.01,-0.14l-0.12,-1.08l-0.04,-0.54l0.03,-0.11l0.32,-1.14l0.01,-0.1l0.02,-1.0l-0.03,-0.15l-0.21,-0.54l-0.08,-0.27l0.12,-0.95l0.0,-0.06l-0.05,-1.37l0.02,-1.05l0.04,-0.78l0.0,-0.01l0.04,-1.63l-0.0,-0.03l-0.06,-1.21l-0.0,-0.02l-0.15,-1.29l-0.02,-1.79l-0.0,-0.06l-0.35,-2.25l-0.12,-1.41l0.09,-1.47l0.14,-1.21l0.0,-0.0l0.0,-0.03l0.09,-0.67l0.16,-0.32l0.87,-0.88l0.64,-0.52l0.13,-0.11l0.03,-0.03l0.29,-0.3l0.24,-0.25l0.12,-0.13l0.32,-0.15l0.05,-0.03l0.73,-0.47l1.11,-0.58l0.01,-0.01l0.65,-0.37l0.94,-0.44l0.08,-0.05l0.44,-0.35l0.75,-0.39l0.65,-0.26l0.97,-0.34l1.27,-0.31l0.01,-0.0l1.62,-0.46l0.03,-0.01l1.47,-0.52l1.82,-0.56l1.36,-0.4l0.05,-0.02l0.32,-0.15l0.81,-0.37l0.97,-0.43l0.25,-0.11l0.03,-0.02l1.01,-0.56l0.03,-0.02l1.09,-0.71l0.09,-0.09l0.36,-0.46l0.55,-0.53l0.11,-0.21l0.27,-1.35l0.26,-1.29l0.35,-1.26l0.46,-1.3l0.49,-0.79l0.01,-0.02l0.53,-1.01l0.02,-0.04l0.28,-0.72l0.35,-0.67l0.04,-0.1l0.28,-1.29l0.51,-0.8l0.61,-0.37l0.71,-0.16l1.26,-0.07l0.05,-0.0l1.0,-0.17l1.26,-0.15l1.04,0.02l0.05,-0.0l0.59,-0.06l0.04,0.0Z", "name": "Kano"}, "2034": {"path": "M262.45,231.32l0.44,0.01l0.07,-0.0l1.22,-0.17l0.1,-0.03l0.9,-0.38l0.1,-0.06l0.65,-0.55l0.02,-0.02l0.31,-0.3l0.01,-0.01l0.54,-0.55l0.02,-0.03l0.52,-0.64l0.06,-0.16l0.67,-1.28l0.64,-1.2l0.7,-0.87l1.34,-1.01l0.88,-0.6l0.09,-0.09l0.96,-1.29l0.01,-0.01l0.73,-1.02l1.2,-1.01l1.07,-0.61l1.45,-0.55l2.5,-0.23l0.01,-0.0l2.7,-0.32l2.81,0.35l3.14,0.39l0.06,0.0l3.62,-0.06l0.05,-0.0l5.7,-0.74l0.17,-0.06l2.82,-1.83l0.06,-0.04l1.61,-1.52l0.02,-0.02l2.08,-2.23l0.07,-0.1l0.89,-1.88l0.0,-0.0l0.94,-2.02l0.03,-0.1l0.33,-1.84l0.43,-2.42l0.89,-2.33l1.12,-1.66l0.99,-1.32l0.87,-0.6l0.01,-0.01l0.45,-0.34l1.91,-1.13l0.06,-0.04l1.13,-0.98l0.58,-0.51l0.05,-0.05l1.0,-1.24l1.02,0.03l0.95,0.03l1.78,0.58l0.05,0.01l2.5,0.45l0.11,0.0l2.21,-0.21l1.43,0.95l0.85,1.88l-0.22,1.0l-0.92,0.54l-0.08,0.06l-1.25,1.24l-0.02,0.02l-1.17,1.38l-0.08,0.15l-0.47,1.6l0.24,0.49l1.02,0.39l0.08,0.02l2.18,0.37l2.98,0.99l1.38,0.53l1.06,0.95l0.02,0.02l1.21,0.94l0.92,1.45l0.06,0.08l1.8,1.7l0.22,0.11l2.12,0.27l0.2,-0.02l1.15,-0.45l0.08,-0.04l0.86,-0.58l0.55,-0.35l0.69,-0.44l0.04,-0.03l0.99,-0.83l0.11,-0.14l0.68,-1.48l0.03,-0.26l-0.11,-0.47l-0.0,-0.02l-0.22,-0.77l-0.05,-0.1l-0.92,-1.46l-0.01,-0.01l-0.9,-1.3l-0.37,-1.23l0.09,-0.37l0.11,-0.45l0.53,-0.38l1.35,-0.49l1.96,-0.29l2.26,0.13l1.37,0.47l0.15,0.07l1.75,0.76l0.19,0.03l1.69,-0.11l0.25,-0.11l0.7,-0.66l0.12,-0.23l0.11,-0.75l0.0,-0.11l-0.1,-0.84l0.38,-1.21l0.49,-1.33l0.49,-0.84l0.51,-0.48l0.89,-0.84l1.17,-1.01l0.97,-0.69l1.5,-0.3l1.83,0.56l0.01,0.0l2.45,0.68l2.5,0.94l1.24,0.52l1.17,0.87l1.21,1.12l1.14,1.86l0.16,0.15l0.62,0.31l1.29,0.63l0.28,0.03l1.36,-0.38l0.1,-0.04l1.15,-0.7l2.79,-1.07l1.41,-0.53l0.19,-0.14l0.75,-1.06l0.07,-0.16l0.26,-1.34l0.77,-1.09l0.03,0.0l1.8,0.08l0.03,0.0l1.93,-0.06l0.06,-0.01l1.77,-0.31l0.07,-0.01l0.09,-0.03l1.12,-0.49l0.11,-0.07l0.85,-0.76l1.69,-1.51l0.01,-0.01l1.44,-1.4l1.04,-0.93l1.78,-1.07l0.02,-0.01l1.09,-0.74l0.35,-0.19l2.44,-1.34l1.34,0.01l0.56,0.0l0.16,-0.03l1.6,-0.68l1.81,-0.55l1.36,-0.23l1.32,0.2l1.18,0.85l0.31,1.23l-0.73,1.54l-0.97,1.8l-0.77,1.37l-0.05,0.2l0.03,1.48l0.03,0.13l0.61,1.63l0.07,0.12l1.26,1.43l0.09,0.08l1.93,1.18l0.05,0.03l2.33,1.02l0.06,0.02l0.6,0.16l0.01,0.0l1.84,0.46l1.95,0.82l1.73,1.81l1.08,1.93l0.09,0.11l1.32,1.11l0.12,0.07l1.85,0.67l0.17,0.02l2.03,-0.16l1.23,0.12l2.86,0.68l1.34,0.99l1.74,1.35l1.73,1.87l0.07,0.06l0.02,0.01l1.51,1.0l0.25,0.32l0.8,1.04l1.11,2.15l0.89,2.08l0.02,0.05l1.17,1.98l0.26,1.26l0.03,1.8l0.0,0.03l0.14,1.39l-0.57,1.48l-0.62,1.36l-0.02,0.07l-0.6,2.41l-0.52,1.73l-0.02,0.09l-0.09,1.79l0.01,0.1l0.45,2.34l0.38,2.23l0.0,0.02l0.61,2.68l-0.23,1.92l-0.76,1.16l-1.29,0.52l-1.97,0.12l-0.17,0.05l-0.79,0.45l-0.13,0.12l-0.67,0.95l-0.06,0.34l0.3,1.03l0.11,0.37l0.32,1.12l0.1,0.17l1.29,1.3l0.22,0.11l1.37,0.23l0.07,0.01l1.7,-0.02l2.02,0.19l3.13,0.72l0.5,0.99l0.06,0.09l1.02,1.16l0.77,0.99l0.06,0.06l0.48,0.41l0.06,0.04l1.46,0.85l0.12,0.05l3.63,0.78l0.19,-0.01l0.88,-0.24l0.06,0.57l-0.66,2.41l-0.01,0.06l-0.14,1.15l-0.55,1.35l-0.94,1.46l-0.98,1.37l-0.05,0.09l-0.3,0.77l-0.0,0.29l0.34,0.88l0.13,0.17l1.3,1.03l0.11,0.06l0.9,0.32l1.04,0.7l0.82,0.89l0.84,0.95l0.02,0.02l0.66,0.63l0.4,0.44l-0.11,0.08l-0.15,0.29l-0.1,1.71l-0.15,1.74l-0.62,1.62l-1.48,1.75l-2.54,0.85l-0.11,0.06l-2.3,1.69l-0.11,0.13l-1.22,2.18l-0.03,0.06l-0.7,2.01l-0.65,1.82l-0.02,0.08l-0.22,1.75l-0.0,0.04l-0.05,1.54l0.03,0.17l0.71,1.68l0.02,0.04l0.92,1.7l0.59,1.79l0.29,0.95l0.0,1.21l-1.24,1.28l-1.47,0.94l-0.17,0.22l-0.41,1.33l-0.02,0.15l0.04,0.44l0.17,1.92l-0.1,1.66l-0.11,1.36l-0.0,0.0l-0.14,2.01l-0.0,0.01l-0.06,1.43l-0.32,1.35l-0.01,0.07l-0.09,1.55l0.01,0.12l0.29,1.16l0.0,0.0l0.31,1.26l-0.43,1.09l-0.55,0.49l-0.81,0.72l-0.84,0.57l-0.16,0.22l-0.3,1.08l-0.01,0.19l0.23,1.17l-0.36,1.15l-1.01,0.69l-0.02,0.01l-1.02,0.78l-0.15,0.26l-0.22,1.43l-0.0,0.11l0.19,1.4l0.27,2.74l-1.17,1.58l-0.08,0.27l0.02,0.24l0.1,1.16l0.06,0.18l0.58,0.96l0.81,1.43l0.02,0.03l0.85,1.24l0.1,0.18l0.43,0.8l0.05,0.07l0.76,0.88l0.35,0.76l0.05,0.09l0.68,0.83l0.61,0.9l0.03,0.04l1.07,1.2l0.0,0.0l0.73,0.79l0.07,0.06l1.29,0.9l0.7,0.51l0.36,0.63l0.33,0.57l0.43,1.17l0.1,0.44l0.15,0.65l0.11,1.36l-0.22,1.46l-0.54,1.3l-0.1,0.14l-0.02,0.03l-0.24,0.42l-0.48,0.82l-0.03,0.05l-0.22,0.54l-0.01,0.02l-0.29,0.86l-0.02,0.06l-0.04,0.25l-0.36,0.01l-0.29,0.13l-0.63,0.67l-0.07,0.1l-0.68,1.37l-0.65,1.15l-0.04,0.09l-0.27,1.0l-0.85,1.79l-0.7,1.39l-1.12,1.56l-0.02,0.02l-1.07,1.72l-0.02,0.03l-0.56,1.12l-0.66,1.24l-0.51,0.8l-0.49,0.43l-0.4,0.35l-0.69,0.22l-0.17,0.06l-0.94,0.18l-0.3,0.02l-0.15,0.01l-0.51,0.04l-0.71,-0.04l-0.25,-0.01l-0.79,-0.14l-0.06,-0.15l-0.13,-0.35l-0.15,-0.43l-0.03,-0.07l-0.14,-0.56l-0.04,-0.42l-0.11,-0.23l-0.07,-0.07l-0.63,-0.67l-0.43,-0.54l-0.1,-0.13l-0.06,-0.06l-0.85,-0.7l-0.72,-0.78l-0.37,-0.53l-0.0,-0.0l-0.53,-0.76l-0.03,-0.04l-0.69,-0.76l-0.44,-0.68l-0.02,-0.03l-0.38,-0.5l-0.08,-0.08l-0.3,-0.21l-0.8,-0.66l-0.23,-0.09l-0.33,-0.02l-0.54,-0.03l-0.07,0.0l-0.83,0.1l-0.61,-0.01l-0.78,-0.11l-0.02,-0.0l-0.81,-0.07l-0.25,-0.06l-0.28,-0.07l-0.44,-0.24l-0.13,-0.07l-0.16,-0.13l-0.32,-0.26l-0.26,-0.34l-0.03,-0.03l-0.33,-0.34l-0.18,-0.11l-0.35,-0.1l-0.23,-0.07l-0.05,-0.01l-0.57,-0.08l-0.03,-0.0l-0.18,-0.01l-0.28,-0.02l-0.2,0.04l-0.54,0.27l-0.04,0.02l-0.06,0.04l-0.09,0.07l-0.41,0.3l-0.06,0.05l-0.47,0.53l-0.06,0.08l-0.44,0.83l-0.02,0.04l-0.02,0.03l-0.44,1.03l-0.08,0.19l-0.06,0.15l-0.39,0.41l-0.01,0.01l-0.56,0.62l-0.01,0.01l-0.15,0.19l-0.41,0.5l-0.5,0.52l-0.26,0.28l-0.03,0.04l-0.23,0.3l-0.45,0.59l-0.58,0.74l-0.51,0.51l-0.03,0.03l-0.32,0.4l-0.09,0.11l-0.41,0.41l-0.17,0.1l-0.56,0.34l-0.03,0.02l-0.74,0.55l-0.68,0.48l-0.04,0.03l-0.19,0.13l-0.0,0.0l-0.37,0.25l-0.47,0.16l-0.22,0.06l-0.49,0.0l-0.31,-0.06l-0.32,-0.12l-0.19,-0.22l-0.0,-0.0l-0.32,-0.36l-0.14,-0.16l-0.04,-0.55l-0.25,-0.34l-0.0,-0.0l-0.07,-0.29l-0.01,-0.02l-0.09,-0.3l-0.06,-0.88l0.09,-1.23l0.0,-0.04l-0.02,-1.19l0.18,-1.38l0.0,-0.03l0.09,-1.85l0.0,-0.0l0.07,-1.53l-0.0,-0.04l-0.03,-0.73l-0.04,-0.86l-0.03,-0.59l-0.0,-0.04l-0.07,-0.54l-0.11,-0.82l-0.04,-0.12l-0.23,-0.47l-0.26,-0.55l-0.05,-0.08l-0.76,-0.93l-0.15,-0.11l-0.03,-0.01l-0.46,-0.2l-0.46,-0.38l-0.19,-0.16l-0.19,-0.17l-0.41,-0.37l-0.02,-0.01l-0.17,-0.14l-0.13,-0.07l-0.36,-0.12l-0.46,-0.15l-0.87,-0.3l-0.35,-0.13l-0.42,-0.15l-0.38,-0.41l-0.06,-0.39l-0.01,-0.06l0.02,-0.15l0.05,-0.46l0.0,-0.02l0.06,-0.96l0.0,-0.04l-0.01,-0.46l-0.01,-0.16l-0.03,-0.13l-0.41,-1.07l-0.15,-0.19l-0.61,-0.4l-0.15,-0.1l-0.58,-0.44l-0.01,-0.0l-0.25,-0.18l-0.2,-0.14l-0.28,-0.51l-0.06,-0.08l-0.52,-0.55l-0.02,-0.02l-0.51,-0.47l-0.09,-0.1l-0.18,-0.19l-0.1,-0.08l-0.61,-0.32l-0.11,-0.04l-0.34,-0.07l-0.29,-0.06l-0.1,-0.02l-0.08,-0.01l-0.52,0.01l-0.11,0.02l-0.31,0.09l-0.14,0.07l-0.39,0.32l-0.06,0.06l-0.07,0.08l-0.47,0.58l-0.42,0.38l-0.26,0.23l-0.13,0.26l-0.04,0.45l-0.01,0.08l-0.54,0.44l-0.1,0.13l-0.19,0.38l-0.17,0.34l-0.02,0.04l-0.08,0.22l-0.21,0.6l-0.22,0.43l-0.15,0.3l-0.04,0.13l-0.03,0.23l-0.05,0.37l-0.35,0.27l-0.26,0.2l-0.13,0.17l-0.08,0.2l-0.15,0.38l-0.53,0.47l-0.0,0.0l-0.37,0.34l-0.35,0.26l-0.27,0.08l-0.21,0.02l-0.51,0.05l-0.17,-0.03l-0.21,-0.03l-0.04,-0.02l-0.08,-0.05l-0.02,-0.01l-0.52,-0.3l-0.43,-0.43l-0.09,-0.07l-0.27,-0.15l-0.32,-0.17l-0.11,-0.04l-0.21,-0.04l-0.1,-0.02l-0.13,-0.01l-0.36,0.05l-0.0,0.0l-0.11,0.01l-0.1,0.03l-0.39,0.16l-0.55,0.05l-0.29,-0.12l-0.05,-0.06l-0.04,-0.04l-0.17,-0.15l-0.13,-0.08l-0.22,-0.08l-0.4,-0.15l-0.17,-0.2l-0.08,-0.31l-0.16,-0.23l-0.38,-0.27l-0.13,-0.09l-0.04,-0.02l-0.43,-0.24l-0.13,-0.07l-0.13,-0.04l-0.55,-0.08l-0.0,-0.0l-0.24,-0.03l-0.34,-0.05l-0.32,0.1l-0.34,0.3l-0.32,0.17l-0.3,0.14l-0.16,0.07l-0.07,0.0l-0.17,-0.03l-0.08,-0.07l-0.14,-0.13l-0.04,-0.03l-0.12,-0.08l-0.02,-0.02l-0.08,-0.12l-0.17,-0.29l-0.08,-0.28l-0.01,-0.09l-0.02,-0.35l-0.0,-0.03l-0.08,-0.54l-0.02,-0.07l-0.17,-0.47l-0.07,-0.12l-0.34,-0.42l-0.2,-0.13l-0.6,-0.17l-0.16,-0.01l-0.11,0.01l-0.0,0.0l-0.19,0.02l-0.2,0.08l-0.43,0.34l-0.01,0.01l-0.11,0.09l-0.37,0.3l-0.22,0.15l-0.28,0.19l-0.01,0.01l-0.15,0.12l-0.0,0.0l-0.03,0.02l-0.25,0.17l-0.02,0.01l-0.07,0.06l-0.06,0.05l-0.28,0.32l-0.53,0.24l-0.0,-0.0l-0.83,-0.27l-0.06,-0.14l-0.08,-0.12l-0.41,-0.4l-0.13,-0.55l-0.01,-0.04l-0.3,-0.86l-0.2,-0.67l-0.04,-0.1l-0.49,-0.78l-0.15,-0.14l-0.8,-0.43l-0.11,-0.04l-0.5,-0.1l-0.21,0.01l-0.67,0.23l-0.09,0.05l-0.62,0.42l-0.13,0.14l-0.56,1.04l-0.73,1.2l-0.01,0.02l-0.28,0.54l-0.56,0.82l-0.57,0.66l-0.5,0.19l-0.6,-0.18l-0.98,-0.75l-0.16,-0.07l-0.73,-0.15l-0.06,-0.01l-1.41,-0.07l-1.72,-0.16l-0.02,-0.0l-1.13,-0.04l-0.09,0.01l-1.16,0.23l-1.11,0.11l-1.82,-0.07l-0.14,0.02l-1.01,0.32l-0.14,0.08l-0.12,0.11l-0.51,-0.02l-0.05,-0.06l-0.01,-0.01l-0.07,-0.09l-0.22,-0.13l-0.48,-0.1l-0.03,-0.01l-0.76,-0.1l-0.16,0.01l-0.86,0.25l-0.01,0.0l-0.99,0.31l-0.0,0.0l-0.53,0.17l0.34,-0.62l0.03,-0.09l0.5,-1.91l0.18,-0.4l0.2,-0.45l0.02,-0.04l0.32,-1.0l-0.06,-0.36l-0.54,-0.75l-0.12,-0.11l-1.1,-0.64l-0.03,-0.02l-0.66,-0.31l-1.05,-0.7l-0.52,-0.73l0.11,-2.57l0.57,-0.95l1.45,-0.89l1.18,-0.51l0.21,-0.09l0.14,-0.1l0.95,-1.06l0.09,-0.19l0.4,-1.99l0.3,-1.29l0.61,-0.78l1.06,-0.91l0.79,-0.54l0.09,-0.09l1.13,-1.46l0.08,-0.27l-0.1,-1.38l-0.07,-0.19l-0.6,-0.9l-0.12,-0.12l-0.97,-0.6l-0.09,-0.04l-1.22,-0.37l-1.1,-0.77l0.2,-0.73l0.46,-0.53l0.09,-0.17l0.32,-1.28l0.01,-0.16l-0.12,-0.7l-0.16,-0.26l-0.97,-0.7l-0.14,-0.07l-2.06,-0.47l-1.26,-0.45l-1.19,-0.8l-0.16,-0.82l0.24,-0.52l0.87,-0.41l1.73,-0.04l0.08,-0.01l2.09,-0.46l0.25,-0.18l0.45,-0.72l0.05,-0.1l0.31,-1.12l0.01,-0.11l0.0,-1.91l-0.0,-0.03l-0.12,-1.84l-0.01,-0.06l-0.55,-2.44l-0.0,-0.01l-0.56,-2.21l0.02,-2.56l-0.01,-0.08l-0.32,-1.59l0.11,-1.82l-0.02,-0.15l-0.39,-1.22l-0.12,-0.18l-0.84,-0.71l-0.21,-0.09l-0.82,-0.1l-0.05,-0.0l-0.15,0.0l-1.31,-0.15l-0.09,-0.0l-0.23,0.03l-1.4,0.16l-2.16,0.1l-2.59,-0.12l-2.05,-0.23l-0.05,-0.0l-2.81,0.02l-0.04,0.0l-2.15,0.24l-0.51,0.05l-1.65,-0.48l-0.01,-0.0l-1.86,-0.51l-1.93,-0.85l-2.42,-1.11l-1.33,-1.31l-0.01,-0.01l-0.64,-0.61l-1.1,-2.11l0.91,-1.24l2.56,-1.61l0.07,-0.06l1.96,-2.03l0.06,-0.08l0.98,-1.71l1.09,-0.7l2.07,-0.92l0.09,-0.05l1.84,-1.45l0.1,-0.11l1.24,-2.16l0.05,-0.14l0.37,-2.4l-0.18,-0.4l-1.82,-1.13l-0.04,-0.02l-2.09,-0.99l-0.02,-0.01l-1.32,-0.53l-0.03,-0.01l-2.69,-0.8l-1.48,-0.55l0.18,-0.87l0.72,-1.69l0.01,-0.04l0.64,-2.05l0.02,-0.11l0.06,-3.11l-0.04,-0.18l-1.28,-2.66l-0.02,-0.03l-0.47,-0.8l-0.65,-1.14l-0.24,-0.19l-1.96,-0.54l-0.14,-0.01l-1.52,0.12l-0.17,0.05l-1.09,0.63l-1.18,-0.12l0.03,-1.05l-0.0,-0.07l-0.31,-2.04l-0.05,-1.95l-0.01,-0.09l-0.58,-2.32l-0.13,-0.21l-0.74,-0.62l-0.22,-0.09l-1.74,-0.15l-1.75,-0.28l-0.03,-0.0l-2.2,-0.17l-0.31,0.12l-0.64,0.65l-0.79,0.8l-0.1,0.39l0.77,2.72l-0.52,0.81l-2.56,-0.63l-0.1,-0.01l-1.97,0.02l-0.12,0.02l-2.21,0.72l-0.03,0.01l-1.79,0.74l-0.02,0.01l-2.87,1.38l-2.0,0.52l-0.47,-0.84l-0.0,-0.0l-0.24,-0.42l-0.34,-1.58l-0.11,-0.2l-1.24,-1.21l-0.24,-0.11l-1.79,-0.16l-0.11,0.0l-1.73,0.32l-0.04,0.01l-2.53,0.74l-0.12,0.06l-1.23,0.89l-1.7,0.9l-0.12,0.1l-0.22,0.27l-1.22,1.09l-1.64,1.46l-1.74,1.4l-1.84,1.13l-0.1,0.09l-1.48,1.83l-1.64,1.96l-0.03,0.04l-1.59,2.46l-1.74,2.15l-1.47,0.92l-1.36,-0.56l-0.54,-1.99l-0.02,-0.05l-0.89,-2.09l-0.19,-0.2l-2.29,-1.12l-1.21,-1.14l-0.16,-1.05l-0.06,-0.42l0.36,-2.57l1.11,-0.79l0.09,-0.08l0.98,-1.29l0.08,-0.28l-0.19,-2.05l-0.1,-2.46l0.88,-2.35l0.02,-0.18l-0.17,-1.78l-0.05,-0.16l-0.81,-1.43l-0.01,-0.02l-0.87,-1.36l0.03,-1.8l0.54,-1.37l0.03,-0.17l-0.12,-2.23l0.92,-1.38l1.01,-1.4l0.04,-0.06l1.0,-2.13l0.6,-0.85l0.07,-0.27l-0.01,-0.11Z", "name": "Kaduna"}, "2033": {"path": "M426.4,111.53l-0.6,-0.55l-0.39,-0.42l-0.12,-0.63l0.13,-0.57l0.0,-0.16l-0.07,-0.44l-0.04,-0.42l-0.04,-0.14l-0.36,-0.73l-0.01,-0.03l-0.64,-1.09l-0.59,-1.14l-0.76,-1.57l-0.01,-0.02l-0.56,-0.98l-0.02,-0.04l-0.85,-1.17l-0.39,-0.69l-0.04,-0.11l-0.0,-0.0l-0.46,-1.14l-0.01,-0.01l-0.43,-0.98l-0.02,-0.04l-0.61,-1.05l-0.12,-0.13l-0.56,-0.37l-0.37,-0.41l-0.38,-0.12l-0.96,0.21l-0.9,-0.1l-0.03,-0.0l-1.1,-0.04l-1.51,-0.07l-1.32,-0.14l-0.81,-0.21l-1.19,-0.35l-1.31,-0.5l-0.56,-0.68l-0.03,-0.87l-0.01,-0.31l-0.0,-0.02l-0.12,-1.59l0.08,-1.64l0.16,-0.65l0.01,-0.03l0.19,-1.23l0.18,-0.76l0.35,-1.39l0.01,-0.14l-0.12,-1.23l0.0,-0.89l0.0,-0.33l0.07,-0.53l0.34,-0.22l1.82,-0.37l2.07,-0.2l1.33,-0.12l0.02,-0.0l1.57,-0.21l0.0,-0.0l0.44,-0.06l1.65,-0.23l0.02,-0.0l2.08,-0.39l1.39,-0.06l1.12,0.25l1.41,0.42l0.06,0.01l1.08,0.15l0.0,0.0l1.13,0.14l0.99,0.18l0.06,0.01l0.15,0.01l0.51,0.02l0.04,-0.0l1.12,-0.06l0.0,-0.0l1.02,-0.06l0.0,-0.0l0.98,-0.06l0.09,-0.02l0.97,-0.28l0.14,-0.02l0.62,-0.09l0.82,-0.04l0.0,-0.0l0.75,-0.04l0.11,-0.02l0.01,-0.0l1.4,0.21l0.21,-0.02l0.68,-0.26l0.73,-0.2l0.34,0.01l0.26,0.01l0.04,0.0l0.57,-0.02l0.14,0.04l0.79,0.64l0.4,0.61l0.09,0.3l0.01,0.02l0.25,0.91l0.03,0.21l0.02,0.07l0.34,0.93l0.38,1.33l0.02,0.05l0.38,0.86l0.07,0.52l0.01,0.05l0.09,0.33l0.05,0.11l0.41,0.65l0.03,0.04l0.41,0.49l0.07,0.07l0.43,0.31l0.02,0.01l0.38,0.24l0.03,0.02l0.44,0.31l0.05,0.03l0.51,0.26l0.85,0.57l0.05,0.03l0.53,0.26l0.04,0.02l0.96,0.34l0.02,0.01l0.52,0.15l0.05,0.01l0.92,0.15l0.07,0.0l0.19,-0.0l0.17,-0.04l0.41,-0.2l0.07,-0.05l0.56,-0.44l0.12,-0.09l0.37,-0.28l0.28,-0.17l0.33,-0.13l0.03,-0.01l0.47,-0.24l0.08,0.4l0.06,0.15l0.2,0.3l0.2,0.3l0.03,0.09l-0.0,0.08l0.18,0.34l1.07,0.71l0.14,0.06l0.03,0.01l0.0,0.0l0.71,0.14l0.11,0.01l1.3,-0.1l0.0,-0.0l1.09,-0.1l0.06,-0.01l1.38,-0.33l0.67,-0.13l0.13,-0.05l0.28,-0.17l1.07,-0.37l1.23,-0.42l0.08,-0.04l0.38,-0.24l1.3,-0.58l0.63,-0.25l0.14,-0.09l0.42,-0.44l0.69,-0.54l0.71,-0.44l0.11,-0.11l0.22,-0.31l1.05,-0.8l0.59,-0.43l0.08,-0.07l0.17,-0.21l0.09,-0.2l0.08,-0.67l0.25,-0.47l0.44,-0.66l0.05,-0.11l0.1,-0.34l0.02,-0.04l0.04,-0.17l0.0,-0.26l0.05,-0.09l0.32,-0.41l0.31,-0.4l0.1,-0.06l0.53,-0.23l0.0,-0.0l0.34,-0.15l0.08,-0.03l0.67,-0.27l0.02,-0.01l0.53,-0.25l0.02,-0.01l0.25,-0.36l0.02,-0.83l0.19,-0.13l0.06,-0.04l0.0,-0.0l0.51,-0.06l0.18,-0.02l0.2,-0.02l1.03,0.12l0.19,0.02l0.03,0.0l0.02,0.0l0.0,0.0l0.65,0.03l0.69,0.03l1.66,0.07l0.0,0.0l0.43,0.01l0.04,0.0l0.0,0.0l0.02,0.0l0.03,-0.0l0.83,-0.03l0.05,0.02l0.47,0.15l0.16,0.02l0.87,-0.1l0.13,0.01l0.0,0.0l0.43,0.03l0.03,0.0l0.0,0.0l0.42,0.04l0.03,0.0l1.64,0.06l0.61,0.02l0.33,0.11l0.27,-0.01l0.21,-0.08l0.85,0.01l0.34,0.08l0.06,0.02l0.15,0.09l0.08,0.03l0.71,0.21l0.12,0.02l0.93,-0.01l0.73,-0.01l1.4,-0.02l0.3,0.08l0.23,0.15l0.24,0.07l0.5,-0.02l0.48,-0.02l0.48,0.07l0.46,0.27l0.12,0.04l1.62,0.35l0.53,0.22l0.25,0.02l0.22,-0.06l0.94,0.13l0.08,0.0l1.0,-0.06l0.34,-0.02l0.0,-0.0l0.11,-0.01l0.18,-0.01l0.02,-0.0l0.99,-0.11l0.41,-0.04l0.1,-0.02l0.48,-0.18l0.83,-0.02l0.06,-0.01l0.42,-0.07l0.82,-0.14l0.07,-0.02l0.02,-0.01l0.53,-0.19l0.81,0.04l0.0,0.0l0.67,0.03l0.0,0.0l0.22,0.03l0.05,0.0l0.42,0.0l0.02,0.0l0.01,0.0l0.08,0.0l0.0,0.0l0.54,0.01l0.34,0.14l0.09,0.02l1.93,0.32l2.04,0.33l0.04,0.0l1.19,0.09l0.0,0.0l0.54,0.04l0.03,0.0l1.39,-0.02l0.01,-0.0l0.08,-0.0l0.02,0.0l0.39,0.03l0.62,0.05l0.0,0.0l0.08,0.01l0.51,0.09l0.08,0.01l0.01,-0.0l1.36,-0.01l0.0,-0.0l0.06,-0.0l0.03,-0.0l0.54,-0.04l0.45,0.1l0.2,0.04l0.08,0.01l1.19,0.02l0.0,0.0l0.58,0.0l0.23,0.01l0.06,0.0l1.42,0.08l0.99,0.06l0.26,-0.08l1.18,-0.88l0.03,-0.02l0.45,-0.41l1.91,1.25l0.14,0.06l2.78,0.58l0.05,0.01l1.0,0.07l3.49,0.24l0.18,-0.03l2.17,-0.86l0.1,-0.06l1.63,-1.31l0.08,-0.09l1.63,-2.43l0.04,-0.08l0.85,-2.23l2.83,-1.36l0.0,-0.0l3.42,-1.68l3.77,-0.74l0.1,-0.03l3.39,-1.64l3.45,-1.15l4.01,-1.16l1.79,1.01l0.62,0.35l2.51,5.6l0.83,5.21l0.05,0.14l1.77,3.04l0.56,0.14l1.3,-0.82l1.65,-0.38l0.04,-0.01l0.14,-0.05l2.25,-0.8l2.83,-0.95l3.03,1.43l0.02,0.01l2.86,1.19l0.27,0.01l0.68,-0.21l1.64,-0.49l1.99,0.96l0.77,1.18l1.81,2.77l0.91,4.46l0.09,1.06l0.25,2.91l0.0,0.03l0.86,5.37l0.0,0.02l0.7,3.15l0.11,0.2l0.01,0.01l-1.19,0.79l-1.79,1.04l-0.05,0.04l-1.75,1.44l-2.38,1.41l-1.91,1.07l-0.0,0.0l-1.29,0.72l-0.03,0.02l-1.2,0.84l-0.82,0.42l-0.09,-1.08l-0.04,-0.15l-1.01,-1.98l-0.1,-0.13l-1.19,-0.99l-0.26,-0.09l-1.94,0.04l-0.1,0.01l-2.27,0.62l-0.03,0.01l-2.07,0.73l-0.02,0.01l-2.03,0.83l-0.04,0.02l-1.32,0.74l-0.04,0.03l-0.07,0.05l-0.13,0.16l-0.78,1.71l-0.02,0.06l-0.27,1.0l-0.41,1.52l-0.01,0.02l-0.72,3.44l-1.17,3.42l-0.62,1.45l-1.22,2.85l-0.02,0.05l-1.77,6.14l-1.13,3.24l-0.0,0.25l0.67,2.22l0.02,1.45l0.01,1.01l-1.22,0.96l-1.42,0.39l-0.06,0.02l-3.33,1.48l-2.69,1.13l-3.4,1.12l-4.79,1.36l-0.04,0.01l-1.0,0.41l-4.02,1.61l-0.04,0.02l-3.64,1.93l-0.02,0.01l-2.92,1.71l-3.87,0.58l-2.13,-0.04l-0.01,-0.0l-1.31,0.01l-0.28,0.12l-0.92,0.93l-0.04,0.04l-1.31,1.77l-0.02,0.03l-1.67,2.78l-0.05,0.12l-0.73,3.51l-0.01,0.12l0.15,1.64l0.23,0.33l1.29,0.61l0.33,0.16l0.18,0.04l3.02,-0.05l0.14,-0.0l0.17,-0.04l2.5,-1.21l2.48,-0.24l0.7,-0.07l1.97,0.54l0.37,0.64l0.61,1.83l0.66,2.62l0.42,2.27l0.2,2.77l-0.91,1.71l-0.12,0.22l-1.29,2.31l-0.02,0.05l-0.66,1.7l-0.02,0.24l0.18,0.77l0.01,0.05l0.48,1.33l0.1,0.16l1.05,0.99l0.38,0.36l0.34,0.1l1.43,-0.23l0.04,-0.01l2.8,-0.79l0.49,2.67l0.03,0.08l1.28,3.03l0.04,0.08l2.01,2.77l1.48,2.26l0.4,0.61l0.02,0.02l2.51,3.32l0.11,0.1l3.63,2.23l0.18,0.06l3.8,0.33l1.75,0.27l2.14,0.33l6.91,1.53l0.05,0.01l4.15,0.39l1.57,0.15l0.03,0.0l4.82,0.14l1.01,1.42l-1.21,2.99l-2.12,1.59l-1.68,0.9l-2.21,0.67l-1.28,0.26l-1.32,0.26l-0.11,0.04l-3.06,1.64l-0.12,0.1l-1.85,2.31l-0.09,0.24l-0.05,2.19l0.02,0.14l0.81,2.27l0.42,1.47l-1.77,0.54l-2.8,-0.71l-2.19,-1.59l-0.19,-0.07l-1.9,-0.22l-0.16,0.01l-1.95,0.59l-4.72,1.08l-2.72,-0.45l-3.97,-0.94l-1.49,-1.51l-0.91,-2.33l0.0,-0.11l0.05,-2.29l0.79,-3.37l0.01,-0.07l0.15,-3.57l-0.01,-0.11l-0.65,-2.6l-0.03,-0.07l-1.73,-3.72l-0.03,-0.06l-1.5,-2.21l-0.23,-0.16l-1.38,-0.36l-0.21,0.0l-2.57,0.74l-1.69,0.34l-4.68,0.26l-0.0,0.0l-2.89,0.2l-1.32,0.09l-0.39,0.03l-3.49,-0.23l-0.61,-1.68l-0.03,-0.07l-1.47,-2.51l-0.22,-0.18l-2.78,-0.89l-0.28,0.01l-3.94,1.72l-1.09,-0.19l-3.93,-1.18l-3.77,-1.51l-0.08,-0.02l-4.55,-0.79l-2.69,-0.54l-0.15,-0.0l-0.52,0.1l0.02,-0.05l0.02,-0.21l-0.35,-1.91l0.5,-1.99l0.76,-2.34l0.84,-1.15l2.49,-2.28l2.37,-1.91l0.03,-0.03l1.16,-1.18l1.64,-1.68l0.03,-0.52l-1.07,-1.4l-0.22,-0.14l-2.04,-0.51l-0.42,-0.1l-1.32,-1.05l-1.97,-2.02l-0.76,-1.38l-0.97,-1.85l-0.6,-2.36l-0.12,-0.2l-1.32,-1.2l-0.31,-0.1l-2.45,0.24l-0.71,0.02l-2.54,0.06l-0.21,-2.08l0.56,-2.38l2.12,-2.69l0.02,-0.03l1.89,-2.91l0.06,-0.18l0.18,-1.87l0.05,-0.51l1.24,-2.16l0.05,-0.23l-0.24,-2.96l-0.02,-0.08l-0.13,-0.44l-1.76,-5.8l-0.01,-0.02l-0.86,-2.45l-0.53,-0.24l-1.51,0.64l-0.15,0.11l-1.74,2.07l-2.67,1.62l-2.06,0.21l-1.28,-0.23l-0.01,-2.78l-0.03,-0.14l-0.69,-1.74l-0.42,-0.25l-2.62,0.34l-1.11,-0.04l-0.19,0.18l-0.14,0.04l-0.55,0.05l-0.29,0.17l-0.0,0.0l-0.15,0.08l-0.08,0.05l-0.3,0.27l-0.23,0.18l0.0,-0.28l0.0,-0.14l-0.31,-0.4l-0.66,-0.15l-0.78,-0.22l-0.21,-0.23l0.2,-0.76l0.35,-1.0l0.96,-1.07l0.02,-0.03l0.41,-0.54l0.08,-0.23l0.1,-6.78l-0.04,-0.18l-0.15,-0.32l-0.36,-1.86l-0.01,-0.05l-0.44,-1.28l-0.08,-0.14l-0.59,-0.65l-0.08,-0.07l-0.52,-0.33l-0.11,-0.05l-0.89,-0.25l-0.32,-0.1l-1.02,-0.32l-0.1,-0.02l-1.16,-0.06l-1.24,-0.13l-1.21,-0.3l-0.01,-0.0l-1.09,-0.24l-0.1,-0.01l-1.02,0.04l-0.68,0.02l-0.56,-0.28l-0.26,-0.13l-0.29,-0.38l-0.78,-1.07l0.14,-0.59l0.42,-0.84l0.04,-0.16l0.04,-0.74l-0.01,-0.12l-0.32,-1.25l-0.02,-0.05l-0.32,-0.81l-0.13,-0.7l-0.05,-0.13l-0.22,-0.36l-0.31,-0.52l-0.07,-0.09l-0.61,-0.56l-0.17,-0.09l-0.83,-0.21l-1.03,-0.61l-0.91,-0.65l-0.08,-0.04l-0.63,-0.27l-0.42,-0.18l-0.85,-0.67l-0.35,-0.78l-0.15,-0.61l0.11,-0.97l-0.0,-0.09l-0.09,-0.8l-0.07,-0.77l0.07,-1.32l-0.0,-0.06l-0.08,-0.84l0.06,-0.39l0.0,-0.1l-0.06,-0.65l-0.07,-0.19l-0.31,-0.45l-0.21,-0.15l-0.82,-0.25l-0.09,-0.02l-0.91,-0.06l-1.02,-0.24l-0.9,-0.29l-0.83,-0.37l-0.09,-0.03l-0.19,-0.03l-0.43,-0.08l-1.59,-0.31l-0.88,-0.19l-0.43,-0.14l-1.21,-0.42l-0.13,-0.02l-0.79,-0.01l-0.05,0.0l-1.03,0.11l-0.08,0.01l-0.02,0.0l-1.12,0.17l-0.82,0.04l-0.03,0.0l-0.68,0.1l-0.1,0.03l-0.52,0.22l-0.0,0.0l-0.98,0.42l-0.02,0.01l-0.98,0.49l-0.02,0.01l-0.81,0.46l-0.03,0.01l-0.0,0.0l-1.5,0.72l-0.05,0.03l-0.8,0.54l-0.01,0.01l-0.63,0.45l-0.05,0.04l-0.68,0.66l-0.08,0.1l-0.26,0.49l-0.04,0.15l-0.03,0.34l-0.09,0.38l-0.18,0.45l-0.02,0.08l-0.06,0.39l-0.0,0.02l-0.05,0.44l-0.06,0.46l-0.21,0.47l-0.01,0.02l-0.23,0.63l-0.13,0.29l-0.47,0.89l-0.03,0.08l-0.1,0.38l-0.18,0.33l-0.01,0.02l-0.19,0.39l-0.18,0.36l-0.05,0.04Z", "name": "Jigawa"}, "2032": {"path": "M343.2,603.32l0.42,0.56l0.03,0.04l0.75,0.78l0.1,0.07l1.03,0.56l0.03,0.02l1.03,0.43l0.06,0.02l1.4,0.33l1.68,0.82l0.13,0.04l1.06,0.13l1.08,0.39l0.47,0.31l0.09,0.06l0.5,1.17l0.55,1.56l-0.03,1.71l-0.04,1.54l0.0,0.05l0.15,1.6l0.01,0.07l0.44,1.64l-0.0,1.22l-0.04,1.22l-0.03,0.99l-0.02,0.02l-0.69,0.14l-0.23,0.14l-0.11,0.13l-0.0,0.0l-0.35,0.45l-0.04,0.44l0.05,0.08l0.84,1.53l0.02,0.03l0.84,1.23l-0.21,1.12l-0.01,0.05l-0.09,1.21l0.01,0.11l0.28,1.35l-0.02,0.77l-0.01,0.34l0.0,0.06l0.18,1.6l-0.06,1.02l-0.12,0.36l-0.29,0.85l-1.01,1.03l-0.1,0.16l-0.02,0.06l-0.37,1.22l-0.76,1.59l-0.02,0.05l-0.23,0.69l-0.32,0.35l-0.43,0.47l-1.36,1.12l-0.09,0.1l-1.26,2.08l-0.02,0.05l-0.11,0.25l-0.31,0.71l-0.12,0.12l-0.09,0.12l-0.65,1.43l-0.01,0.03l-0.45,1.31l-0.01,0.05l-0.31,1.43l-0.01,0.04l-0.28,0.89l-0.14,0.45l-0.0,0.01l-0.68,2.41l-0.01,0.04l-0.32,1.76l-0.72,2.39l-0.04,0.09l-0.48,1.11l-0.13,0.22l-0.13,-0.01l-0.22,0.04l-0.58,0.3l-0.01,0.0l-1.01,0.55l-0.98,0.27l-1.36,-0.21l-0.81,-0.36l-0.13,-0.03l-0.63,-0.04l-1.04,-0.41l-0.06,-0.02l-0.42,-0.09l-0.0,-0.0l-0.01,-0.0l-0.88,-0.19l-0.1,-0.01l-1.31,0.05l-1.26,-0.0l-0.17,0.04l-0.56,0.25l-1.03,0.06l-0.1,0.02l-0.94,0.31l-0.06,0.02l-0.44,0.23l-0.67,0.15l-1.05,0.21l-1.4,-0.28l-0.65,-0.2l-0.04,-0.01l-0.15,-0.03l-1.76,-0.35l-1.56,-0.47l-0.18,-0.01l-0.88,0.15l-1.6,-0.16l-0.05,-0.0l-0.47,0.01l-1.88,0.05l-0.02,0.0l-1.75,0.12l-1.35,-0.01l-1.22,-0.34l-0.06,-0.01l-1.21,-0.13l-0.84,-0.61l-0.73,-0.53l-0.91,-0.76l-0.74,-0.99l-0.52,-1.71l-0.03,-0.08l-0.26,-0.46l-0.46,-0.82l-0.15,-0.15l-0.41,-0.24l-0.29,-0.17l-0.05,-0.02l-0.8,-0.34l-0.5,-0.63l-0.29,-1.5l0.17,-1.03l0.37,-0.77l0.73,-1.37l0.04,-0.14l0.16,-1.28l0.0,-0.02l0.13,-1.63l0.18,-0.82l0.01,-0.05l0.15,-1.83l-0.02,-0.16l-0.34,-0.97l-0.19,-1.0l-0.09,-0.19l-0.41,-0.46l-0.2,-0.12l-1.34,-0.34l-0.02,-0.0l-0.81,-0.15l-0.19,0.01l-0.99,0.29l-0.86,0.15l-0.01,0.0l-1.12,0.24l-1.06,0.11l-1.11,-0.31l-0.35,-0.11l-0.0,-0.41l0.15,-0.36l0.02,-0.07l1.91,-9.26l0.66,-3.22l0.01,-0.06l0.07,-1.29l0.36,-0.59l0.61,-0.08l0.07,-0.02l0.89,-0.3l0.11,-0.06l0.84,-0.61l0.09,-0.1l0.6,-0.87l0.01,-0.02l0.63,-1.04l0.62,-0.61l0.05,-0.06l0.43,-0.63l0.82,-0.88l0.01,-0.01l0.4,-0.45l0.69,-0.43l0.85,-0.36l0.21,-0.09l0.6,0.08l1.0,0.34l0.84,0.53l0.16,0.1l0.04,0.02l1.23,0.59l0.75,0.41l0.07,0.03l0.6,0.2l0.04,0.01l0.64,0.14l0.11,0.03l0.17,0.0l2.48,-0.5l0.29,-0.23l0.39,-0.89l0.74,-1.27l0.01,-0.02l0.52,-1.03l0.59,-1.08l0.01,-0.02l0.63,-1.29l0.02,-0.06l0.03,-0.1l0.32,-1.04l0.02,-0.13l-0.03,-0.85l0.39,-1.18l0.34,-0.85l0.02,-0.06l0.67,-0.6l1.26,-0.51l1.06,-0.25l0.0,-0.0l1.47,-0.35l1.71,-0.35l0.01,-0.0l0.13,-0.03l1.43,-0.33l1.3,-0.05l0.39,-0.02l1.67,0.15l1.36,0.36l0.35,0.1l1.51,0.45l0.0,0.0l1.53,0.44l0.19,0.01l1.65,-0.35l0.05,-0.01l1.77,-0.63l0.01,-0.0l1.19,-0.45l0.38,-0.14l1.15,-0.14l0.06,0.01Z", "name": "Imo"}, "2031": {"path": "M624.55,198.44l0.3,-0.01l0.61,-0.35l0.08,-0.06l0.07,-0.06l1.05,-1.02l2.43,-1.06l2.45,-0.7l2.57,-0.01l2.19,0.22l3.52,1.19l2.6,1.53l3.19,2.02l2.43,1.94l0.02,0.02l1.51,1.04l3.04,2.5l1.88,2.48l1.6,2.39l0.02,0.03l2.24,2.82l0.02,0.02l2.88,3.2l0.03,0.03l1.0,0.9l-0.76,1.18l-0.26,0.38l0.05,0.51l0.51,0.05l0.65,-0.44l0.79,-0.5l0.19,-0.11l0.63,0.57l1.54,1.6l0.03,0.03l1.94,1.61l0.41,1.99l0.36,3.69l-0.18,3.92l-0.69,4.63l-0.44,2.96l-0.0,0.04l-0.14,2.77l0.01,0.09l0.54,3.18l0.04,0.48l0.16,2.24l0.0,0.01l0.19,1.87l0.05,0.16l0.25,0.43l0.11,0.19l0.33,0.2l4.29,0.17l0.0,0.0l2.84,0.09l0.11,-0.01l0.77,-0.19l0.59,1.09l0.83,2.47l-0.71,3.46l-2.42,3.19l-0.01,0.02l-2.2,3.3l-0.01,0.01l-1.58,2.59l-0.04,0.32l0.98,3.44l0.06,0.12l2.93,4.25l0.05,0.06l2.22,2.2l0.11,0.08l1.74,0.85l0.07,0.03l2.66,0.73l2.29,1.18l0.79,1.06l0.31,0.41l1.3,3.1l0.01,0.02l1.15,2.44l0.14,0.3l0.1,0.13l2.2,1.94l0.04,0.03l2.36,1.56l0.05,0.03l2.11,1.02l-0.08,0.57l-0.0,0.02l-0.25,2.49l-0.0,0.01l-0.35,4.81l-0.0,0.02l-0.11,4.2l0.0,0.06l0.38,3.07l0.0,0.02l0.23,1.29l-1.24,2.62l-2.62,2.05l-4.09,2.62l-0.14,0.09l-3.71,2.17l-4.33,2.48l-0.02,0.01l-3.3,2.18l-4.0,1.7l-4.34,0.81l-3.08,0.27l-0.28,0.02l-0.01,0.0l-3.25,0.4l-4.15,0.15l-2.1,0.0l-1.89,0.0l-0.0,0.0l-4.27,0.06l-3.55,-0.17l-0.03,-0.0l-3.24,0.08l-0.03,0.0l-1.27,0.12l-2.23,0.13l-0.03,0.0l-3.6,0.47l-1.05,-0.01l-0.74,-0.08l-0.04,-0.0l-0.05,-0.0l-1.38,-0.42l0.07,-0.08l0.16,-1.15l-0.08,-0.3l-2.02,-2.54l-0.93,-1.98l-0.01,-0.02l-1.07,-2.05l-0.44,-0.97l-0.47,-1.04l-0.02,-0.04l-0.13,-0.23l-0.49,-4.3l-0.24,-3.1l-0.01,-0.05l-0.25,-1.16l-0.23,-1.17l-0.03,-0.09l-1.01,-2.25l-0.11,-0.14l-2.4,-2.01l-0.02,-0.02l-3.12,-2.25l-2.5,-1.84l-3.02,-2.47l-0.06,-0.04l-2.99,-1.69l-2.43,-2.06l-2.63,-3.1l-0.34,-1.69l1.43,-2.09l2.26,-1.04l3.47,-0.63l1.17,-0.12l0.32,-0.23l0.96,-2.03l0.05,-0.11l0.03,-0.23l-0.48,-3.43l0.1,-3.2l0.33,-3.85l0.0,-0.02l0.16,-3.35l-0.02,-0.16l-0.99,-2.68l-0.01,-0.03l-0.13,-0.28l-1.4,-3.02l-0.19,-0.19l-2.74,-1.31l-0.07,-0.02l-3.8,-1.06l-2.04,-0.75l-0.94,-1.23l-0.47,-2.49l-0.0,-3.1l-0.01,-0.07l-0.56,-2.9l-0.06,-0.15l-1.38,-2.06l-0.17,-0.14l-3.49,-1.58l-0.02,-0.01l-2.71,-1.05l-0.01,-0.0l-0.29,-0.1l-2.14,-0.78l0.18,-1.26l2.06,-3.01l0.08,-0.12l2.16,-2.91l0.06,-0.13l0.81,-2.91l1.36,-3.41l0.0,-0.01l0.97,-2.62l0.02,-0.09l0.32,-2.57l0.83,-3.29l1.6,-2.36l1.65,-1.56l2.16,-0.74l2.41,-0.28l0.14,-0.04l1.8,-0.92l0.08,-0.05l2.43,-2.12l0.08,-0.1l1.29,-2.17l1.74,-2.19l2.28,-1.18l0.01,-0.0l2.48,-1.36l0.0,-0.0l2.48,-1.39l0.13,-0.11l1.26,-1.72l0.08,-0.1l1.42,-1.77l0.04,-0.06l0.34,-0.64Z", "name": "Gombe"}, "2030": {"path": "M305.98,371.59l0.07,-0.07l-0.02,-0.25l-0.02,-0.25l-0.02,-0.35l0.07,-1.69l0.09,-0.74l0.03,-0.22l0.0,-0.03l0.05,-1.17l0.0,-0.03l-0.01,-0.47l-0.03,-1.11l0.06,-1.78l0.09,-1.0l0.0,-0.05l-0.02,-0.72l-0.01,-0.3l-0.0,-0.1l-0.05,-1.82l-0.06,-2.11l0.01,-1.04l0.13,-0.44l0.02,-0.11l0.02,-0.6l0.23,-0.25l0.55,-0.11l0.82,-0.04l0.03,-0.0l0.79,-0.09l0.01,-0.0l0.88,-0.12l0.51,-0.02l0.01,-0.0l0.71,-0.04l1.27,0.04l0.03,-0.0l1.64,-0.06l0.06,-0.01l0.68,-0.13l0.63,0.06l0.86,0.12l0.07,0.0l1.39,-0.04l0.0,-0.0l1.09,-0.04l0.1,-0.02l0.69,-0.2l0.66,0.09l0.08,0.0l1.67,-0.09l0.06,-0.01l1.07,-0.23l0.83,0.3l0.01,0.0l1.09,0.38l0.58,0.74l0.07,0.07l1.53,1.17l0.96,0.79l0.03,0.02l0.97,0.66l0.76,0.94l0.03,0.04l1.23,1.19l0.03,0.03l1.1,0.86l0.01,0.01l0.92,0.66l0.15,0.19l0.49,0.62l0.02,0.02l0.82,0.9l0.02,0.02l0.61,0.59l0.15,0.09l0.76,0.26l0.23,0.01l0.59,-0.15l0.01,-0.0l0.0,-0.0l0.04,-0.01l0.01,-0.0l0.15,-0.04l0.27,-0.07l0.06,-0.01l0.24,-0.18l0.48,-0.8l0.58,-0.87l0.0,-0.0l0.05,-0.07l0.01,-0.01l0.84,-1.36l0.63,-0.71l0.0,-0.0l0.35,-0.4l0.02,-0.02l1.0,-1.34l0.02,-0.03l0.81,-1.33l0.67,-0.79l0.02,-0.03l0.59,-0.84l0.01,-0.02l0.68,-1.1l0.79,-1.23l0.02,-0.03l0.27,-0.52l0.54,-0.42l0.1,-0.11l0.78,-1.32l0.01,-0.02l0.31,-0.59l0.36,-0.63l0.21,-0.17l0.02,-0.0l0.13,-0.01l0.66,0.03l0.28,-0.1l0.18,-0.16l0.86,-0.28l1.77,0.07l0.05,-0.0l1.16,-0.12l0.04,-0.01l1.13,-0.23l1.07,0.04l1.71,0.16l0.02,0.0l1.39,0.07l0.61,0.13l0.97,0.74l0.13,0.07l0.8,0.24l0.25,-0.01l0.72,-0.27l0.16,-0.11l0.65,-0.76l0.03,-0.04l0.58,-0.86l0.02,-0.04l0.29,-0.55l0.73,-1.2l0.01,-0.02l0.52,-0.97l0.49,-0.34l0.51,-0.18l0.33,0.07l0.66,0.35l0.41,0.65l0.19,0.63l0.01,0.02l0.3,0.85l0.15,0.64l0.11,0.2l0.44,0.43l0.1,0.23l0.24,0.21l0.99,0.32l0.06,0.02l0.0,0.0l0.09,0.03l0.29,-0.02l0.75,-0.34l0.14,-0.1l0.01,-0.01l0.01,0.16l0.02,0.1l0.11,0.35l0.01,0.02l-0.24,1.29l-0.36,0.53l-0.65,0.04l-0.41,0.03l-0.28,0.14l-0.07,0.08l-0.57,0.66l-0.08,0.14l-0.21,0.63l-0.39,1.2l-0.64,1.69l-0.02,0.05l-0.31,1.36l-0.07,0.3l-0.49,1.12l-0.02,0.05l-0.43,1.52l-0.01,0.13l0.03,0.56l0.04,0.72l0.03,0.6l-0.05,0.34l-0.12,0.73l-0.1,0.64l-0.0,0.1l0.04,0.43l0.02,0.15l0.09,0.82l-0.05,1.49l-0.01,0.19l0.01,0.1l0.17,0.8l0.13,0.63l0.0,0.02l0.08,0.31l0.07,0.27l0.15,0.6l-0.03,0.88l-0.07,0.2l-0.1,0.09l-0.03,0.29l-0.0,0.02l-0.01,0.04l-0.02,0.17l0.0,0.03l0.01,0.04l0.01,0.03l0.05,2.02l-0.26,0.8l-0.13,0.4l-0.02,0.17l0.18,1.44l-0.21,1.72l-0.39,0.88l-0.01,0.03l-0.36,1.06l-0.02,0.06l-0.11,0.65l-0.13,0.67l-0.33,0.5l-0.06,0.13l-0.24,1.1l-0.32,0.45l-0.04,0.08l-0.19,0.44l-0.14,0.23l-0.06,0.18l-0.06,1.0l-0.04,0.11l-0.0,0.0l-0.25,0.65l-0.02,0.06l-0.13,0.66l-0.0,0.02l-0.15,1.02l-0.0,0.04l-0.05,0.85l-0.13,0.89l-0.26,1.26l-0.2,0.66l-0.29,0.47l-0.06,0.17l-0.16,1.55l-0.75,0.34l-0.21,0.23l-0.16,0.46l-0.37,0.91l-0.02,0.05l-0.37,1.38l-0.32,1.06l-0.07,0.22l-0.47,0.67l0.01,0.01l-0.05,0.03l-0.7,1.23l-1.14,1.14l-0.04,0.05l-0.67,0.93l-0.0,0.01l-0.67,0.96l-0.81,1.13l-0.02,0.04l-0.39,0.69l-0.71,0.56l-1.34,0.69l-1.21,0.32l-0.13,0.06l-1.04,0.72l-0.89,0.51l-1.09,0.62l-1.07,0.56l-1.0,0.37l-0.13,0.08l-0.51,0.47l-1.11,0.33l-1.82,0.38l-1.56,0.29l-0.03,0.01l-0.99,0.26l-0.06,0.02l-1.17,0.52l-0.03,0.02l-0.67,0.37l-1.58,0.52l-1.94,0.26l-0.01,0.0l-1.41,0.24l-1.59,0.2l-0.05,0.01l-2.03,0.51l-2.02,0.07l-0.01,0.0l-1.11,0.07l-0.15,0.04l-1.0,0.49l-1.72,0.19l-0.39,0.04l-0.67,0.07l-0.33,0.04l-0.18,0.06l-0.59,0.39l-0.3,-0.01l-0.79,-0.02l-0.02,-0.0l-1.13,0.03l-1.09,-0.14l-0.92,-0.19l-0.13,-0.01l-0.87,0.1l-0.15,0.02l-0.05,0.01l-0.57,0.15l-0.06,0.04l-0.38,-0.04l-0.06,-0.0l-0.64,0.02l-0.08,0.0l-0.72,-0.13l-0.04,-0.01l-0.67,-0.05l-0.09,0.0l-0.22,0.03l-0.69,0.1l-0.78,0.0l-0.08,0.01l-0.47,0.1l-0.1,0.02l-0.07,-0.02l-0.3,-0.09l-0.17,-0.05l-0.01,-0.0l-0.15,-0.04l-0.07,-0.02l-0.16,-0.05l-0.5,-0.19l-0.31,-0.78l-0.84,-2.12l-1.12,-2.82l0.0,-0.15l0.0,-0.11l0.0,-0.12l0.02,-0.1l0.06,-0.32l0.31,-0.4l0.02,-0.03l0.02,-0.03l0.0,-0.0l0.07,-0.1l0.06,-0.26l-0.03,-0.28l-0.02,-0.14l-0.02,-0.1l-0.01,-0.02l-0.46,-34.11l-0.02,-0.12l-0.2,-0.62l0.01,-0.04l0.01,-0.03l0.0,-0.03l0.01,-0.11l-0.05,-0.06l0.01,-0.0l-0.01,-0.33l-0.0,-0.16l-0.02,-0.1l-0.09,-0.33Z", "name": "Federal Capital Territory"}, "2019": {"path": "M295.89,618.4l0.03,-0.08l0.28,-0.14l0.12,-0.08l0.67,-0.7l0.1,-0.17l0.25,-0.96l0.63,-1.47l0.6,-1.06l0.79,-1.13l0.06,-0.14l0.3,-1.29l0.25,-0.89l0.01,-0.16l-0.12,-0.87l0.51,-0.84l0.02,-0.04l0.65,-1.41l0.01,-0.04l0.45,-1.31l0.02,-0.07l0.15,-1.07l0.26,-0.82l0.57,-0.81l0.05,-0.09l0.42,-1.09l0.74,-1.09l0.06,-0.13l0.31,-1.24l0.17,-0.2l0.67,-0.8l0.09,-0.19l0.15,-0.97l0.0,-0.04l0.05,-1.09l0.09,-1.57l0.0,-0.03l-0.02,-1.07l0.0,-0.22l0.0,-0.9l0.0,-0.22l0.17,-1.17l0.2,-0.64l0.02,-0.08l0.43,-0.68l0.05,-0.1l0.27,-0.89l0.03,-0.09l0.0,-0.0l0.01,-0.02l0.32,-0.88l0.02,-0.06l0.19,-1.02l0.0,-0.14l-0.29,-1.57l-0.05,-0.14l-0.27,-0.45l-0.31,-0.73l-0.15,-0.36l-0.41,-1.36l-0.13,-0.99l-0.0,-0.01l-0.28,-1.69l-0.01,-0.05l-0.28,-0.92l-0.04,-0.14l-0.31,-1.68l-0.15,-1.6l-0.02,-0.09l-0.55,-1.65l0.06,-0.61l0.0,-0.02l0.03,-0.97l-0.09,-0.27l-0.49,-0.58l-0.04,-0.04l-0.78,-0.72l-0.33,-1.29l-0.04,-1.6l-0.0,-0.05l-0.16,-1.04l-0.01,-0.04l-0.39,-1.48l-0.01,-0.02l-0.3,-0.91l-0.23,-0.74l-0.07,-0.84l-0.05,-0.16l-0.44,-0.78l-0.32,-1.71l-0.0,-0.02l-0.19,-0.82l-0.02,-0.08l0.02,-0.01l0.78,-0.32l0.01,-0.01l0.82,-0.37l0.29,0.04l1.05,0.32l0.06,0.01l1.19,0.18l0.95,0.15l0.02,0.0l0.69,0.08l0.23,-0.04l1.03,-0.52l0.07,-0.04l0.7,-0.56l0.07,-0.08l0.46,-0.63l1.3,-1.35l0.01,-0.01l0.08,-0.12l0.19,-0.45l0.0,-0.0l0.23,-0.57l0.03,-0.13l0.05,-0.9l0.07,-0.87l0.06,-0.48l0.0,-0.09l-0.1,-0.98l0.17,-0.84l0.4,-0.98l0.01,-0.03l0.33,-1.07l0.36,-1.14l0.01,-0.03l0.18,-0.74l0.93,-0.96l0.08,-0.11l0.19,-0.42l0.58,-0.41l0.04,-0.04l0.76,-0.72l1.12,-0.49l0.08,-0.05l0.68,-0.53l0.04,-0.04l0.48,-0.5l0.03,-0.04l0.72,-0.96l0.03,-0.05l0.19,-0.36l0.02,0.02l0.03,0.66l-0.02,1.03l0.0,0.03l0.07,1.02l-0.09,0.69l0.0,0.11l0.11,0.73l0.3,0.33l0.06,0.01l0.82,0.19l0.16,0.0l0.94,-0.17l0.07,-0.02l0.81,-0.32l0.83,0.03l0.94,0.11l1.0,0.35l1.12,0.73l0.66,0.55l0.14,0.07l0.59,0.18l0.11,0.02l1.07,0.04l0.07,-0.0l0.72,-0.11l0.98,0.39l0.01,0.0l0.9,0.34l0.3,0.16l0.1,0.04l0.77,0.19l1.18,0.8l0.31,0.7l-0.41,0.94l-0.01,0.03l-0.58,1.6l-0.01,0.02l-0.44,1.43l-0.82,1.18l-0.78,0.48l-0.03,0.02l-1.19,0.86l-0.07,0.06l-1.34,1.54l-0.04,0.05l-0.91,1.48l0.07,0.34l-0.1,0.35l0.02,0.29l0.18,0.36l-0.6,0.82l-0.08,0.23l-0.01,0.7l-0.37,0.84l-0.06,0.13l-0.03,0.14l-0.0,0.02l-0.0,0.0l-0.05,1.01l0.08,0.26l0.47,0.65l0.18,0.14l0.26,0.1l0.48,0.18l0.06,0.02l0.88,0.17l0.95,0.2l1.16,0.32l0.79,0.39l0.6,0.56l0.36,0.62l0.02,0.04l0.63,0.86l0.44,0.8l0.22,0.68l0.03,0.06l0.42,0.8l0.13,0.39l0.2,0.8l0.12,0.75l0.09,0.19l0.39,0.46l0.05,0.05l0.25,0.21l0.2,0.44l0.04,0.07l0.4,0.53l0.15,0.3l-0.02,0.24l-0.12,0.19l-0.04,0.09l-0.07,0.22l-0.44,0.1l-0.14,0.06l-0.09,0.06l-0.24,0.16l-0.18,0.32l-0.03,0.75l0.04,0.19l0.2,0.42l0.03,0.05l0.24,0.37l-0.03,0.3l-0.41,0.45l-0.1,0.25l-0.05,0.85l0.06,0.23l0.39,0.63l0.15,0.14l0.48,0.27l0.34,0.02l0.14,-0.05l0.95,-0.36l0.14,-0.09l0.57,-0.59l0.4,-0.22l0.36,0.07l0.12,0.42l0.11,0.73l-0.09,0.65l0.05,0.25l0.25,0.44l0.06,0.01l0.14,0.41l0.3,0.27l0.79,0.15l0.45,0.38l-0.11,0.46l-0.25,0.68l-0.02,0.13l-0.0,1.18l0.03,0.15l0.52,1.24l0.41,1.04l0.01,0.03l0.37,0.75l0.04,0.07l0.62,0.81l0.3,0.63l0.16,0.83l0.04,0.91l0.08,0.22l0.47,0.65l0.01,0.02l0.44,0.55l0.08,0.07l1.14,0.81l0.27,0.21l0.59,0.46l0.15,0.07l0.88,0.21l0.27,-0.03l0.89,-0.44l0.04,-0.02l1.0,-0.65l1.1,0.09l0.57,0.27l0.28,0.25l0.01,0.01l0.19,0.16l-0.0,0.25l-0.02,0.1l-0.0,0.0l-0.01,0.03l0.22,0.28l-1.15,0.49l-0.04,0.02l-0.82,0.47l-1.13,0.6l-0.03,0.02l-0.72,0.47l-0.04,0.03l-0.49,0.41l-0.01,0.01l-0.28,0.26l-0.04,0.04l-0.47,0.57l-0.46,0.36l-0.02,0.01l-0.39,0.34l-0.1,0.13l-0.28,0.58l-0.25,0.41l-0.37,0.56l-0.01,0.02l-0.28,0.5l-0.01,0.01l-0.2,0.38l-1.22,0.15l-0.09,0.02l-0.42,0.16l-1.19,0.45l-1.75,0.62l-1.53,0.33l-1.43,-0.41l-1.51,-0.45l-0.35,-0.1l-0.01,-0.0l-1.4,-0.37l-0.07,-0.01l-1.73,-0.15l-0.05,-0.0l-0.42,0.02l-1.33,0.06l-0.07,0.01l-1.46,0.34l-0.13,0.03l-1.71,0.35l-0.01,0.0l-1.48,0.36l-1.09,0.26l-0.06,0.02l-1.36,0.55l-0.12,0.07l-0.79,0.71l-0.1,0.15l-0.06,0.14l-0.34,0.86l-0.01,0.02l-0.42,1.26l-0.02,0.14l0.03,0.85l-0.3,0.98l-0.0,0.0l-0.02,0.07l-0.61,1.25l-0.58,1.07l-0.01,0.01l-0.51,1.02l-0.74,1.28l-0.02,0.04l-0.31,0.72l-2.19,0.44l-0.03,-0.01l-0.62,-0.14l-0.55,-0.18l-0.72,-0.39l-0.02,-0.01l-1.22,-0.58l-0.14,-0.09l-0.88,-0.56l-0.09,-0.04l-1.08,-0.37l-0.07,-0.02l-0.74,-0.1l-0.21,0.03l-0.31,0.13l-0.88,0.37l-0.05,0.03l-0.77,0.47l-0.09,0.08l-0.44,0.49l-0.84,0.9l-0.04,0.05l-0.42,0.62l-0.62,0.62l-0.06,0.08l-0.65,1.07l-0.56,0.81l-0.73,0.53l-0.79,0.27l-0.74,0.1l-0.77,0.03l-0.02,-0.01l-0.2,-0.03l-0.8,0.08l-0.88,-0.3l-0.71,-0.6l-0.43,-0.76Z", "name": "Anambra"}, "2017": {"path": "M718.11,433.78l-0.77,0.54l-0.15,0.2l-0.43,1.28l-0.69,0.81l-0.0,0.0l-0.53,0.63l-0.03,0.04l-0.82,1.29l-0.05,0.1l-0.23,0.77l-0.17,0.57l-0.0,0.22l0.28,1.0l0.02,0.04l0.16,0.39l0.08,0.2l0.08,0.55l0.11,0.74l-0.11,0.83l-0.0,0.02l-0.06,0.78l0.03,0.2l0.35,0.76l0.09,0.6l-0.02,0.17l0.06,0.28l0.07,0.1l-0.13,0.67l-0.23,0.48l-0.39,0.82l-0.81,0.69l-0.14,0.24l-0.16,0.94l-0.22,0.29l-0.2,0.09l-0.0,0.0l-0.01,0.01l-0.1,0.07l-0.42,0.38l-0.36,0.32l-0.05,0.05l-0.41,0.52l-0.05,0.09l-0.28,0.66l-0.17,0.39l-0.22,0.21l-0.08,0.11l-0.62,1.23l-0.33,0.26l-0.45,0.36l-0.05,0.04l-0.48,0.53l-0.16,0.18l-0.45,0.33l-0.92,0.66l-0.05,0.04l-1.31,1.32l-0.08,0.12l-0.21,0.48l-0.74,1.71l-0.23,0.22l-0.45,0.44l-0.06,0.08l-0.39,0.64l-0.0,0.0l-0.02,0.03l-0.06,0.18l-0.03,0.42l-0.02,0.29l-0.12,0.1l-0.17,0.14l-0.15,0.28l-0.08,1.1l-0.05,0.08l-0.15,0.26l-0.68,0.58l-0.1,0.12l-0.16,0.31l-0.19,0.37l-0.04,0.11l-0.02,0.12l-0.11,0.69l-0.13,0.8l-0.09,0.52l-0.01,0.07l0.0,0.58l0.0,0.57l-0.14,0.78l-0.22,0.49l-0.19,0.11l-0.06,0.04l-0.11,0.09l-0.45,0.54l-0.05,0.08l-0.02,0.03l-0.22,0.45l-0.01,0.33l0.36,0.87l0.14,2.64l0.02,0.31l0.09,1.64l0.0,0.02l0.11,0.99l0.1,0.88l0.01,0.05l0.25,1.05l0.03,0.08l0.1,0.22l0.11,0.23l0.03,0.06l0.14,0.3l-0.54,0.32l-0.16,0.1l-0.67,0.39l-0.08,0.05l-0.11,0.06l-0.29,-0.02l-0.23,0.05l-0.52,0.3l-0.14,0.08l-0.39,0.23l-1.49,0.09l-0.09,0.01l-0.3,0.09l-0.5,0.14l-0.13,0.06l-0.72,0.54l-0.07,0.06l-0.65,0.77l-0.48,0.57l-0.03,0.04l-0.82,1.28l-0.36,0.35l-1.03,-0.74l0.06,-1.68l-0.02,-0.13l-0.59,-1.9l-0.03,-0.06l-1.01,-1.99l-0.72,-1.65l-0.26,-2.72l-0.0,-0.01l-0.19,-1.51l-0.03,-0.11l-0.86,-2.01l0.2,-1.98l0.24,-1.84l0.0,-0.02l0.25,-2.72l-0.04,-0.22l-1.27,-2.45l-0.05,-0.07l-2.6,-3.16l-0.03,-0.03l-1.15,-1.12l-1.65,-1.69l-0.04,-0.04l-2.39,-1.83l-2.04,-2.2l-0.91,-1.53l-0.11,-0.12l-1.84,-1.36l-0.12,-0.06l-1.72,-0.53l-0.21,-0.01l-1.98,0.47l-0.23,0.15l-0.83,1.14l-0.0,0.01l-0.68,0.98l-0.04,0.07l-0.33,0.75l-0.78,0.88l-0.02,0.03l-0.71,0.98l-0.84,0.78l-0.01,0.01l-0.36,0.36l-1.04,0.76l-0.67,0.29l-0.53,-0.43l-2.48,-2.33l-0.81,-1.62l-0.03,-0.04l-2.65,-3.97l-0.48,-1.34l-0.46,-1.95l-0.02,-0.07l-1.4,-3.25l-0.0,-0.0l-0.61,-1.37l0.11,-0.22l0.78,-1.48l2.17,-2.66l2.77,-3.08l2.29,-1.86l0.01,-0.01l2.29,-2.02l0.04,-0.04l3.41,-4.04l1.32,-1.28l1.39,-1.3l0.05,-0.05l1.48,-1.96l2.3,-2.91l1.01,-1.27l0.94,-1.19l0.02,-0.03l1.64,-2.58l1.04,-1.42l2.0,-2.58l2.15,-2.05l2.26,-2.12l0.9,-0.62l0.01,-0.01l2.03,-1.49l0.15,-0.24l0.52,-2.52l0.0,-0.14l-0.18,-1.11l-0.23,-1.44l-0.1,-2.02l-0.01,-0.23l0.06,-2.07l0.71,-2.01l1.05,-1.83l0.73,-0.9l0.05,-0.07l1.51,-2.98l0.01,-0.02l0.98,-2.22l1.07,-1.78l0.0,-0.01l1.1,-1.94l0.03,-0.06l0.84,-2.27l0.02,-0.07l0.36,-2.13l0.0,-0.12l-0.31,-2.2l-0.05,-0.14l-1.89,-3.45l-0.29,-0.63l-0.25,-0.55l-0.19,-0.19l-0.12,-0.06l-0.07,-0.03l-1.02,-0.27l-1.48,-0.4l-0.06,-0.01l-0.45,-0.05l-1.73,-0.93l-1.19,-1.11l-0.58,-0.54l-1.31,-1.75l-0.19,-1.05l-0.02,-0.18l-0.03,-0.58l-0.09,-1.6l-0.05,-1.05l0.26,-1.24l0.28,-1.33l-0.03,-0.24l-0.76,-1.72l-0.03,-0.05l-1.16,-1.82l-0.26,-0.6l-0.85,-1.99l-0.01,-0.02l-1.64,-3.22l-0.02,-0.04l-1.68,-2.5l-0.12,-0.12l-2.52,-1.56l-0.09,-0.04l-2.18,-0.7l-0.03,-0.01l-1.9,-0.47l-0.05,-0.01l-0.41,-0.05l-0.33,-0.04l-0.01,-0.0l-0.63,-0.05l-0.29,-0.38l-1.34,-1.78l-1.5,-2.94l-0.0,-0.01l-1.18,-2.18l-0.01,-0.02l-1.47,-2.39l-1.63,-2.87l-0.56,-1.36l2.56,-0.23l0.04,-0.01l4.41,-0.82l0.08,-0.03l4.07,-1.73l0.06,-0.03l3.32,-2.19l4.32,-2.47l0.0,-0.0l3.72,-2.18l0.01,-0.01l0.15,-0.09l4.1,-2.63l0.03,-0.02l2.71,-2.12l0.11,-0.14l1.33,-2.82l0.03,-0.24l-0.25,-1.41l-0.37,-3.03l0.11,-4.16l0.35,-4.79l0.24,-2.48l0.06,-0.46l2.65,0.59l0.04,0.01l4.6,0.49l0.08,0.0l0.04,-0.0l2.03,-0.2l1.16,-0.02l0.08,-0.01l2.98,-0.67l0.05,-0.01l2.55,-0.94l0.07,-0.03l2.12,-1.29l0.09,-0.08l2.05,-2.3l0.05,-0.07l1.62,-2.9l2.85,-3.76l2.5,-2.9l0.02,-0.02l2.09,-2.74l0.7,-0.7l2.1,-2.1l2.48,-0.86l0.43,-0.15l3.39,-0.34l4.15,-0.25l0.1,-0.02l4.17,-1.33l0.05,-0.02l2.97,-1.37l0.13,-0.09l2.96,-3.16l0.09,-0.16l0.91,-2.96l1.65,-0.07l2.08,-0.08l0.16,-0.04l0.24,-0.12l0.0,-0.0l2.6,-1.27l0.17,-0.15l2.66,-4.44l2.48,-2.54l2.89,-1.7l5.44,0.17l4.67,0.77l3.4,1.22l3.04,1.84l2.49,2.65l0.9,1.06l0.13,0.1l2.94,1.39l0.01,0.01l2.87,1.24l0.12,0.03l2.75,0.27l0.08,-0.0l2.57,-0.29l0.25,-0.12l1.38,-1.48l0.1,-0.22l0.08,-0.58l0.3,-2.17l0.18,-1.31l1.21,-5.25l2.09,-4.31l0.0,-0.01l1.17,-2.53l0.02,-0.04l1.47,-4.4l0.01,-0.04l1.06,-4.96l0.01,-0.05l0.04,-0.49l0.02,-0.29l0.19,-2.64l0.0,-0.05l-0.21,-3.4l0.27,-2.5l1.66,-0.23l1.55,-0.21l0.6,0.72l0.15,0.11l1.56,0.66l0.06,0.02l2.98,0.73l0.13,0.01l4.68,-0.36l0.1,-0.02l2.45,-0.85l2.18,-0.74l1.55,-0.36l-0.03,0.18l-0.01,0.07l0.0,0.31l0.0,0.65l0.0,0.02l0.02,0.49l0.03,0.74l0.0,0.07l-0.1,0.38l-0.1,0.37l-0.01,0.02l-0.43,0.73l-0.03,0.06l-0.5,1.29l-0.19,0.28l-0.61,0.92l-0.0,0.01l-0.32,0.52l-0.05,0.08l-0.27,0.2l-0.11,0.01l-0.24,0.11l-0.7,0.66l-0.07,0.08l-0.24,0.4l-0.04,0.09l-0.11,0.38l-0.24,0.15l-0.19,0.3l-0.01,0.07l-0.02,0.16l-0.55,0.99l-0.08,0.15l-0.62,0.78l-0.06,0.11l-0.28,0.72l-0.02,0.07l-0.18,0.96l-0.23,1.19l-0.21,0.93l-0.09,0.39l-0.25,0.73l-0.04,0.11l-0.02,0.04l-0.25,0.57l-0.05,0.11l-0.02,0.04l-0.13,0.18l-0.19,0.26l-0.06,0.08l-0.51,0.53l-1.15,1.01l-0.59,0.41l-0.05,0.04l-0.22,0.21l-0.0,0.0l-0.2,0.14l-0.14,0.17l-0.59,1.33l-0.03,0.08l-0.39,1.88l-0.08,0.39l-0.2,0.72l-0.01,0.08l-0.03,0.38l-0.02,0.25l0.0,0.08l0.05,0.45l0.02,0.08l0.3,0.87l0.05,0.14l0.04,0.78l-0.01,0.63l0.02,0.13l0.42,1.36l0.1,0.17l0.1,0.1l0.42,0.41l0.29,0.59l0.08,0.79l-0.02,0.28l-0.06,0.72l-0.61,0.74l-0.1,0.13l-0.01,0.01l-0.55,0.5l-0.41,0.37l-0.14,0.13l-0.12,0.19l-0.17,0.61l-0.0,0.0l-0.09,0.32l-0.12,0.43l-0.01,0.07l-0.06,0.81l-0.01,0.13l-0.0,0.04l-0.04,0.51l0.0,0.07l0.14,1.33l0.02,0.77l0.01,0.47l-0.82,1.18l-0.05,0.09l-0.28,0.73l-0.03,0.13l-0.03,1.11l0.01,0.09l0.31,1.63l-0.08,0.8l-0.05,0.48l-0.39,1.24l-0.17,0.34l-0.33,0.64l-0.58,0.68l-0.04,0.06l-0.12,0.21l-0.09,0.16l-0.15,0.14l-0.11,0.1l-0.64,0.59l-0.07,0.09l-0.67,1.1l-0.04,0.08l-0.12,0.35l-0.02,0.17l0.05,0.46l0.04,0.37l0.07,0.74l-0.01,0.39l-0.01,0.35l-0.27,0.73l-0.03,0.03l-0.27,0.26l-0.52,0.33l-0.38,0.24l-0.37,0.17l-0.2,0.1l-0.15,0.12l-0.06,0.07l-0.31,0.4l-0.05,0.1l-0.43,1.08l-0.01,0.02l-0.28,0.82l-0.12,0.35l-0.28,0.15l-0.72,0.0l-0.07,0.01l-1.05,0.2l-0.26,0.05l-0.11,0.04l-0.34,0.17l-0.98,0.5l-0.25,0.03l-0.27,0.03l-1.1,-0.07l-0.73,-0.04l-0.19,0.03l-0.29,0.13l-0.73,0.32l-0.04,0.02l-0.01,0.01l-0.01,0.01l-0.0,0.0l-0.02,0.01l-0.13,0.1l-0.2,0.21l-0.27,0.29l-0.04,0.05l-0.3,0.45l-0.2,0.31l-0.63,0.96l-0.56,0.76l-0.04,0.07l-0.65,1.43l-0.41,0.38l-1.38,1.25l-0.11,0.16l-0.09,0.26l-0.25,0.68l-0.02,0.16l0.02,0.31l0.02,0.29l0.01,0.07l0.14,0.6l0.05,0.12l0.63,1.03l0.12,0.12l0.22,0.15l0.09,0.06l0.12,0.08l0.48,0.32l0.19,0.19l0.03,0.13l0.01,0.05l-0.03,0.28l-0.22,0.56l-0.01,0.04l-0.02,0.06l-0.3,1.11l-0.42,0.76l-0.35,0.64l-0.24,0.21l-0.41,0.2l-0.74,0.36l-0.11,0.07l-0.25,0.25l-0.34,0.33l-0.07,0.1l-0.12,0.23l-0.04,0.1l-0.17,0.75l0.01,0.22l0.07,0.19l0.08,0.22l0.07,0.47l-0.09,0.24l0.17,0.48l0.18,0.11l0.12,0.24l0.06,0.44l0.09,0.61l0.08,0.19l0.21,0.26l0.22,0.14l0.36,0.09l0.74,0.44l0.26,0.15l0.22,0.06l0.47,-0.01l0.35,0.36l0.08,0.06l0.65,0.4l0.58,0.51l0.36,0.56l-0.01,0.27l0.05,0.2l0.01,0.02l-0.04,0.05l-0.41,0.53l-0.05,0.09l-0.47,1.1l-0.07,0.06l-0.64,0.55l-0.03,0.03l-0.24,0.27l-0.26,0.29l-0.08,0.13l-0.21,0.56l-0.02,0.18l0.04,0.51l-0.28,1.22l-0.01,0.13l0.07,0.71l-0.03,0.03l-0.25,0.33l-0.05,0.1l-0.16,0.42l-0.02,0.07l-0.12,0.66l0.0,0.17l0.3,1.22l-0.01,0.01l-0.01,0.04l-0.38,0.24l-0.09,0.07l-0.03,0.04l-0.38,0.43l-0.06,0.09l-0.21,0.43l-0.03,0.08l-0.07,0.28l0.04,0.29l0.29,0.53l0.05,0.2l-0.07,0.21l-0.22,0.34l0.01,0.45l0.12,0.16l0.01,0.08l0.0,0.02l-0.02,0.09l-0.07,0.29l0.05,0.3l0.35,0.57l0.05,0.06l0.02,0.02l-0.05,0.18l-0.07,0.23l-0.16,0.21l-0.22,0.29l-0.04,0.06l-0.13,0.25l-0.04,0.08l-0.04,0.15l-0.09,0.94l-0.37,0.35l-0.11,0.17l-0.17,0.55l-0.05,0.16l-0.1,0.15l-0.1,0.14l-0.2,0.3l-0.08,0.02l-0.73,-0.21l-0.42,0.13l-0.1,0.12l-0.21,0.26l-0.5,0.48l-0.27,0.27l-0.4,0.1l-0.05,0.01l-0.13,0.06l-0.25,0.17l-0.18,0.04l-0.21,-0.05l-0.5,-0.12l-0.19,0.0l-0.57,0.14l-0.28,0.07l-0.13,0.06l-0.19,0.13l-0.47,0.05l-0.42,0.05l-0.27,0.15l-0.01,0.02l-0.89,-0.02l-0.85,-0.11l-0.22,0.03l-0.44,0.21l-0.46,0.22l-0.49,-0.05l-0.9,-0.09l-0.18,0.02l-0.02,0.01l-0.81,0.29l-0.56,-0.06l-0.01,-0.0l-0.08,-0.01l-0.18,-0.01l-0.35,0.17l-0.21,0.3l-1.76,1.08l-0.06,0.05l-1.17,1.07l-0.17,0.05l-0.6,0.05l-0.11,0.02l-0.41,0.15l-0.21,0.01l-0.28,0.02l-0.28,0.14l-0.18,0.21l-0.16,0.18l-0.04,0.04l-0.59,0.58l-0.35,0.34l-0.67,0.34l-0.53,0.27l-0.11,0.08l-0.22,0.24l-0.4,0.42l-0.07,0.11l-0.32,0.68l-0.5,0.33l-0.28,0.18l-1.02,0.33l-0.07,0.03l-0.84,0.46l-0.83,0.46l-0.01,0.01l-0.41,0.24l-0.15,0.09l-0.52,0.2l-0.07,0.13l-0.02,-0.02l-0.68,0.52l-0.13,0.46l0.08,0.21l0.07,0.18l-0.09,0.42l-0.03,0.14l-0.0,0.15l0.07,0.45l0.21,0.29l0.1,0.05l0.46,0.24l0.18,0.05l1.92,0.03l0.27,0.0l0.25,0.16l0.08,0.1l0.01,0.06l0.09,0.94l-0.22,0.73l-0.01,0.16l0.13,1.18l-0.11,1.58l-0.0,0.04l0.03,1.3l0.04,0.17l0.14,0.3l0.01,0.09l0.08,1.02l-0.07,1.17l-0.14,0.13l-0.62,0.6l-0.12,0.21l-0.15,0.76l-0.0,0.01l-0.04,0.23l-0.01,0.09l0.0,0.14l0.01,0.06l0.01,0.05l-0.02,0.19l-0.44,0.85l-0.03,0.08l-0.04,0.16l-0.08,0.28l0.0,0.22l0.08,0.24l0.1,0.31l-0.3,0.87l-0.02,0.09l-0.08,0.75l0.03,0.21l0.1,0.23l0.12,0.15l0.23,0.17l0.1,0.07l0.14,0.33l-0.07,0.27l0.05,0.31l0.27,0.44l0.03,0.26l-0.23,0.31l-0.05,0.09l-0.17,0.44l-0.02,0.22l0.01,0.03l0.13,0.64l-0.05,0.67l-0.27,0.67l-0.24,0.34l-0.23,0.33l-0.07,0.16l-0.09,0.5l-0.09,0.52l0.04,0.25l0.28,0.54l0.08,0.38l-0.04,0.38l-0.08,0.16l-0.13,0.25l-0.75,1.1l-0.37,0.55l-0.04,0.07l-0.35,0.84l-0.42,0.82l-0.16,0.31l-0.1,0.19l-0.32,0.48l-0.57,0.87l-0.89,0.62l-0.05,0.04l-1.21,1.18l-0.23,0.08l-0.17,0.12l-0.67,0.79l-0.1,0.26l-0.01,1.21l0.13,0.29l0.21,0.2l0.37,0.35l0.12,0.11l0.01,0.1l0.01,0.06l-0.3,0.55l-0.02,0.03l-0.13,0.29l-0.18,0.42l-0.22,0.51l-0.03,0.09l-0.1,0.61l0.0,0.13l0.01,0.07l0.08,0.46l0.03,0.09l0.17,0.39l0.16,0.37l0.05,0.08l0.31,0.4l0.54,1.41l0.04,0.27l0.13,0.98l0.0,0.08l-0.16,0.35l-0.37,0.81l-0.34,0.41l-0.39,0.47l-0.39,0.29l-0.57,0.05l-0.18,-0.09l-0.12,-0.06l-0.12,-0.04l-0.3,-0.05l-0.57,-0.09l-0.09,-0.0l-0.76,0.06l-0.09,0.02l-0.49,0.16l-0.33,0.09l-0.01,0.0l-0.19,0.06l-0.24,0.07l-0.09,0.04l-0.48,0.28l-0.14,0.13l-0.12,0.19l-0.34,0.54l-0.03,0.07l-0.16,0.42l-0.08,0.19l-0.03,0.17l0.02,0.41l0.05,0.96l-0.04,1.14l-0.17,0.54l-1.08,0.81l-0.1,0.1l-0.22,0.35l-0.04,0.08l-0.4,1.16l-0.18,0.16l-0.11,0.1l-0.08,0.1l-0.0,0.01l-0.0,0.0l-0.14,0.25l-0.25,0.21l-0.37,0.01l-0.52,-0.14l-0.28,-0.08l-0.15,-0.01l-0.17,0.02l-0.62,0.07l-0.22,0.1l-0.95,0.87l-0.17,0.16l-0.04,0.03l-0.35,0.27l-0.23,0.18l-0.59,0.46l-0.09,0.07l-0.14,0.11l-0.17,0.13l-0.21,0.17l-0.05,0.04l-0.15,0.12l-0.0,0.0l-0.02,0.01l-0.0,0.0l-0.04,0.03l-0.0,0.0l-0.04,0.03l-0.12,0.1l-0.09,0.07l-0.16,0.13l-0.14,0.11l-0.15,0.12l-0.07,0.05l-0.06,0.04l-0.09,0.04l-0.15,0.06l-0.12,0.0l-0.14,0.0l-0.02,0.0l-0.12,0.0l-0.02,0.0l-0.0,0.0l-0.04,0.0l-0.0,-0.0l-0.14,-0.08l-0.1,-0.05l-0.11,-0.06l-0.11,-0.06l-0.0,-0.0l-0.07,-0.04l-0.06,-0.03l-0.01,-0.01l-0.09,-0.04l-0.04,-0.01l-0.16,-0.04l-0.0,-0.0l-0.13,-0.04l-0.04,-0.01l-0.08,-0.02l-0.02,-0.0l-0.1,-0.03l-0.06,-0.02l-0.0,-0.0l-0.09,-0.02l-0.04,-0.02l-0.0,-0.0l-0.11,-0.04l-0.06,-0.02l-0.0,-0.0l-0.04,-0.01l-0.04,-0.01l-0.02,-0.01l-0.04,-0.02l-0.0,-0.0l-0.06,-0.02l-0.04,-0.01l-0.07,-0.02l-0.09,-0.03l-0.0,-0.0l-0.0,-0.0l-0.07,-0.03l-0.03,-0.01l-0.04,-0.01l-0.09,-0.03l-0.12,-0.04l-0.11,-0.04l-0.09,-0.03l-0.06,-0.02l-0.13,-0.05l-0.14,-0.05l-0.16,-0.06l-0.07,-0.02l-0.0,-0.0l-0.03,-0.01l-0.02,-0.01l-0.07,-0.02l-0.03,-0.01l-0.0,-0.0l-0.04,-0.01l-0.0,-0.0l-0.01,-0.0l-0.02,-0.0l-0.01,-0.0l-0.02,-0.0l-0.0,-0.0l-0.02,-0.0l-0.0,-0.0l-0.02,-0.0l-0.06,-0.01l-0.01,-0.0l-0.0,-0.0l-0.04,-0.01l-0.0,-0.0l-0.02,-0.0l-0.02,-0.0l-0.07,-0.01l-0.04,-0.01l-0.02,-0.0l-0.0,-0.0l-0.04,-0.01l-0.1,-0.02l-0.08,-0.01l-0.07,-0.01l-0.01,-0.0l-0.01,-0.0l-0.05,-0.01l-0.0,-0.0l-1.03,-0.31l-0.87,-0.26l-0.07,-0.01l-0.83,-0.1l-0.13,0.01l-0.35,0.07l-0.17,0.08l-0.3,0.25l-0.18,0.15l-0.06,0.06l-0.31,0.4l-0.08,0.22l-0.01,0.28l-0.06,0.3l-0.04,0.19l-0.01,0.1l0.04,0.66l-0.07,0.15l-0.08,0.17l-0.21,0.24l-0.07,0.01l-0.19,0.09l-0.39,0.34l-0.1,0.08l-0.07,0.08l-0.15,0.22l-0.24,0.35l-0.05,0.1l-0.3,0.89l-0.09,0.08l-0.01,0.08l-0.18,1.04l-0.0,0.02l-0.11,0.82l-0.27,0.72l-0.8,1.08l-0.38,0.51l-0.04,0.06l-0.04,0.09l-0.26,0.52l-0.04,0.07l-0.05,0.1l-0.32,0.22l-0.49,0.07l-0.13,0.0l-0.82,0.02l-0.01,-0.0l-0.0,-0.0l-0.05,-0.0l-0.09,-0.0l-0.16,-0.01l-0.53,-0.03l-0.12,0.01l-0.36,0.09l-0.11,0.05l-0.74,0.46l-0.1,0.08l-0.35,0.42l-0.1,0.08l-0.63,0.03l-0.98,-0.28l-0.38,-0.11l-0.12,-0.02l-0.76,0.02l-0.17,0.04l-0.57,0.28l-0.05,0.03l-1.19,0.82l-0.06,0.12l-0.36,0.21l-0.66,0.26l-0.23,-0.02l-0.38,-0.03l-0.09,0.0l-0.85,0.15l-0.19,0.09l-0.22,0.19l-0.21,0.18l-0.07,0.07l-0.16,0.22l-0.29,0.41l-0.06,0.13l-0.42,1.56l-0.03,0.11l-0.01,0.04l-0.41,2.39l-0.01,0.09l0.01,0.23l0.03,0.6l0.01,0.07l0.11,0.44l0.02,0.09l0.17,0.71l0.02,0.05l0.58,1.49l0.29,0.87l0.55,2.66l0.37,2.57l0.23,1.56l0.04,1.17l0.05,1.61l-0.03,0.49l-0.04,0.59Z", "name": "Adamawa"}, "2016": {"path": "M343.82,602.8l0.15,-0.29l0.28,-0.48l0.37,-0.56l0.01,-0.01l0.27,-0.43l0.02,-0.04l0.25,-0.53l0.32,-0.28l0.48,-0.38l0.06,-0.06l0.48,-0.58l0.25,-0.23l0.47,-0.39l0.68,-0.45l1.12,-0.6l0.01,-0.01l0.8,-0.46l1.16,-0.5l0.0,-0.0l0.04,-0.02l0.8,-0.26l0.12,0.04l0.02,0.01l0.04,0.17l0.05,0.11l0.05,0.08l0.03,0.17l0.57,0.28l0.51,-0.26l0.6,-0.12l0.04,-0.01l1.12,-0.33l1.91,-0.12l0.03,-0.0l1.46,-0.19l2.13,0.21l1.01,0.11l0.88,0.59l0.85,0.59l0.02,0.01l0.51,0.3l0.13,0.66l0.17,-0.03l-0.1,0.21l0.18,0.22l-0.02,0.46l-0.01,0.28l-0.07,0.4l-0.01,0.08l0.05,1.46l0.0,0.03l0.17,1.85l-0.05,1.13l-0.45,1.03l-0.03,0.14l-0.06,1.3l-0.01,0.08l-0.11,0.96l-0.0,0.07l0.05,0.89l0.1,0.24l0.45,0.5l0.68,0.75l0.26,0.13l1.69,0.17l0.0,0.0l1.93,0.17l0.01,0.0l1.52,0.11l0.05,0.0l2.05,-0.08l1.68,0.32l0.05,0.01l0.37,0.02l0.64,0.04l0.22,0.01l0.01,0.0l2.25,0.07l0.01,0.0l1.79,0.03l1.22,0.09l0.02,0.0l0.68,0.01l0.75,0.07l0.63,0.58l0.65,1.4l0.08,1.19l0.0,0.03l0.19,1.39l0.06,0.17l0.84,1.26l0.09,0.09l1.14,0.89l0.03,0.02l1.64,1.02l1.05,0.9l0.2,0.09l1.55,0.24l0.55,0.3l0.48,0.97l-0.05,1.06l-0.46,1.97l-0.01,0.03l-0.19,1.33l-0.0,0.05l-0.02,2.36l0.0,0.04l0.13,1.46l0.07,0.78l0.03,0.11l0.66,1.64l0.27,0.93l0.42,1.42l0.28,1.56l0.03,0.09l0.88,2.04l0.06,0.1l0.87,1.02l0.0,0.0l1.16,1.35l0.45,1.31l0.4,1.55l-0.55,1.1l-0.89,-0.07l-1.67,-0.57l-0.04,-0.01l-1.05,-0.25l-0.08,-0.15l-0.04,-0.06l-0.51,-0.62l-0.03,-0.03l-0.97,-0.95l-0.02,-0.02l-0.68,-0.57l-0.01,-0.01l-0.91,-0.69l-0.05,-0.03l-0.7,-0.38l-0.11,-0.04l-1.35,-0.28l-0.94,-0.34l-0.76,-0.44l-0.73,-0.52l-0.74,-0.75l-0.03,-0.03l-0.92,-0.75l-0.36,-0.81l-0.28,-1.57l-0.06,-0.15l-0.62,-0.95l-0.05,-0.06l-0.82,-0.85l-0.12,-0.08l-1.22,-0.58l-0.11,-0.03l-1.05,-0.17l-1.84,-0.36l-0.03,-0.0l-0.81,-0.1l-0.06,-0.0l-0.99,0.04l-0.07,0.01l-1.13,0.24l-0.3,0.27l-0.29,0.94l-0.05,0.16l-0.01,0.22l0.45,1.72l0.21,1.64l-0.03,0.76l-0.18,0.84l-0.14,0.53l-0.57,0.7l-0.08,0.17l-0.27,1.25l-0.16,0.28l-0.61,1.05l-0.05,0.14l-0.18,1.23l0.07,0.29l0.39,0.54l0.35,0.17l1.02,-0.05l0.08,-0.01l0.98,-0.27l0.1,0.02l-0.36,1.29l-0.35,1.21l-0.55,0.78l-0.13,0.11l-0.28,0.03l-0.06,0.01l-0.56,0.16l-0.39,-0.05l-0.04,-0.0l-1.0,-0.03l-0.01,-0.0l-1.38,-0.02l-0.91,-0.29l-0.07,-0.02l-0.67,-0.1l-0.08,-0.0l-1.78,0.11l-0.14,0.04l-0.8,0.37l-0.17,0.15l-0.53,0.82l-0.06,0.18l-0.08,0.92l0.05,0.23l0.14,0.27l0.34,0.64l0.04,0.06l0.47,0.6l0.25,0.66l-0.04,0.5l-0.15,0.54l-0.29,0.91l-0.01,0.03l-0.3,1.19l-0.01,0.03l-0.23,1.36l-0.19,1.08l-0.25,1.29l-0.01,0.06l-0.05,1.16l-0.01,0.14l-0.0,0.02l0.03,1.63l0.01,0.06l0.27,1.6l0.02,0.07l0.48,1.28l-0.21,0.51l-0.21,0.51l-0.02,0.05l-0.32,1.21l-0.56,1.0l-0.6,0.66l-0.45,0.2l-0.52,0.23l-0.1,0.06l-1.32,1.14l-0.14,0.35l0.09,0.78l-0.48,0.66l-0.08,0.23l-0.02,1.04l0.03,0.15l0.28,0.75l0.07,0.12l0.62,0.7l0.02,1.2l-0.01,0.02l-0.0,0.0l-0.41,1.12l-0.35,0.74l0.01,0.36l0.5,0.96l0.68,1.43l0.01,0.03l0.65,1.12l0.29,0.51l0.21,1.3l0.0,0.02l0.1,0.43l-0.01,0.01l-0.06,-0.05l-1.07,-0.89l-1.22,-1.17l-0.07,-0.05l-1.1,-0.66l-0.03,-0.02l-1.06,-0.52l-0.03,-0.01l-1.39,-0.53l-0.26,-0.01l-0.71,0.22l-1.35,0.27l-0.69,-0.18l-0.99,-0.32l-1.4,-0.69l-0.04,-0.02l-0.72,-0.25l-0.28,0.0l-0.48,0.18l-0.25,0.1l-1.1,0.11l-1.32,-0.26l-0.28,0.05l-0.54,0.32l-0.76,0.43l-0.54,0.16l-0.88,0.07l-1.24,0.03l-0.15,0.03l-0.88,0.39l-1.09,-0.1l-0.82,-0.19l-0.89,-0.84l-0.74,-0.75l-0.63,-1.18l0.11,-0.72l0.07,-0.45l0.46,-1.45l0.06,-0.19l0.0,-0.01l0.3,-1.04l0.78,-1.68l0.58,-0.62l0.24,-0.26l0.0,-0.0l0.52,-0.57l0.27,-0.26l0.09,-0.13l0.43,-0.99l0.6,-0.8l0.71,-0.89l0.64,-0.71l0.06,-0.1l0.63,-1.31l0.01,-0.03l0.34,-0.9l0.69,-1.01l0.57,-0.55l0.08,-0.11l0.57,-1.19l0.04,-0.21l-0.16,-1.86l0.09,-1.46l-0.03,-0.18l-0.46,-1.08l-0.32,-0.98l-0.35,-0.27l-0.03,-0.0l0.47,-1.08l0.0,-0.0l0.05,-0.11l0.02,-0.04l0.73,-2.43l0.01,-0.04l0.32,-1.76l0.67,-2.39l0.14,-0.44l0.28,-0.89l0.02,-0.05l0.01,-0.03l0.31,-1.43l0.44,-1.27l0.61,-1.34l0.12,-0.12l0.09,-0.13l0.34,-0.78l0.1,-0.23l1.21,-1.99l1.33,-1.09l0.04,-0.04l0.45,-0.49l0.38,-0.42l0.08,-0.15l0.25,-0.75l0.76,-1.59l0.02,-0.05l0.37,-1.22l1.0,-1.02l0.09,-0.15l0.31,-0.93l0.14,-0.41l0.02,-0.1l0.07,-1.11l-0.0,-0.07l-0.18,-1.6l0.01,-0.31l0.03,-0.82l-0.01,-0.09l-0.28,-1.34l0.08,-1.13l0.24,-1.26l-0.06,-0.3l-0.92,-1.35l-0.75,-1.36l0.19,-0.24l0.02,-0.02l0.64,-0.13l0.16,-0.07l0.25,-0.19l0.16,-0.31l0.04,-1.18l0.04,-1.23l0.0,-0.01l0.0,-1.28l-0.01,-0.11l-0.45,-1.66l-0.14,-1.54l0.04,-1.52l0.0,-0.0l0.03,-1.79l-0.02,-0.14l-0.58,-1.64l-0.01,-0.02l-0.55,-1.29l-0.15,-0.18l-0.19,-0.13l-0.51,-0.34l-0.09,-0.04l-1.17,-0.42l-0.08,-0.02l-1.04,-0.13l-1.66,-0.81l-0.09,-0.03l-1.41,-0.33l-0.98,-0.41l-0.96,-0.52l-0.69,-0.71l-0.43,-0.58Z", "name": "Abia"}, "2039": {"path": "M4.99,388.3l0.07,-0.09l0.43,-0.53l0.08,-0.16l0.0,-0.01l0.1,-0.41l0.26,-0.26l0.37,-0.09l0.32,-0.07l0.11,-0.04l0.3,-0.17l0.1,-0.05l0.16,-0.16l0.17,-0.33l0.01,-0.35l-0.31,-0.68l-0.02,-0.23l-0.03,-0.44l0.13,-0.9l0.0,-0.0l0.09,-0.68l-0.04,-0.24l-0.13,-0.26l-0.0,-0.0l-0.12,-0.23l0.52,-0.12l0.31,-0.31l0.1,-0.49l0.31,-1.59l-0.01,-0.2l-0.24,-0.75l-0.47,-0.27l-0.38,0.08l0.01,-0.03l0.11,-0.11l0.04,-0.03l0.26,-0.06l0.17,-0.09l0.02,-0.01l0.0,-0.0l0.14,-0.12l0.1,-0.14l0.11,-0.27l0.01,-0.01l0.09,-0.23l0.23,-0.52l0.0,-0.01l0.01,-0.02l0.12,-0.27l0.01,-0.01l0.16,-0.4l0.11,-0.26l-0.04,-0.38l-0.27,-0.41l-0.12,-0.09l0.57,-0.37l0.14,-0.16l0.23,-0.46l0.02,-0.32l-0.11,-0.29l-0.0,-0.0l-0.1,-0.15l-0.16,-0.16l0.09,-0.05l0.17,-0.17l0.07,-0.15l0.01,-0.03l-0.02,-0.39l-0.01,-0.02l-0.12,-0.2l-0.28,-0.19l-0.22,-0.03l0.18,-0.32l-0.0,-0.39l-0.1,-0.18l-0.22,-0.16l0.16,-0.08l0.19,-0.2l0.01,-0.01l0.1,-0.24l0.01,-0.28l-0.06,-0.17l-0.0,-0.01l-0.01,-0.02l-0.26,-0.23l0.05,-0.03l0.17,-0.3l0.0,-0.01l0.0,-0.0l0.01,-0.16l0.01,-0.18l0.22,-0.51l-0.09,-0.45l-0.45,-0.43l0.09,-0.4l0.65,0.01l0.48,0.01l0.02,-0.0l0.31,-0.01l0.0,0.0l0.18,0.02l0.04,0.0l0.19,0.0l0.02,-0.0l0.16,-0.01l1.86,0.03l0.01,0.0l1.24,-0.02l0.95,0.17l0.16,-0.0l0.87,-0.19l0.29,-0.26l0.1,-0.3l0.07,-0.22l0.62,-0.47l0.28,-0.21l0.7,-0.16l0.42,-0.09l0.46,-0.06l0.0,-0.0l0.64,-0.09l0.62,-0.08l0.16,-0.01l0.02,-0.0l0.45,-0.06l0.55,-0.07l0.07,-0.01l0.47,0.79l0.21,0.17l0.11,0.04l0.25,0.09l1.14,0.41l0.2,0.02l0.73,-0.12l1.01,0.0l0.1,-0.01l0.5,-0.13l0.0,-0.0l0.19,-0.04l0.06,-0.02l0.09,-0.03l0.0,-0.0l0.35,-0.13l0.29,-0.11l0.0,-0.0l0.54,-0.21l0.13,-0.01l0.38,-0.04l0.1,-0.02l0.2,-0.07l0.32,-0.11l0.04,-0.02l0.04,-0.02l0.06,-0.02l0.07,-0.03l0.04,-0.02l0.07,-0.03l0.05,-0.03l0.17,-0.12l1.15,-0.35l0.83,-0.25l0.13,-0.07l0.35,-0.28l0.15,-0.26l0.22,-1.57l0.07,-0.52l0.07,-0.18l0.59,-1.45l0.39,-0.73l0.61,-1.11l0.14,-0.26l0.3,-0.53l0.22,-0.35l0.06,-0.24l-0.11,-1.62l-0.02,-0.68l-0.0,-0.14l0.02,-0.96l0.06,-0.22l0.21,-0.7l0.32,-0.42l1.33,-0.99l0.08,-0.08l0.54,-0.74l0.07,-0.19l0.08,-0.65l-0.01,-0.15l-0.1,-0.4l-0.24,-0.97l-0.0,-0.0l-0.0,-0.01l-0.12,-0.85l-0.03,-1.32l0.09,-1.11l0.01,-0.13l0.0,-0.01l0.0,-0.04l0.05,-0.6l-0.0,-0.1l-0.13,-0.82l-0.0,-0.01l-0.02,-0.07l-1.37,-3.77l-0.16,-0.95l0.36,-1.58l0.93,-1.58l0.0,-0.0l0.02,-0.03l0.15,-0.22l0.21,-0.29l0.09,-0.05l0.44,-0.24l0.88,-0.36l0.42,-0.17l0.0,-0.0l0.12,-0.05l0.05,-0.02l0.0,-0.0l0.09,-0.04l0.13,-0.05l0.13,-0.08l0.01,-0.01l0.0,-0.0l0.63,-0.61l0.09,-0.13l0.59,-1.32l0.0,-0.0l0.37,-0.84l0.57,-0.66l0.04,-0.05l0.01,-0.01l0.0,-0.0l0.39,-0.64l0.38,-0.61l0.01,-0.01l0.34,-0.3l0.0,-0.0l0.01,-0.01l0.09,-0.11l0.08,-0.14l0.46,-0.78l0.73,-1.04l0.01,-0.01l0.03,-0.06l0.26,-0.53l0.0,-0.0l0.01,-0.03l0.04,-0.14l0.13,-1.51l0.02,-0.26l0.0,-0.01l0.03,-0.39l0.35,-0.59l0.0,-0.0l0.06,-0.1l0.07,-0.11l0.18,-0.15l0.31,-0.27l0.05,-0.02l0.0,-0.0l0.48,-0.15l0.78,-0.02l0.55,0.16l0.01,0.0l0.68,0.17l0.11,0.01l0.3,-0.01l0.01,-0.0l0.1,-0.01l0.21,-0.07l0.1,-0.07l0.11,-0.08l0.05,-0.04l0.32,-0.3l0.36,-0.31l0.22,-0.19l0.38,-0.33l0.02,-0.02l0.56,-0.43l0.01,-0.01l0.41,-0.33l0.08,-0.09l0.01,-0.01l0.04,-0.08l0.04,-0.11l0.01,-0.05l0.02,-0.11l0.03,-0.16l0.16,-0.5l0.01,-0.21l-0.02,-0.07l-0.11,-0.5l-0.05,-0.13l-0.01,-0.02l-0.0,-0.0l-0.73,-1.14l-0.08,-0.31l-0.03,-0.08l-0.74,-1.48l-0.3,-1.08l-0.06,-1.07l0.42,-1.47l0.72,-0.81l0.51,-0.56l0.01,-0.01l0.63,-0.52l0.43,-0.16l0.56,-0.2l0.04,-0.01l0.58,-0.21l0.01,-0.01l0.82,-0.33l0.12,-0.05l1.24,-0.46l1.18,-0.43l0.85,-0.29l1.03,-0.34l0.49,-0.16l1.27,-0.14l0.42,0.09l0.01,0.0l1.29,0.26l0.03,0.01l0.05,0.01l0.92,0.07l0.19,-0.03l0.4,-0.17l0.35,-0.06l0.5,-0.08l0.03,-0.01l0.02,-0.0l0.17,-0.08l0.27,-0.21l0.4,-0.3l0.06,-0.06l0.02,-0.02l0.64,-0.75l0.05,-0.09l0.06,-0.02l0.15,-0.11l0.84,-0.98l0.0,-0.0l0.01,-0.01l0.06,-0.1l0.15,-0.34l0.03,-0.16l-0.0,-1.11l0.41,-0.57l0.85,-0.7l0.0,-0.0l0.96,-0.8l0.09,-0.11l0.49,-0.88l0.04,-0.09l0.46,-1.66l0.01,-0.04l0.01,-0.04l0.21,-1.2l0.0,-0.0l0.0,-0.03l0.01,-0.07l-0.01,-0.3l-0.02,-0.7l-0.0,-0.0l-0.01,-0.22l0.05,-0.47l0.0,-0.0l0.0,-0.01l0.01,-0.13l0.0,-0.06l-0.02,-0.56l-0.05,-1.27l-0.0,-0.03l0.02,-0.52l0.03,-0.66l0.27,-0.9l0.27,-0.42l0.28,-0.42l0.22,-0.2l0.01,-0.01l0.11,-0.11l0.01,-0.0l0.0,-0.0l0.43,-0.21l0.28,-0.08l0.1,-0.05l0.39,-0.24l0.76,-0.1l0.01,-0.0l0.0,-0.0l0.02,-0.0l0.21,-0.09l0.22,-0.19l0.11,-0.09l0.13,-0.18l0.0,-0.01l0.0,-0.0l0.25,-0.73l0.0,-0.0l0.14,-0.44l0.01,-0.03l0.07,-0.26l0.03,-0.11l0.3,-0.12l1.15,-0.23l2.46,-0.48l2.28,-0.18l1.94,0.05l0.05,-0.0l1.24,-0.13l1.19,0.07l0.04,0.0l2.32,-0.07l0.18,-0.01l0.05,-0.0l0.81,0.11l0.49,0.06l0.07,0.0l1.04,-0.06l0.6,-0.03l0.04,-0.0l2.15,-0.32l1.21,-0.07l0.24,-0.01l0.54,0.12l1.32,0.3l0.03,0.01l0.56,0.08l0.92,0.13l0.7,0.35l0.05,0.02l0.59,1.07l0.08,0.1l1.0,0.92l0.05,0.04l0.31,0.29l1.11,1.03l0.05,0.06l1.18,1.27l0.01,0.01l0.67,0.68l0.61,0.62l0.87,0.97l0.82,1.19l0.03,0.03l0.98,1.14l1.3,1.57l1.04,1.4l0.02,0.02l0.9,1.04l0.01,0.01l0.38,0.41l0.94,1.01l0.66,0.83l0.62,0.79l0.03,0.03l1.65,1.7l0.02,0.02l0.63,0.58l0.38,0.35l0.85,1.04l0.58,0.71l0.38,0.79l0.53,1.11l0.08,0.11l0.97,0.94l0.49,0.47l0.43,0.61l0.5,0.71l0.0,0.01l0.51,0.69l0.53,0.72l0.02,0.03l1.71,1.91l0.0,0.0l1.6,1.75l0.04,0.04l1.63,1.35l0.08,0.05l0.78,0.39l0.36,0.18l0.22,0.04l1.95,-0.2l0.97,0.45l0.26,1.2l0.02,2.03l-0.27,0.86l-0.04,0.13l-0.02,0.08l-0.12,1.13l-0.09,0.89l-0.34,2.55l-0.0,0.07l0.08,1.54l0.05,0.9l0.01,0.66l0.01,0.93l-0.08,2.47l0.0,0.06l0.28,2.36l0.06,0.53l0.03,0.12l0.72,1.56l0.25,0.22l1.58,0.47l0.14,0.02l2.28,-0.13l0.02,-0.0l1.91,-0.21l0.03,-0.0l2.86,-0.53l1.9,-0.08l0.02,0.01l0.79,0.7l0.1,0.37l0.04,0.14l0.34,1.26l-0.17,1.52l-0.0,0.01l-0.05,0.61l-0.01,0.11l-0.02,0.24l-0.0,0.04l0.01,0.5l0.0,0.0l0.0,0.08l0.02,1.02l0.01,0.09l0.35,1.38l0.08,0.32l0.05,0.12l0.01,0.02l0.78,1.21l0.07,0.09l0.49,0.42l0.14,0.13l0.58,0.5l0.01,0.01l1.26,1.04l0.05,0.03l0.31,0.18l0.84,0.5l0.27,0.16l0.11,0.04l0.5,0.12l0.54,0.13l0.63,0.15l0.08,0.01l0.86,0.03l0.43,0.01l0.64,0.02l0.2,0.1l0.32,0.17l0.6,0.31l0.46,0.68l0.05,0.07l0.1,0.15l0.14,0.54l0.05,0.2l0.18,0.71l0.09,0.4l0.03,0.14l0.03,0.14l0.04,0.21l0.03,0.52l0.01,0.22l0.01,0.22l0.01,0.19l0.0,0.02l0.02,0.21l0.06,0.53l0.16,1.45l0.13,1.2l0.02,0.2l0.01,0.05l0.22,0.91l0.14,0.22l0.02,0.02l0.0,0.0l0.61,0.48l0.77,0.61l0.05,0.03l0.18,0.1l0.18,0.1l0.52,0.3l0.09,0.04l0.36,0.1l0.28,0.08l0.26,0.07l0.16,0.01l0.81,-0.12l0.01,-0.0l0.22,-0.04l0.49,-0.09l0.08,-0.02l0.92,-0.38l0.16,-0.07l0.38,-0.14l0.82,-0.3l0.36,-0.11l0.46,-0.14l0.73,-0.22l0.03,-0.01l0.27,-0.1l0.87,-0.34l0.23,-0.09l0.29,-0.11l0.64,-0.23l0.69,-0.25l0.03,-0.01l0.77,-0.35l0.52,-0.22l0.68,-0.28l0.0,-0.0l0.86,-0.37l0.34,-0.14l0.11,-0.05l0.0,-0.0l0.6,-0.26l0.27,-0.12l0.03,-0.0l0.0,-0.0l0.09,-0.0l0.06,-0.0l0.67,-0.1l0.37,-0.05l0.06,-0.01l0.0,-0.0l0.37,-0.06l0.12,0.0l0.91,0.02l0.06,0.0l1.55,0.76l1.46,0.82l0.03,0.02l2.03,0.92l0.16,0.07l0.01,0.0l2.35,1.02l0.43,0.34l1.07,0.83l0.14,0.11l0.63,0.82l0.0,0.0l0.07,0.09l0.46,0.6l0.0,0.0l0.01,0.01l0.5,0.63l0.67,0.85l0.08,0.08l0.38,0.27l0.33,0.23l0.04,0.03l0.61,0.43l0.76,0.94l0.21,0.28l0.64,0.86l0.25,0.33l0.01,0.02l0.28,0.33l0.15,0.18l0.31,0.37l-0.01,0.02l0.07,0.14l0.08,0.16l0.0,0.01l0.0,0.0l0.22,0.44l0.2,0.19l0.53,0.22l0.18,0.19l0.01,0.01l0.15,0.1l0.5,0.18l0.07,0.02l0.64,0.12l0.0,0.0l0.2,0.04l0.11,0.12l0.19,0.11l0.46,0.12l0.59,0.16l0.24,-0.01l0.92,-0.34l0.17,-0.06l0.27,-0.03l0.65,-0.08l0.12,-0.03l1.23,-0.58l0.08,-0.04l0.09,-0.02l0.42,-0.07l0.01,-0.0l0.7,-0.13l0.35,0.04l0.28,0.03l0.74,0.3l0.91,0.37l0.34,-0.02l0.32,-0.17l0.21,-0.11l0.43,0.15l0.86,0.29l0.1,0.02l0.8,0.06l0.59,0.38l0.66,0.43l0.11,0.05l0.47,0.13l0.59,0.17l0.12,0.01l0.84,-0.03l0.27,0.18l0.36,0.24l0.39,0.32l0.41,0.06l0.56,-0.25l0.35,0.24l0.77,0.63l0.07,0.05l1.34,0.68l0.98,0.61l0.42,0.32l0.59,0.45l0.03,0.02l0.08,0.05l0.0,0.0l0.24,0.15l1.09,0.69l0.75,0.5l0.15,0.1l0.12,0.08l0.6,0.4l0.06,0.03l0.3,0.14l0.06,0.03l0.1,0.07l0.74,0.53l0.67,0.48l0.01,0.01l1.22,0.8l0.06,0.03l0.85,0.39l0.25,0.11l0.98,0.52l1.21,0.64l0.04,0.03l0.55,0.41l0.02,0.01l0.74,0.5l0.01,0.0l0.67,0.44l2.67,1.99l0.06,0.04l0.48,0.24l0.19,0.12l0.25,0.2l0.25,0.2l0.0,0.0l0.17,0.13l0.17,0.13l0.7,0.9l0.02,0.02l0.06,0.15l0.22,0.55l0.19,0.21l0.29,0.15l0.33,0.17l0.02,0.01l1.15,0.54l0.04,0.02l1.19,0.42l0.02,0.01l1.03,0.3l0.07,0.01l0.85,0.08l0.04,0.0l0.62,-0.01l0.73,0.06l1.27,0.18l0.04,0.0l1.62,0.08l0.02,0.0l0.81,-0.0l0.11,-0.02l0.5,-0.14l0.9,-0.13l0.68,-0.05l0.02,0.0l0.2,-0.05l0.6,-0.33l0.15,-0.02l0.08,-0.02l0.36,-0.13l0.02,-0.01l0.01,-0.03l0.53,-0.18l0.89,0.14l0.15,-0.0l0.93,-0.21l1.4,-0.25l1.42,-0.16l0.87,0.08l0.02,0.0l1.28,0.04l0.01,0.0l1.0,-0.0l0.01,-0.0l1.02,-0.02l0.74,0.23l0.61,0.23l0.07,0.02l0.85,0.15l0.04,0.01l0.33,0.02l0.66,0.05l0.03,0.0l1.01,0.0l0.99,0.34l0.0,0.0l0.58,0.2l0.99,0.38l0.04,0.01l0.62,0.17l0.05,0.01l1.14,0.16l0.04,0.0l0.6,0.03l-0.26,0.51l-0.63,1.09l-0.68,0.73l-0.6,0.44l-0.11,0.12l-0.36,0.62l-0.05,0.12l-0.22,1.09l-0.45,1.45l-0.61,1.72l-0.3,0.75l-0.01,0.04l-0.25,0.91l-0.34,1.08l-0.0,0.02l-0.26,0.95l-0.0,0.01l-0.33,1.42l-0.01,0.05l-0.16,1.41l-0.0,0.07l0.08,1.33l-0.26,1.55l-0.0,0.02l-0.09,0.85l-0.43,0.89l-0.04,0.21l0.13,1.48l-0.29,0.44l-0.13,0.07l-0.19,0.25l-0.4,1.65l-0.01,0.02l-0.59,1.16l-0.03,0.08l-0.17,0.64l-1.37,0.26l-0.02,0.01l-0.8,0.2l-1.14,0.09l-0.06,-0.01l-0.0,-0.0l-0.18,-0.02l-1.4,-0.4l-0.01,-0.0l-0.58,-0.15l-0.51,-0.15l-0.08,-0.01l-0.97,-0.09l-1.05,-0.15l-1.75,-0.33l-0.44,-0.22l-0.39,-0.25l-0.2,-0.06l-1.84,-0.07l-0.77,-0.06l-0.09,0.0l-2.06,0.27l-0.49,-0.06l-0.73,-0.59l-0.22,-0.09l-0.57,-0.04l-0.53,-0.04l-0.03,-0.0l-0.88,-0.01l-0.03,0.0l-1.47,0.08l-0.01,0.0l-0.99,0.07l-0.01,0.0l-1.08,0.11l-1.08,-0.24l-1.06,-0.63l-0.06,-0.03l-1.01,-0.38l-0.09,-0.02l-1.04,-0.12l-0.05,-0.0l-1.08,0.01l-0.91,-0.55l-0.11,-0.05l-2.08,-0.52l-0.93,-0.26l-0.94,-0.51l-0.21,-0.11l-0.02,-0.01l-0.88,-0.42l-0.05,-0.02l-1.22,-0.4l-1.06,-0.71l-1.15,-0.9l-0.03,-0.02l-0.79,-0.51l-0.59,-0.65l-0.72,-0.83l-0.12,-0.49l-0.07,-0.14l-0.66,-0.88l-0.09,-0.45l-0.2,-0.27l-0.39,-0.22l-0.33,-0.03l-0.47,0.17l-0.02,0.01l-0.05,0.02l-0.62,0.26l-0.11,0.07l-0.95,0.82l-0.0,0.0l-1.0,0.87l-1.17,0.58l-0.16,0.15l-0.63,1.03l-1.62,1.46l-0.35,0.32l-0.03,0.03l-1.81,2.01l-0.04,0.06l-0.68,1.1l-0.01,0.02l-0.87,1.63l-1.21,1.98l-1.19,1.44l-0.92,0.97l-0.01,0.01l-0.44,0.5l-0.09,0.2l-0.21,1.2l0.05,0.27l0.53,0.92l0.28,0.48l1.03,1.89l0.47,1.15l0.05,0.09l1.19,1.57l0.06,0.07l1.2,1.0l0.03,0.02l0.31,0.21l-0.01,0.16l0.16,0.61l0.11,0.19l0.68,0.63l0.32,0.32l0.06,0.05l1.78,1.16l0.13,0.56l0.17,0.24l1.1,0.73l0.08,0.04l1.77,0.67l1.44,1.1l0.09,0.05l1.25,0.52l0.37,0.53l0.08,0.63l0.01,0.06l0.38,1.39l-0.21,0.97l-0.41,0.35l-0.1,-0.0l-0.49,0.06l-0.28,0.02l-0.24,-0.14l-0.28,-0.04l-0.23,0.05l-0.01,0.0l-0.06,0.02l-0.29,0.06l-0.35,0.04l-1.0,0.12l-0.01,0.0l-1.62,0.24l-1.82,-0.28l-0.12,-0.0l-1.06,0.16l-0.02,0.0l-1.44,0.31l-0.06,0.02l-1.24,0.48l-0.06,0.03l-0.53,0.31l-0.69,0.35l-0.14,0.11l-0.35,0.46l-0.08,0.24l0.0,0.73l-0.25,0.55l-0.36,0.78l-0.0,0.33l0.26,0.58l-0.76,1.27l-0.04,0.08l-0.17,0.53l-0.16,-0.1l-0.65,-0.15l-0.05,-0.01l-0.48,-0.04l-0.16,0.02l-0.4,0.13l-0.04,0.01l-0.79,0.35l-1.02,0.19l-1.12,-0.15l-0.91,-0.35l-0.59,-0.23l-0.21,-0.02l-0.86,0.14l-0.74,0.09l-1.08,0.04l-0.53,-0.24l-0.42,-0.25l-0.2,-0.31l-0.02,-0.03l-0.5,-0.81l-0.01,-0.02l-0.3,-0.43l-0.31,-0.43l-0.04,-0.05l-0.39,-0.41l-0.14,-0.09l-1.15,-0.45l-0.11,-0.03l-0.93,-0.09l-0.22,0.04l-0.48,0.25l-0.84,0.38l-0.04,0.02l-0.77,0.44l-0.73,0.32l-0.66,0.24l-0.69,-0.08l-0.81,-0.27l-0.17,-0.15l-0.1,-0.45l-0.01,-0.03l-0.3,-0.94l-0.04,-0.09l-0.31,-0.51l-0.49,-0.16l-0.02,0.01l-0.23,-0.3l-0.43,-0.16l-0.32,0.01l-1.93,0.93l-1.66,-0.12l-0.24,-0.02l-0.09,0.0l-1.79,0.29l-0.14,-0.0l-0.82,-1.42l-0.14,-0.41l-0.02,-0.06l-0.22,-0.43l-0.44,-1.25l-0.19,-0.22l-0.98,-0.52l-0.18,-0.05l-1.14,-0.04l-0.41,-0.13l-0.22,-0.01l-0.5,0.13l-1.21,0.19l-0.1,0.03l-1.59,0.69l-0.04,0.02l-0.81,0.46l-1.47,0.55l-1.54,0.01l-1.12,-0.51l-0.27,-0.02l-0.31,0.08l-0.06,0.08l-0.06,-0.05l-0.44,0.12l-0.03,0.01l-1.7,0.6l-0.11,0.06l-0.95,0.71l-1.49,0.56l-1.7,0.21l-1.38,0.16l-1.76,-0.01l-0.92,-0.32l-0.12,-0.02l-2.35,-0.06l-0.05,0.0l-1.68,0.19l-1.69,-0.3l-0.15,0.0l-1.1,0.22l-0.44,-0.6l-0.27,-0.16l-0.47,-0.06l-0.09,-0.0l-0.24,0.02l-0.37,-0.11l-0.03,-0.01l-0.17,-0.04l-0.21,0.01l-0.12,0.04l-0.1,-0.1l-0.3,-0.47l-0.01,-0.02l-0.21,-0.3l-0.12,-0.27l-0.09,-0.31l-0.0,-0.0l-0.36,-1.17l-0.01,-0.02l-0.31,-0.87l-0.18,-0.51l-0.02,-0.04l-0.43,-0.88l-0.31,-0.74l-0.0,-0.01l-0.42,-0.93l-0.42,-1.91l-0.05,-1.34l-0.14,-0.29l-0.8,-0.69l-0.03,-0.8l-0.15,-0.29l-0.99,-0.82l-0.02,-0.01l-0.75,-0.55l-0.08,-0.05l-1.23,-0.52l-0.64,-0.31l-0.43,-0.42l-0.31,-0.47l-0.01,-0.02l-1.02,-1.37l-0.07,-0.07l-0.47,-0.39l-0.54,-0.83l-0.45,-1.07l-0.06,-0.09l-0.1,-0.12l-0.51,-0.64l-0.46,-1.17l-0.3,-0.78l-0.34,-1.0l-0.33,-1.1l-0.24,-1.69l0.12,-0.72l-0.03,-0.23l-0.17,-0.4l-0.08,-0.93l-0.03,-0.12l-0.39,-0.92l-0.25,-0.94l-0.11,-0.19l-0.74,-0.68l-0.49,-0.53l-0.4,-1.13l-0.09,-0.15l-0.01,-0.01l-0.57,-0.61l-0.27,-0.75l-0.01,-0.01l-0.35,-0.86l-0.65,-1.66l-0.02,-0.04l-0.43,-0.84l-0.41,-0.89l-0.01,-0.02l-0.7,-1.32l-0.28,-0.99l-0.01,-0.04l-0.47,-1.16l-0.05,-0.08l-0.66,-0.92l-0.1,-0.1l-0.65,-0.44l-0.55,-0.81l-0.41,-1.17l-0.08,-0.24l-0.01,-0.01l-0.33,-0.84l-0.2,-1.25l-0.0,-0.02l-0.22,-1.01l-0.08,-0.36l-0.22,-1.4l-0.04,-0.12l-0.92,-1.77l0.24,-0.82l0.01,-0.14l-0.05,-0.68l-0.04,-0.59l0.17,-0.46l0.0,-0.01l0.27,-0.81l0.01,-0.03l0.25,-1.05l0.25,-0.54l0.07,-0.04l0.67,-0.8l0.64,-0.55l0.98,-0.39l0.24,-0.29l0.4,-1.83l0.59,-0.61l0.6,-0.44l1.21,-0.71l1.04,-0.55l0.07,-0.05l0.89,-0.77l0.1,-0.12l0.59,-1.16l0.95,-0.87l0.04,-0.04l0.67,-0.84l0.03,-0.04l0.45,-0.72l0.07,-0.11l0.0,-0.0l0.01,-0.01l0.06,-0.22l-0.01,-0.73l-0.01,-0.09l-0.19,-0.84l-0.1,-0.19l-0.37,-0.39l-0.0,-0.0l-0.56,-0.57l-0.29,-0.12l-0.52,0.01l-0.12,0.0l-0.24,0.08l-0.93,0.71l-0.83,0.52l-0.16,0.08l-0.78,0.4l-0.04,0.02l-0.6,0.4l-0.32,0.07l-1.12,0.03l-0.31,0.01l-0.17,-0.01l-0.52,-0.03l-0.64,-0.21l-0.02,-0.01l-0.96,-0.26l-0.1,-0.03l-0.49,-0.15l-0.85,-0.29l-0.05,-0.01l-0.4,-0.08l-0.42,-0.09l-0.68,-0.18l-0.12,-0.01l-0.21,0.01l-0.36,0.02l-0.06,0.01l-0.64,0.12l-0.22,-0.1l-0.79,-0.37l-0.6,-0.38l-0.06,-0.03l-0.61,-0.26l-0.22,-0.32l-0.05,-0.07l-0.03,-0.05l-0.05,-0.08l-0.29,-0.19l-0.03,-0.0l-0.28,-0.04l-0.41,-0.07l-0.28,-0.05l-0.54,-0.1l-0.11,-0.02l-0.16,-0.05l-1.16,-0.35l-0.0,-0.0l-0.38,-0.11l-0.92,-0.27l-1.06,-0.4l-0.13,-0.05l-0.61,-0.4l-0.14,-0.06l-0.59,-0.12l-0.42,-0.25l-0.45,-0.39l-0.01,-0.01l-0.35,-0.28l-0.67,-0.53l-0.05,-0.03l-0.78,-0.45l-0.62,-0.51l-0.22,-0.2l-0.2,-0.18l-0.33,-0.38l-0.28,-0.32l-0.31,-0.38l-0.26,-0.32l-0.75,-0.95l-0.03,-0.25l-0.04,-0.39l-0.01,-0.07l-0.32,-1.06l-0.02,-0.08l-0.23,-1.08l-0.14,-0.22l-1.08,-0.88l-0.08,-0.05l-0.44,-0.21l-0.27,-0.12l-0.64,-0.42l-0.06,-0.04l-0.76,-0.57l-0.09,-0.05l-0.85,-0.34l-0.76,-0.34l-0.22,-0.03l-0.48,0.07l-0.55,-0.11l-0.13,-0.01l-0.69,0.08l-0.18,0.02l-0.15,0.02l-0.28,0.03l-0.11,0.03l-0.45,0.19l-0.64,0.27l-0.04,0.02l-0.16,0.09l-0.29,0.16l-0.15,0.08l-0.05,0.03l-0.29,0.22l-0.05,0.04l-0.2,0.21l-0.86,0.45l-0.82,0.41l-0.02,0.01l-0.65,0.38l-0.1,0.08l-0.48,0.54l-0.03,0.04l-0.34,0.5l-0.05,0.12l-0.13,0.47l-0.01,0.08l-0.04,0.64l-0.42,0.74l-0.02,0.05l-0.57,1.44l-0.03,0.15l0.01,1.99l-0.03,1.13l-0.2,0.48l-0.3,0.74l-0.61,0.76l-1.07,0.84l-0.02,0.07l-0.24,0.18l-0.36,0.27l-1.03,0.75l-0.19,0.12l-0.39,0.24l-0.33,0.2l-0.27,0.16l-0.48,0.29l-0.2,0.12l-0.5,0.24l-1.33,0.65l-1.12,0.41l-1.05,0.35l-0.11,0.06l-0.18,0.14l-0.03,0.02l-0.77,0.58l-0.93,0.24l-0.05,0.02l-0.96,0.38l-0.02,0.01l-0.34,0.15l-0.62,0.28l-0.09,0.06l-0.7,0.59l-0.63,0.24l-0.03,0.01l-1.06,0.5l-0.08,0.05l-0.7,0.55l-0.07,0.06l-1.33,0.49l-0.09,0.05l-0.26,0.18l-0.4,0.28l-0.01,0.01l-0.71,0.52l-0.41,0.2l-0.43,0.22l-0.1,0.08l-0.57,0.57l-0.12,0.1l-0.73,0.61l-0.61,0.41l-0.08,0.06l-0.0,0.0l-0.8,0.53l-0.88,0.31l-0.23,-0.04l-0.01,-0.0l-0.42,0.2l-0.14,0.26l-0.1,0.18l-0.08,0.05l-0.32,0.22l-0.87,0.61l-1.21,0.61l-0.07,0.04l-0.69,0.55l-0.36,0.1l-0.7,0.19l-0.07,0.03l-0.85,0.42l-0.0,0.0l-1.12,0.56l-1.01,0.39l-0.11,0.06l-0.81,0.65l-0.03,0.03l-1.23,0.3l-0.18,0.1l-0.44,0.43l-0.04,0.02l-1.46,0.64l-0.14,0.03l-0.14,0.03l-0.58,0.09l-0.14,-0.15l-0.15,-0.17l-0.04,-0.1l-0.1,-0.23l-0.46,-0.23l-0.29,0.07l-0.04,0.01l-0.5,-0.47l-0.37,-0.65l-0.24,-0.19l-0.84,-0.24l-0.02,-0.01l-0.91,-0.21l-0.26,0.03l-0.66,0.32l-0.24,0.12l-0.31,0.15l-0.72,-0.09l-0.02,-0.0l-0.23,0.04l-0.49,0.25l-0.07,0.05l-0.99,0.83l-0.56,0.31l-0.34,0.19l-0.08,0.06l-0.44,0.43l-0.01,0.01l-0.18,0.19l-0.4,0.42l-0.84,0.48l-0.13,0.12l-0.51,0.75l-0.18,0.27l-0.27,0.21l-0.58,0.45l-0.09,0.03l-0.72,0.2l-0.09,0.04l-0.52,0.3l-0.18,0.23l-0.0,0.01l-0.11,0.35l-0.65,0.56l-0.71,0.37l-0.56,0.18l-0.63,0.2l-0.2,0.14l-0.34,0.45l-0.06,0.04l-1.13,0.86l-0.03,0.03l-0.96,0.92l-0.91,0.66l-0.03,0.02l-0.15,0.22l-0.06,0.25l-0.02,0.08l-0.76,0.42l-0.16,0.09l-0.21,0.35l0.0,0.13l0.0,0.42l-0.14,0.35l-0.45,0.22l-0.04,0.03l-0.02,0.02l-0.01,0.0l-0.29,0.14l-0.24,0.11l-0.02,-0.0l-0.3,-0.04l-0.45,0.32l-0.01,0.05l-0.18,-0.0l-0.77,-0.05l-0.11,0.01l-0.73,0.17l-0.23,0.05l-0.11,0.01l-0.78,0.05l-0.1,0.02l-0.39,0.13l-0.36,0.12l-0.02,0.01l-0.82,0.33l-0.13,0.05l-1.11,0.17l-0.54,-0.13l-0.52,-0.13l-0.02,-0.0l-0.28,-0.06l-0.21,0.01l-0.4,0.13l-0.69,0.02l-0.15,0.04l-0.89,0.4l-0.15,0.12l-0.77,0.98l-0.88,0.96l-0.24,0.25l0.3,-1.01l-0.03,-0.3l-0.45,-0.84l-0.18,-0.33l-0.05,-0.31l0.0,-0.09l0.0,-0.0l0.0,-0.09l0.06,-1.65l0.0,-0.01l0.01,-0.37l0.0,-0.36l-0.0,-0.01l-0.01,-0.55l-0.0,-0.02l-0.04,-0.62l-0.03,-0.51l-0.03,-0.13l-0.19,-0.43l-0.16,-0.18l-0.38,-0.23l-0.01,-0.01l-0.06,-0.03l-0.02,-0.06l0.07,-0.22l0.42,-0.36l0.11,-0.46l-0.31,-0.73l0.16,-0.53l0.15,-0.32l0.0,-0.0l0.3,-0.64l0.0,-0.34l-0.04,-0.08l-0.1,-0.25l-0.0,-0.01l-0.15,-0.33l-0.06,-0.43l0.07,-1.35l-0.01,-0.11l-0.15,-0.66l-0.07,-0.15l-0.22,-0.29l-0.51,-0.68l-0.32,-0.9l-0.01,-0.02l-0.0,-0.0l-0.01,-0.04l0.07,-0.22Z", "name": "Kwara"}, "2018": {"path": "M362.12,686.42l0.0,-0.0l0.12,-0.11l0.11,-0.38l-0.14,-0.63l-0.22,-1.36l-0.05,-0.14l-0.33,-0.57l-0.64,-1.11l-0.68,-1.42l-0.01,-0.01l-0.41,-0.78l0.27,-0.58l0.01,-0.03l0.42,-1.13l0.03,-0.09l0.02,-0.15l-0.03,-1.42l-0.1,-0.26l-0.66,-0.75l-0.23,-0.61l0.01,-0.84l0.49,-0.69l0.07,-0.28l-0.08,-0.73l1.11,-0.96l0.47,-0.21l0.53,-0.24l0.13,-0.1l0.69,-0.75l0.05,-0.07l0.61,-1.08l0.04,-0.09l0.32,-1.23l0.2,-0.49l0.27,-0.66l0.01,-0.29l-0.52,-1.39l-0.26,-1.53l-0.03,-1.59l0.01,-0.13l0.05,-1.13l0.24,-1.27l0.0,-0.01l0.19,-1.09l0.0,-0.0l0.23,-1.35l0.29,-1.16l0.29,-0.9l0.0,-0.01l0.16,-0.59l0.01,-0.08l0.04,-0.62l-0.02,-0.17l-0.3,-0.8l-0.06,-0.11l-0.49,-0.62l-0.33,-0.61l-0.09,-0.16l0.06,-0.7l0.42,-0.64l0.63,-0.29l1.67,-0.1l0.6,0.09l0.93,0.3l0.12,0.02l1.43,0.02l0.98,0.03l0.45,0.06l0.16,-0.01l0.61,-0.17l0.37,-0.04l0.21,-0.09l0.26,-0.22l0.07,-0.08l0.02,-0.02l0.6,-0.85l0.06,-0.12l0.37,-1.28l0.0,-0.0l0.48,-1.69l-0.29,-0.5l-0.6,-0.15l-0.2,0.0l-1.04,0.28l-0.76,0.04l-0.17,-0.24l0.14,-0.99l0.57,-0.99l0.19,-0.34l0.04,-0.12l0.26,-1.22l0.56,-0.7l0.07,-0.15l0.17,-0.62l0.0,-0.02l0.19,-0.88l0.01,-0.07l0.03,-0.83l-0.0,-0.06l-0.21,-1.7l-0.01,-0.05l-0.43,-1.63l0.02,-0.05l0.23,-0.72l0.87,-0.18l0.92,-0.03l0.77,0.09l1.83,0.36l0.01,0.0l1.0,0.16l1.1,0.52l0.74,0.77l0.56,0.85l0.27,1.54l0.03,0.09l0.42,0.94l0.11,0.15l0.97,0.8l0.75,0.76l0.05,0.04l0.77,0.55l0.03,0.02l0.81,0.46l0.06,0.03l1.0,0.36l0.06,0.02l1.32,0.27l0.62,0.33l0.87,0.67l0.66,0.55l0.94,0.93l0.3,0.36l-0.39,0.06l-0.29,0.2l-0.43,0.76l-0.05,0.15l-0.03,0.24l-0.04,0.37l-0.85,1.46l-0.04,0.31l0.2,0.71l0.02,0.05l0.6,1.47l0.23,0.22l0.81,0.31l0.28,1.22l0.06,0.13l0.63,0.93l0.3,0.18l1.14,0.09l0.18,-0.03l1.24,-0.5l1.04,-0.13l2.13,-0.11l0.72,0.27l0.43,0.2l0.96,0.44l1.38,1.12l0.13,0.07l1.43,0.45l0.69,0.54l0.32,0.9l0.09,1.35l-0.42,1.18l-0.02,0.12l-0.08,2.04l-0.21,0.84l-0.01,0.08l-0.07,1.65l-0.01,0.15l0.0,0.05l0.1,1.41l0.01,0.07l0.37,1.55l0.0,0.01l0.34,1.29l0.0,0.01l0.51,1.69l0.02,0.05l0.75,1.71l0.02,0.05l0.86,1.42l0.03,0.04l0.81,1.03l1.33,1.72l1.1,1.77l0.05,0.06l0.24,0.25l1.23,1.31l0.02,0.02l1.06,1.01l0.06,0.05l1.29,0.81l0.15,0.17l1.14,1.3l1.06,1.31l0.01,0.01l0.05,0.05l0.0,0.0l1.01,1.12l1.12,1.27l0.03,0.03l1.7,1.57l0.3,0.29l0.12,0.08l0.77,0.34l0.29,0.21l0.38,0.28l0.0,0.0l0.88,0.64l0.37,0.48l0.22,0.47l-0.01,0.01l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l-0.0,0.0l0.0,0.1l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.08,0.08l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.19l0.02,0.02l0.0,0.17l0.02,0.02l-0.0,0.13l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.08l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.02l-0.31,0.31l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.1l0.15,0.14l-0.0,0.0l-0.0,0.02l-0.02,0.02l-0.1,0.07l-0.0,0.03l0.0,0.0l-0.05,0.05l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.4,0.4l0.04,0.0l0.08,-0.08l0.02,0.0l0.04,-0.04l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l-0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.21,0.21l0.0,0.11l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.19l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.33l0.01,0.01l-0.01,0.01l0.0,0.13l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.08l-0.02,0.02l0.0,0.17l-0.02,0.02l0.0,0.18l-0.39,-0.39l-0.29,0.0l-0.4,0.4l0.0,0.15l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.0l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.21l0.02,0.02l-0.0,0.13l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.1,0.1l0.0,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.08,0.08l0.03,0.03l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.08,0.08l0.0,0.06l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.01,0.01l-0.06,-0.03l-0.0,0.01l0.05,0.03l-0.19,0.19l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.06,0.06l-0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.04,0.04l0.0,0.02l-0.12,0.12l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.04l-0.0,0.02l-0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.08l0.01,0.01l-0.01,0.01l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.1l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.08,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.15,0.15l-0.02,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.4l0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.17l0.02,0.02l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.04l-0.23,0.23l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.0,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.05l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.0,-0.0l-0.04,-0.04l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.0l-0.08,-0.08l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.0l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.21l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.23,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.23,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.33,0.0l-0.02,-0.02l-0.04,0.0l-0.4,0.4l0.0,0.06l0.4,0.4l0.44,0.0l0.02,-0.02l0.15,0.0l0.02,0.02l0.44,0.0l0.02,0.02l0.05,0.0l-0.14,0.14l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.04,0.04l0.0,0.04l-0.02,0.02l-0.0,0.1l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.36,0.4l0.04,0.0l0.0,-0.02l0.03,0.03l0.07,0.07l0.02,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.15,0.0l0.17,-0.17l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.14l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.1,0.0l-0.4,0.4l0.0,0.04l0.21,0.21l0.0,0.19l-0.12,0.12l0.0,0.06l0.4,0.4l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.33,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.02,0.02l0.02,0.0l0.23,0.23l0.0,0.0l0.06,0.06l0.02,0.0l0.08,0.08l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.01,0.0l-0.02,0.02l-0.0,0.0l-0.04,0.04l0.0,0.06l-0.04,0.04l0.0,0.02l-0.06,0.06l0.0,0.0l-0.06,0.06l-0.02,0.0l-0.15,0.15l-0.02,-0.02l-0.06,0.0l-0.4,0.4l0.0,0.06l0.06,0.06l0.0,0.04l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.23l0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.04,0.04l0.0,0.03l-0.02,0.02l0.0,0.0l-0.08,0.0l-0.02,0.02l-0.31,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.21,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.0,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.01,-0.0l-0.03,-0.0l-0.07,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.04,0.04l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.03,-0.03l-0.02,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.42,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.12,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.15,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.29,0.0l-0.02,-0.02l-0.25,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.15,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.15,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.02,-0.02l-0.25,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.35,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.05,0.05l-0.0,0.0l-0.01,-0.01l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.12,0.0l-0.02,0.02l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.08,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.31,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.15,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.0,0.0l-0.02,-0.02l-0.29,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.23,0.0l-0.02,-0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.23,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.15,0.0l-0.01,0.01l-0.01,-0.01l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.21,0.0l-0.02,0.02l-0.56,0.0l-0.02,0.02l-0.02,-0.02l-0.42,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.1,0.0l-0.02,0.02l-0.23,0.0l-0.02,0.02l-0.33,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.19,0.0l-0.02,0.02l-0.27,0.0l-0.04,0.04l-0.02,0.0l-0.02,-0.02l-0.15,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.21,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.31,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.25,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.27,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.1,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.13,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.15,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.06,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.17,-0.0l-0.02,0.02l-0.13,0.0l-0.02,-0.02l-0.02,0.0l-0.21,0.21l-0.03,0.0l-0.04,0.05l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.21,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.25,0.0l-0.02,0.02l-0.23,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.23,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.19,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.01,0.01l-0.2,-0.2l-0.15,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.04,0.04l-0.19,-0.19l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.38,0.38l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,-0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.19,-0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.03,0.0l-0.04,-0.04l-0.04,-0.0l-0.04,0.04l0.0,-0.01l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.21,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.19,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.19,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.15,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.04,0.04l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.27,0.0l-0.02,0.02l-0.0,0.0l-0.0,-0.0l-0.02,-0.01l-0.0,0.01l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.03,0.03l-0.0,-0.01l-0.04,0.0l-0.07,0.08l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.21,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.25,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.27,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.29,0.0l-0.02,0.02l-0.21,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.4,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.12,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.19,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.06,0.06l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.03,0.03l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.08,0.08l-0.04,0.0l-0.02,0.02l-0.29,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.21,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.15,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.25,0.0l-0.04,0.04l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.08,-0.08l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.0,-0.0l0.04,-0.04l0.04,0.0l0.08,-0.08l0.02,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.04,0.04l-0.0,0.0l-0.04,0.04l-0.06,0.0l-0.19,0.19l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.17,0.17l-0.27,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.08,-0.08l-0.31,0.0l-0.02,0.02l-0.4,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.08,0.08l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.25,0.25l-0.02,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.01,-0.01l0.24,0.0l0.23,-0.23l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.13,-0.13l0.04,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.02,0.0l0.1,-0.1l0.08,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.12,0.0l-0.11,0.1l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.13,0.13l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.23,0.23l-0.42,0.0l-0.04,0.04l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.02,-0.02l-0.21,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.1,0.1l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.31,0.31l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,-0.06l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.23,0.0l-0.04,0.04l-0.02,0.0l-0.06,0.06l-0.08,0.0l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.14,-0.14l0.01,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.02,0.0l0.08,-0.08l0.02,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.04,0.0l0.04,-0.04l0.02,0.02l0.02,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l0.1,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.0,0.0l0.15,-0.15l0.02,0.0l0.02,-0.02l0.08,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.29,0.29l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.08,0.08l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.31,0.31l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.13,0.13l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.01,0.01l-0.03,-0.03l-0.02,0.0l-0.06,-0.06l-0.25,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.21,0.21l-0.0,0.0l0.0,0.1l-0.02,0.02l-0.02,0.0l-0.13,0.13l-0.02,0.0l-0.02,0.02l-0.31,0.0l-0.01,0.01l-0.2,-0.2l-0.02,0.0l-0.4,0.4l0.0,0.06l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.02,0.02l0.1,0.0l0.02,-0.02l0.24,0.0l-0.29,0.29l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.21,0.0l0.02,0.02l0.19,0.0l0.02,0.02l0.19,0.0l0.08,0.08l-0.05,0.0l-0.04,0.04l-0.08,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.13,0.13l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.13,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.23,-0.23l-0.0,0.0l-0.06,-0.06l-0.12,0.0l-0.4,0.4l0.0,0.04l0.06,0.06l-0.0,0.0l0.0,0.0l-0.06,0.06l-0.33,0.0l-0.02,0.02l-0.1,0.0l-0.06,0.06l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.08l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.13l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.1,-0.1l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.27,-0.27l-0.02,0.0l-0.06,-0.06l-0.04,0.0l-0.1,-0.1l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.13,-0.13l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l0.21,-0.21l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,0.0l0.02,-0.02l0.19,0.0l0.4,0.4l0.17,0.0l0.02,-0.02l0.08,0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.04,0.0l0.4,-0.4l0.0,-0.08l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.15,0.0l-0.02,0.02l-0.06,0.0l-0.06,0.06l-0.06,0.0l-0.01,0.01l-0.29,-0.3l-0.02,-0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.27,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.38,0.38l-0.06,0.0l-0.02,-0.02l-0.25,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.0,-0.0l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.15,0.0l-0.03,0.03l-0.01,-0.01l-0.17,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.08,-0.08l-0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.04l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.15l0.02,-0.02l-0.0,-0.04l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.12,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.23,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.17,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.39,-0.39l0.0,0.01l0.4,0.4l0.0,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.04,0.0l0.02,0.02l0.06,0.0l0.06,0.06l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.04,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.0,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.08,-0.08l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.01l0.33,0.33l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.18,-0.18l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.04,-0.04l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.19,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.04,0.04l-0.0,0.0l-0.15,0.15l-0.21,0.0l-0.02,0.02l-0.0,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.17,0.17l-0.02,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.14,-0.14l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.1,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.19,0.19l-0.02,-0.02l-0.19,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.17,0.0l-0.19,0.19l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.08,0.0l0.27,-0.27l0.02,0.0l0.01,-0.01l0.01,0.01l0.06,0.0l0.02,-0.02l0.2,0.2l0.0,0.1l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.06,0.06l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.01,0.01l-0.3,-0.3l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.1,0.0l-0.02,0.02l-0.0,0.0l-0.25,0.25l-0.02,0.0l-0.06,0.06l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.21,0.0l-0.01,0.01l-0.03,-0.03l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.08,-0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.25,0.0l-0.02,-0.02l-0.04,0.0l-0.04,0.04l-0.12,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.21,-0.21l0.02,-0.01l-0.01,-0.02l-0.0,-0.0l-0.69,-1.33l0.0,-0.07l0.0,-0.0l0.02,-0.39l0.44,-0.28l0.15,-0.49l-0.42,-1.0l-0.06,-1.44l0.0,-1.36l-0.0,-0.05l-0.19,-1.51l0.06,-0.25l0.23,-0.94l0.01,-0.03l0.26,-1.58l0.46,-0.93l0.04,-0.15l0.09,-1.31l-0.02,-0.16l-0.52,-1.41l-0.23,-1.32l-0.04,-0.11l-0.52,-1.01l-0.05,-0.1l-0.56,-1.28l-0.06,-0.09l-1.14,-1.41l-0.02,-0.02ZM373.2,709.47l-0.02,-0.02l-0.01,0.0l0.05,-0.05l0.08,0.08l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.03l-0.04,-0.04l-0.04,0.0l-0.06,-0.06l-0.02,0.0ZM374.67,709.92l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.01,-0.01l0.01,-0.01l0.04,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.08,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.21,0.0l0.04,0.04l0.08,0.0l0.02,0.02l0.35,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.02,0.0l-0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.08,0.0l-0.01,0.01l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.17,0.0l-0.01,0.01l-0.01,-0.01l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.17,0.0l0.0,0.02l-0.02,-0.02l-0.04,-0.04l-0.03,-0.0l-0.02,-0.02l-0.05,0.0ZM376.7,709.67l-0.05,0.0l0.01,-0.01l0.02,0.0l0.13,-0.13l0.02,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.02,0.0l0.17,-0.17l0.02,0.0l0.02,-0.02l0.1,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.15,0.0l0.02,-0.02l0.23,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.19,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.22,0.0l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l-0.05,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.19,0.0l-0.02,0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.17,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02ZM422.99,702.44l0.0,-0.04l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l-0.0,-0.04l0.03,0.0l0.02,-0.02l0.02,0.02l0.17,0.0l0.02,-0.02l0.12,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l-0.0,-0.02l0.04,-0.04l0.0,-0.04l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l-0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.1l-0.02,-0.02l0.0,-0.0l-0.01,-0.01l0.01,-0.01l-0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.1,-0.1l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.01l0.07,0.07l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.04,0.04l0.0,0.04l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l-0.0,0.04l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.04l0.04,0.04l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.08l0.08,0.08l0.0,0.02l0.02,0.02l0.0,0.0l0.23,0.23l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.1l-0.17,0.17l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.1,0.1l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.15,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.15,0.0l-0.01,0.01l-0.01,-0.01l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.08l-0.06,-0.06l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02Z", "name": "Akwa Ibom"}, "2046": {"path": "M1.85,453.41l0.2,-0.83l0.27,-0.26l0.11,-0.22l0.14,-0.84l0.16,-0.77l0.37,-1.14l0.02,-0.09l0.09,-0.94l0.13,-1.33l0.0,-0.05l-0.0,-0.08l0.99,-3.94l0.16,-0.5l0.35,-0.36l0.11,-0.25l0.02,-0.28l-0.02,-0.16l-0.35,-1.0l0.05,-0.4l0.39,-0.9l0.03,-0.1l0.15,-0.9l-0.0,-0.15l-0.18,-0.78l0.14,-0.66l0.28,-0.57l0.52,-0.6l0.06,-0.09l0.31,-0.66l0.04,-0.13l0.2,-1.76l0.02,-0.14l0.0,-0.08l-0.06,-0.76l0.06,-0.37l0.08,-0.1l0.07,-0.1l-0.04,-0.53l-0.42,-0.41l-0.58,-0.56l-0.19,-0.31l-0.15,-0.24l-0.0,-0.0l-0.06,-0.1l-0.19,-0.31l-0.29,-0.47l-0.1,-0.15l-0.01,-0.02l-0.08,-0.09l-0.57,-0.49l-0.23,-0.41l-0.24,-1.12l-0.02,-0.07l-0.51,-1.21l-0.2,-0.47l-0.25,-0.61l-0.08,-0.55l-0.1,-0.69l0.04,-0.95l0.01,-0.13l0.01,-0.23l0.04,-0.92l0.0,-0.05l0.46,-0.5l0.31,-0.32l0.09,-0.16l0.4,-1.33l0.01,-0.17l-0.09,-0.63l-0.0,-0.0l-0.12,-0.75l-0.01,-0.05l-0.27,-0.94l0.36,-0.52l0.54,-0.02l0.12,-0.0l0.16,-0.04l0.66,-0.33l0.16,-0.14l0.43,-0.66l0.06,-0.14l0.06,-0.28l0.08,-0.4l0.11,-0.56l0.33,-0.73l0.56,-0.7l-0.02,-0.53l-0.36,-0.37l0.73,-0.79l0.1,-0.35l-0.06,-0.27l0.02,-0.26l0.05,-0.66l-0.14,-0.33l-0.49,-0.42l0.22,-0.13l0.09,-0.07l0.58,-0.59l0.01,-0.01l0.9,-0.98l0.02,-0.02l0.72,-0.92l0.73,-0.33l0.66,-0.02l0.11,-0.02l0.35,-0.12l0.16,0.03l0.51,0.13l0.62,0.15l0.16,0.01l1.23,-0.19l0.09,-0.02l0.18,-0.07l0.8,-0.32l0.35,-0.12l0.34,-0.11l0.73,-0.04l0.14,-0.01l0.07,-0.01l0.26,-0.06l0.67,-0.15l0.72,0.04l0.02,0.0l0.37,0.01l0.15,0.0l0.4,-0.32l0.0,-0.01l0.08,0.01l0.25,-0.05l0.07,-0.04l0.23,-0.11l0.31,-0.15l0.04,-0.02l0.03,-0.02l0.0,-0.0l0.0,-0.0l0.57,-0.27l0.2,-0.21l0.23,-0.57l0.03,-0.16l-0.0,-0.39l0.86,-0.48l0.19,-0.25l0.06,-0.25l0.03,-0.11l0.85,-0.61l0.04,-0.03l0.97,-0.93l1.11,-0.85l0.1,-0.08l0.08,-0.08l0.3,-0.4l0.51,-0.16l0.59,-0.19l0.06,-0.02l0.78,-0.4l0.08,-0.05l0.01,-0.01l0.0,-0.0l0.76,-0.66l0.12,-0.18l0.1,-0.32l0.34,-0.2l0.67,-0.19l0.17,-0.05l0.14,-0.07l0.64,-0.5l0.32,-0.25l0.09,-0.09l0.22,-0.32l0.46,-0.67l0.81,-0.46l0.09,-0.07l0.44,-0.47l0.17,-0.18l0.4,-0.39l0.29,-0.17l0.59,-0.33l0.06,-0.04l0.98,-0.82l0.34,-0.18l0.74,0.09l0.22,-0.04l0.42,-0.2l0.24,-0.12l0.54,-0.26l0.77,0.17l0.68,0.19l0.32,0.56l0.07,0.09l0.7,0.66l0.37,0.1l0.21,-0.05l0.03,0.08l0.07,0.11l0.19,0.22l0.28,0.32l0.36,0.13l0.8,-0.13l0.01,-0.0l0.15,-0.03l0.18,-0.04l0.08,-0.03l1.5,-0.66l0.1,-0.05l0.12,-0.08l0.41,-0.4l1.21,-0.3l0.16,-0.08l0.1,-0.08l0.76,-0.61l0.97,-0.38l0.03,-0.02l1.13,-0.57l0.82,-0.4l0.66,-0.18l0.43,-0.12l0.14,-0.07l0.72,-0.57l1.2,-0.6l0.05,-0.03l0.89,-0.62l0.32,-0.22l0.15,-0.11l0.12,-0.13l0.14,-0.26l0.01,-0.01l0.07,0.01l0.2,-0.02l1.03,-0.37l0.09,-0.04l0.84,-0.56l0.08,-0.06l0.63,-0.42l0.04,-0.03l0.01,-0.01l0.73,-0.61l0.13,-0.11l0.03,-0.02l0.53,-0.54l0.38,-0.19l0.44,-0.22l0.06,-0.04l0.73,-0.54l0.4,-0.27l0.22,-0.15l1.35,-0.5l0.11,-0.06l0.12,-0.1l0.67,-0.52l1.01,-0.48l0.68,-0.26l0.11,-0.07l0.71,-0.6l0.57,-0.26l0.33,-0.15l0.93,-0.37l0.98,-0.26l0.14,-0.07l0.84,-0.62l0.03,-0.02l0.13,-0.1l1.0,-0.33l0.01,-0.0l1.15,-0.42l0.04,-0.02l1.35,-0.66l0.52,-0.25l0.03,-0.02l0.22,-0.13l0.48,-0.29l0.0,-0.0l0.27,-0.16l0.33,-0.2l0.39,-0.24l0.2,-0.13l0.03,-0.02l1.05,-0.77l0.01,-0.0l0.36,-0.28l0.35,-0.26l0.02,-0.08l1.01,-0.8l0.07,-0.06l0.67,-0.84l0.06,-0.1l0.33,-0.79l0.23,-0.55l0.03,-0.14l0.03,-1.21l0.0,-0.01l-0.01,-1.92l0.53,-1.34l0.45,-0.79l0.05,-0.17l0.04,-0.69l0.1,-0.37l0.29,-0.43l0.42,-0.47l0.59,-0.35l0.81,-0.4l0.01,-0.0l0.92,-0.48l0.1,-0.08l0.22,-0.23l0.24,-0.18l0.12,-0.07l0.29,-0.16l0.14,-0.08l0.62,-0.26l0.4,-0.17l0.23,-0.02l0.15,-0.02l0.0,-0.0l0.18,-0.02l0.62,-0.07l0.56,0.11l0.14,0.0l0.43,-0.06l0.66,0.3l0.02,0.01l0.81,0.33l0.71,0.54l0.07,0.05l0.02,0.01l0.68,0.45l0.05,0.03l0.29,0.14l0.39,0.18l0.93,0.76l0.2,0.95l0.0,0.0l0.02,0.1l0.01,0.03l0.31,1.04l0.04,0.35l0.04,0.36l0.08,0.21l0.83,1.04l0.0,0.0l0.27,0.33l0.31,0.39l0.01,0.01l0.29,0.33l0.35,0.4l0.04,0.04l0.22,0.2l0.23,0.2l0.01,0.01l0.66,0.53l0.05,0.04l0.78,0.45l0.65,0.51l0.34,0.27l0.47,0.41l0.06,0.04l0.51,0.31l0.13,0.05l0.58,0.12l0.58,0.39l0.08,0.04l0.17,0.06l1.07,0.41l0.03,0.01l0.93,0.28l0.37,0.11l1.16,0.35l0.18,0.05l0.04,0.01l0.13,0.03l0.55,0.11l0.01,0.0l0.29,0.05l0.41,0.07l0.01,0.0l0.13,0.02l0.05,0.07l0.28,0.41l0.17,0.14l0.03,0.01l0.66,0.28l0.59,0.38l0.04,0.02l0.82,0.38l0.33,0.16l0.24,0.03l0.74,-0.14l0.34,-0.01l0.15,-0.01l0.63,0.17l0.02,0.01l0.43,0.09l0.37,0.08l0.84,0.29l0.01,0.0l0.49,0.15l0.11,0.03l0.01,0.0l0.96,0.26l0.68,0.22l0.1,0.02l0.57,0.04l0.19,0.01l0.04,0.0l0.33,-0.01l1.16,-0.03l0.08,-0.01l0.36,-0.08l0.0,-0.0l0.07,-0.02l0.13,-0.06l0.65,-0.43l0.76,-0.39l0.18,-0.09l0.03,-0.02l0.86,-0.54l0.03,-0.02l0.84,-0.64l0.34,-0.0l0.44,0.44l0.3,0.31l0.16,0.69l0.0,0.57l-0.01,0.02l-0.44,0.7l-0.64,0.8l-0.98,0.9l-0.09,0.11l-0.59,1.16l-0.8,0.69l-1.01,0.54l-0.01,0.01l-1.24,0.73l-0.03,0.02l-0.65,0.48l-0.05,0.05l-0.69,0.72l-0.1,0.19l-0.38,1.74l-0.85,0.34l-0.11,0.07l-0.72,0.61l-0.05,0.05l-0.69,0.82l0.0,0.0l-0.13,0.1l-0.32,0.69l-0.03,0.08l-0.26,1.08l-0.26,0.79l-0.2,0.53l-0.02,0.16l0.04,0.68l0.0,0.0l0.04,0.61l-0.26,0.9l0.03,0.29l0.96,1.86l0.21,1.35l0.0,0.03l0.08,0.37l0.22,1.0l0.2,1.28l0.02,0.09l0.35,0.87l0.08,0.23l0.43,1.22l0.05,0.09l0.63,0.92l0.11,0.11l0.66,0.44l0.59,0.82l0.44,1.09l0.29,1.01l0.03,0.08l0.72,1.34l0.41,0.89l0.01,0.01l0.43,0.82l0.64,1.65l0.0,0.01l0.35,0.85l0.3,0.82l0.08,0.14l0.59,0.63l0.4,1.13l0.08,0.14l0.56,0.6l0.02,0.02l0.67,0.61l0.23,0.85l0.02,0.05l0.38,0.89l0.08,0.93l0.03,0.13l0.15,0.35l-0.11,0.66l-0.0,0.12l0.25,1.78l0.01,0.06l0.35,1.14l0.0,0.01l0.35,1.02l0.0,0.01l0.3,0.79l0.0,0.0l0.48,1.23l0.06,0.1l0.55,0.69l0.06,0.08l0.45,1.05l0.03,0.06l0.59,0.91l0.08,0.09l0.48,0.4l0.98,1.33l0.33,0.5l0.05,0.07l0.51,0.5l0.1,0.07l0.7,0.34l0.02,0.01l1.19,0.51l0.71,0.52l0.84,0.7l0.03,0.8l0.14,0.29l0.8,0.68l0.04,1.2l0.01,0.07l0.44,1.99l0.03,0.08l0.43,0.96l0.31,0.75l0.01,0.02l0.43,0.88l0.18,0.49l0.31,0.86l0.36,1.16l0.1,0.33l0.02,0.05l0.15,0.33l0.04,0.07l0.23,0.33l0.31,0.5l0.06,0.07l0.31,0.3l0.41,0.09l0.24,-0.08l0.05,0.01l0.44,0.13l0.15,0.01l0.27,-0.03l0.25,0.03l0.46,0.62l0.2,0.83l0.08,1.19l0.02,0.08l0.22,0.75l0.08,0.81l-0.23,1.17l-0.07,0.16l-0.44,0.35l-0.17,0.14l-0.14,0.22l-0.09,0.4l-0.05,0.08l-0.51,-0.1l-0.12,0.08l-0.8,0.33l-0.89,0.32l-0.78,0.12l-0.13,0.05l-1.03,0.57l-0.06,0.04l-0.37,0.31l-0.05,0.05l-0.5,0.57l-0.04,-0.06l-0.63,-0.03l-0.51,0.58l-0.04,0.05l-0.27,0.41l-0.03,0.06l-0.18,0.43l-0.1,0.1l-0.39,0.24l-0.43,-0.12l-0.41,0.33l-0.6,0.44l-0.02,0.02l-0.63,0.53l-0.11,0.15l-0.05,0.11l-0.19,0.44l-0.0,0.01l-0.24,0.61l-0.22,0.38l-0.8,0.28l-0.03,0.01l-0.51,0.22l-0.38,0.16l-0.04,0.02l-0.5,0.28l-0.39,-0.34l-0.6,-1.32l-0.03,-0.05l-0.77,-1.2l-0.6,-1.14l-0.03,-0.05l-0.74,-1.01l-0.91,-1.36l-0.13,-0.12l-0.89,-0.54l-0.01,-0.0l-1.04,-0.59l-0.9,-0.71l-0.08,-0.05l-0.77,-0.36l-0.37,0.02l-0.61,0.35l-0.13,0.12l-0.58,0.84l-0.03,0.04l-0.35,0.67l-0.45,0.43l-0.02,0.02l-1.06,1.2l-0.03,0.04l-0.26,0.39l-0.28,0.26l-0.83,0.32l-0.25,0.29l-0.15,0.73l-0.01,0.09l0.01,0.37l0.01,0.1l0.09,0.31l0.04,0.51l-0.15,0.65l-0.28,0.61l-0.44,0.34l-0.89,0.16l-0.14,0.05l-1.0,0.62l-0.59,0.05l-1.37,-0.26l-1.74,-0.42l-1.45,-0.51l-0.01,-0.0l-0.39,-0.33l-0.42,-0.06l-0.73,0.34l-0.21,0.24l-0.4,1.18l-0.02,0.15l0.05,1.09l-0.06,1.22l-0.02,0.31l-0.0,0.02l0.02,1.22l0.0,0.04l0.12,0.94l-0.09,1.31l-0.11,0.5l-0.36,1.69l-0.01,0.03l-0.19,1.57l-0.41,0.94l-0.13,0.28l-0.35,0.76l-0.15,0.11l-0.04,0.04l-1.16,1.16l-0.11,0.35l0.17,1.06l0.01,0.05l0.33,1.14l0.11,0.18l0.75,0.71l0.02,0.02l0.97,0.82l0.03,0.02l0.09,0.06l0.54,0.38l0.02,0.01l1.35,0.82l0.64,0.8l0.77,1.13l0.43,0.66l0.45,1.3l0.06,0.11l0.44,0.59l0.31,0.42l0.53,0.83l0.14,0.13l0.8,0.45l-0.15,0.94l-0.0,0.03l-0.09,1.02l-0.04,0.45l-0.03,0.19l-0.23,1.42l-0.0,0.02l-0.15,1.26l-0.41,1.29l-0.4,1.15l-0.02,0.07l-0.25,1.51l-0.2,0.94l-0.01,0.06l-0.05,0.78l-0.0,0.02l-0.03,1.7l-0.11,0.35l-0.26,0.86l-0.01,0.07l-0.16,1.44l-0.0,0.08l0.1,1.13l-0.3,1.5l-0.51,1.31l-0.01,0.01l-0.05,0.15l-0.47,1.37l-0.01,0.03l-0.48,1.94l-0.01,0.04l-0.21,1.51l-0.37,1.59l-0.01,0.03l-0.35,2.17l-0.52,0.19l-0.68,0.09l-0.01,0.0l-2.05,0.32l-0.8,-0.13l-0.14,0.0l-0.58,0.11l-0.67,0.13l-0.01,0.0l-1.41,0.29l-0.15,0.07l-1.05,0.76l-0.07,0.06l-0.72,0.82l-0.8,0.35l-0.91,0.18l-0.15,0.06l-0.7,0.49l-1.04,0.34l-0.48,-0.15l-0.16,-0.02l-1.22,0.13l-0.56,-0.1l-0.07,-0.01l-1.18,-0.0l-0.13,0.02l-1.14,0.37l-0.1,-0.06l-0.1,-0.04l-0.22,-0.06l-0.46,0.23l-0.05,0.11l-1.08,0.12l-2.03,-0.02l-0.01,0.0l-0.29,0.01l-0.94,0.02l-0.04,0.0l-1.34,0.18l-1.16,-0.12l-0.14,0.01l-0.61,0.15l-0.66,0.06l-0.1,-0.08l0.3,-1.04l0.38,-0.44l0.16,-0.19l0.27,-0.23l0.55,-0.47l0.03,-0.02l0.9,-0.91l0.85,-0.85l0.78,-0.48l0.12,-0.12l0.74,-1.13l0.06,-0.3l-0.22,-1.14l-0.1,-0.83l-0.04,-0.32l-0.14,-1.17l-0.01,-0.07l-0.62,-2.1l-0.04,-0.09l-0.64,-1.08l0.09,-1.02l0.0,-0.03l0.02,-1.55l-0.05,-0.21l-0.27,-0.47l-0.5,-0.87l-0.29,-0.2l-0.95,-0.13l-0.64,-0.28l-0.49,-0.38l-0.08,-0.05l-1.22,-0.56l-0.37,-0.63l0.1,-0.68l0.0,-0.04l0.05,-1.04l0.0,-0.03l-0.02,-1.15l-0.0,-0.02l-0.07,-1.15l-0.01,-0.05l-0.3,-1.58l-0.17,-1.13l-0.03,-0.1l-0.42,-0.98l-0.03,-0.06l-0.49,-0.76l-0.04,-0.05l-0.51,-0.56l-0.2,-0.12l-1.09,-0.26l-0.09,-0.01l-1.33,-0.01l-1.29,-0.14l-0.1,0.0l-1.04,0.15l-0.88,-0.02l-0.04,0.0l-0.7,0.06l-1.01,-0.05l-0.1,0.01l-1.89,0.38l-0.04,0.01l-1.1,0.35l-0.23,0.18l-0.31,0.54l-0.43,0.31l-0.46,0.33l-1.04,0.26l-0.77,-0.27l-0.83,-0.9l-0.55,-1.43l-0.44,-1.6l-0.02,-0.06l-0.53,-1.21l-0.02,-0.05l-0.56,-0.91l-0.18,-0.16l-0.93,-0.42l-0.11,-0.03l-0.6,-0.08l-0.08,-0.0l-0.78,0.06l-0.01,0.0l-0.83,0.09l-0.19,0.07l-0.66,0.48l-0.06,0.05l-0.42,0.44l-0.54,0.54l-0.33,0.33l-0.11,0.18l-0.23,0.89l-0.33,0.84l-0.0,0.0l-0.5,1.28l-0.02,0.08l-0.17,0.94l-0.0,0.03l-0.11,1.0l-0.75,0.63l-0.11,0.14l-0.54,1.16l-0.01,0.03l-0.3,0.85l-0.56,0.68l-0.04,0.05l-0.41,0.72l-0.45,0.39l-0.77,0.14l-0.06,0.02l-1.1,0.39l-1.08,-0.3l-0.19,-0.01l-0.99,0.21l-1.37,-0.17l-0.03,-0.0l-1.12,-0.05l-1.18,-0.59l-0.01,-0.0l-0.9,-0.42l-0.63,-0.29l-0.49,-0.42l-0.0,-0.0l-0.1,-0.09l-0.06,-0.04l-0.51,-0.29l-0.55,-0.4l-0.01,-0.0l-0.46,-0.32l-0.01,-0.01l-0.62,-0.4l-0.71,-0.77l-0.2,-0.38l-0.09,-0.18l-0.06,-0.09l-0.07,-0.07l-0.36,-0.47l-0.01,-0.01l-1.99,-2.49l-0.06,-0.8l-0.14,-0.28l-0.83,-0.7l-0.07,-0.57l-0.05,-0.46l-0.04,-0.14l-0.76,-1.44l-0.32,-1.0l-0.09,-0.15l-1.43,-1.52l-0.08,-0.06l-0.9,-0.57l-1.26,-0.85l-0.29,-0.54l-0.11,-0.13l-1.23,-0.96l-0.23,-0.45l-0.04,-0.06l-0.62,-0.82l-0.37,-1.3l0.01,-0.86l-0.0,-0.03l-0.07,-1.17l-0.01,-0.05l-0.14,-0.73l0.27,-0.3l0.22,0.12l0.6,-0.33l0.05,-1.1l0.41,-0.52l0.08,-0.19l0.08,-0.52l0.2,-0.81l0.24,-0.9l0.59,-1.12l0.04,-0.12l0.17,-1.09l0.23,-0.81l0.02,-0.1l0.02,-1.12l0.11,-1.24l0.04,-0.41l0.0,-0.02l0.03,-0.96l-0.0,-0.05l-0.13,-1.34l-0.07,-0.18l-0.52,-0.77l-0.06,-0.07l-0.51,-0.48l-0.1,-0.07l-0.55,-0.27l-0.18,-0.04l-1.19,-0.0l-0.01,0.0l-0.47,0.01l-0.27,0.11l-0.56,0.55l-0.1,0.16l-0.24,0.72l-0.42,0.72l-0.05,0.15l-0.12,0.83l-0.0,0.03l-0.07,1.32l-0.27,1.74l-0.33,1.67l-0.22,0.76l-0.52,-0.08l-0.64,-0.8l-0.78,-1.61l-0.35,-1.3l-0.32,-1.49l-0.22,-2.04l0.1,-2.02l0.0,-0.02l-0.0,-1.86l-0.0,-0.01l-0.06,-1.86l-0.01,-0.1l-0.49,-1.75l-0.04,-0.09l-0.72,-1.25l-0.04,-0.06l-0.78,-0.92l-0.14,-0.11l-1.19,-0.52l-1.08,-0.6l-0.18,-0.05l-2.33,-0.06l-0.05,0.0l-0.55,0.06l-0.03,0.0l-1.34,0.26l-0.15,0.06l-0.79,0.54l-0.06,0.05l-0.42,0.43l-1.39,0.84l-0.02,0.01l-1.24,0.87l-0.01,0.01l-1.02,0.77l-0.06,0.06l-0.56,0.64l-0.32,0.19Z", "name": "Oyo"}, "2047": {"path": "M449.35,355.82l0.07,-0.41l0.27,-0.81l0.2,-0.5l0.47,-0.8l0.0,-0.0l0.23,-0.41l0.11,-0.16l0.04,-0.07l0.58,-1.38l0.03,-0.09l0.24,-1.55l0.0,-0.09l-0.12,-1.44l-0.01,-0.06l-0.16,-0.68l-0.11,-0.46l-0.01,-0.05l-0.45,-1.23l-0.03,-0.06l-0.35,-0.6l-0.41,-0.71l-0.11,-0.12l-0.77,-0.56l-0.01,-0.0l-1.26,-0.88l-0.69,-0.75l-1.05,-1.18l-0.61,-0.89l-0.02,-0.03l-0.66,-0.8l-0.35,-0.76l-0.06,-0.1l-0.77,-0.89l-0.41,-0.76l-0.11,-0.2l-0.02,-0.04l-0.85,-1.24l-0.8,-1.42l-0.01,-0.01l-0.54,-0.88l-0.09,-1.07l-0.01,-0.09l1.17,-1.59l0.08,-0.28l-0.29,-2.9l-0.0,-0.01l-0.18,-1.35l0.19,-1.22l0.88,-0.68l1.11,-0.76l0.16,-0.21l0.44,-1.38l0.01,-0.2l-0.24,-1.17l0.24,-0.85l0.74,-0.51l0.04,-0.03l0.83,-0.74l0.62,-0.55l0.11,-0.15l0.51,-1.3l0.02,-0.24l-0.35,-1.39l-0.27,-1.1l0.09,-1.46l0.32,-1.35l0.01,-0.07l0.06,-1.46l0.14,-2.0l0.11,-1.36l0.0,-0.01l0.1,-1.69l-0.0,-0.06l-0.17,-1.95l-0.03,-0.36l0.34,-1.12l1.38,-0.88l0.07,-0.06l1.39,-1.43l0.11,-0.28l-0.0,-1.43l-0.02,-0.12l-0.31,-1.01l-0.0,-0.01l-0.61,-1.82l-0.03,-0.06l-0.93,-1.72l-0.67,-1.59l0.05,-1.43l0.21,-1.69l0.64,-1.78l0.0,-0.0l0.69,-1.98l1.16,-2.07l2.18,-1.6l2.59,-0.87l0.18,-0.12l1.6,-1.89l0.07,-0.11l0.67,-1.74l0.03,-0.11l0.15,-1.8l0.0,-0.01l0.09,-1.53l0.3,-0.24l0.4,-0.31l1.25,-0.19l1.96,-0.02l1.8,0.11l1.86,0.43l1.33,0.58l0.34,0.38l0.88,1.4l1.0,1.67l0.8,1.41l0.36,1.07l0.33,1.47l0.02,1.21l0.0,0.03l0.19,1.87l-0.15,1.21l-0.0,0.09l0.16,1.69l0.01,0.06l0.04,0.18l-0.08,8.97l-0.03,2.81l0.55,0.37l0.65,-0.27l0.42,-0.12l1.45,-0.41l3.44,-0.44l0.04,-0.01l2.86,-0.64l2.53,-0.54l1.73,-0.2l1.12,0.22l1.02,0.82l0.98,1.34l0.82,1.91l0.3,1.71l-0.09,2.84l0.0,0.03l0.07,1.8l0.0,0.04l0.32,2.44l-0.14,0.69l-0.12,0.6l-0.33,0.57l-0.32,0.57l-0.94,1.4l-0.03,0.05l-0.88,1.85l-0.01,0.03l-0.17,0.43l-0.2,0.51l-0.02,0.09l-0.12,0.86l-0.0,0.06l0.01,1.19l0.07,0.23l0.73,1.04l0.2,0.15l1.59,0.52l1.84,0.64l1.22,0.52l0.89,0.81l0.63,0.66l0.37,0.63l0.37,1.02l0.0,0.01l0.63,1.63l0.0,0.01l0.57,1.35l0.01,0.01l0.42,0.91l0.1,0.13l0.53,0.48l0.39,0.35l0.01,0.01l0.96,0.79l0.12,0.07l1.84,0.64l0.11,0.02l1.21,0.06l2.26,0.15l0.01,0.0l0.09,0.0l2.16,0.11l0.17,0.08l1.5,0.67l0.13,0.03l1.13,0.11l3.7,0.9l0.13,0.01l2.05,-0.17l3.56,-0.11l0.03,-0.0l3.47,-0.37l1.29,-0.06l1.72,0.01l0.14,-0.03l1.85,-0.69l2.85,-0.84l0.59,-0.17l0.24,-0.2l1.3,-2.54l0.01,-0.03l0.78,-1.86l1.28,-1.71l1.48,-0.33l0.06,-0.02l0.57,-0.23l1.63,-0.65l1.85,-0.32l0.32,-0.28l0.62,-2.01l0.01,-0.18l-0.33,-2.11l-0.05,-0.14l-1.25,-2.08l-0.03,-0.04l-1.4,-1.75l-0.04,-0.04l-1.02,-0.94l0.28,-1.36l2.01,-1.31l1.29,-0.64l0.56,0.32l0.52,0.29l0.74,0.41l0.01,0.01l3.27,1.7l0.39,0.2l0.01,0.0l3.54,1.76l0.1,0.03l3.05,0.61l3.04,1.62l0.03,0.01l2.95,1.29l2.62,1.49l2.49,1.53l0.04,0.02l2.15,0.97l2.81,1.28l0.04,0.01l2.54,0.87l2.47,0.98l3.36,1.62l2.62,1.69l2.39,1.6l0.01,0.0l2.45,1.59l0.02,0.01l3.16,1.74l2.09,1.25l0.0,0.0l2.26,1.34l0.2,-0.03l0.36,0.62l0.84,1.67l0.48,2.05l0.19,1.96l0.06,0.59l-0.16,3.06l-0.44,1.79l-0.01,0.16l0.82,4.97l0.1,2.21l0.06,0.2l1.67,2.63l1.07,1.95l0.26,2.36l0.02,0.09l0.69,2.0l0.28,2.68l-0.64,1.52l-0.03,0.21l0.27,2.0l0.1,0.73l0.4,0.35l0.11,-0.0l-0.01,0.62l0.0,0.05l0.38,3.32l-0.1,2.2l-2.05,3.55l-4.45,2.28l-5.34,2.72l-4.73,2.02l-2.21,-0.13l-0.12,0.01l-2.38,0.59l-4.7,1.03l-0.07,0.02l-4.36,0.91l-0.12,0.05l-3.02,1.75l-0.14,0.14l-0.96,1.61l-0.02,0.04l-1.5,3.41l-3.16,3.46l-0.03,0.03l-2.49,3.36l-1.35,0.69l-2.88,1.48l-0.01,0.0l-4.29,2.34l-0.07,0.05l-3.0,2.64l-0.02,0.02l-4.24,4.25l-0.02,0.02l-2.0,2.34l-2.83,1.39l-4.24,0.98l-1.04,0.23l-3.02,0.34l-0.02,0.0l-1.9,0.31l-4.36,-0.25l-1.69,-3.1l-0.1,-0.12l-3.05,-2.5l-0.12,-0.07l-5.96,-2.19l-3.6,-1.7l-0.0,-0.0l-2.94,-1.35l-0.28,-0.02l-4.31,1.25l-3.53,0.89l-0.02,0.01l-1.71,0.53l-2.2,0.69l-5.47,-0.05l-2.96,-0.04l-0.08,0.01l-1.31,0.25l-4.29,-1.53l-3.36,-1.94l-0.24,-0.25l-0.22,-0.02l-0.0,-0.0l-0.16,-0.08l-0.68,-0.33l-0.01,-0.01l-0.72,-0.31l-0.0,-0.0l-0.8,-0.34l-0.49,-0.45l-0.82,-1.29l-0.24,-0.51l0.11,-1.14l0.0,-0.02l0.05,-1.17l0.12,-0.42l0.01,-0.04l0.17,-1.04l0.09,-0.5l-0.0,-0.16l-0.14,-0.64l-0.01,-0.52l-0.0,-0.02l-0.06,-0.84l-0.01,-0.05l-0.11,-0.56l-0.01,-0.03l-0.28,-0.94l-0.1,-0.17l-0.48,-0.48l-0.08,-0.06l-0.55,-0.33l-0.17,-0.19l-0.45,-0.73l-0.01,-0.02l-0.33,-0.47l-0.36,-0.55l-0.2,-0.76l-0.03,-0.08l-0.43,-0.88l-0.08,-0.22l0.18,-0.55l-0.18,-0.34l0.14,-0.47l0.01,-0.07l0.08,-0.64l0.11,-0.52l0.25,-0.47l0.24,-0.11l0.46,-0.14l0.16,-0.1l0.33,-0.33l0.01,-0.01l0.33,-0.36l0.1,-0.22l0.02,-0.19l0.37,-0.36l0.07,-0.09l0.27,-0.47l0.05,-0.17l0.01,-0.21l0.23,-0.34l0.04,-0.07l0.16,-0.41l0.21,-0.5l0.33,-0.42l0.46,-0.38l0.0,-0.0l0.38,-0.32l0.31,-0.24l0.47,-0.23l0.48,-0.12l0.56,0.07l0.21,-0.03l0.28,-0.13l0.01,0.01l0.11,-0.02l0.14,-0.06l0.17,-0.12l1.09,-0.74l0.11,-0.11l0.47,-0.71l0.76,-0.79l0.07,-0.11l0.46,-0.98l0.59,-0.49l0.06,-0.06l0.95,-1.22l0.02,-0.03l0.71,-1.13l0.02,-0.03l0.46,-0.92l0.04,-0.12l0.17,-1.04l0.69,-1.33l0.04,-0.16l0.06,-1.06l-0.06,-0.24l-0.65,-1.03l-0.15,-0.14l-0.58,-0.32l-0.02,-0.07l-0.18,-0.24l-0.03,-0.04l-0.04,-0.04l-0.84,-0.87l-0.1,-0.07l-1.26,-0.69l-0.27,-0.04l-1.12,0.24l-0.1,0.03l-0.91,0.46l-0.02,0.01l-0.49,0.29l-0.28,0.1l-0.26,0.09l-0.08,0.04l-0.22,0.14l-0.11,0.2l-1.0,-0.03l-0.95,-0.09l-0.08,0.0l-1.32,0.14l-0.78,-0.0l-0.81,-0.05l-1.25,-0.29l-0.03,-0.01l-0.43,-0.06l-0.51,-0.08l-0.02,-0.0l-1.58,-0.17l-0.04,-0.0l-1.68,-0.02l-0.83,-0.46l-0.13,-0.04l-0.41,-0.07l-1.09,-0.53l-0.54,-0.83l-0.8,-1.35l-0.49,-0.91l-0.4,-0.86l-0.25,-1.11l0.16,-0.91l0.0,-0.11l-0.11,-1.2l-0.0,-0.03l-0.22,-1.28l-0.03,-0.1l-0.33,-0.72l-0.16,-0.18l-0.74,-0.44l-0.06,-0.03l-0.89,-0.35l-0.04,-0.01l-0.89,-0.25l-0.05,-0.01l-1.14,-0.16l-0.13,0.0l-0.87,0.16l-0.72,-0.12l-0.58,-0.32l-0.92,-0.86l-0.26,-0.51Z", "name": "Plateau"}, "2044": {"path": "M135.63,554.38l-0.01,-0.05l-0.56,0.15l-0.41,0.01l-0.5,-0.18l-0.11,-0.02l-0.9,-0.05l-0.99,-0.07l-0.77,-0.18l-1.11,-0.31l-0.1,-0.01l-0.47,-0.01l-0.77,-0.13l-1.22,-0.97l-0.01,-0.01l-0.61,-0.44l-0.38,-0.72l-0.09,-0.57l-0.05,-0.3l0.23,-0.74l0.02,-0.13l-0.05,-1.35l-0.0,-0.02l-0.08,-0.83l0.24,-0.52l0.0,-0.0l0.4,-0.87l1.01,-1.57l0.01,-0.01l0.5,-0.85l0.95,-1.12l0.06,-0.09l0.36,-0.77l0.82,-0.77l1.12,-0.84l0.04,-0.04l1.05,-1.06l1.26,-1.21l0.98,-0.58l1.41,-0.54l0.12,-0.07l1.08,-0.95l0.88,-0.56l0.1,-0.08l0.83,-1.01l0.03,-0.04l0.42,-0.66l0.08,-0.13l0.06,-0.15l0.23,-1.39l0.55,-1.72l0.02,-0.08l0.17,-1.73l0.0,-0.06l-0.03,-0.47l0.03,-0.03l0.09,-0.18l0.21,-0.91l0.29,-0.64l0.03,-0.19l-0.11,-1.61l0.14,-0.58l0.04,-0.01l0.72,-0.61l0.58,-0.09l0.12,-0.04l0.92,-0.49l0.03,-0.02l0.03,-0.02l0.67,-0.44l0.11,-0.1l0.57,-0.79l0.03,-0.06l0.57,-1.17l0.03,-0.09l0.11,-0.54l0.0,-0.01l0.15,-0.81l0.38,-1.18l0.76,-1.38l0.83,-0.84l1.45,-1.32l0.96,-0.69l0.64,-0.36l0.2,-0.3l0.0,-0.03l0.05,-0.05l0.85,-0.45l0.15,-0.02l0.98,-0.16l1.45,0.17l0.94,0.37l0.07,0.3l0.21,0.27l0.5,0.25l0.09,0.03l1.14,0.26l1.39,1.21l0.0,0.0l1.06,0.9l0.07,0.05l1.0,0.52l0.13,0.04l1.26,0.16l0.1,-0.0l0.94,-0.12l0.24,-0.13l0.51,-0.56l0.1,-0.11l0.1,-0.2l0.15,-0.87l0.0,-0.13l-0.14,-0.84l-0.13,-1.07l0.11,-0.71l0.37,-1.77l0.0,-0.15l-0.2,-1.22l-0.1,-0.64l-0.15,-1.11l-0.1,-1.75l0.39,-1.16l0.27,-0.56l0.04,-0.19l-0.01,-0.33l0.05,-1.3l0.11,-0.5l0.04,-0.1l0.23,-0.52l0.02,-0.07l0.69,-3.02l0.82,-0.56l0.46,-0.1l0.05,-0.01l2.08,-0.71l0.53,-0.14l1.59,-0.43l1.6,-0.18l0.13,-0.04l0.68,-0.34l0.22,-0.39l-0.16,-1.79l-0.04,-0.15l-0.04,-0.09l-0.29,-0.57l0.19,-0.04l0.06,-0.02l1.25,-0.45l0.02,-0.01l1.86,-0.8l1.55,-0.33l2.3,0.23l0.09,-0.0l0.93,-0.12l0.61,-0.08l1.69,0.28l0.07,0.01l1.4,-0.01l1.08,0.16l0.18,0.03l0.05,0.0l0.99,0.02l0.02,-0.0l1.13,-0.03l2.03,0.05l0.03,-0.0l1.37,-0.06l0.05,-0.0l1.33,-0.22l1.03,-0.05l0.01,-0.0l0.87,-0.07l0.15,-0.04l0.05,-0.03l0.23,0.06l0.79,0.38l0.08,0.03l0.9,0.21l0.19,0.27l0.06,0.27l0.09,0.18l0.77,0.86l0.43,0.82l-0.09,0.47l0.02,0.23l0.4,0.96l0.03,0.06l0.52,0.81l0.37,1.3l-0.17,0.95l0.03,0.24l0.59,1.26l0.0,0.0l0.56,1.18l0.01,0.31l0.02,0.12l0.05,0.14l0.07,0.22l0.3,0.26l1.24,0.27l1.48,0.44l0.29,-0.02l1.9,-0.92l0.05,-0.03l0.98,-0.67l0.04,-0.03l0.71,-0.34l0.06,-0.04l1.87,-1.34l0.02,-0.01l0.88,-0.71l0.26,-0.21l0.07,-0.07l0.69,-0.89l0.0,-0.0l1.24,-1.61l0.03,-0.05l0.86,-1.54l0.88,-1.31l0.03,-0.06l0.77,-1.71l0.0,-0.01l0.72,-1.69l0.0,-0.0l0.58,-1.36l0.02,-0.05l0.39,-1.47l0.01,-0.05l0.04,-0.28l0.08,-0.56l0.19,-1.26l0.17,-1.0l0.09,-0.5l0.17,-0.59l0.48,-1.32l0.02,-0.09l0.05,-0.43l0.14,-1.16l0.22,-1.12l0.32,-0.74l0.0,-0.01l0.41,-1.0l0.54,-0.69l0.77,-0.64l0.04,-0.04l0.49,-0.53l0.0,-0.01l0.83,-0.92l0.0,-0.0l0.28,-0.32l0.43,-0.5l0.99,-0.38l0.08,-0.04l0.65,-0.42l0.07,-0.05l0.91,-0.92l0.09,-0.13l0.36,-0.87l0.37,-0.82l0.01,-0.03l0.22,-0.61l0.58,-0.19l0.06,-0.03l0.36,-0.19l0.19,0.12l0.68,-0.09l0.33,0.19l0.03,0.01l0.62,0.29l0.21,0.39l0.05,0.08l0.36,0.41l0.42,0.12l0.82,-0.26l0.08,-0.03l0.17,-0.1l0.13,-0.11l0.42,-0.6l0.06,-0.13l0.16,-0.62l0.53,-0.52l0.05,-0.06l0.5,-0.72l0.03,-0.05l0.13,0.02l0.13,-0.0l0.75,-0.14l0.02,-0.01l0.64,-0.16l0.02,-0.01l0.5,-0.16l0.59,-0.12l0.62,-0.07l0.65,-0.06l0.13,-0.03l0.58,-0.26l0.63,-0.1l0.85,-0.02l0.8,0.08l0.74,0.15l0.08,0.05l-0.11,0.2l-0.04,0.14l-0.06,0.47l-0.13,0.61l-0.01,0.06l-0.07,1.14l-0.22,0.5l-0.03,0.15l-0.03,0.82l-0.03,0.78l0.08,0.26l0.84,1.1l0.26,0.41l0.13,0.21l0.06,0.07l0.74,0.72l0.41,0.72l0.08,0.1l0.87,0.8l0.04,0.03l0.99,0.69l0.0,0.0l0.52,0.36l0.73,0.7l0.0,0.0l0.9,0.87l0.72,0.69l0.0,0.0l0.59,0.56l0.17,0.17l-0.05,0.2l0.33,0.63l-0.03,0.04l-0.0,0.01l-0.3,0.51l-0.33,0.5l-0.39,0.3l-0.01,0.01l-0.46,0.37l-0.12,0.18l-0.24,0.68l-0.28,0.44l-0.28,0.34l-0.05,0.08l-0.11,0.23l-0.14,0.2l-0.06,0.09l-0.19,0.16l-0.16,0.11l-0.31,0.1l-0.17,0.1l-0.13,0.14l-0.18,0.01l-0.52,-0.03l-0.04,-0.0l-0.45,0.02l-0.18,-0.09l-0.09,-0.03l-0.16,-0.04l-0.32,0.06l-0.24,0.17l-0.14,0.18l-0.17,0.41l-0.35,0.35l-0.51,0.51l-0.05,0.06l-0.35,0.52l-0.06,0.14l-0.17,0.73l-0.01,0.07l-0.05,0.96l0.03,0.18l0.35,0.79l0.02,0.04l0.13,0.23l0.26,0.19l0.15,0.03l0.29,0.31l0.18,0.11l0.26,0.07l0.07,0.01l0.4,0.04l0.03,0.0l0.3,0.01l0.3,0.05l0.13,0.12l-0.04,0.44l-0.24,0.57l-0.28,0.25l-0.11,0.16l-0.31,0.85l-0.02,0.12l-0.03,0.96l0.01,0.1l0.14,0.66l0.03,0.1l0.39,0.76l0.26,0.76l0.1,0.71l0.18,0.28l0.16,0.11l-0.28,0.38l-0.07,0.15l-0.18,0.79l-0.26,0.93l-0.01,0.03l-0.14,0.72l-0.18,0.44l-0.29,0.42l-0.6,0.19l-0.13,0.07l-0.14,0.11l-0.5,0.23l-0.1,0.06l-0.36,0.31l-0.25,0.11l-0.43,0.16l-0.15,0.11l-0.46,0.51l-0.46,0.29l-0.08,0.07l-0.33,0.36l-0.02,0.03l-0.12,0.16l-0.09,0.12l-0.0,0.0l-0.29,0.38l-0.27,0.32l-0.06,0.1l-0.27,0.6l-0.15,0.21l-0.06,0.13l-0.11,0.38l-0.01,0.16l0.06,0.44l-0.05,0.44l0.13,0.35l0.12,0.11l-0.04,0.11l-0.27,0.34l-0.02,0.02l-0.25,0.36l-0.01,0.02l-0.28,0.48l-0.04,0.11l-0.11,0.46l-0.09,0.35l-0.17,0.6l-0.26,0.55l-0.31,0.5l-0.34,0.53l-0.03,0.07l-0.24,0.62l-0.31,0.6l-0.04,0.11l-0.13,0.64l-0.19,0.6l-0.17,0.43l-0.05,0.04l-0.02,0.02l-0.28,0.27l-0.1,0.15l-0.2,0.55l-0.02,0.15l0.01,0.43l0.25,0.36l0.07,0.03l0.02,0.1l-0.12,0.19l-0.04,0.09l-0.14,0.42l-0.14,-0.01l-0.01,0.15l-0.24,-0.13l-0.66,0.46l-0.05,0.04l-0.3,0.29l-0.3,0.14l-0.14,0.11l-0.42,0.51l-0.46,0.53l-0.06,0.1l-0.09,0.21l-0.01,0.04l-0.08,0.25l-0.35,0.36l-0.12,0.27l-0.01,0.73l-0.22,0.48l-0.03,0.09l-0.13,0.65l-0.19,0.56l-0.02,0.07l-0.1,0.66l-0.0,0.06l0.01,0.73l0.16,0.31l0.12,0.09l-0.0,0.0l-0.09,0.33l-0.23,0.75l0.09,0.39l0.29,0.32l0.01,0.01l0.27,0.28l0.01,0.01l0.49,0.45l0.3,0.4l0.15,0.43l-0.0,0.18l-0.16,0.16l-0.02,0.02l-0.18,0.02l-0.17,0.06l-0.35,0.22l-0.19,0.33l-0.01,0.85l0.02,0.13l0.09,0.28l-1.05,-0.27l-0.39,0.11l-0.3,0.31l-0.09,0.14l-0.4,1.07l-0.02,0.1l-0.0,-0.0l-0.19,1.25l-0.0,0.04l-0.05,0.75l-0.2,0.87l-0.01,0.05l-0.08,0.85l-0.22,1.1l-0.33,0.95l-0.52,1.08l-0.27,0.42l-0.06,0.09l-0.04,0.07l-0.37,0.97l-0.15,0.32l-1.37,0.47l-0.96,0.24l-0.12,0.05l-0.53,0.35l-0.68,-0.3l-0.83,-1.21l-0.06,-0.07l-0.55,-0.5l-0.21,-0.1l-0.55,-0.08l-0.03,-0.0l-1.07,-0.07l-0.23,0.05l-1.15,0.67l-0.11,0.09l-0.85,1.03l-0.54,0.42l-0.39,0.05l-0.22,0.1l-0.37,0.32l-0.05,0.06l-0.49,0.64l-0.37,0.42l-0.43,0.02l-0.2,-0.56l-0.04,-0.08l-0.58,-0.92l-0.11,-0.94l-0.01,-0.05l-0.26,-1.01l-0.06,-0.13l-0.65,-0.92l-0.23,-0.92l-0.01,-0.05l-0.22,-0.57l0.2,-0.24l0.67,-0.57l0.77,-0.61l0.08,-0.09l0.44,-0.65l0.05,-0.1l0.15,-0.43l-0.04,-0.34l-0.27,-0.44l-0.23,-0.36l-0.42,-0.71l-0.08,-0.1l-0.75,-0.66l-0.01,-0.01l-0.43,-0.35l-0.16,-0.08l-1.03,-0.26l-0.03,-0.01l-0.95,-0.16l-0.15,0.0l-0.89,0.2l-1.67,0.11l-0.02,0.0l-1.34,0.15l-0.63,-0.01l-0.76,-0.01l-1.54,-0.23l-0.07,-0.0l-1.66,0.04l-1.64,-0.11l-0.07,0.0l-1.63,0.19l-1.19,-0.27l-0.01,-0.0l-0.78,-0.15l-0.12,-0.01l-1.23,0.12l-0.05,0.01l-1.47,0.33l-1.22,-0.07l-1.19,-0.39l-0.26,0.0l-1.88,0.68l-0.09,0.05l-0.79,0.54l-0.12,0.13l-0.55,0.95l-0.05,0.23l0.06,0.69l0.04,0.64l0.0,0.03l0.03,0.22l-0.16,0.44l-0.58,0.19l-0.21,0.16l-0.39,0.58l-0.02,0.04l-0.54,1.05l-0.03,0.07l-0.24,0.81l-0.01,0.08l-0.04,0.45l-0.06,0.16l-1.04,0.25l-0.16,0.08l-0.84,0.66l-0.12,0.15l-0.27,0.62l-0.0,0.0l-0.23,0.54l-0.39,0.31l-0.0,0.0l-0.74,0.6l-0.04,0.04l-0.57,0.61l-0.35,0.38l-0.06,0.09l-0.59,1.17l-0.04,0.17l-0.03,0.9l-0.11,0.83l0.02,0.18l0.09,0.28l-0.11,0.38l0.04,0.06l-0.36,0.23l-0.17,0.23l-0.2,0.71l-0.0,0.22l0.18,0.63l-0.06,0.72l-0.17,0.95l-0.01,0.08l0.04,0.97l0.21,0.34l0.53,0.29l0.04,0.02l0.43,0.17l0.41,0.25l0.47,0.59l0.19,0.92l0.09,0.18l0.59,0.69l0.0,0.0l0.26,0.31l0.42,0.98l0.21,0.59l-0.22,0.92l-0.0,0.02l-0.18,1.02l-0.54,1.41l-0.41,0.84l-0.73,0.79l-0.62,0.49l-0.05,0.04l-0.67,0.72l-0.11,0.23l-0.14,1.3l-0.0,0.01l-0.12,1.31l-0.39,0.94l-0.0,0.01l-0.28,0.72l-0.51,0.22l-0.01,0.0l-1.38,0.64l-0.56,-0.16l-0.26,0.01l-0.68,0.27l-0.24,0.27l-0.12,0.42l-0.26,0.04l-0.27,0.17l-0.55,0.82l-0.07,0.19l-0.09,0.99l-0.0,0.01l-0.07,0.99l-0.16,0.48l-0.04,0.11l-0.01,0.03l-0.18,0.7l-0.38,0.12l-0.23,0.19l-0.37,0.67l0.04,0.15l-0.04,0.11l-0.0,0.25l0.18,0.56l0.05,0.09l0.35,0.54l0.3,0.18l0.69,0.05l0.22,0.24l0.08,0.07l0.23,0.15l0.29,0.32l0.1,0.08l0.53,0.3l0.05,0.02l0.2,0.08l0.55,0.31l0.25,0.46l0.07,0.09l0.44,0.44l0.29,0.51l0.03,0.05l0.46,0.58l0.0,0.59l0.06,0.21l0.35,0.56l0.34,0.19l1.35,-0.01l0.38,0.1l0.53,0.31l0.3,0.18l0.61,0.63l0.32,0.59l0.07,0.57l0.06,0.17l0.41,0.61l0.02,0.03l0.5,0.64l-0.12,0.47l-0.28,0.69l-4.87,11.87l-3.23,7.87l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.1,-0.1l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l-0.0,-0.04l-0.1,-0.1l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.21,-0.21l-0.06,0.0l-0.02,0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.03,-0.03l-0.03,-0.03l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,0.0l0.0,-0.06l-0.15,-0.15l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.38,-0.38l-0.02,0.0l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.35,-0.35l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.08l-0.08,-0.08l0.0,-0.0l-0.1,-0.1l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.29,-0.29l-0.04,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.19,-0.19l0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.17,-0.17l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.21,-0.21l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.15,-0.15l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.03,-0.03l-0.39,-0.39l-0.0,-0.0l-0.04,-0.04l-0.06,0.0l-0.05,0.05l-0.01,-0.01l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.1,-0.1l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.12,-0.12l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.33,-0.33l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.1,-0.1l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.31,-0.31l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.1,-0.1l0.0,-0.0l-0.1,-0.1l0.0,-0.02l-0.04,-0.04l-0.0,-0.02l-0.19,-0.19l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.23,-0.23l-0.02,0.0l-0.25,-0.25l-0.02,0.0l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.1,-0.1l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l0.0,-0.0l-0.35,-0.35l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.37,-0.37l-0.05,-0.05l-0.02,0.0l-0.13,-0.13l-0.04,0.0l-0.0,0.0l-0.04,-0.05l-0.02,-0.0l-0.0,0.0l-0.04,-0.05l0.05,-0.04l-0.01,-0.02l-0.18,-0.1l-0.05,-0.06l-0.03,-0.0l0.0,-0.02l-0.4,-0.4l-0.02,0.0l-0.27,-0.27l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.23,-0.23l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.05,-0.05l0.04,-0.01l-0.0,-0.02l-0.34,-0.27l0.02,-0.01l-0.0,-0.02l-0.17,-0.23l-0.02,-0.01l-0.04,0.06l-0.05,-0.05l0.0,-0.0l-0.4,-0.4l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.13,-0.13l-0.02,0.0l-0.1,-0.1l-0.06,0.0l-0.17,-0.17l-0.02,0.0l-0.08,-0.08l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.06,-0.06l-0.02,0.0l-0.03,-0.03l0.01,-0.01l0.0,-0.06l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.05,-0.05l-0.02,0.0l-0.02,-0.02l-0.0,-0.0l-0.1,-0.1l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.25,-0.25l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.01,0.01l-0.03,-0.03l-0.04,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.17,-0.17l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.25,-0.25l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.06,-0.06l-0.0,-0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.08,-0.08l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.13,-0.13l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,-0.0l-0.12,-0.12l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.17,-0.17l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.23,-0.23l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.0,-0.0l-0.06,-0.06l-0.02,0.0l-0.1,-0.1l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.16,-0.16l-0.13,-0.13l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.31,-0.31l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.08,-0.08l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.06,-0.06l-0.02,0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.02,0.0l-0.25,-0.25l0.0,-0.0l0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l-0.4,-0.4l-0.06,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.05,0.05l-0.13,-0.13l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.13,-0.13l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.23,-0.23l-0.06,0.0l-0.17,-0.17l-0.02,0.0l-0.08,-0.08l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.15,-0.15l-0.04,0.0l-0.19,-0.19l-0.0,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.08,-0.08l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.15,-0.15l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.23,-0.23l-0.04,0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.08,-0.08l-0.0,-0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.0,-0.0l-0.04,-0.04l-0.04,0.0l-0.13,-0.13l-0.04,0.0l-0.06,-0.06l-0.02,0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,-0.04l-0.12,0.0l-0.06,-0.06l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.13,-0.13l-0.1,0.0l-0.1,-0.1l-0.0,-0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l0.0,-0.02l-0.2,-0.2l0.7,-0.03l1.72,0.55l0.17,0.02l1.25,-0.15l0.15,-0.05l0.3,-0.17l0.18,-0.21l0.71,-1.93l0.02,-0.21l-0.26,-1.31l-0.2,-0.27l-0.85,-0.48l-1.38,-0.82l-0.04,-0.02l-1.75,-0.81l-0.17,-0.04l-1.59,0.02l-0.06,0.0l-1.67,0.26l-0.6,-0.27l0.34,-0.42l0.8,-0.68l1.05,-0.16l1.67,0.06l0.22,-0.06l1.35,-0.83l0.12,-0.12l0.86,-1.28l0.91,-0.3l0.04,-0.02l0.42,-0.19l1.39,-0.23l0.29,-0.21l0.59,-1.1l0.05,-0.18l0.0,-0.0l0.26,-1.01l-0.01,-0.23l-0.43,-1.22l-0.01,-0.02l-0.33,-0.77l-0.23,-2.17l0.28,-1.12l0.01,-0.09l0.01,-1.44l-0.0,-0.02l-0.05,-1.08l0.02,-0.99l-0.02,-0.14l-0.25,-0.7l-0.07,-0.12l-0.78,-0.95l-0.32,-0.15l-0.77,0.03l-0.18,0.01l-0.16,0.04l-1.19,0.59l-0.12,0.09l-0.76,0.82l-0.07,0.11l-0.25,0.56l-0.28,0.56l-0.61,0.67l-1.22,0.8l-0.06,0.05l-0.36,0.37l-0.2,0.03l-0.22,-0.08l-0.13,-0.02l-0.33,-0.01l-0.1,0.1Z", "name": "Ondo"}, "2045": {"path": "M106.01,513.33l0.32,-2.0l0.37,-1.6l0.01,-0.03l0.21,-1.5l0.47,-1.9l0.47,-1.36l0.05,-0.14l0.52,-1.34l0.02,-0.07l0.32,-1.59l0.01,-0.11l-0.1,-1.14l0.15,-1.36l0.25,-0.82l0.12,-0.4l0.02,-0.11l0.03,-1.75l0.04,-0.74l0.2,-0.92l0.0,-0.02l0.24,-1.49l0.39,-1.13l0.0,-0.01l0.42,-1.33l0.02,-0.07l0.16,-1.29l0.23,-1.41l0.03,-0.21l0.0,-0.03l0.04,-0.47l0.09,-1.01l0.19,-1.2l-0.2,-0.41l-0.96,-0.54l-0.49,-0.76l-0.02,-0.02l-0.32,-0.43l-0.4,-0.54l-0.44,-1.29l-0.04,-0.09l-0.46,-0.7l-0.0,-0.01l-0.78,-1.14l-0.02,-0.03l-0.7,-0.86l-0.1,-0.09l-1.39,-0.85l-0.53,-0.38l-0.0,-0.0l-0.07,-0.05l-0.95,-0.8l-0.66,-0.63l-0.29,-1.01l-0.14,-0.84l1.0,-1.0l0.2,-0.15l0.12,-0.15l0.39,-0.85l0.13,-0.28l0.0,-0.01l0.43,-1.0l0.03,-0.11l0.2,-1.61l0.35,-1.67l0.11,-0.53l0.01,-0.06l0.09,-1.37l-0.0,-0.08l-0.12,-0.95l-0.01,-1.18l0.01,-0.29l0.06,-1.24l0.0,-0.04l-0.05,-1.04l0.32,-0.94l0.35,-0.16l0.25,0.21l0.12,0.07l0.08,0.03l1.47,0.52l0.04,0.01l1.77,0.43l0.02,0.0l1.43,0.27l0.1,0.01l0.74,-0.06l0.18,-0.06l1.02,-0.64l0.91,-0.16l0.17,-0.08l0.6,-0.46l0.12,-0.15l0.34,-0.74l0.03,-0.08l0.17,-0.74l0.01,-0.12l-0.04,-0.61l-0.01,-0.08l-0.09,-0.3l-0.01,-0.27l0.1,-0.47l0.7,-0.27l0.13,-0.08l0.37,-0.34l0.06,-0.07l0.27,-0.41l1.03,-1.17l0.48,-0.47l0.08,-0.1l0.36,-0.7l0.52,-0.75l0.35,-0.21l0.54,0.25l0.89,0.7l0.05,0.03l1.06,0.61l0.81,0.49l0.86,1.3l0.01,0.01l0.73,1.0l0.59,1.13l0.02,0.03l0.76,1.19l0.62,1.38l0.1,0.14l0.67,0.59l0.46,0.05l0.73,-0.41l0.36,-0.16l0.5,-0.22l0.93,-0.33l0.21,-0.18l0.3,-0.53l0.02,-0.05l0.25,-0.63l0.18,-0.43l0.01,-0.02l0.55,-0.46l0.6,-0.43l0.02,-0.01l0.14,-0.12l0.34,0.12l0.7,-0.42l0.07,-0.06l0.19,-0.19l0.09,-0.13l0.2,-0.47l0.23,-0.36l0.16,-0.18l0.05,0.06l0.63,0.03l0.81,-0.93l0.31,-0.26l0.93,-0.52l0.74,-0.11l0.07,-0.02l0.94,-0.33l0.02,-0.01l0.72,-0.3l0.0,0.01l0.11,0.15l0.64,0.01l0.08,-0.1l0.02,-0.03l0.14,-0.22l0.16,-0.24l-0.05,-0.03l0.12,-0.1l0.09,-0.37l0.06,-0.05l0.52,-0.42l0.12,-0.16l0.13,-0.29l0.03,-0.08l0.25,-1.27l0.01,-0.12l-0.09,-0.91l-0.01,-0.07l-0.22,-0.75l-0.08,-1.18l-0.01,-0.07l-0.14,-0.56l0.86,-0.17l1.67,0.29l0.11,0.0l1.71,-0.19l2.26,0.06l0.92,0.33l0.13,0.02l1.85,0.01l0.05,-0.0l1.4,-0.17l0.0,-0.0l1.75,-0.21l0.09,-0.02l1.58,-0.6l0.1,-0.05l0.95,-0.71l1.58,-0.55l0.05,0.3l0.04,0.13l0.15,0.27l0.49,0.18l0.26,-0.45l-0.01,-0.06l-0.05,-0.51l0.91,0.41l0.17,0.04l1.7,-0.01l0.14,-0.03l1.57,-0.58l0.06,-0.03l0.82,-0.46l1.52,-0.66l1.18,-0.18l0.04,-0.01l0.41,-0.1l0.36,0.11l0.11,0.02l1.1,0.04l0.76,0.4l0.4,1.13l0.02,0.05l0.22,0.43l0.14,0.42l0.03,0.08l0.96,1.65l0.34,0.2l0.4,0.01l0.07,-0.01l1.78,-0.29l0.19,0.01l1.77,0.12l0.2,-0.04l1.87,-0.9l0.03,0.01l0.02,0.25l0.01,0.12l-0.43,1.25l-0.0,0.01l-0.64,2.15l-0.01,0.05l-0.26,1.55l-0.44,1.04l-0.85,0.82l-0.16,0.15l-1.25,0.9l-1.14,0.34l-0.08,0.03l-1.43,0.78l-0.09,0.07l-0.82,0.81l-1.13,1.0l-0.07,0.09l-0.35,0.55l-0.19,0.29l-0.02,0.03l-0.45,0.85l-0.14,0.27l-0.03,0.07l-0.56,1.87l-0.11,0.24l-0.48,1.03l-0.04,0.14l-0.15,1.7l0.02,0.15l0.36,1.18l0.1,0.32l0.5,1.81l-0.31,1.47l-0.2,0.54l-0.44,1.21l-0.01,0.02l-0.46,1.47l-0.02,0.17l0.34,2.82l0.0,0.02l0.51,2.98l0.04,0.11l0.98,1.97l0.61,1.49l0.0,0.01l0.57,1.33l0.48,1.13l0.02,0.03l0.78,1.45l0.34,0.93l0.25,2.1l0.01,0.06l0.39,1.47l0.03,0.07l0.85,1.77l0.01,0.01l0.15,0.3l0.54,1.04l0.01,0.02l0.13,1.44l-0.37,0.18l-1.56,0.17l-0.06,0.01l-1.62,0.44l-0.54,0.15l-0.02,0.01l-2.06,0.7l-0.51,0.11l-0.14,0.06l-1.01,0.69l-0.16,0.24l-0.72,3.13l-0.21,0.48l-0.06,0.14l-0.02,0.07l-0.13,0.57l-0.01,0.07l-0.06,1.35l-0.0,0.03l0.01,0.25l-0.24,0.5l-0.02,0.05l-0.42,1.26l-0.02,0.15l0.11,1.84l0.0,0.03l0.15,1.13l0.0,0.01l0.1,0.65l0.18,1.14l-0.36,1.71l-0.0,0.02l-0.12,0.78l-0.0,0.11l0.14,1.13l0.0,0.02l0.13,0.79l-0.12,0.68l-0.02,0.02l-0.42,0.45l-0.74,0.1l-1.14,-0.14l-0.89,-0.47l-1.02,-0.87l-1.47,-1.27l-0.17,-0.09l-1.19,-0.27l-0.29,-0.14l-0.07,-0.32l-0.24,-0.28l-1.19,-0.47l-0.1,-0.03l-1.55,-0.18l-0.11,0.0l-1.04,0.17l-0.21,0.03l-0.12,0.04l-0.96,0.5l-0.09,0.07l-0.19,0.19l-0.1,0.2l-0.5,0.28l-0.04,0.02l-1.0,0.71l-0.04,0.03l-1.47,1.35l-0.01,0.01l-0.88,0.89l-0.07,0.09l-0.8,1.46l-0.03,0.07l-0.4,1.24l-0.01,0.05l-0.15,0.83l-0.1,0.48l-0.54,1.1l-0.5,0.7l-0.61,0.4l-0.0,0.0l-0.02,0.01l-0.85,0.45l-0.63,0.1l-0.13,0.06l0.03,-0.09l-0.22,-0.49l-0.38,-0.16l-0.15,-0.03l-1.12,-0.02l-0.15,0.03l-1.15,0.45l-0.79,-0.28l-0.17,-0.02l-1.7,0.16l-0.11,0.03l-1.18,0.47l-0.11,0.07l-0.33,0.28l-0.29,0.11l-0.54,0.17l-0.44,-0.05l-0.61,-0.65l-0.3,-0.13l-1.33,0.03l-0.13,0.03l-1.2,0.45l-0.17,0.12l-0.36,0.43l-1.03,0.55l-0.11,0.08l-0.49,0.53l-0.1,0.06l-0.48,-0.68l-0.21,-0.72l-0.02,-0.07l-0.0,-0.02l-0.22,-0.66l-0.04,-0.38l-0.01,-0.04l-0.29,-1.32l-0.04,-0.1l-0.45,-0.88l-0.01,-0.01l-0.28,-0.49l-0.78,-1.7l-0.53,-1.21l-0.24,-0.22l-2.07,-0.68l-0.12,-0.02l-2.04,-0.04l-0.09,0.01l-1.18,0.24l-0.17,0.08l-0.49,0.38l-1.15,0.57l-0.01,0.0l-0.68,0.35l-0.06,0.04l-1.03,0.77l-0.31,0.09l-0.61,0.18l-0.98,-0.24l-0.22,-0.59l-0.11,-1.13l0.08,-0.95l0.0,-0.05l-0.04,-1.01l-0.01,-0.1l-0.33,-1.15l-0.04,-0.1l-0.62,-1.02l-0.19,-0.16l-1.13,-0.47l-0.26,-0.02l-0.59,0.16l-0.17,0.1l-0.46,0.44l-0.02,0.02l-0.59,0.67l-0.65,0.28l-0.03,0.01l-0.58,0.3l-0.7,0.22l-0.13,0.07l-0.52,0.41l-0.01,-0.0Z", "name": "Osun"}, "2042": {"path": "M72.61,264.23l0.33,-0.58l0.52,-0.47l0.89,-0.33l0.01,-0.01l0.49,-0.2l0.06,-0.03l1.5,-0.95l0.17,0.06l0.18,0.06l1.56,0.82l1.05,0.66l0.03,0.02l1.44,0.72l0.81,0.44l0.06,0.03l0.57,0.19l0.41,0.34l0.07,0.05l0.78,0.4l0.56,-0.22l0.88,-2.53l0.01,-0.02l0.14,-0.47l0.08,-0.26l0.01,-0.03l0.12,-0.52l0.01,-0.1l-0.08,-2.22l0.03,-0.13l0.33,-1.14l0.64,-1.86l0.38,-0.89l0.03,-0.07l0.21,-0.47l0.01,-0.03l0.21,-0.59l0.39,-0.98l1.2,-1.48l0.08,-0.16l0.2,-0.83l0.01,-0.04l0.01,-0.09l0.01,-0.03l0.01,-0.11l-0.0,-0.01l0.03,-0.22l0.0,-0.08l-0.05,-0.57l-0.04,-0.73l-0.08,-1.46l-0.0,-0.01l-0.04,-0.56l0.01,-0.01l-0.07,-1.34l-0.08,-0.22l-0.05,-0.06l-0.03,-0.06l-0.05,-0.48l-0.06,-0.65l-0.03,-0.45l-0.01,-0.07l-0.22,-0.91l-0.11,-0.19l-0.59,-0.56l-0.09,-0.06l-1.5,-0.81l-0.51,-0.41l-0.55,-0.44l-0.86,-1.3l-0.25,-0.67l-0.31,-0.84l-0.01,-0.03l-0.38,-0.8l-0.0,-0.0l-0.02,-0.05l-0.03,-0.06l-0.39,-0.56l-0.3,-0.45l-0.23,-0.46l-0.0,-0.01l-0.12,-0.23l-0.06,-0.12l-0.08,-0.15l-0.06,-0.08l-0.13,-0.14l-0.1,-0.11l-0.16,-0.53l-0.02,-0.85l0.01,-0.02l0.43,-1.39l0.57,-1.62l0.01,-0.02l0.19,-0.62l0.27,-0.87l0.02,-0.09l0.05,-0.59l0.1,-0.98l0.0,-0.04l0.0,-0.89l-0.01,-0.07l-0.27,-1.51l-0.02,-0.14l-0.0,-0.12l-0.01,-0.4l-0.01,-0.06l-0.56,-2.8l-0.04,-0.12l-0.6,-1.08l-0.17,-0.16l-0.93,-0.46l-0.37,-0.18l-0.06,-0.02l-0.53,-0.16l-0.13,-0.04l-0.08,-0.02l-0.26,-0.03l0.01,-0.42l0.02,-0.03l0.25,-0.44l0.05,-0.13l0.17,-0.99l0.0,-0.1l-0.0,-0.04l-0.05,-0.77l-0.02,-0.09l-0.19,-0.61l-0.07,-0.78l0.33,-1.38l0.27,-0.89l0.01,-0.21l-0.12,-0.48l-0.22,-0.27l-0.14,-0.06l0.17,-0.09l1.0,0.0l1.14,0.1l1.06,0.29l0.23,0.2l0.06,0.04l1.57,0.89l0.05,0.03l1.57,0.6l1.43,0.85l2.03,1.3l0.01,0.0l1.77,1.08l0.03,0.02l2.61,1.28l1.99,1.04l0.04,0.02l2.62,1.02l1.58,0.7l0.1,0.03l2.25,0.34l0.04,0.0l2.42,0.11l0.09,-0.01l2.74,-0.52l2.19,-0.01l0.06,-0.0l2.22,-0.33l1.22,0.24l0.13,0.0l2.62,-0.33l1.07,-0.13l1.98,0.06l2.03,0.17l0.45,0.12l0.4,0.11l0.11,0.01l2.52,-0.03l0.06,-0.0l0.54,-0.08l1.28,-0.2l0.07,-0.02l0.72,-0.26l1.41,-0.27l1.41,-0.19l2.03,-0.13l1.4,0.03l0.96,0.35l0.03,0.01l1.49,0.44l0.01,0.0l1.71,0.46l1.6,0.65l0.07,0.02l0.4,0.08l1.06,0.68l0.83,0.74l0.07,0.05l1.28,0.71l1.62,1.17l0.04,0.02l1.4,0.79l0.95,0.72l0.03,0.02l1.25,0.77l0.89,0.58l0.63,0.55l0.34,0.09l1.08,-0.21l0.68,0.09l0.94,0.27l0.02,0.01l0.9,0.19l0.84,0.49l0.04,0.02l0.56,0.25l0.48,0.69l-0.03,1.01l-0.05,1.42l-0.16,2.31l-0.16,1.02l-0.38,1.39l-0.0,0.0l-0.6,2.21l-0.01,0.03l-0.46,2.55l-0.25,1.25l-0.03,0.15l-0.08,0.39l-0.0,0.01l-0.45,2.44l-0.48,1.36l-1.02,1.1l-1.44,1.34l-0.01,0.01l-1.15,1.13l-0.01,0.01l-0.96,0.99l-0.85,0.64l-1.37,0.52l-1.3,0.42l-0.01,0.0l-1.06,0.36l-0.04,0.01l-0.94,0.42l-0.05,0.03l-0.91,0.57l-0.03,0.02l-0.89,0.66l-0.04,0.04l-0.84,0.82l-0.33,0.32l-0.03,0.03l-1.06,1.28l-0.04,0.05l-1.31,2.26l-0.04,0.1l-0.45,1.69l-0.01,0.1l-0.02,1.09l-0.26,0.93l-0.01,0.1l-0.07,2.55l0.0,0.06l0.2,1.55l-0.06,1.36l0.03,0.17l0.33,0.8l0.35,1.06l0.04,0.09l0.68,1.04l0.09,0.1l1.0,0.75l0.0,0.0l0.86,0.63l0.85,0.73l0.66,0.91l-0.1,1.25l0.0,0.07l0.1,1.1l-0.33,2.12l-0.54,1.24l-0.02,0.06l-0.31,1.17l-0.0,0.01l-0.38,1.51l-0.01,0.05l-0.14,1.18l-0.0,0.09l0.17,1.59l0.07,0.19l0.49,0.69l0.17,0.14l0.49,0.2l0.74,0.31l0.12,0.03l1.2,0.11l1.56,0.16l0.01,0.0l1.57,0.12l0.85,0.16l0.34,-0.09l0.68,-0.58l0.14,-0.26l0.2,-1.73l0.0,-0.02l0.11,-1.73l0.0,-0.01l0.1,-2.18l0.18,-1.23l0.63,-0.47l1.54,-0.31l1.49,-0.21l0.07,-0.02l1.9,-0.61l0.03,-0.01l1.33,-0.55l1.73,-0.68l1.29,-0.08l1.36,0.07l0.11,-0.01l1.34,-0.31l0.09,-0.03l1.52,-0.77l0.04,-0.03l1.67,-1.14l0.08,-0.07l0.69,-0.81l0.02,-0.03l0.64,-0.89l0.78,-0.83l0.1,-0.2l0.34,-1.86l-0.01,-0.2l-0.5,-1.49l-0.4,-1.44l-0.05,-0.11l-1.38,-2.19l-0.87,-1.47l-0.05,-0.07l-1.09,-1.16l-1.06,-1.2l-1.03,-1.66l-0.4,-1.51l0.51,-1.54l0.02,-0.13l-0.01,-1.85l-0.0,-0.04l-0.25,-2.12l0.05,-2.03l0.23,-1.76l0.0,-0.09l-0.22,-2.11l0.23,-1.39l0.93,-0.77l0.66,-0.3l1.05,-0.16l1.06,-0.07l1.07,0.03l0.9,0.37l0.03,0.01l1.45,0.47l0.18,0.02l1.38,-0.19l0.14,-0.05l1.11,-0.62l0.01,-0.01l1.51,-0.91l2.11,-1.01l1.49,-0.62l2.16,-0.36l0.06,-0.02l2.27,-0.76l0.14,-0.05l0.2,-0.15l1.22,-1.8l0.07,-0.21l0.08,-2.5l-0.1,-0.27l-1.41,-1.65l-0.11,-0.09l-1.77,-0.99l-1.41,-0.9l-0.5,-1.48l0.66,-1.54l1.46,-1.13l1.04,-0.53l0.21,-0.27l0.3,-1.29l0.01,-0.16l-0.42,-2.61l-0.11,-2.05l-0.01,-0.07l-0.42,-1.7l-0.0,-0.0l-0.4,-1.55l-0.11,-0.19l-0.94,-0.89l-0.19,-0.1l-0.37,-0.08l-0.22,-0.05l-0.48,-0.11l-0.19,0.0l-0.69,0.19l-0.43,-0.83l-0.0,-0.0l-0.7,-1.33l-0.28,-0.21l-1.34,-0.24l-0.08,-0.01l-2.11,0.07l-2.91,-0.45l-2.25,-0.87l-2.08,-0.91l-0.02,-0.01l-2.14,-0.84l-2.64,-1.28l-1.63,-1.08l-0.95,-1.38l-0.18,-1.65l0.48,-1.17l1.03,-1.07l0.9,-0.51l0.77,-0.3l0.92,-0.36l0.07,-0.04l1.93,-1.26l1.19,-0.62l1.94,-0.61l0.02,-0.01l1.18,-0.45l1.51,-0.54l0.04,-0.02l0.67,-0.33l1.53,-0.47l2.75,-0.21l0.14,-0.04l1.33,-0.61l2.33,-0.5l0.02,-0.01l1.34,-0.37l1.93,-0.2l0.07,-0.01l1.63,-0.48l1.78,-0.29l2.01,-0.3l0.04,-0.01l1.27,-0.31l1.71,-0.12l0.02,-0.0l1.42,-0.19l1.36,0.07l0.03,0.0l1.35,-0.05l1.61,0.02l1.12,0.13l0.76,0.34l0.17,0.08l0.08,0.03l1.21,0.27l0.77,0.4l1.04,1.33l0.55,2.04l0.27,2.37l0.01,1.78l0.01,0.08l0.32,1.5l0.05,0.13l0.98,1.53l0.11,0.11l1.54,1.09l0.06,0.04l1.54,0.72l1.28,1.05l0.52,1.97l-0.07,2.62l-0.36,3.1l-0.0,0.08l0.06,0.79l0.01,0.1l0.14,1.91l0.0,0.01l0.22,2.06l0.09,0.21l0.85,1.04l0.16,0.12l1.14,0.46l0.49,-0.15l0.01,-0.02l0.46,0.02l1.91,0.1l0.01,0.0l1.83,0.03l0.03,-0.0l1.58,-0.1l0.09,-0.02l0.29,-0.09l1.04,0.05l0.08,-0.0l1.75,-0.24l1.6,-0.07l0.05,-0.01l1.91,-0.32l0.09,-0.03l1.98,-0.83l0.01,-0.0l1.77,-0.78l1.54,-0.55l0.05,-0.02l1.78,-0.93l0.02,-0.01l0.88,-0.53l1.19,-0.4l0.01,-0.0l2.2,-0.81l0.03,-0.01l1.44,-0.65l0.61,-0.21l1.07,-0.37l1.42,-0.18l1.19,0.01l0.06,-0.0l2.05,-0.32l0.27,-0.18l0.74,-1.15l0.02,-0.03l0.75,-1.42l0.98,-0.58l0.07,-0.05l1.31,-1.22l0.06,-0.07l0.65,-0.96l0.81,-0.33l1.12,0.15l0.89,0.24l1.58,1.27l0.11,0.09l0.79,1.15l0.97,1.41l0.02,0.03l0.79,0.97l1.25,1.59l1.55,2.65l1.3,2.5l0.01,0.02l1.71,2.81l0.98,2.55l0.0,0.0l0.89,2.29l-0.07,0.87l-0.05,0.14l-0.02,0.17l0.02,0.22l-0.53,0.76l-0.03,0.06l-1.0,2.13l-0.99,1.38l-0.01,0.01l-1.0,1.5l-0.07,0.24l0.12,2.28l-0.53,1.36l-0.03,0.14l-0.04,1.99l0.06,0.22l0.93,1.45l0.76,1.34l0.15,1.61l-0.87,2.34l-0.02,0.16l0.11,2.55l0.0,0.02l0.18,1.91l-0.85,1.12l-1.2,0.85l-0.16,0.27l-0.4,2.8l0.0,0.12l0.07,0.48l0.18,1.18l0.12,0.23l1.35,1.28l0.1,0.07l2.21,1.08l0.82,1.93l0.59,2.15l0.23,0.26l1.73,0.72l0.37,-0.03l1.7,-1.07l0.1,-0.09l1.79,-2.22l0.03,-0.03l1.59,-2.46l1.62,-1.94l0.0,-0.01l1.44,-1.78l1.8,-1.1l0.04,-0.03l1.77,-1.42l0.02,-0.01l1.65,-1.47l1.25,-1.12l0.04,-0.05l0.19,-0.24l1.65,-0.87l0.05,-0.03l1.2,-0.86l2.45,-0.72l1.66,-0.3l1.6,0.14l1.06,1.03l0.33,1.52l0.04,0.11l0.27,0.47l0.62,1.11l0.45,0.19l2.33,-0.6l0.07,-0.03l2.89,-1.39l1.77,-0.73l2.14,-0.7l1.86,-0.02l2.79,0.69l0.43,-0.17l0.77,-1.2l0.05,-0.33l-0.75,-2.67l0.63,-0.64l0.51,-0.52l2.0,0.15l1.75,0.28l0.03,0.0l1.62,0.14l0.54,0.46l0.54,2.15l0.05,1.93l0.0,0.05l0.31,2.02l-0.04,1.38l0.36,0.41l1.68,0.17l0.24,-0.05l1.12,-0.65l1.36,-0.11l1.73,0.47l0.57,1.0l0.0,0.01l0.46,0.78l1.23,2.56l-0.06,2.96l-0.62,1.98l-0.72,1.7l-0.02,0.07l-0.26,1.24l0.25,0.46l1.82,0.68l0.03,0.01l2.68,0.8l1.3,0.51l2.05,0.97l1.58,0.98l-0.32,2.06l-1.17,2.03l-1.74,1.38l-2.05,0.91l-0.05,0.03l-1.2,0.77l-0.13,0.14l-1.0,1.75l-1.89,1.96l-2.59,1.63l-0.11,0.1l-1.1,1.5l-0.03,0.42l1.24,2.39l0.08,0.11l0.69,0.65l1.38,1.36l0.11,0.08l2.49,1.14l0.0,0.0l1.96,0.86l0.06,0.02l1.89,0.51l1.72,0.5l0.15,0.01l0.59,-0.06l0.0,-0.0l2.14,-0.24l2.76,-0.02l2.04,0.23l0.03,0.0l2.62,0.12l0.04,-0.0l2.19,-0.11l0.03,-0.0l1.41,-0.16l0.18,-0.02l1.28,0.14l0.05,0.0l0.15,-0.0l0.67,0.08l0.67,0.56l0.34,1.04l-0.1,1.8l0.01,0.1l0.32,1.6l-0.02,2.57l0.01,0.1l0.57,2.25l0.54,2.41l0.12,1.79l-0.0,1.84l-0.28,1.01l-0.33,0.53l-1.89,0.42l-1.78,0.04l-0.16,0.04l-1.08,0.51l-0.19,0.19l-0.01,0.01l-0.0,0.0l-0.34,0.76l-0.03,0.24l0.21,1.11l0.17,0.26l1.37,0.93l0.09,0.05l1.33,0.48l0.04,0.01l2.0,0.46l0.77,0.56l0.08,0.45l-0.27,1.1l-0.46,0.53l-0.08,0.16l-0.29,1.09l0.16,0.43l1.38,0.97l0.11,0.06l1.23,0.38l0.85,0.53l0.49,0.74l0.08,1.12l-1.0,1.29l-0.76,0.51l-0.04,0.03l-1.1,0.95l-0.05,0.06l-0.69,0.88l-0.07,0.16l-0.32,1.38l-0.0,0.01l-0.38,1.89l-0.82,0.91l-0.13,0.05l-1.21,0.52l-0.05,0.03l-1.56,0.96l-0.13,0.14l-0.67,1.12l-0.06,0.19l-0.12,2.81l0.07,0.25l0.64,0.9l0.1,0.1l1.14,0.76l0.05,0.03l0.67,0.32l1.01,0.59l0.37,0.51l-0.25,0.78l-0.19,0.43l-0.19,0.43l-0.02,0.06l-0.5,1.9l-0.5,0.92l-0.03,0.3l0.07,0.23l0.34,0.28l0.45,0.05l0.16,-0.02l0.67,-0.22l0.98,-0.3l0.78,-0.23l0.67,0.09l0.03,0.01l-0.0,0.0l-0.09,0.11l-0.4,0.7l-0.01,0.01l-0.31,0.59l-0.73,1.24l-0.55,0.43l-0.11,0.13l-0.31,0.58l-0.78,1.22l-0.0,0.0l-0.68,1.1l-0.58,0.82l-0.68,0.8l-0.04,0.05l-0.82,1.34l-0.98,1.31l-0.34,0.39l-0.65,0.74l-0.04,0.05l-0.85,1.38l-0.04,0.06l-0.59,0.88l-0.01,0.02l-0.4,0.67l-0.17,0.04l-0.15,0.04l-0.02,0.0l-0.0,0.0l-0.04,0.01l-0.01,0.0l-0.48,0.12l-0.56,-0.19l-0.54,-0.52l-0.8,-0.88l-0.49,-0.61l-0.18,-0.23l-0.08,-0.08l-0.96,-0.68l-1.08,-0.84l-1.19,-1.16l-0.78,-0.97l-0.09,-0.08l-1.0,-0.68l-0.95,-0.78l-0.01,-0.01l-1.5,-1.14l-0.62,-0.79l-0.18,-0.13l-1.2,-0.42l-0.93,-0.34l-0.22,-0.02l-1.16,0.24l-1.6,0.08l-0.7,-0.1l-0.17,0.01l-0.73,0.21l-1.04,0.04l-1.35,0.04l-0.84,-0.11l-0.02,-0.0l-0.69,-0.07l-0.11,0.01l-0.71,0.14l-1.6,0.06l-1.28,-0.04l-0.04,0.0l-0.72,0.04l-0.53,0.02l-0.04,0.0l-0.89,0.13l-0.78,0.09l-0.83,0.04l-0.06,0.01l-0.7,0.14l-0.22,0.12l-0.42,0.46l-0.1,0.26l-0.02,0.7l-0.13,0.44l-0.02,0.11l-0.02,1.1l0.0,0.02l0.06,2.12l0.0,0.0l0.05,1.82l0.0,0.0l0.0,0.1l0.01,0.3l0.02,0.7l-0.09,0.99l-0.0,0.02l-0.06,1.8l-0.0,0.02l0.03,1.12l0.01,0.46l-0.05,1.14l-0.03,0.21l-0.1,0.76l-0.0,0.03l-0.08,1.73l0.0,0.04l0.03,0.37l0.02,0.25l0.01,0.22l-0.08,0.11l0.12,0.43l0.0,0.1l0.01,0.33l0.04,0.03l-0.0,0.02l-0.0,0.0l-0.03,0.14l0.01,0.2l0.21,0.66l0.46,34.12l0.03,0.14l0.01,0.04l0.01,0.09l0.01,0.14l-0.0,0.0l-0.36,0.47l-0.08,0.18l-0.0,0.02l-0.07,0.4l-0.02,0.13l-0.01,0.06l-0.0,0.15l-0.0,0.11l-0.0,0.23l0.03,0.15l1.15,2.89l0.84,2.12l0.38,0.95l0.23,0.23l0.68,0.25l0.01,0.0l0.01,0.0l0.02,0.01l0.18,0.05l0.07,0.02l0.0,0.0l0.15,0.04l0.16,0.05l0.3,0.09l0.18,0.06l0.2,0.01l0.2,-0.04l0.43,-0.09l0.77,-0.0l0.06,-0.0l0.22,-0.03l-0.0,0.05l-0.21,0.49l-0.02,0.04l-0.02,0.05l-0.04,0.13l-0.22,0.78l-0.23,0.33l-0.14,0.2l-0.05,0.11l-0.12,0.38l-0.2,0.65l-0.34,0.2l-0.26,0.15l-0.05,0.03l-0.44,0.35l-0.09,0.07l-0.48,0.25l-0.08,-0.05l-0.34,-0.04l-0.19,0.07l-0.07,0.03l-0.75,0.42l-0.01,0.01l-0.48,0.29l-0.57,0.24l-0.22,0.23l-0.27,0.76l-0.02,0.13l0.0,1.08l0.01,0.07l0.07,0.37l0.12,0.64l0.0,0.31l-0.16,-0.23l-0.1,-0.1l-0.13,-0.09l-0.72,-0.5l-0.55,0.09l-0.09,0.13l-0.13,0.18l-0.04,0.07l-0.23,0.5l-0.0,0.0l-0.01,0.03l-0.0,0.0l-0.3,0.65l-0.3,0.46l-0.02,0.03l-0.3,0.57l-0.02,0.04l-0.29,0.74l-0.0,0.0l-0.03,0.08l-0.02,0.09l-0.04,0.31l-0.13,0.91l-0.0,0.0l-0.12,0.88l-0.03,0.26l-0.25,0.7l-0.12,0.3l-0.09,0.11l-0.06,0.06l-0.43,-0.17l-0.14,-0.03l-0.51,-0.01l-0.68,-0.01l-0.13,-0.08l-0.89,-0.53l-1.24,-1.44l-0.0,-0.0l-0.02,-0.03l-0.01,-0.01l-0.81,-0.86l-1.13,-1.37l-0.71,-1.05l-0.8,-1.38l-0.03,-0.04l-0.83,-1.08l-0.01,-0.01l-0.73,-0.87l-0.0,-0.0l-0.54,-0.64l-0.1,-0.11l-0.85,-1.06l-0.74,-1.03l-0.12,-0.16l-0.08,-0.08l-0.54,-0.43l-0.32,-0.25l-0.95,-0.91l-0.61,-0.78l-0.21,-0.28l-0.0,-0.01l-0.06,-0.06l-0.58,-0.52l-0.08,-0.05l-0.82,-0.45l-1.1,-0.63l-0.92,-0.53l-0.44,-0.3l-0.43,-0.29l-0.06,-0.05l-0.55,-0.43l-0.16,-0.77l-0.02,-0.05l-0.45,-1.22l-0.3,-0.9l-0.11,-0.34l-0.01,-0.02l-0.34,-0.85l-0.18,-0.67l-0.2,-0.76l-0.0,-0.0l-0.43,-1.5l-0.01,-0.04l-0.38,-0.98l-0.24,-0.62l-0.23,-1.14l-0.02,-0.08l-0.11,-0.27l-0.17,-0.4l-0.09,-0.13l-0.41,-0.4l-0.11,-0.34l-0.11,-0.34l-0.08,-0.13l-0.41,-0.49l-0.22,-0.26l-0.16,-0.25l-0.33,-0.49l-0.11,-0.16l-0.34,-0.52l-0.04,-0.06l-0.01,-0.01l-0.0,-0.0l-0.02,-0.03l-0.01,-0.01l-0.0,-0.0l-0.36,-0.53l-0.26,-0.46l-0.05,-0.07l-0.73,-0.8l-0.03,-0.03l-1.01,-0.91l-0.01,-0.01l-0.63,-0.54l-0.64,-0.82l-0.09,-0.08l-1.2,-0.82l-0.04,-0.02l-1.14,-0.6l-1.05,-0.78l-0.07,-0.04l-1.12,-0.51l-0.02,-0.01l-0.81,-0.31l-0.04,-0.01l-0.88,-0.24l-0.05,-0.01l-0.98,-0.14l-0.13,-0.02l-0.04,-0.0l-1.12,-0.05l-1.1,-0.15l-0.58,-0.16l-0.98,-0.38l-0.01,-0.0l-0.58,-0.2l-1.05,-0.37l-0.13,-0.02l-1.06,-0.0l-0.64,-0.05l-0.31,-0.02l-0.79,-0.14l-0.58,-0.22l-0.02,-0.01l-0.81,-0.26l-0.13,-0.02l-1.09,0.02l-0.99,0.0l-1.26,-0.04l-0.9,-0.08l-0.08,0.0l-1.47,0.17l-0.03,0.0l-1.42,0.25l-0.02,0.0l-0.86,0.19l-0.91,-0.14l-0.19,0.02l-0.64,0.22l-0.01,0.03l-0.0,0.0l-0.32,0.11l-0.19,0.03l-0.14,0.05l-0.58,0.33l-0.66,0.05l-0.03,0.0l-0.94,0.14l-0.05,0.01l-0.47,0.13l-0.75,0.0l-1.6,-0.08l-1.26,-0.18l-0.02,-0.0l-0.76,-0.07l-0.04,-0.0l-0.62,0.01l-0.79,-0.08l-0.99,-0.28l-1.16,-0.41l-1.12,-0.53l-0.32,-0.17l-0.16,-0.08l-0.17,-0.42l-0.08,-0.2l-0.06,-0.1l-0.05,-0.07l-0.78,-0.99l-0.07,-0.01l0.02,-0.02l-0.18,-0.14l-0.0,-0.0l-0.16,-0.13l-0.25,-0.2l-0.26,-0.21l-0.03,-0.02l-0.22,-0.14l-0.04,-0.02l-0.47,-0.24l-2.66,-1.98l-0.02,-0.01l-0.68,-0.45l-0.72,-0.49l-0.54,-0.41l-0.0,-0.0l-0.07,-0.05l-0.05,-0.03l-1.23,-0.66l-1.0,-0.53l-0.02,-0.01l-0.26,-0.12l-0.83,-0.37l-1.18,-0.78l-0.66,-0.48l-0.0,-0.0l-0.74,-0.53l-0.13,-0.1l-0.07,-0.04l-0.09,-0.04l-0.27,-0.13l-0.57,-0.38l-0.12,-0.08l-0.0,-0.0l-0.15,-0.1l-0.75,-0.51l-0.01,-0.01l-1.09,-0.69l-0.24,-0.15l-0.06,-0.04l-0.58,-0.44l-0.43,-0.33l-0.03,-0.02l-1.01,-0.63l-0.03,-0.02l-1.32,-0.67l-0.75,-0.61l-0.03,-0.02l-0.46,-0.31l-0.09,-0.06l-0.39,-0.04l-0.54,0.24l-0.22,-0.18l-0.03,-0.02l-0.38,-0.25l-0.38,-0.25l-0.24,-0.07l-0.91,0.03l-0.52,-0.15l-0.41,-0.12l-0.61,-0.4l-0.67,-0.43l-0.19,-0.06l-0.85,-0.06l-0.81,-0.28l-0.59,-0.2l-0.31,0.02l-0.36,0.19l-0.15,0.08l-0.74,-0.3l-0.79,-0.32l-0.11,-0.03l-0.33,-0.04l-0.41,-0.05l-0.12,0.0l-0.76,0.14l-0.42,0.07l-0.15,0.02l-0.1,0.03l-0.13,0.06l-1.17,0.55l-0.59,0.07l-0.32,0.04l-0.09,0.02l-0.21,0.08l-0.8,0.29l-0.47,-0.12l-0.35,-0.09l-0.13,-0.13l-0.22,-0.12l-0.33,-0.06l-0.6,-0.11l-0.38,-0.14l-0.19,-0.2l-0.13,-0.09l-0.46,-0.2l-0.15,-0.31l-0.0,-0.01l-0.0,-0.0l-0.08,-0.16l-0.07,-0.14l-0.05,0.03l0.05,-0.11l-0.39,-0.47l-0.15,-0.18l-0.27,-0.32l-0.24,-0.32l-0.64,-0.86l-0.21,-0.29l-0.01,-0.01l-0.8,-0.99l-0.08,-0.07l-0.66,-0.47l-0.04,-0.03l-0.33,-0.23l-0.34,-0.24l-0.64,-0.8l-0.5,-0.63l-0.01,-0.01l-0.46,-0.6l-0.0,-0.0l-0.07,-0.09l-0.66,-0.86l-0.07,-0.07l-0.18,-0.14l-1.07,-0.83l-0.47,-0.37l-0.09,-0.05l-2.39,-1.04l-0.15,-0.07l-2.01,-0.91l-1.45,-0.81l-0.02,-0.01l-1.64,-0.8l-0.17,-0.04l-0.15,-0.0l-0.91,-0.02l-0.15,-0.0l-0.07,0.0l-0.41,0.06l-0.06,0.01l-0.0,0.0l-0.37,0.05l-0.64,0.1l-0.06,0.0l-0.04,0.0l-0.0,0.0l-0.08,0.0l-0.16,0.03l-0.34,0.15l-0.59,0.26l-0.1,0.04l-0.34,0.14l-0.86,0.37l-0.67,0.28l-0.52,0.22l-0.01,0.01l-0.77,0.35l-0.67,0.24l-0.64,0.23l-0.3,0.11l-0.01,0.0l-0.23,0.09l-0.87,0.34l-0.25,0.1l-0.72,0.22l-0.46,0.14l-0.37,0.11l-0.02,0.01l-0.83,0.31l-0.39,0.14l-0.01,0.01l-0.16,0.07l-0.88,0.37l-0.45,0.08l-0.21,0.04l-0.73,0.11l-0.18,-0.05l-0.28,-0.08l-0.31,-0.08l-0.48,-0.27l-0.18,-0.1l-0.15,-0.08l-0.75,-0.59l-0.53,-0.41l-0.18,-0.75l-0.02,-0.17l-0.13,-1.2l-0.0,-0.0l-0.16,-1.45l-0.06,-0.53l-0.02,-0.2l-0.01,-0.19l-0.01,-0.22l-0.01,-0.22l-0.04,-0.55l-0.01,-0.06l-0.05,-0.24l-0.03,-0.14l-0.03,-0.14l-0.09,-0.41l-0.0,-0.02l-0.19,-0.72l-0.05,-0.2l-0.16,-0.6l-0.06,-0.12l-0.14,-0.2l-0.05,-0.07l-0.52,-0.77l-0.15,-0.13l-0.69,-0.36l-0.32,-0.17l-0.28,-0.14l-0.17,-0.04l-0.73,-0.02l-0.43,-0.01l-0.82,-0.03l-0.59,-0.14l-0.54,-0.13l-0.44,-0.11l-0.22,-0.13l-0.84,-0.5l-0.28,-0.17l-1.23,-1.01l-0.57,-0.5l-0.14,-0.13l-0.44,-0.39l-0.73,-1.13l-0.06,-0.26l-0.34,-1.34l-0.02,-0.98l-0.0,-0.0l-0.0,-0.08l-0.01,-0.48l0.02,-0.22l0.01,-0.11l0.05,-0.6l0.18,-1.59l-0.01,-0.15l-0.36,-1.34l-0.04,-0.14l-0.1,-0.38l-0.02,-0.06l-0.0,-0.0l-0.01,-0.04l-0.12,-0.2l-0.88,-0.78l-0.0,-0.0l-0.09,-0.08l-0.05,-0.04l-0.28,-0.1l-2.09,0.09l-0.06,0.01l-2.87,0.53l-1.88,0.21l-2.2,0.12l-1.34,-0.4l-0.62,-1.34l-0.06,-0.47l-0.28,-2.33l0.08,-2.45l0.0,-0.02l-0.01,-0.93l-0.01,-0.67l-0.0,-0.02l-0.05,-0.91l-0.08,-1.5l0.34,-2.52l0.0,-0.01l0.09,-0.9l0.11,-1.09l0.03,-0.09l0.29,-0.92l0.02,-0.13l-0.02,-2.13l-0.01,-0.08l-0.31,-1.43l-0.22,-0.28l-1.25,-0.58l-0.21,-0.04l-1.95,0.2l-0.25,-0.13l-0.74,-0.37l-1.58,-1.3l-1.58,-1.73l-1.7,-1.89l-0.52,-0.71l-0.51,-0.69l-0.5,-0.7l-0.45,-0.64l-0.05,-0.06l-0.51,-0.5l-0.92,-0.89l-0.5,-1.04l-0.4,-0.83l-0.05,-0.08l-0.61,-0.75l-0.87,-1.06l-0.04,-0.04l-0.41,-0.37l-0.62,-0.57l-1.62,-1.68l-0.61,-0.77l-0.67,-0.85l-0.02,-0.02l-0.95,-1.02l-0.38,-0.4l-0.89,-1.02l-1.04,-1.4l-0.01,-0.02l-1.31,-1.58l-0.0,-0.01l-0.96,-1.12l-0.82,-1.2l-0.03,-0.04l-0.89,-0.99l-0.01,-0.01l-0.61,-0.63l-0.66,-0.68l-1.18,-1.27l-0.06,-0.07l-0.02,-0.02l-1.12,-1.04l-0.31,-0.29l-0.05,-0.04l-0.95,-0.88l-0.61,-1.12l-0.17,-0.17l-0.16,-0.08l-0.76,-0.38l-0.12,-0.04l-0.98,-0.14l-0.55,-0.08l-1.3,-0.29l-0.59,-0.13l-0.11,-0.01l-0.3,0.02l-1.22,0.07l-0.04,0.0l-2.15,0.32l-0.58,0.03l-1.0,0.05l-0.45,-0.06l-0.85,-0.11l-0.07,-0.0l-0.09,0.0l-0.0,0.0l-0.18,0.01l-2.3,0.07l-1.21,-0.07l-0.07,0.0l-1.25,0.13l-1.93,-0.05l-0.04,0.0l-2.32,0.18l-0.04,0.01l-2.48,0.48l-0.0,0.0l-1.05,0.21l0.05,-0.19l0.2,-0.51l0.03,-0.16l-0.01,-0.45l0.22,-0.99l0.01,-0.13l-0.07,-0.64l-0.11,-0.24l-0.42,-0.42l-0.28,-0.12l-1.18,-0.02l-0.54,-0.32l-1.69,-1.83l-0.06,-0.05l-0.19,-0.14l-0.56,-0.4l-1.05,-1.44l-0.39,-0.82l-0.55,-1.6l-0.01,-0.1l0.88,-2.3l0.5,-1.32l0.83,-2.1l0.04,-0.06l0.34,-0.51l0.39,-0.59l0.01,-0.02l0.0,-0.0l0.09,-0.14l0.04,-0.07l0.24,-0.61l0.31,-0.58l0.04,-0.13l0.06,-0.38l0.0,-0.1l-0.02,-0.16l-0.13,-1.3l-0.03,-0.12l-0.01,-0.03Z", "name": "Niger"}, "2043": {"path": "M0.62,455.27l0.1,-0.05l0.17,-0.16l0.14,-0.23l1.6,-0.97l0.09,-0.08l0.57,-0.65l0.98,-0.74l1.23,-0.85l1.42,-0.86l0.08,-0.06l0.43,-0.44l0.69,-0.47l1.24,-0.24l0.51,-0.06l2.21,0.05l1.01,0.56l0.03,0.02l1.12,0.49l0.7,0.82l0.68,1.17l0.46,1.65l0.05,1.81l0.0,1.84l-0.1,2.04l0.0,0.06l0.23,2.09l0.01,0.04l0.32,1.52l0.0,0.02l0.36,1.35l0.03,0.07l0.82,1.68l0.05,0.07l0.76,0.95l0.25,0.15l1.02,0.16l0.44,-0.28l0.33,-1.11l0.01,-0.04l0.34,-1.7l0.0,-0.02l0.27,-1.77l0.0,-0.04l0.07,-1.32l0.1,-0.74l0.4,-0.69l0.03,-0.08l0.22,-0.67l0.38,-0.37l0.3,-0.01l1.1,0.0l0.41,0.2l0.44,0.41l0.44,0.65l0.12,1.21l-0.03,0.92l-0.04,0.4l-0.11,1.26l-0.0,0.03l-0.02,1.08l-0.22,0.78l-0.01,0.05l-0.16,1.04l-0.58,1.1l-0.03,0.08l-0.26,0.95l-0.0,0.01l-0.2,0.83l-0.01,0.04l-0.06,0.43l-0.43,0.53l-0.09,0.23l-0.03,0.63l-0.42,0.07l-0.62,0.68l-0.1,0.34l0.17,0.9l0.07,1.13l-0.01,0.91l0.02,0.12l0.41,1.43l0.06,0.13l0.64,0.85l0.25,0.5l0.11,0.13l1.23,0.96l0.3,0.56l0.13,0.14l1.35,0.91l0.01,0.01l0.86,0.54l1.33,1.42l0.3,0.94l0.03,0.06l0.74,1.41l0.04,0.39l0.08,0.72l0.14,0.26l0.83,0.69l0.06,0.75l0.09,0.22l2.07,2.59l0.37,0.49l0.03,0.04l0.05,0.05l0.07,0.13l0.23,0.42l0.06,0.08l0.78,0.85l0.08,0.07l0.66,0.42l0.45,0.31l0.56,0.41l0.04,0.02l0.5,0.29l0.07,0.06l0.53,0.46l0.09,0.06l0.68,0.32l0.89,0.42l1.25,0.63l0.16,0.04l1.19,0.05l1.42,0.18l0.13,-0.01l0.96,-0.2l1.11,0.31l0.24,-0.01l1.19,-0.42l0.85,-0.15l0.19,-0.09l0.58,-0.51l0.08,-0.1l0.43,-0.75l0.58,-0.71l0.07,-0.12l0.32,-0.9l0.49,-1.06l0.81,-0.68l0.14,-0.27l0.12,-1.15l0.16,-0.88l0.49,-1.24l0.34,-0.86l0.02,-0.05l0.21,-0.81l0.26,-0.25l0.55,-0.54l0.01,-0.01l0.4,-0.42l0.55,-0.39l0.72,-0.08l0.73,-0.05l0.51,0.07l0.76,0.34l0.48,0.78l0.51,1.16l0.43,1.59l0.01,0.04l0.58,1.52l0.08,0.13l0.95,1.02l0.16,0.1l0.98,0.35l0.23,0.01l1.23,-0.31l0.14,-0.06l0.52,-0.37l0.5,-0.36l0.11,-0.13l0.28,-0.48l0.93,-0.29l1.82,-0.37l0.99,0.05l0.05,-0.0l0.71,-0.06l0.9,0.02l0.06,-0.0l1.02,-0.15l1.26,0.14l0.04,0.0l1.3,0.01l0.92,0.22l0.41,0.45l0.45,0.7l0.38,0.9l0.16,1.08l0.0,0.01l0.3,1.56l0.07,1.11l0.02,1.13l-0.05,1.01l-0.11,0.8l0.05,0.26l0.51,0.86l0.18,0.16l1.3,0.59l0.49,0.38l0.08,0.05l0.74,0.33l0.11,0.03l0.81,0.11l0.41,0.7l0.22,0.37l-0.02,1.42l-0.1,1.13l0.05,0.24l0.68,1.15l0.6,2.02l0.13,1.13l0.04,0.32l0.1,0.85l0.0,0.03l0.19,0.99l-0.61,0.92l-0.75,0.46l-0.07,0.06l-0.88,0.89l-0.88,0.89l-0.54,0.46l-0.29,0.25l-0.04,0.04l-0.19,0.22l-0.43,0.5l-0.08,0.15l-0.4,1.38l0.14,0.43l0.44,0.34l0.28,0.08l0.85,-0.07l0.06,-0.01l0.57,-0.15l1.14,0.12l0.09,-0.0l1.37,-0.18l0.92,-0.02l0.28,-0.01l2.05,0.02l0.05,-0.0l1.32,-0.15l-0.0,-0.02l0.32,-0.2l0.08,0.05l0.32,0.03l1.24,-0.41l1.08,0.0l0.59,0.11l0.11,0.0l1.2,-0.13l0.52,0.16l0.24,-0.0l1.22,-0.4l0.11,-0.05l0.68,-0.48l0.87,-0.18l0.08,-0.03l0.92,-0.4l0.14,-0.1l0.75,-0.86l0.94,-0.69l1.32,-0.27l0.67,-0.13l0.51,-0.1l0.79,0.13l0.12,0.0l2.11,-0.33l0.72,-0.09l0.09,-0.02l0.63,-0.23l0.56,0.05l0.29,-0.08l0.59,-0.46l0.66,-0.21l0.07,-0.03l0.6,-0.31l0.72,-0.31l0.14,-0.1l0.64,-0.72l0.37,-0.36l0.36,-0.1l0.89,0.37l0.53,0.86l0.3,1.05l0.03,0.94l-0.08,0.96l0.0,0.07l0.12,1.22l0.02,0.1l0.32,0.84l0.28,0.25l1.29,0.32l0.21,-0.01l0.72,-0.21l0.38,-0.11l0.13,-0.06l1.06,-0.8l0.65,-0.34l1.18,-0.59l0.07,-0.04l0.45,-0.35l1.05,-0.21l1.94,0.03l1.84,0.6l0.46,1.04l0.0,0.0l0.79,1.72l0.02,0.03l0.28,0.5l0.43,0.82l0.27,1.25l0.04,0.4l0.02,0.08l0.23,0.69l0.02,0.07l0.22,0.78l0.06,0.12l0.73,1.04l0.53,0.12l0.47,-0.27l0.1,-0.08l0.48,-0.53l1.04,-0.56l0.12,-0.1l0.34,-0.41l1.04,-0.39l1.09,-0.02l0.59,0.63l0.24,0.12l0.67,0.08l0.17,-0.02l0.63,-0.2l0.02,-0.01l0.37,-0.13l0.12,-0.07l0.34,-0.28l1.07,-0.42l1.55,-0.15l0.85,0.3l0.28,-0.0l1.22,-0.47l0.93,0.02l-0.15,0.47l-0.01,0.03l-0.1,0.39l-0.22,0.87l-0.01,0.12l0.1,1.57l-0.26,0.58l-0.03,0.07l-0.2,0.85l-0.07,0.08l-0.1,0.3l0.04,0.61l-0.16,1.66l-0.55,1.7l-0.01,0.06l-0.22,1.34l-0.04,0.06l-0.4,0.64l-0.77,0.94l-0.85,0.54l-0.05,0.04l-1.05,0.92l-1.38,0.52l-0.06,0.03l-1.05,0.62l-0.07,0.05l-1.3,1.25l-0.01,0.01l-1.03,1.04l-1.11,0.83l-0.03,0.03l-0.9,0.84l-0.09,0.12l-0.37,0.8l-0.94,1.11l-0.04,0.06l-0.51,0.87l-1.02,1.59l-0.03,0.05l-0.41,0.9l-0.29,0.62l-0.04,0.21l0.09,0.93l0.04,1.28l-0.24,0.76l-0.01,0.18l0.06,0.39l0.1,0.63l0.04,0.13l0.45,0.86l0.12,0.14l0.68,0.49l1.29,1.02l0.18,0.08l0.9,0.15l0.06,0.01l0.45,0.01l1.07,0.3l0.02,0.0l0.81,0.19l0.06,0.01l1.02,0.07l0.0,0.0l0.84,0.05l0.51,0.18l0.14,0.02l0.54,-0.01l0.1,-0.01l0.61,-0.16l0.01,-0.02l0.14,0.0l0.25,0.09l0.19,0.02l0.43,-0.06l0.23,-0.11l0.43,-0.43l1.22,-0.81l0.08,-0.06l0.69,-0.75l0.06,-0.09l0.3,-0.62l0.01,-0.01l0.22,-0.51l0.66,-0.72l1.04,-0.52l0.1,-0.0l0.57,-0.02l0.61,0.74l0.2,0.56l-0.02,0.93l0.0,0.03l0.05,1.08l-0.01,1.38l-0.28,1.15l-0.01,0.14l0.24,2.3l0.03,0.12l0.35,0.81l0.39,1.09l-0.25,0.94l-0.01,0.04l-0.46,0.86l-1.24,0.2l-0.1,0.03l-0.45,0.21l-1.02,0.34l-0.21,0.16l-0.89,1.32l-1.17,0.72l-1.59,-0.06l-0.08,0.0l-1.2,0.19l-0.2,0.09l-0.91,0.78l-0.05,0.05l-0.69,0.86l0.15,0.62l1.19,0.52l0.22,0.03l1.76,-0.28l1.47,-0.02l1.65,0.76l1.37,0.81l0.01,0.0l0.7,0.39l0.2,1.02l-0.62,1.69l-0.1,0.06l-1.08,0.13l-1.71,-0.54l-0.14,-0.02l-1.66,0.07l-0.12,0.01l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.06,-0.06l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.01,-0.01l-0.03,-0.03l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,-0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.06,-0.06l-0.02,-0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.1,-0.1l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.29,-0.29l-0.06,0.0l-0.13,-0.13l-0.02,0.0l-0.15,0.15l-0.04,0.0l-0.06,-0.06l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.1,-0.1l-0.15,0.0l-0.03,0.03l-0.14,-0.14l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.04,0.04l-0.06,-0.06l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.02l-0.4,-0.4l-0.02,0.0l-0.06,0.06l-0.04,0.0l-0.19,0.19l-0.14,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.02,0.0l-0.25,-0.25l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.1,0.1l-0.06,0.0l-0.02,0.02l-0.19,0.0l-0.04,-0.04l-0.03,0.0l-0.02,-0.02l-0.04,-0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.03,0.0l0.0,-0.02l0.0,-0.1l-0.06,-0.47l0.03,-0.26l0.0,-0.02l0.02,-0.26l0.09,-0.19l0.15,-0.26l0.05,-0.19l0.01,-0.32l0.08,-0.37l0.01,-0.12l-0.03,-0.35l-0.0,-0.01l-0.06,-0.56l-0.05,-0.15l-0.34,-0.61l-0.25,-0.2l-0.22,-0.06l-0.37,-0.26l-0.16,-0.07l-0.35,-0.06l-0.1,-0.0l-0.42,0.04l-0.39,-0.05l-0.11,-0.0l-0.47,0.06l-0.04,0.01l-0.49,0.11l-0.0,0.0l-0.54,0.13l-0.06,-0.01l-0.24,-0.16l-0.02,-0.01l-0.27,-0.16l-0.18,-0.05l-0.49,-0.02l-0.28,-0.05l-0.62,-0.11l-0.05,-0.01l-0.35,-0.02l-0.16,-0.03l-0.28,0.04l-0.27,0.15l-0.03,0.01l-0.23,0.12l-0.04,0.03l-0.23,0.16l-0.22,0.13l-0.12,0.03l-0.07,-0.03l-0.07,-0.02l-0.41,-0.08l-0.04,-0.03l-0.02,-0.02l-0.54,-0.42l-0.6,-0.97l-0.3,-0.19l-0.3,-0.03l-0.23,-0.18l-0.21,-0.08l-0.26,-0.02l-0.49,-0.07l-0.33,-0.1l-0.04,-0.01l-0.52,-0.1l-0.19,-0.13l-0.14,-0.06l-0.53,-0.12l-0.2,-0.11l-0.23,-0.21l-0.13,-0.13l-0.02,-0.02l-0.14,-0.12l-0.01,-0.01l-0.21,-0.17l-0.01,-0.03l-0.01,-0.13l-0.02,-0.11l-0.13,-0.37l0.04,-0.21l0.09,-0.2l0.25,-0.36l0.13,-0.14l0.58,-0.32l0.21,-0.07l0.01,-0.0l0.54,-0.2l0.03,-0.01l0.31,-0.15l0.02,-0.01l0.15,-0.08l0.36,-0.18l0.02,-0.01l0.2,-0.11l0.36,-0.18l0.13,-0.04l0.05,-0.02l0.33,-0.15l0.05,-0.03l0.61,-0.39l0.09,-0.08l0.23,-0.27l0.05,-0.07l0.09,-0.17l0.13,-0.16l0.19,-0.16l0.14,-0.27l0.02,-0.24l-0.01,-0.12l-0.05,-0.21l-0.01,-0.09l-0.02,-0.08l-0.03,-0.08l-0.05,-0.15l-0.0,-0.03l0.02,-0.14l-0.06,-0.26l-0.22,-0.34l-0.09,-0.21l-0.06,-0.1l-0.09,-0.1l-0.09,-0.14l-0.03,-0.04l-0.04,-0.05l-0.11,-0.14l-0.06,-0.09l-0.02,-0.03l-0.25,-0.33l-0.06,-0.06l-0.16,-0.13l-0.04,-0.05l-0.18,-0.13l-0.15,-0.05l-0.1,-0.02l-0.22,-0.02l-0.06,-0.0l-0.28,0.01l-0.0,0.0l-0.48,0.03l-0.6,0.02l-0.01,0.0l-0.47,0.03l-0.06,0.01l-0.89,0.19l-0.03,0.01l-0.72,0.21l-0.34,0.08l-0.09,0.03l-0.46,0.23l-0.25,0.05l-0.08,0.03l-0.33,0.15l-0.14,0.1l-0.27,0.31l-0.35,0.24l-0.01,0.01l-0.08,0.06l-0.5,0.37l-0.04,0.04l-0.25,0.24l-0.02,0.02l-0.19,0.21l-0.68,0.39l-0.02,0.01l-0.18,0.12l-0.2,-0.0l-0.04,0.0l-0.07,0.01l-0.04,-0.03l-0.07,-0.13l-0.06,-0.16l-0.07,-0.13l-0.11,-0.14l-0.15,-0.19l-0.1,-0.09l-0.09,-0.05l-0.04,-0.02l-0.15,-0.07l-0.04,-0.02l-0.28,-0.09l-0.02,-0.0l-0.26,-0.07l-0.01,-0.0l-0.21,-0.06l-0.06,-0.01l-0.14,-0.02l-0.0,-0.01l0.0,-0.13l0.05,-0.21l0.03,-0.13l0.01,-0.15l-0.04,-0.39l-0.01,-0.22l-0.0,-0.0l-0.01,-0.21l-0.09,-0.22l-0.11,-0.14l-0.06,-0.17l-0.29,-0.25l-0.06,-0.01l-0.03,-0.13l-0.13,-0.17l-0.02,-0.16l-0.02,-0.1l-0.04,-0.11l0.06,-0.12l0.04,-0.19l-0.01,-0.19l0.06,-0.26l0.07,-0.24l0.14,-0.24l0.15,-0.17l0.22,-0.18l0.11,-0.14l0.13,-0.29l0.04,-0.01l0.12,-0.15l0.07,-0.05l0.44,-0.11l0.15,-0.03l0.18,-0.09l0.32,-0.27l0.04,-0.05l0.15,-0.18l0.17,-0.18l0.04,-0.05l0.11,-0.15l0.01,-0.02l0.16,-0.26l0.15,-0.24l0.22,-0.27l0.05,-0.07l0.14,-0.29l0.02,-0.31l-0.18,-0.52l-0.07,-0.12l-0.19,-0.23l-0.01,-0.01l-0.29,-0.33l-0.19,-0.12l-0.43,-0.13l-0.04,-0.01l-0.38,-0.08l-0.03,-0.0l-0.48,-0.06l-0.05,-0.0l-0.4,-0.0l-11.96,-0.12l-15.33,-0.15l-1.5,-0.01l-15.8,-0.15l-0.02,0.0l-0.35,0.01l-0.01,0.0l-0.23,-0.03l-0.14,0.04l-0.12,-0.0l-0.2,0.05l-0.52,0.29l-0.07,0.05l-0.3,0.26l-0.01,0.03l-0.04,0.03l-0.15,0.1l-0.04,0.03l-0.25,0.2l-0.06,0.06l-0.25,0.31l-0.08,0.16l-0.09,0.38l0.02,0.25l0.12,0.29l0.02,0.35l0.05,0.17l0.12,0.21l-0.13,0.01l-4.37,0.32l-0.11,-0.22l-0.12,-0.12l-0.18,-0.24l-0.05,-0.11l0.0,-0.05l-0.19,-0.35l-0.14,-0.09l-0.09,-0.24l-0.09,-0.14l-0.17,-0.18l-0.08,-0.07l-0.05,-0.03l-0.27,-0.16l-0.01,-0.0l-0.34,-0.19l-0.46,-0.29l-0.12,-0.09l-0.08,-0.05l-0.58,-0.27l-0.04,-0.02l-0.37,-0.13l-0.46,-0.17l-0.5,-0.3l-0.1,-0.04l-0.42,-0.12l-0.34,-0.15l-0.45,-0.23l-0.08,-0.03l-0.33,-0.08l-0.45,-0.2l-0.06,-0.02l-0.39,-0.11l-0.28,-0.09l-0.39,-0.13l-0.12,-0.02l-0.14,-0.0l-0.0,-0.0l-0.19,-0.0l-0.05,0.0l-0.4,0.05l-0.02,0.0l-0.22,0.03l-0.01,-0.02l-0.11,0.04l-0.06,0.01l-0.06,0.01l-0.05,0.02l0.01,0.02l-0.22,0.09l-0.05,0.1l-0.0,0.0l-0.11,0.2l-0.14,0.27l-0.17,0.32l-0.14,0.23l-0.21,0.36l-0.01,0.03l-0.21,0.42l-0.17,0.31l-0.23,0.39l-0.02,0.03l-0.18,0.38l-0.04,0.21l0.07,0.68l-0.07,0.28l0.0,0.21l0.05,0.16l0.05,0.23l-0.01,0.18l-0.05,0.25l-0.0,0.02l-0.04,0.24l-0.0,0.03l-0.02,0.21l-0.05,0.2l-0.03,0.06l-0.06,0.07l-0.02,0.02l-0.06,0.08l-0.22,0.17l-0.01,0.0l-0.21,0.17l-0.07,0.07l-0.16,0.21l-0.24,0.14l-0.24,0.13l-0.01,0.01l-0.23,0.13l-0.01,0.01l-0.26,0.17l-0.0,0.0l-0.28,0.19l-0.06,0.05l-0.05,0.05l-0.13,0.08l-0.17,0.19l-0.09,0.21l-0.01,0.02l-0.07,0.19l-0.02,0.1l-0.02,0.17l-0.06,0.23l-0.02,0.1l-0.0,0.23l-0.04,0.16l-0.0,0.02l-0.04,0.17l-0.01,0.06l-0.02,0.32l-0.03,0.16l-0.01,0.07l-0.0,0.17l0.0,0.03l0.01,0.23l-0.04,0.33l0.01,0.12l0.02,0.12l-0.11,0.23l-0.03,0.08l-0.11,0.44l-0.01,0.02l-0.01,0.03l-0.03,0.22l-0.11,0.33l-0.08,0.23l-0.13,0.25l-0.17,0.15l-0.26,0.17l-0.01,0.01l-0.27,0.19l-0.01,-0.01l-0.07,0.05l-0.05,0.05l-0.07,0.07l-0.24,0.02l-0.28,0.11l-0.24,0.07l-0.33,0.02l-0.32,0.01l-0.04,0.0l-0.3,0.04l-0.44,-0.01l-0.36,-0.07l-0.0,-0.0l-0.41,-0.08l-0.03,-0.0l-0.43,-0.04l-0.25,0.06l-0.09,0.06l-0.08,-0.0l-0.28,-0.08l-0.27,-0.1l-0.13,-0.03l-0.48,-0.01l-0.07,0.0l-0.27,0.04l-0.34,-0.02l-0.04,-0.0l-0.26,0.01l-0.16,-0.05l-0.21,-0.01l-0.35,0.07l-0.57,0.02l-0.0,0.0l-0.26,0.01l-0.19,-0.0l-0.14,0.02l-0.27,0.09l-0.42,0.01l-0.05,0.0l-0.21,0.03l-0.29,0.01l-0.31,-0.02l-0.14,0.02l-0.2,0.06l-0.52,-0.07l-0.02,-0.0l-0.31,-0.02l-0.05,-0.0l-0.49,0.03l-0.55,-0.01l-0.51,-0.03l-0.01,-0.0l-0.36,-0.01l-0.28,-0.05l-0.15,0.0l-0.43,0.09l-0.01,0.0l-0.3,0.03l-0.29,-0.02l-0.46,-0.18l-0.14,-0.03l-0.41,-0.01l-0.5,-0.01l-0.09,0.02l-0.04,-0.01l-0.33,0.06l-0.09,0.03l-0.23,0.1l-0.0,0.0l-0.21,0.1l-0.13,-0.0l-0.36,-0.14l-0.09,-0.02l-0.31,-0.04l-0.25,-0.05l-0.37,-0.13l-0.15,-0.02l-0.38,0.01l-0.33,-0.02l-0.31,-0.07l-0.08,-0.01l-0.13,-0.0l-0.3,-0.02l-0.1,0.0l-0.19,0.03l-0.24,-0.07l-0.03,-0.01l-0.38,-0.08l-0.15,-0.0l-0.26,0.05l-0.06,0.01l-0.24,0.08l-0.26,0.29l-0.06,0.24l0.01,0.21l0.08,0.24l0.03,0.14l0.05,0.28l-0.02,0.17l-0.0,0.03l-0.0,0.27l-0.06,0.24l-0.12,0.09l-0.04,0.03l-0.13,0.13l-0.16,0.08l-0.3,0.13l-0.02,0.01l-0.21,0.1l-0.02,0.01l-0.24,0.13l-0.06,0.04l-0.4,0.33l-0.17,0.08l-0.08,0.05l-0.1,0.08l-0.15,0.11l-0.32,0.24l-0.03,0.02l-0.21,0.19l-0.17,0.12l-0.08,0.07l-0.26,0.31l-0.12,0.13l-0.19,0.1l-0.24,0.13l-0.11,0.06l-0.12,-0.03l-0.14,-0.09l-0.14,-0.06l-0.0,-0.0l-0.32,-0.22l-0.24,-0.02l-0.21,-0.09l-0.27,-0.16l-0.35,-0.24l-0.05,-0.03l-0.22,-0.11l-0.17,-0.04l-0.31,-0.01l-0.09,-0.02l-0.26,0.02l-0.12,0.05l-0.04,0.02l-0.4,-0.04l-0.08,-0.0l-0.17,0.01l-0.04,0.01l-0.24,0.05l-0.05,0.01l-0.2,0.07l-0.52,0.04l-0.02,0.0l-0.23,0.03l-0.03,0.01l-0.5,0.11l-0.01,0.0l-0.15,0.04l-0.22,0.01l-0.11,0.02l-0.23,0.08l-0.06,0.01l-0.16,-0.03l-0.09,-0.05l-0.02,-0.01l-0.33,-0.14l-0.02,-0.01l-0.19,-0.07l-0.12,-0.03l-0.17,-0.01l0.06,-0.38l0.0,-0.04l0.02,-0.39l0.02,-0.51l0.04,-0.93l0.31,-1.31l0.28,-0.49l0.96,-0.78l0.09,-0.1l0.57,-0.9l0.06,-0.14l0.19,-0.99l-0.05,-0.29l-0.61,-0.97l-0.13,-0.38l-0.49,-1.42l-0.3,-1.48l1.47,-2.45l0.56,-0.57l0.65,-0.4l0.06,-0.04l1.12,-1.01l0.13,-0.11l0.13,-0.31l-0.04,-2.09l0.27,-1.13l0.01,-0.1l-0.02,-0.69l-0.04,-0.17l-0.12,-0.24l-0.12,-0.25l-0.15,-0.16l-0.57,-0.35l-0.25,-0.06l-0.87,0.08l-0.27,0.03l-0.53,-0.06l-0.17,-0.02l-0.49,-0.31l-0.1,-0.04l-0.21,-0.07l-0.41,-0.86l-0.08,-0.28l-0.14,-0.48l-0.09,-0.76l0.1,-0.39l1.42,-2.26l0.01,-0.41l-0.3,-0.51l-0.03,-0.35l-0.02,-0.21l0.14,-0.58l0.35,-1.5l0.01,-0.08l0.03,-0.73l0.03,-0.91l0.02,-0.42l-0.01,-0.1l-0.27,-1.19l-0.35,-0.31l-1.47,-0.15l-0.32,-0.2l-0.07,-0.21l0.17,-3.28l0.43,-0.57l0.13,-0.17l1.01,-1.04l0.67,-0.48l0.99,-0.52l0.07,-0.05l0.57,-0.48l0.7,-0.2l0.11,-0.05l0.54,-0.36l0.08,-0.59l-0.81,-0.94l-0.06,-0.05l-1.1,-0.87l-0.12,-0.06l-0.22,-0.07l-0.24,-0.25l-0.41,-0.43l-0.51,-1.02l0.0,-0.25l0.29,-0.35l1.2,-0.81l0.1,-0.1l0.61,-0.85l0.06,-0.12l0.71,-2.33l0.02,-0.14l-0.08,-1.43l-0.02,-0.32l-0.01,-0.05l-0.19,-1.08l-0.5,-2.84l-0.09,-0.19l-0.91,-1.04l-0.12,-0.09l-0.35,-0.18l-0.34,-0.37l-0.04,-0.14l-0.01,-0.45l-0.0,-0.21l-0.0,-0.27l-0.03,-1.43l-0.0,-0.03l0.09,-1.28l0.0,-0.05l-0.2,-4.13l0.01,-3.46l0.3,0.01l0.15,-0.02l0.36,-0.13l1.65,0.04l0.18,-0.04l0.74,-0.34l0.1,-0.07l0.26,-0.24l0.13,-0.28l0.0,-0.01l0.04,-0.85l0.0,-0.03l-0.11,-3.36l-0.03,-0.15l-0.39,-0.9l-0.16,-0.18l-0.32,-0.2l-0.14,-0.09l-0.77,-0.86l-0.08,-0.07l-0.95,-0.6l-0.0,-0.0l-0.04,-0.02l-0.04,-0.02l-0.03,-0.01l-0.06,-0.02l-0.09,-0.03l-0.32,-0.1l-0.25,-0.3l-0.22,-0.79l0.0,-0.02l0.09,-0.39l0.0,-0.16l-0.12,-0.66l-0.12,-0.22l-0.68,-0.65l-0.08,-0.2l-0.06,-0.14l-0.05,-0.12l-0.21,-0.52l-0.09,-1.22l-0.07,-0.94l0.07,-0.94l-0.0,-0.09l-0.26,-1.84l0.06,-0.65l0.31,-3.16l0.0,-0.06l-0.09,-1.79l-0.08,-1.62l0.33,-2.02l0.0,-0.12l-0.22,-1.51l-0.01,-0.06l-0.36,-1.16l-0.14,-0.2l-0.33,-0.24l-0.14,-0.07l-0.5,-0.13l-0.04,-0.08l-0.21,-1.12l-0.03,-0.1l-0.17,-0.36l-0.62,-1.31l-0.05,-0.07l-1.74,-2.24Z", "name": "Ogun"}, "2040": {"path": "M3.46,568.73l-0.0,-0.11l-0.06,-1.76l-0.01,-0.28l-0.0,-0.04l-0.14,-1.16l0.32,-1.94l0.43,-1.15l0.22,0.01l0.12,0.05l0.31,0.14l0.13,0.07l0.1,0.04l0.28,0.06l0.11,0.01l0.17,-0.01l0.1,-0.02l0.22,-0.08l0.2,-0.01l0.08,-0.01l0.19,-0.05l0.48,-0.11l0.2,-0.03l0.56,-0.04l0.1,-0.02l0.22,-0.07l0.2,-0.04l0.11,-0.01l0.51,0.06l0.29,-0.08l0.01,-0.01l0.08,0.01l0.28,0.0l0.12,0.06l0.33,0.23l0.03,0.02l0.31,0.18l0.04,0.02l0.29,0.13l0.13,0.03l0.11,0.01l0.24,0.18l0.11,0.02l0.12,0.08l0.11,0.05l0.26,0.07l0.15,0.01l0.14,-0.01l0.14,-0.04l0.19,-0.1l0.01,-0.0l0.24,-0.13l0.24,-0.13l0.1,-0.08l0.18,-0.19l0.02,-0.02l0.23,-0.28l0.15,-0.1l0.04,-0.03l0.22,-0.19l0.3,-0.23l0.16,-0.12l0.01,-0.01l0.07,-0.06l0.17,-0.08l0.08,-0.05l0.41,-0.33l0.2,-0.11l0.19,-0.09l0.31,-0.13l0.03,-0.01l0.23,-0.12l0.09,-0.07l0.16,-0.15l0.23,-0.17l0.15,-0.25l0.02,-0.09l0.07,-0.3l0.01,-0.09l0.0,-0.3l0.02,-0.21l-0.01,-0.11l-0.06,-0.34l-0.03,-0.17l-0.01,-0.05l-0.03,-0.09l0.12,-0.02l0.29,0.06l0.31,0.09l0.18,0.01l0.23,-0.04l0.26,0.02l0.02,0.0l0.1,0.0l0.31,0.07l0.06,0.01l0.38,0.02l0.04,0.0l0.32,-0.01l0.32,0.12l0.06,0.02l0.29,0.06l0.03,0.0l0.28,0.03l0.38,0.15l0.14,0.03l0.29,0.01l0.17,-0.04l0.29,-0.13l0.18,-0.08l0.25,-0.05l-0.0,0.0l0.5,0.01l0.34,0.01l0.45,0.17l0.12,0.03l0.38,0.02l0.06,-0.0l0.33,-0.03l-0.0,-0.0l0.06,-0.01l0.39,-0.08l0.23,0.04l0.07,0.01l0.39,0.01l0.51,0.03l0.01,0.0l0.57,0.01l0.03,-0.0l0.48,-0.02l0.27,0.02l0.59,0.08l0.17,-0.01l0.21,-0.06l0.26,0.02l0.04,0.0l0.33,-0.01l0.04,-0.0l0.2,-0.03l0.46,-0.01l0.12,-0.02l0.26,-0.09l0.14,0.0l0.02,-0.0l0.28,-0.01l0.6,-0.02l0.07,-0.01l0.28,-0.06l0.09,0.03l0.03,0.01l0.14,0.02l0.31,-0.01l0.36,0.02l0.08,-0.0l0.28,-0.04l0.38,0.01l0.23,0.09l0.04,0.01l0.34,0.09l0.1,0.01l0.22,0.0l0.0,0.0l0.02,0.0l0.21,-0.06l0.08,-0.05l0.28,0.03l0.4,0.07l0.4,0.08l0.07,0.01l0.5,0.01l0.06,-0.0l0.31,-0.04l0.31,-0.01l0.02,-0.0l0.38,-0.03l0.08,-0.01l0.3,-0.08l0.04,-0.01l0.18,-0.07l0.1,0.02l0.39,-0.11l0.2,-0.21l0.03,-0.02l0.01,0.01l0.27,-0.2l0.27,-0.18l0.05,-0.04l0.26,-0.24l0.06,-0.14l0.02,0.01l0.16,-0.31l0.02,-0.05l0.09,-0.26l0.13,-0.36l0.02,-0.07l0.04,-0.24l0.0,-0.01l0.1,-0.4l0.14,-0.31l0.03,-0.25l-0.04,-0.18l0.03,-0.3l0.0,-0.06l-0.01,-0.25l0.0,-0.12l0.03,-0.15l0.01,-0.05l0.02,-0.32l0.03,-0.13l0.05,-0.2l0.01,-0.1l0.0,-0.23l0.06,-0.21l0.01,-0.07l0.02,-0.15l0.05,-0.13l0.03,-0.08l0.06,-0.04l0.08,-0.06l0.06,-0.06l0.25,-0.16l0.25,-0.16l0.22,-0.13l0.24,-0.13l0.01,-0.01l0.31,-0.19l0.11,-0.1l0.18,-0.24l0.17,-0.14l0.26,-0.2l0.08,-0.08l0.08,-0.11l0.08,-0.09l0.05,-0.08l0.07,-0.14l0.03,-0.08l0.07,-0.28l0.01,-0.07l0.02,-0.23l0.04,-0.22l0.05,-0.27l0.01,-0.05l0.02,-0.26l-0.01,-0.12l-0.06,-0.3l-0.01,-0.02l-0.02,-0.07l0.06,-0.24l0.01,-0.14l-0.06,-0.64l0.12,-0.26l0.22,-0.38l0.01,-0.01l0.18,-0.33l0.01,-0.01l0.21,-0.42l0.21,-0.35l0.14,-0.24l0.01,-0.01l0.18,-0.33l0.0,-0.01l0.14,-0.28l0.03,-0.05l0.27,-0.04l0.36,-0.04l0.16,0.0l0.08,0.0l0.34,0.11l0.0,0.0l0.29,0.09l0.01,0.0l0.37,0.1l0.45,0.2l0.06,0.02l0.32,0.08l0.42,0.21l0.02,0.01l0.38,0.16l0.05,0.02l0.4,0.11l0.49,0.29l0.07,0.03l0.5,0.18l0.01,0.0l0.36,0.12l0.52,0.24l0.1,0.08l0.03,0.02l0.48,0.3l0.01,0.01l0.34,0.19l0.27,0.16l0.0,0.0l0.01,0.0l0.07,0.08l0.1,0.29l0.16,0.2l0.09,0.05l0.01,0.07l0.1,0.23l0.04,0.08l0.22,0.3l0.03,0.04l0.05,0.05l0.0,0.02l0.05,0.19l0.29,0.29l0.01,0.0l0.06,0.02l0.02,-0.09l0.23,0.16l0.06,-0.03l4.48,-0.33l0.41,-0.03l0.11,-0.02l0.25,-0.09l0.2,-0.07l0.09,-0.71l-0.21,-0.14l-0.14,-0.26l-0.02,-0.33l-0.03,-0.13l-0.1,-0.23l0.04,-0.16l0.17,-0.21l0.2,-0.16l0.14,-0.09l0.01,-0.01l0.12,-0.08l0.01,-0.04l0.25,-0.21l0.39,-0.22l0.07,0.0l0.11,-0.01l0.01,-0.0l0.07,0.04l0.21,-0.04l0.31,-0.01l15.79,0.15l1.5,0.01l15.33,0.15l11.96,0.12l0.38,0.0l0.45,0.06l0.35,0.07l0.3,0.09l0.21,0.24l0.14,0.17l0.1,0.3l-0.05,0.1l-0.2,0.26l-0.03,0.04l-0.16,0.26l-0.15,0.25l-0.08,0.12l-0.16,0.17l-0.01,0.02l-0.14,0.16l-0.21,0.18l-0.05,0.01l-0.02,0.0l-0.52,0.13l-0.13,0.06l-0.17,0.12l-0.08,0.07l-0.09,0.11l-0.07,0.05l-0.13,0.16l-0.12,0.28l-0.17,0.14l-0.05,0.04l-0.19,0.22l-0.05,0.06l-0.18,0.31l-0.04,0.08l-0.09,0.29l-0.01,0.03l-0.07,0.33l-0.01,0.11l0.01,0.15l-0.08,0.19l-0.01,0.31l0.08,0.21l0.02,0.26l0.16,0.25l0.04,0.15l0.14,0.22l0.15,0.12l0.12,0.06l0.01,0.03l0.06,0.11l0.08,0.1l0.01,0.08l0.01,0.22l0.0,0.02l0.04,0.32l-0.02,0.07l-0.0,0.02l-0.06,0.26l-0.01,0.08l-0.0,0.19l0.0,0.03l0.01,0.21l0.04,0.15l0.07,0.14l0.29,0.22l0.22,0.04l0.02,0.0l0.16,0.02l0.17,0.05l0.25,0.07l0.25,0.08l0.11,0.05l0.01,0.0l0.11,0.14l0.01,0.01l0.07,0.08l0.04,0.12l0.03,0.06l0.13,0.25l0.12,0.14l0.05,0.03l0.11,0.08l0.12,0.06l0.12,0.04l0.15,0.02l0.13,-0.01l0.31,0.01l0.23,-0.07l0.27,-0.18l0.72,-0.42l0.1,-0.08l0.22,-0.25l0.22,-0.21l0.49,-0.36l0.01,-0.01l0.08,-0.06l0.38,-0.27l0.07,-0.06l0.24,-0.28l0.21,-0.1l0.25,-0.06l0.09,-0.03l0.46,-0.23l0.3,-0.07l0.02,-0.01l0.72,-0.21l0.84,-0.18l0.43,-0.02l0.6,-0.02l0.01,-0.0l0.48,-0.03l0.25,-0.01l0.15,0.01l0.05,0.05l0.15,0.13l0.22,0.29l0.06,0.09l0.03,0.03l0.13,0.16l0.0,0.0l0.03,0.03l0.09,0.14l0.03,0.04l0.06,0.08l0.08,0.19l0.03,0.06l0.16,0.25l-0.01,0.05l0.0,0.09l0.02,0.12l0.02,0.08l0.07,0.19l0.0,0.01l0.02,0.05l0.01,0.06l0.0,0.02l0.04,0.17l-0.0,0.02l-0.1,0.08l-0.06,0.06l-0.18,0.22l-0.04,0.06l-0.09,0.17l-0.16,0.19l-0.54,0.34l-0.28,0.13l-0.13,0.04l-0.06,0.02l-0.4,0.2l-0.02,0.01l-0.2,0.11l-0.36,0.18l-0.01,0.0l-0.15,0.08l-0.29,0.14l-0.52,0.19l-0.24,0.08l-0.07,0.03l-0.66,0.37l-0.1,0.07l-0.19,0.21l-0.04,0.05l-0.28,0.41l-0.03,0.06l-0.13,0.28l-0.03,0.08l-0.08,0.36l0.01,0.21l0.15,0.42l0.01,0.15l0.04,0.15l0.08,0.17l0.1,0.13l0.27,0.23l0.12,0.11l0.13,0.13l0.02,0.02l0.27,0.25l0.08,0.05l0.29,0.16l0.11,0.04l0.51,0.11l0.19,0.13l0.15,0.06l0.58,0.11l0.34,0.1l0.06,0.01l0.53,0.08l0.03,0.0l0.16,0.01l0.23,0.18l0.2,0.08l0.22,0.02l0.54,0.87l0.1,0.11l0.59,0.45l0.11,0.1l0.19,0.09l0.48,0.09l0.15,0.06l0.25,0.01l0.3,-0.08l0.1,-0.04l0.28,-0.17l0.02,-0.01l0.22,-0.15l0.2,-0.1l0.03,-0.01l0.17,-0.09l0.04,0.01l0.05,0.01l0.36,0.02l0.6,0.11l0.31,0.06l0.05,0.01l0.42,0.02l0.18,0.11l0.32,0.21l0.18,0.06l0.22,0.02l0.13,-0.01l0.61,-0.15l0.47,-0.11l0.4,-0.05l0.38,0.05l0.09,0.0l0.42,-0.04l0.2,0.03l0.35,0.25l0.13,0.06l0.12,0.03l0.21,0.39l0.05,0.47l0.02,0.28l-0.08,0.35l-0.01,0.08l-0.0,0.26l-0.11,0.18l-0.02,0.04l-0.13,0.28l-0.04,0.14l-0.02,0.32l-0.04,0.3l-0.0,0.1l0.05,0.4l-0.08,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.15,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.17,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.21,0.0l-0.02,-0.02l-0.29,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.08,0.0l-0.04,0.04l-0.04,0.0l-0.02,-0.02l-0.23,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.19,0.0l-0.04,-0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.04,-0.04l-0.1,0.0l-0.02,0.02l-0.17,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.01,0.01l-0.01,-0.01l-0.44,0.0l-0.02,0.02l-0.19,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.13,0.0l-0.02,-0.02l-0.16,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.21,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.23,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.31,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.29,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.21,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.08,0.0l-0.04,-0.04l-0.12,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.31,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.12,0.0l-0.38,-0.38l-0.02,0.0l-0.25,0.25l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.2,0.0l-0.02,-0.02l-0.05,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.21,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.03,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.21,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.29,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.21,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.17,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.19,0.0l-0.04,-0.04l-0.17,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.31,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.21,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.21,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.17,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.21,0.0l-0.02,0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,-0.02l-0.08,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.01,0.01l-0.03,-0.03l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.17,0.0l-0.02,-0.02l-0.21,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.25,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.21,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.27,0.0l-0.02,0.02l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.15,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.4,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.31,0.0l-0.01,0.01l-0.01,-0.01l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.17,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.23,0.0l-0.02,-0.02l-0.23,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.17,0.0l-0.04,-0.04l-0.08,0.0l-0.02,0.02l-0.42,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.15,0.0l-0.01,0.01l-0.01,-0.01l-0.1,0.0l-0.02,0.02l-0.19,0.0l-0.04,0.04l-0.15,0.0l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.12,0.0l-0.02,-0.02l-0.1,0.0l-0.06,0.06l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.15,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.15,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.1,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.21,0.0l-0.03,0.03l-0.01,-0.01l-0.08,0.0l-0.02,0.02l-0.23,0.0l-0.02,0.02l-0.15,0.0l-0.04,0.04l-0.15,0.0l-0.02,0.02l-0.1,0.0l-0.01,0.01l-0.01,-0.01l-0.21,0.0l-0.06,0.06l-0.19,0.0l-0.0,0.0l-0.02,-0.02l-0.1,0.0l-0.04,0.04l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.21,0.0l-0.02,0.02l-0.25,0.0l-0.02,0.02l-0.19,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.46,0.0l-0.02,0.02l-0.08,0.0l-0.03,0.03l-0.01,-0.01l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.03,0.03l-0.03,-0.03l-0.23,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.21,0.0l-0.02,0.02l-0.12,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.23,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.17,0.0l-0.02,0.02l-0.04,-0.04l-0.15,0.0l-0.01,0.01l-0.01,-0.01l-0.12,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.04,0.04l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.06,0.06l-0.02,0.0l-0.02,-0.02l-0.35,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.27,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.17,0.0l-0.04,0.04l-0.29,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.17,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.21,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,-0.02l-0.58,0.0l-0.02,0.02l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.42,0.0l-0.02,0.02l-0.19,0.0l-0.02,0.02l-0.42,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.17,0.0l-0.02,0.02l-0.25,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.48,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.46,0.0l-0.04,0.04l-0.15,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.23,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.03,0.03l-0.01,-0.01l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.04,-0.04l-0.08,0.0l-0.02,0.02l-0.29,0.0l-0.04,0.04l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.08,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.19,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.17,0.0l-0.01,0.01l-0.01,-0.01l-0.08,0.0l-0.02,0.02l-0.17,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.48,0.0l-0.02,0.02l-0.44,0.0l-0.02,0.02l-0.73,0.0l-0.02,-0.02l-2.04,0.0l-0.02,-0.02l-0.65,0.0l-0.02,-0.02l-0.48,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.31,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.1,0.1l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.08,0.08l-0.04,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.19,0.0l-0.02,0.02l-0.06,0.0l-0.06,-0.06l-0.15,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.19,0.0l-0.02,0.02l-0.04,0.0l-0.06,-0.06l-0.15,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.12,0.0l-0.04,0.04l-0.04,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.19,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,-0.04l-0.1,0.0l-0.02,0.02l-0.17,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.06,-0.06l-0.12,0.0l-0.04,0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,0.04l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.04,0.04l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.04,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.23,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.15,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.13,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.12,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.17,0.0l-0.04,-0.04l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.21,0.0l-0.02,-0.02l-0.17,0.0l-0.02,0.02l-0.23,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.35,0.0l-0.02,0.02l-0.33,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.4,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.15,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.23,0.0l-0.02,0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.12,0.0l-0.02,-0.02l-0.21,0.0l-0.02,0.02l-0.15,0.0l-0.02,-0.02l-0.08,0.0l-0.01,0.01l-0.01,-0.01l-0.17,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.33,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.15,0.0l-0.01,0.01l-0.01,-0.01l-0.12,0.0l-0.02,0.02l-0.25,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.23,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.17,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.19,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.37,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.33,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.33,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.4,0.0l-0.02,0.02l-0.29,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.19,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.12,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.23,0.0l-0.02,0.02l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.37,0.0l-0.02,0.02l-0.52,0.0l-0.04,0.04l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.44,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.19,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.52,0.0l-0.01,0.01l-0.01,-0.01l-0.15,0.0l-0.02,0.02l-0.31,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.12,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.27,0.0l-0.02,0.02l-0.48,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.48,0.0l-0.02,0.02l-0.27,0.0l-0.02,0.02l-0.02,-0.02l-0.31,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.42,0.0l-0.02,0.02l-0.87,0.0l-0.02,0.02l-0.1,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.35,0.0l-0.02,0.02l-0.44,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.25,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.21,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.15,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.01,0.01l-0.01,-0.01l-0.19,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.21,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.33,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.19,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.21,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.25,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.44,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.54,0.0l-0.02,0.02l-0.23,0.0l-0.02,0.02l-0.02,0.0l-0.04,-0.04l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.17,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.33,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.29,0.0l-0.02,-0.02l-0.21,0.0l-0.02,0.02l-0.1,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.37,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.25,0.0l-0.02,0.02l-0.23,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.17,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.15,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.29,0.0l-0.02,0.02l-0.23,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.04,0.0l-0.06,-0.06l-0.04,0.0l-0.02,0.02l-0.19,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.17,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.29,0.0l-0.02,0.02l-0.29,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.23,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.25,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.17,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.12,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.06,0.06l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.04,0.04l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.21,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.17,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.19,0.0l-0.02,0.02l-0.0,0.0l-0.04,0.04l-0.21,0.0l-0.02,0.02l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.12,0.0l-0.04,0.04l-0.08,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.29,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.21,0.0l-0.02,0.02l-0.19,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0Z", "name": "Lagos"}, "2041": {"path": "M323.03,426.81l-0.2,-0.7l-0.11,-0.18l-0.56,-0.51l-0.03,-0.03l-0.52,-0.38l-0.46,-0.7l-0.1,-0.56l-0.05,-0.13l-0.28,-0.49l-0.0,-0.81l0.6,-0.9l0.0,-0.01l0.57,-0.88l0.03,-0.05l0.63,-1.35l0.03,-0.09l0.3,-1.55l0.36,-1.37l0.12,-0.01l0.0,-0.0l1.79,-0.2l0.13,-0.04l0.99,-0.49l1.02,-0.06l2.05,-0.07l0.08,-0.01l2.04,-0.52l1.57,-0.2l0.02,-0.0l1.42,-0.24l1.97,-0.26l0.07,-0.02l1.65,-0.55l0.07,-0.03l0.68,-0.38l1.12,-0.5l0.94,-0.25l1.55,-0.28l0.01,-0.0l1.84,-0.39l0.03,-0.01l1.22,-0.36l0.16,-0.09l0.52,-0.48l0.95,-0.36l0.05,-0.02l1.1,-0.57l0.01,-0.01l1.1,-0.63l0.0,-0.0l0.91,-0.52l0.03,-0.02l0.99,-0.69l1.18,-0.31l0.08,-0.03l1.41,-0.72l0.06,-0.04l0.81,-0.63l0.1,-0.12l0.42,-0.74l0.8,-1.12l0.0,-0.0l0.67,-0.96l0.65,-0.9l1.16,-1.16l0.06,-0.08l0.7,-1.23l0.02,-0.01l0.51,-0.72l0.06,-0.12l0.08,-0.28l0.32,-1.07l0.0,-0.01l0.36,-1.36l0.37,-0.89l0.01,-0.02l0.11,-0.31l0.8,-0.37l0.23,-0.32l0.17,-1.68l0.27,-0.44l0.04,-0.09l0.22,-0.73l0.01,-0.04l0.26,-1.28l0.0,-0.02l0.14,-0.92l0.0,-0.04l0.05,-0.85l0.15,-1.0l0.12,-0.62l0.23,-0.62l0.06,-0.16l0.03,-0.12l0.06,-0.96l0.11,-0.17l0.03,-0.05l0.18,-0.43l0.35,-0.48l0.07,-0.15l0.25,-1.11l0.33,-0.51l0.06,-0.14l0.15,-0.75l0.0,-0.01l0.11,-0.63l0.35,-1.01l0.41,-0.92l0.03,-0.11l0.22,-1.83l-0.0,-0.1l-0.17,-1.39l0.1,-0.31l0.29,-0.87l0.02,-0.14l-0.05,-2.12l-0.01,-0.05l0.02,-0.07l0.01,-0.06l0.02,-0.16l0.08,-0.06l0.09,-0.26l0.02,-0.11l0.04,-1.0l-0.01,-0.12l-0.17,-0.65l-0.07,-0.27l-0.08,-0.3l-0.13,-0.62l-0.16,-0.75l0.0,-0.14l0.05,-1.52l-0.0,-0.05l-0.09,-0.85l-0.02,-0.15l-0.04,-0.38l0.09,-0.59l0.12,-0.73l0.06,-0.38l0.0,-0.08l-0.03,-0.64l-0.04,-0.72l-0.02,-0.49l0.41,-1.43l0.49,-1.13l0.02,-0.07l0.08,-0.33l0.3,-1.34l0.63,-1.67l0.01,-0.02l0.4,-1.21l0.18,-0.56l0.47,-0.55l0.24,-0.02l0.84,-0.06l0.3,-0.17l0.09,-0.13l0.43,-0.63l0.06,-0.15l0.28,-1.47l-0.01,-0.2l-0.04,-0.12l-0.1,-0.3l-0.04,-0.75l0.01,-0.01l0.27,-0.19l0.23,-0.16l0.03,-0.02l0.38,-0.31l0.0,-0.0l0.11,-0.09l0.34,-0.26l0.08,-0.01l0.03,-0.0l0.4,0.11l0.22,0.27l0.13,0.37l0.07,0.49l0.02,0.34l0.01,0.13l0.01,0.08l0.1,0.37l0.04,0.1l0.2,0.35l0.02,0.03l0.14,0.19l0.1,0.1l0.08,0.06l0.1,0.07l0.12,0.11l0.16,0.15l0.21,0.1l0.32,0.05l0.06,0.0l0.19,-0.0l0.16,-0.04l0.23,-0.11l0.31,-0.14l0.02,-0.01l0.38,-0.2l0.08,-0.06l0.24,-0.21l0.15,0.02l0.24,0.03l0.47,0.07l0.07,0.04l0.41,0.23l0.11,0.08l0.26,0.19l0.07,0.26l0.09,0.16l0.03,0.04l0.0,0.0l0.27,0.3l0.16,0.11l0.5,0.19l0.15,0.05l0.09,0.08l0.08,0.1l0.01,0.02l0.15,0.11l0.48,0.2l0.19,0.03l0.7,-0.06l0.11,-0.03l0.4,-0.16l0.06,-0.01l0.29,-0.04l0.03,0.01l0.16,0.03l0.27,0.15l0.22,0.12l0.43,0.42l0.09,0.06l0.56,0.32l0.07,0.04l0.11,0.07l0.16,0.06l0.29,0.05l0.22,0.03l0.1,0.0l0.56,-0.06l0.25,-0.03l0.07,-0.01l0.38,-0.11l0.13,-0.06l0.42,-0.32l0.03,-0.02l0.39,-0.35l0.6,-0.53l0.11,-0.15l0.19,-0.47l0.04,-0.1l0.17,-0.13l0.49,-0.37l0.15,-0.26l0.07,-0.53l0.02,-0.17l0.12,-0.24l0.23,-0.45l0.02,-0.04l0.22,-0.62l0.07,-0.2l0.16,-0.31l0.15,-0.31l0.6,-0.49l0.14,-0.27l0.02,-0.25l0.03,-0.29l0.14,-0.13l0.45,-0.4l0.04,-0.04l0.49,-0.6l0.04,-0.05l0.3,-0.24l0.17,-0.05l0.43,-0.01l0.06,0.01l0.29,0.06l0.28,0.06l0.5,0.26l0.14,0.14l0.1,0.1l0.02,0.02l0.51,0.47l0.48,0.5l0.3,0.54l0.12,0.13l0.27,0.2l0.24,0.18l0.59,0.44l0.02,0.01l0.16,0.11l0.51,0.33l0.34,0.89l0.0,0.1l0.01,0.44l-0.06,0.93l-0.05,0.46l-0.02,0.2l0.0,0.1l0.02,0.11l0.0,0.0l0.08,0.51l0.1,0.21l0.52,0.57l0.15,0.1l0.51,0.19l0.35,0.13l0.01,0.0l0.88,0.3l0.01,0.0l0.47,0.15l0.28,0.09l0.1,0.08l0.4,0.37l0.2,0.18l0.01,0.01l0.2,0.17l0.5,0.42l0.1,0.06l0.45,0.2l0.67,0.82l0.24,0.5l0.2,0.42l0.1,0.76l0.07,0.52l0.03,0.57l0.04,0.86l0.03,0.71l-0.07,1.51l-0.09,1.83l-0.18,1.4l-0.0,0.06l0.02,1.2l-0.09,1.24l-0.0,0.06l0.06,0.96l0.02,0.09l0.1,0.34l0.08,0.33l0.01,0.1l0.23,0.3l0.03,0.45l0.1,0.23l0.23,0.26l0.0,0.0l0.32,0.36l0.26,0.29l0.16,0.11l0.44,0.17l0.06,0.02l0.38,0.08l0.08,0.01l0.58,0.0l0.1,-0.01l0.01,-0.0l0.28,-0.07l0.03,-0.01l0.53,-0.18l0.1,-0.05l0.41,-0.28l0.19,-0.13l0.01,-0.01l0.04,-0.03l0.68,-0.49l0.01,-0.0l0.72,-0.54l0.54,-0.33l0.0,-0.0l0.21,-0.13l0.08,-0.06l0.45,-0.46l0.03,-0.03l0.11,-0.13l0.31,-0.38l0.51,-0.51l0.03,-0.03l0.6,-0.76l0.0,-0.01l0.45,-0.6l0.21,-0.28l0.25,-0.26l0.51,-0.54l0.02,-0.02l0.42,-0.52l0.15,-0.18l0.55,-0.61l0.44,-0.45l0.08,-0.12l0.09,-0.21l0.08,-0.19l0.0,-0.0l0.43,-1.02l0.02,-0.03l0.42,-0.79l0.41,-0.46l0.38,-0.28l0.06,-0.05l0.01,-0.0l0.0,-0.0l0.45,-0.22l0.17,0.01l0.0,0.0l0.16,0.01l0.53,0.07l0.21,0.06l0.25,0.07l0.24,0.25l0.27,0.35l0.0,0.0l0.01,0.01l0.06,0.06l0.35,0.29l0.19,0.15l0.06,0.04l0.16,0.09l0.48,0.27l0.1,0.04l0.33,0.08l0.28,0.07l0.06,0.01l0.83,0.07l0.79,0.11l0.05,0.0l0.66,0.01l0.05,-0.0l0.81,-0.1l0.51,0.03l0.2,0.01l0.71,0.58l0.02,0.01l0.26,0.19l0.34,0.44l0.45,0.69l0.04,0.05l0.69,0.77l0.52,0.74l0.38,0.55l0.03,0.04l0.76,0.82l0.04,0.04l0.83,0.69l0.08,0.1l0.0,0.0l0.44,0.56l0.02,0.02l0.61,0.65l0.03,0.32l0.01,0.06l0.15,0.61l0.01,0.04l0.03,0.09l0.0,0.0l0.16,0.43l0.0,0.01l0.14,0.35l0.09,0.23l0.04,0.08l0.02,0.03l0.01,0.01l0.04,0.02l0.04,0.07l0.27,0.18l0.97,0.17l0.05,0.01l0.28,0.02l0.73,0.04l0.05,-0.0l0.53,-0.04l0.15,-0.01l0.32,-0.02l0.05,-0.01l0.99,-0.19l0.05,-0.01l0.19,-0.06l0.77,-0.25l0.14,-0.08l0.46,-0.4l0.54,-0.47l0.07,-0.09l0.55,-0.86l0.02,-0.03l0.67,-1.26l0.0,-0.01l0.56,-1.11l1.05,-1.69l1.13,-1.57l0.03,-0.05l0.72,-1.42l0.0,-0.01l0.87,-1.82l0.02,-0.07l0.27,-0.98l0.63,-1.12l0.01,-0.02l0.66,-1.33l0.47,-0.5l0.27,-0.0l0.24,0.47l0.08,0.11l1.01,0.94l0.08,0.06l0.68,0.37l0.13,0.04l0.86,0.14l0.14,-0.0l0.88,-0.16l1.05,0.14l0.85,0.23l0.84,0.33l0.6,0.36l0.26,0.56l0.21,1.22l0.1,1.13l-0.17,0.94l0.0,0.16l0.27,1.23l0.03,0.08l0.43,0.91l0.01,0.02l0.5,0.93l0.01,0.02l0.81,1.36l0.01,0.01l0.6,0.93l0.16,0.14l1.24,0.61l0.11,0.03l0.4,0.07l0.86,0.47l0.19,0.05l1.76,0.02l1.56,0.16l0.51,0.08l0.41,0.06l1.27,0.29l0.06,0.01l0.85,0.06l0.02,0.0l0.82,0.0l0.04,-0.0l1.31,-0.14l0.92,0.09l0.02,0.0l1.35,0.05l0.41,-0.4l-0.0,-0.06l0.21,-0.07l0.32,-0.11l0.07,-0.03l0.52,-0.31l0.85,-0.43l0.92,-0.2l1.08,0.59l0.78,0.81l0.01,0.02l0.18,0.24l0.0,-0.0l0.14,0.22l0.64,0.35l0.52,0.83l-0.05,0.84l-0.68,1.31l-0.04,0.12l-0.17,1.04l-0.43,0.84l-0.69,1.1l-0.91,1.17l-0.62,0.52l-0.11,0.14l-0.47,1.0l-0.74,0.77l-0.05,0.06l-0.45,0.67l-1.03,0.69l-0.0,0.0l-0.11,0.07l-0.03,0.01l0.01,0.07l-0.1,-0.06l-0.27,0.12l-0.53,-0.07l-0.15,0.01l-0.59,0.15l-0.08,0.03l-0.54,0.27l-0.07,0.04l-0.35,0.27l-0.01,0.01l-0.39,0.32l-0.49,0.41l-0.06,0.06l-0.39,0.5l-0.05,0.09l-0.23,0.55l-0.0,0.01l-0.15,0.38l-0.26,0.4l-0.06,0.19l-0.02,0.22l-0.19,0.34l-0.43,0.42l-0.12,0.24l-0.02,0.2l-0.24,0.26l-0.26,0.25l-0.39,0.12l-0.06,0.02l-0.38,0.18l-0.18,0.17l-0.34,0.64l-0.04,0.1l-0.13,0.59l-0.01,0.04l-0.08,0.63l-0.21,0.69l0.18,0.32l-0.13,0.42l0.0,0.26l0.13,0.37l0.02,0.04l0.42,0.86l0.2,0.78l0.05,0.12l0.41,0.62l0.01,0.01l0.33,0.47l0.47,0.75l0.04,0.06l0.24,0.27l0.09,0.08l0.56,0.33l0.37,0.37l0.25,0.83l0.1,0.52l0.05,0.8l0.01,0.55l0.01,0.08l0.13,0.6l-0.08,0.42l-0.0,0.01l-0.17,1.02l-0.12,0.45l-0.01,0.09l-0.05,1.21l-0.12,1.24l0.04,0.21l0.3,0.63l0.02,0.04l0.86,1.36l0.07,0.08l0.58,0.53l0.11,0.07l0.86,0.36l0.71,0.3l0.68,0.32l0.16,0.08l0.0,0.0l0.07,0.03l0.14,0.04l0.05,0.0l0.07,0.13l3.45,2.0l0.07,0.03l4.43,1.58l0.21,0.02l1.38,-0.26l2.92,0.04l0.0,0.0l5.53,0.05l0.12,-0.02l2.26,-0.71l1.69,-0.53l3.53,-0.89l0.01,-0.0l4.17,-1.21l2.8,1.29l3.61,1.71l0.03,0.01l5.91,2.18l2.94,2.41l1.62,2.99l-0.3,0.49l-0.48,0.7l-0.01,0.02l-0.38,0.63l-0.01,0.01l-0.39,0.7l-0.43,0.73l-0.48,0.47l-0.44,0.4l-0.43,0.32l-0.32,0.17l-1.03,0.18l-0.0,0.0l-1.25,0.23l-0.93,-0.26l-0.07,-0.01l-1.84,-0.17l-1.24,-0.47l-0.08,-0.02l-1.11,-0.19l-0.3,-0.38l-0.36,-0.15l-1.41,0.18l-0.04,0.01l-0.17,0.04l-0.31,-0.42l-0.05,-0.06l-0.74,-0.66l-0.16,-0.09l-0.84,-0.24l-0.6,-0.34l-0.5,-0.43l-0.28,-0.1l-1.24,0.06l-0.07,-0.06l-0.3,-0.09l-0.67,0.09l-0.17,0.06l-1.55,1.05l-0.13,0.14l-0.59,1.06l-0.31,0.5l-0.69,1.0l-0.06,0.15l-0.18,0.88l-0.01,0.06l-0.04,0.89l-0.16,0.64l-0.45,0.89l0.12,0.5l1.2,0.9l0.83,0.73l0.69,0.76l0.52,0.62l0.35,0.58l0.04,0.05l0.78,0.92l0.06,0.25l0.02,0.73l0.0,0.03l0.05,0.49l0.0,0.03l0.17,0.92l0.07,0.73l-0.55,0.66l-0.06,0.42l0.12,0.27l0.08,0.39l-0.05,0.21l0.29,0.73l0.0,0.01l0.43,0.98l0.01,0.02l0.29,0.59l0.02,0.61l-0.11,0.5l-0.64,0.53l-0.76,0.32l-0.11,0.07l-0.51,0.46l-0.31,0.18l-1.48,0.81l-0.06,0.04l-0.75,0.62l-0.64,0.5l-0.38,0.3l-0.72,0.5l-0.81,0.49l-1.21,0.68l-0.03,0.02l-1.0,0.68l-0.01,0.01l-0.55,0.4l-0.83,0.51l-0.01,0.0l-0.81,0.52l-0.0,0.0l-0.97,0.63l-0.81,0.33l-0.1,0.06l-0.66,0.55l-0.12,0.16l-0.36,0.86l-9.04,-7.24l-0.02,-0.02l-4.25,-2.91l-0.82,-0.56l-0.63,0.33l-0.0,0.43l-0.1,-0.0l-0.04,0.0l-2.08,0.12l-0.01,0.0l-2.18,0.17l-3.34,-0.13l-2.49,-0.37l-2.49,-0.42l-2.16,-0.69l-0.04,-0.01l-2.67,-0.57l-0.0,-0.0l-0.9,-0.18l-1.25,-0.45l-0.0,-0.0l-1.74,-0.62l-0.01,-0.0l-1.88,-0.64l-0.01,-0.0l-1.44,-0.46l-1.56,-0.53l-0.0,-0.0l-1.2,-0.4l-1.89,-0.88l-0.01,-0.0l-1.19,-0.51l-0.08,-0.02l-1.91,-0.4l-0.04,-0.01l-1.33,-0.14l-0.04,-0.0l-1.66,0.0l-0.07,0.0l-0.06,0.0l-1.4,0.22l-0.02,0.0l-1.67,0.34l-0.12,0.05l-0.94,0.55l-1.2,0.65l-1.2,0.66l-0.0,0.0l-1.43,0.79l-0.12,0.1l-0.76,0.98l-0.7,0.7l-0.1,0.15l-0.3,0.87l-0.66,1.21l-0.04,0.12l-0.25,1.34l-0.0,0.04l-0.13,1.35l0.0,0.09l0.21,1.71l0.05,0.16l0.7,1.17l0.48,1.63l0.02,0.05l0.57,1.3l0.01,0.02l0.51,0.99l0.33,1.38l0.02,0.07l0.63,1.4l0.0,0.01l0.91,1.9l0.6,1.86l0.01,0.02l0.63,1.64l0.21,0.54l-0.1,1.41l-1.07,1.04l-1.87,-0.85l-0.15,-0.07l-0.05,-0.02l-1.06,-0.32l-1.26,-0.75l-0.08,-0.04l-1.7,-0.54l-1.82,-1.82l-0.05,-0.04l-2.12,-1.51l-0.28,-0.07l-1.21,0.16l-1.64,-0.52l-0.67,-0.21l-0.07,-0.02l-3.88,-0.44l-1.62,-0.81l-2.49,-1.48l-1.76,-1.09l-0.09,-0.04l-1.78,-0.56l-0.49,-0.16l-2.67,-1.02l-0.0,-0.0l-1.63,-0.61l-1.3,-0.77l-0.32,-0.2l-0.3,0.06l-0.55,-0.21l-1.4,-0.81l-0.11,-0.04l-3.53,-0.83l-0.08,-0.01l-2.36,-0.06l-4.35,-0.63l-3.28,-0.73l-3.98,-1.5l-0.04,-0.01l-2.77,-0.73l-0.08,-0.01l-0.94,-0.04l-3.53,-0.16l-3.23,-0.37l-0.02,-0.0l-2.5,-0.16l-2.38,-0.59l-0.05,-0.01l-1.92,-0.22l-0.06,-0.0l-2.18,0.05l-0.05,0.0l-2.06,0.31l-0.3,0.05l-1.65,0.16l-0.01,0.0l-0.82,0.1l-1.52,0.18l-0.08,0.02l-2.71,0.87l-2.64,0.61l-0.0,0.0l-2.47,0.6l-2.07,0.38l-0.04,0.01l-1.77,0.51l-0.01,0.0l-1.79,0.54l-0.03,0.01l-1.5,0.57l-0.04,0.02l-1.61,0.82l-1.34,0.54l-0.04,0.02l-0.94,0.49l-1.44,0.54l-0.0,0.0l-0.85,0.33l-0.05,0.02l-1.41,0.8l-1.62,0.7l-1.85,0.64l-0.06,0.03l-1.57,0.84l-0.09,0.06l-1.67,1.61l-0.68,0.64l-0.08,0.03l-0.82,0.3l-0.52,-0.42l-0.1,-1.58l0.31,-2.65l0.98,-2.45l1.9,-1.98l0.11,-0.27l0.05,-1.79l0.1,-2.01l-0.0,-0.04l-0.1,-1.82l0.58,-2.29l0.01,-0.01l0.2,-0.81l0.0,-0.01l0.3,-1.38l0.31,-1.15l0.01,-0.17l-0.24,-1.39l0.21,-1.07l0.01,-0.08l0.0,-1.27l-0.05,-0.19l-0.64,-1.17l0.14,-1.03l0.0,-0.08l-0.09,-1.17l-0.08,-0.22l-1.05,-1.34l-0.18,-0.11Z", "name": "Nassarawa"}, "2048": {"path": "M281.51,677.4l0.7,-1.34l0.05,-0.18l0.04,-1.48l0.0,-0.0l0.0,-0.06l-0.32,-0.4l-0.64,-0.13l-0.22,0.02l-0.76,0.27l-0.42,-0.21l-0.23,-0.42l-0.02,-0.76l0.38,-1.27l0.39,-1.08l0.54,-1.32l0.28,-0.69l0.59,-1.09l0.65,-1.09l0.01,-0.01l0.57,-1.03l0.0,-0.0l0.48,-0.89l0.0,-0.0l0.49,-0.94l0.65,-1.09l0.02,-0.03l0.54,-1.09l0.77,-1.15l0.44,-0.47l0.09,-0.17l0.07,-0.28l0.55,-0.04l1.11,0.19l0.04,0.0l1.31,0.09l0.3,-0.1l0.67,-0.61l0.08,-0.1l0.43,-0.77l0.03,-0.07l0.23,-0.73l0.15,-0.46l0.02,-0.08l0.08,-0.87l0.45,-0.27l0.85,-0.3l0.12,-0.07l0.32,-0.25l0.15,-0.29l0.02,-0.4l-0.09,-0.27l-0.33,-0.42l-0.07,-0.35l0.15,-0.58l0.11,-0.11l0.2,-0.11l0.01,-0.01l0.37,-0.22l0.54,-0.32l0.04,-0.03l0.53,-0.41l0.06,-0.06l0.74,-0.89l0.06,-0.09l0.41,-0.91l0.03,-0.12l0.14,-1.14l-0.0,-0.1l-0.17,-1.22l-0.08,-0.19l-0.45,-0.6l-0.24,-1.11l-0.15,-0.23l-0.92,-0.71l-0.06,-0.04l-0.96,-0.48l-0.04,-0.02l-1.36,-0.53l-0.17,-0.03l-1.21,0.07l-0.0,0.0l-1.27,0.08l-0.03,0.0l-0.13,0.03l-0.93,0.4l-0.76,-0.15l-0.18,-0.08l-0.0,-0.01l-0.23,-0.4l-0.01,-0.02l-0.21,-0.32l-0.06,-0.1l-0.04,-0.12l0.15,-0.26l0.61,-0.56l0.36,-0.2l0.96,-0.4l0.74,-0.1l0.18,-0.07l0.72,-0.52l0.54,-0.23l0.21,-0.22l0.31,-0.81l0.03,-0.12l0.05,-1.04l-0.01,-0.1l-0.1,-0.48l0.01,-0.66l-0.0,-0.07l-0.14,-0.9l-0.0,-0.01l-0.12,-0.61l0.06,-1.01l0.15,-0.65l0.39,-1.01l0.35,-0.61l0.0,-0.01l0.11,-0.06l0.74,-0.41l0.07,-0.05l0.54,-0.48l0.48,-0.43l0.04,-0.02l0.41,-0.23l0.15,-0.14l0.67,-1.1l0.03,-0.07l0.4,-1.03l0.02,-0.07l0.13,-0.67l0.23,-1.16l0.44,-0.9l0.04,-0.12l0.16,-1.04l-0.0,-0.14l-0.23,-1.06l-0.01,-0.04l-0.25,-0.76l-0.26,-0.87l-0.15,-0.52l0.56,0.47l0.13,0.07l1.03,0.35l0.17,0.02l0.79,-0.08l0.01,0.0l0.17,0.03l0.13,-0.01l-0.12,0.2l-0.06,0.19l-0.07,1.36l-0.66,3.19l-1.9,9.22l-0.16,0.39l-0.03,0.16l0.0,0.78l0.28,0.38l0.64,0.2l0.01,0.0l1.19,0.33l0.15,0.01l1.16,-0.12l0.04,-0.01l1.14,-0.24l0.88,-0.16l0.04,-0.01l0.92,-0.27l0.7,0.13l1.21,0.3l0.25,0.28l0.17,0.92l0.02,0.06l0.32,0.91l-0.14,1.72l-0.18,0.82l-0.01,0.05l-0.13,1.65l-0.15,1.2l-0.7,1.31l-0.01,0.02l-0.39,0.83l-0.03,0.11l-0.19,1.16l0.0,0.14l0.32,1.67l0.08,0.17l0.63,0.79l0.16,0.12l0.87,0.37l0.27,0.16l0.32,0.19l0.41,0.72l0.24,0.42l0.53,1.74l0.06,0.12l0.81,1.09l0.06,0.07l0.96,0.8l0.02,0.02l0.74,0.54l0.92,0.67l0.19,0.07l1.28,0.14l1.24,0.34l0.1,0.01l1.42,0.01l0.03,-0.0l1.76,-0.13l1.88,-0.05l0.44,-0.01l1.63,0.16l0.11,-0.0l0.84,-0.14l1.49,0.45l0.04,0.01l1.78,0.35l0.13,0.03l0.65,0.2l0.04,0.01l1.5,0.3l0.16,0.0l1.13,-0.22l0.01,-0.0l0.73,-0.16l0.1,-0.04l0.46,-0.24l0.86,-0.29l1.06,-0.06l0.14,-0.03l0.55,-0.25l1.18,0.0l0.02,-0.0l1.27,-0.05l0.83,0.18l0.0,0.0l0.01,0.0l0.39,0.08l1.07,0.42l0.12,0.03l0.62,0.04l0.79,0.35l0.1,0.03l1.5,0.23l0.17,-0.01l1.11,-0.31l0.08,-0.03l1.04,-0.57l0.47,-0.25l0.26,0.02l0.4,0.03l0.25,0.74l0.01,0.03l0.43,1.01l-0.09,1.39l0.0,0.06l0.15,1.78l-0.49,1.02l-0.55,0.53l-0.05,0.06l-0.74,1.08l-0.04,0.08l-0.36,0.93l-0.59,1.24l-0.61,0.67l-0.02,0.02l-0.72,0.91l-0.01,0.01l-0.64,0.84l-0.05,0.08l-0.42,0.96l-0.22,0.22l-0.02,0.02l-0.53,0.58l-0.24,0.25l-0.62,0.66l-0.07,0.1l-0.82,1.77l-0.02,0.06l-0.31,1.06l-0.06,0.18l-0.47,1.49l-0.01,0.06l-0.07,0.48l-0.12,0.85l0.04,0.25l0.72,1.35l0.07,0.09l0.78,0.79l0.01,0.01l0.97,0.92l0.18,0.1l0.95,0.22l0.06,0.01l1.23,0.11l0.2,-0.03l0.9,-0.4l1.17,-0.03l0.02,-0.0l0.94,-0.07l0.08,-0.01l0.63,-0.18l0.09,-0.04l0.8,-0.45l0.01,-0.0l0.41,-0.24l1.23,0.24l0.11,0.01l1.21,-0.12l0.1,-0.02l0.3,-0.12l0.34,-0.13l0.56,0.2l1.4,0.69l0.05,0.02l1.03,0.33l0.02,0.01l0.79,0.2l0.18,0.01l1.46,-0.29l0.04,-0.01l0.6,-0.19l1.25,0.47l1.03,0.5l1.04,0.63l1.19,1.15l0.02,0.02l1.08,0.9l0.29,0.25l0.08,0.01l0.01,0.07l0.22,0.19l1.08,1.33l0.55,1.24l0.01,0.02l0.05,0.11l0.0,0.0l0.49,0.96l0.23,1.3l0.02,0.07l0.5,1.37l-0.08,1.15l-0.45,0.91l-0.04,0.11l-0.27,1.62l-0.23,0.92l-0.08,0.32l-0.01,0.15l0.2,1.55l-0.0,1.34l0.0,0.02l0.06,1.53l0.03,0.14l0.32,0.75l-0.33,0.21l-0.19,0.31l-0.04,0.6l-0.01,0.18l0.04,0.21l0.52,0.99l-0.0,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.04l-0.33,0.33l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.27,-0.27l-0.02,0.0l-0.01,0.01l-0.09,-0.09l0.0,-0.0l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.23l-0.01,-0.01l0.01,-0.01l0.0,-0.17l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l0.0,-0.04l-0.39,-0.39l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.21l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.01,-0.01l0.05,-0.05l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.33,-0.33l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.28,0.28l-0.01,-0.01l-0.08,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.4,0.4l0.12,0.0l0.04,0.04l0.02,0.0l0.0,0.02l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.0l-0.04,0.04l0.0,0.02l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.06,0.06l-0.04,0.0l-0.13,-0.13l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.21,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.19,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.4,0.4l0.23,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.06,0.06l0.0,0.0l0.1,0.1l-0.01,0.0l-0.02,0.02l-0.1,0.0l-0.08,0.08l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.04l-0.02,0.02l-0.29,-0.29l-0.08,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.1,0.0l-0.01,0.01l-0.14,-0.14l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.17l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.04,-0.04l0.38,-0.38l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.06,0.06l-0.0,0.0l-0.4,0.4l-0.0,0.0l-0.04,0.04l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.1l0.02,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.21l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l-0.0,0.08l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l-0.16,0.16l0.0,-0.01l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.13l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.02l0.06,-0.06l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.15,-0.15l0.0,-0.0l-0.02,-0.02l0.0,-0.0l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.13l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.08l-0.02,0.02l-0.0,0.07l-0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.0l-0.01,-0.01l0.03,-0.03l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.15,-0.15l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.17,0.0l-0.03,0.03l-0.01,-0.01l-0.02,0.0l-0.06,0.06l-0.0,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.05l-0.02,-0.02l-0.19,0.0l-0.01,0.01l-0.05,-0.05l-0.0,0.0l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.06,0.0l-0.23,0.23l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.03,0.03l-0.01,-0.01l-0.02,0.0l-0.12,-0.12l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.27,-0.27l0.0,-0.0l0.0,-0.19l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.1l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.15l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.08l0.04,0.04l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.12,0.12l0.0,0.06l0.02,0.02l0.0,0.01l-0.16,-0.16l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.1,0.1l-0.08,-0.08l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.25,-0.25l-0.15,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.01,0.0l0.1,-0.1l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.25,-0.25l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,-0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.4,0.4l0.0,0.04l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.02l0.0,0.0l-0.08,0.08l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.18,-0.18l0.0,-0.0l-0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l-0.4,-0.4l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.01l-0.14,-0.14l-0.04,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.15,0.15l-0.02,0.0l-0.17,-0.17l-0.19,0.0l-0.21,-0.21l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.08,-0.08l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.02,0.0l0.02,0.02l-0.23,0.23l-0.21,-0.21l-0.04,0.0l-0.25,0.25l0.0,-0.03l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.01,0.0l0.23,-0.23l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.36,-0.36l0.28,-0.28l0.04,0.0l0.02,-0.02l0.04,0.0l0.31,0.31l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.03,-0.03l0.03,0.03l0.06,0.0l0.4,-0.4l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.17,-0.17l0.15,-0.15l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.04,-0.04l0.0,-0.04l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.12,-0.12l0.0,-0.04l-0.04,-0.04l0.0,-0.06l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.4,-0.4l-0.06,0.0l-0.4,0.4l0.0,0.04l0.04,0.04l-0.02,0.02l0.0,0.06l-0.19,0.19l0.0,0.1l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.15l-0.19,0.19l0.0,0.02l-0.06,0.06l-0.0,0.0l-0.02,0.02l0.0,0.19l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.02,0.0l-0.05,0.05l-0.37,0.37l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.18,0.18l-0.01,0.01l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.07l-0.33,-0.33l-0.07,0.0l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.27,-0.27l0.08,-0.08l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.1,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l0.29,-0.29l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.17l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.12,-0.12l0.0,-0.0l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.27,-0.27l0.0,-0.1l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.02l0.01,-0.01l0.07,0.07l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.12,0.0l0.02,-0.02l-0.0,-0.06l0.04,-0.04l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.03,0.0l0.35,-0.35l0.02,0.02l0.1,0.0l0.02,-0.02l0.06,0.0l0.06,-0.06l0.17,0.17l0.02,0.0l0.4,-0.4l-0.0,-0.0l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.31,-0.31l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.1,0.1l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l-0.0,0.13l-0.02,0.02l0.0,0.21l-0.02,0.02l0.0,0.21l0.02,0.02l0.0,0.06l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.05,0.05l-0.01,-0.01l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.27,0.27l-0.21,-0.21l-0.02,0.0l-0.06,-0.06l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.27,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.0l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l0.0,0.04l-0.01,0.0l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.17,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.27,0.27l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.17l0.06,-0.06l0.0,-0.0l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.08l0.02,-0.02l0.0,-0.17l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.02,0.02l0.1,0.0l0.02,0.02l0.4,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.06,-0.06l0.04,0.0l0.11,-0.11l0.01,0.01l0.04,0.0l0.17,-0.17l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.48,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.21l-0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.17,-0.17l0.29,-0.29l0.0,-0.0l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.28,-0.28l0.01,-0.01l0.0,-0.06l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.25,-0.25l-0.02,0.0l-0.29,0.29l0.0,-0.01l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.0l0.4,0.4l0.06,0.0l0.04,0.04l0.0,0.06l0.4,0.4l0.06,0.0l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.06,0.06l-0.0,0.0l0.02,0.02l0.0,0.0l0.22,0.22l-0.3,0.3l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.13,0.13l-0.06,0.0l-0.13,0.13l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.17,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.31,-0.31l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.13l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.19,0.19l-0.0,0.02l0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.1l0.01,0.01l-0.01,0.01l0.0,0.04l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.08l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.27,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l0.0,-0.14l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.31,-0.31l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.04l-0.0,-0.0l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.38l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.21,-0.21l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.17l0.02,-0.02l0.0,-0.02l0.17,-0.17l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.02l-0.08,-0.08l0.0,-0.06l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.08,0.0l-0.04,0.04l-0.02,0.0l-0.4,0.4l0.0,0.06l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.08,0.0l-0.02,-0.02l0.0,-0.04l-0.08,-0.08l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.1l-0.08,-0.08l0.08,-0.08l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.23,-0.23l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l-0.21,-0.21l0.0,-0.0l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.08,-0.08l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.15,-0.15l-0.02,0.0l-0.2,-0.2l0.0,-0.02l-0.02,-0.02l-0.0,-0.1l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.06l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.15,-0.15l0.13,-0.13l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l0.0,-0.04l0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l0.04,-0.04l0.08,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.15,0.0l0.02,-0.02l0.06,0.0l0.4,-0.4l0.0,-0.0l0.04,-0.04l-0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.19l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.18l0.04,0.04l0.06,0.0l0.04,-0.04l0.0,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.0,-0.0l-0.04,-0.04l-0.08,0.0l-0.02,-0.02l-0.21,0.0l-0.02,0.02l-0.04,0.0l-0.09,0.09l-0.05,-0.05l-0.0,-0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l0.0,0.04l0.02,0.02l0.0,0.0l0.25,0.25l0.0,0.0l-0.06,0.06l0.0,0.1l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.08l-0.01,-0.0l-0.0,0.02l-0.04,-0.04l-0.08,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.03,-0.03l-0.04,0.0l-0.04,-0.04l-0.06,0.0l-0.0,-0.02l-0.03,-0.03l0.01,-0.01l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.08l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.04l0.4,0.4l0.0,0.0l0.06,0.06l0.06,0.0l0.04,-0.04l0.25,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.27,0.27l0.02,0.0l0.31,0.31l0.02,0.0l0.02,0.02l0.02,0.0l0.03,0.03l-0.01,0.0l-0.04,0.04l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.17l-0.02,0.02l0.0,0.17l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.0l0.08,0.08l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.28,0.28l-0.18,0.18l-0.01,-0.01l-0.04,0.0l-0.05,0.05l-0.16,0.16l-0.02,-0.02l-0.06,0.0l-0.08,-0.08l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.46,0.0l-0.04,0.04l-0.25,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.15l-0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.21l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.12,0.0l-0.25,-0.25l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.17,-0.17l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l-0.0,0.0l0.4,0.4l0.1,0.0l0.02,-0.02l0.08,0.0l0.02,0.02l0.04,0.0l0.08,0.08l0.04,0.0l0.15,-0.15l0.15,0.15l0.02,0.0l0.02,0.02l0.04,0.0l0.0,0.08l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.1l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.01,-0.01l0.01,0.01l0.1,0.0l0.0,0.1l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.17,0.17l-0.0,0.0l0.0,0.0l-0.01,0.01l-0.3,-0.3l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.0,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.2,0.2l-0.01,-0.01l-0.06,0.0l-0.06,0.06l-0.02,0.0l-0.1,0.1l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.06,0.06l-0.17,0.17l-0.02,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.08l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.1l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.06,-0.06l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.04,-0.04l0.0,-0.0l0.04,-0.04l0.0,-0.13l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.06,-0.06l-0.23,0.0l-0.02,-0.02l-0.06,0.0l-0.06,0.06l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.1,0.1l-0.0,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.26,-0.26l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.15,0.0l-0.02,-0.02l-0.02,0.0l-0.18,-0.18l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.42l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.08,-0.08l0.0,-0.04l-0.24,-0.24l0.01,-0.01l0.0,-0.13l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.4,-0.4l-0.04,0.0l-0.4,0.4l0.0,0.08l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.1l0.01,0.01l-0.01,0.01l0.0,0.13l0.12,0.12l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.19l0.02,0.02l0.0,0.33l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.13,0.13l0.02,0.0l0.06,0.06l0.02,0.0l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.06,0.06l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.05,0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.29l-0.02,-0.02l0.0,-0.23l-0.08,-0.08l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.4,-0.4l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.1,-0.1l-0.06,0.0l-0.02,-0.02l-0.31,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l-0.0,-0.12l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.08l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.03,0.03l-0.01,-0.01l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.04l0.02,0.02l0.0,0.02l-0.02,0.0l-0.06,0.06l-0.31,-0.31l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.1,-0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.01,0.01l-0.03,-0.03l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.0l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.4,-0.4l-0.08,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.01,0.01l0.0,-0.01l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.06,-0.06l-0.06,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.21,0.0l-0.02,-0.02l-0.04,0.0l-0.06,-0.06l-0.12,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.35,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.04,0.0l-0.04,-0.04l-0.04,0.0l-0.15,-0.15l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.27,-0.27l-0.02,0.0l-0.12,-0.13l-0.0,-0.0l-0.13,-0.13l-0.0,0.0l-0.08,-0.08l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.1,-0.1l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.05,-0.05l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.08,0.08l-0.02,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.19l-0.02,0.02l0.0,0.21l-0.02,0.02l0.0,0.1l-0.1,0.1l0.0,0.02l0.02,0.02l0.0,0.0l0.08,0.08l0.0,0.02l0.02,0.02l-0.0,0.08l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.04,0.04l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.0,-0.12l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,0.0l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.28,-0.28l-0.05,-0.06l-0.01,-0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.02,0.0l-0.1,0.1l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.1,0.1l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.06,0.06l-0.0,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.21,-0.21l-0.0,-0.0l-0.02,-0.02l-0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.15l-0.4,-0.4l-0.04,0.0l-0.06,0.06l-0.0,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,-0.02l-0.06,0.0l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l-0.4,-0.4l-0.04,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.03l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.08l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.06,0.0l-0.4,0.4l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.1l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.02l-0.14,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.0,-0.01l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l-0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.19,-0.19l0.0,-0.1l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.03,-0.03l0.01,-0.01l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.04,-0.04l-0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.4,-0.4l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.12l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.29,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.17,0.0l-0.08,-0.08l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.4,0.4l0.0,0.04l-0.02,0.02l-0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.09,0.09l-0.18,-0.18l-0.04,0.0l-0.1,-0.1l-0.0,0.0l-0.02,-0.02l-0.17,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l0.4,0.4l0.04,0.0l0.19,-0.19l0.25,0.25l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.1,-0.1l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.12,0.0l0.02,0.02l0.21,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.05,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.08,0.0l0.15,-0.15l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.21,0.21l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.13,0.13l0.02,0.0l0.15,0.15l0.02,0.0l0.15,0.15l0.02,0.0l0.0,0.04l0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.13l-0.02,0.02l-0.17,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.04l0.4,0.4l0.16,0.0l0.0,0.31l-0.02,0.02l0.0,0.25l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.0l0.01,0.01l-0.28,0.28l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.18,-0.18l0.01,0.01l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.04l0.04,0.04l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.19l0.02,0.02l-0.0,0.19l0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.1l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.13l-0.02,0.02l-0.0,0.13l-0.02,0.02l0.0,0.25l-0.02,0.02l0.0,0.31l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.04,0.04l0.01,0.01l0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.4,0.4l0.02,0.0l0.02,0.02l-0.0,0.0l0.08,0.08l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.08,0.08l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.07,0.07l-0.01,0.01l0.0,0.04l0.13,0.13l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l-0.0,0.0l0.02,0.02l0.0,0.0l0.1,0.1l-0.0,0.0l0.04,0.04l0.0,0.0l0.04,0.04l0.0,0.0l0.4,0.4l0.0,0.0l0.02,0.02l0.02,0.0l0.31,0.31l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.13l0.01,0.01l-0.01,0.01l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.04,0.04l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.04,0.04l-0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.08,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l0.31,0.31l0.0,0.0l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.29,0.29l-0.0,0.0l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.1l0.02,0.02l0.0,0.19l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.17l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.13l0.02,0.02l-0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.06l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.08l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.21l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.1l0.02,0.02l-0.0,0.1l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.08l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.1l0.02,0.02l-0.0,0.08l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.15,0.0l-0.04,0.04l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.02l0.4,0.4l0.02,0.0l0.02,-0.02l0.17,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.23,0.23l0.12,0.0l0.02,-0.02l0.08,0.0l0.1,-0.1l0.0,0.18l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.0l0.12,0.12l0.0,0.0l0.04,0.04l-0.0,0.02l0.06,0.06l-0.0,0.04l0.02,0.02l0.0,0.04l0.04,0.04l0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.4l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l0.0,0.21l0.02,0.02l-0.0,0.1l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.06,0.06l-0.0,0.04l0.02,0.02l0.0,0.02l0.04,0.04l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.08,0.08l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.33,0.33l0.0,0.0l0.1,0.1l0.0,0.0l0.1,0.1l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.19,0.19l0.0,0.04l0.4,0.4l0.06,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l-0.04,0.01l0.0,0.02l0.39,0.33l0.0,0.0l0.02,0.02l0.12,0.0l0.02,0.02l0.02,0.0l0.01,0.01l0.03,0.14l0.0,0.01l0.17,0.11l-0.09,0.0l-0.01,0.01l-0.01,-0.01l-0.23,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.17,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.12,0.0l-0.02,-0.02l-0.17,0.0l-0.02,0.02l-0.31,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.35,0.0l-0.04,0.04l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.33,0.0l-0.04,0.04l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.15,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.1,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.19,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.21,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.31,0.0l-0.02,0.02l-0.19,0.0l-0.02,-0.02l-0.14,0.0l-0.01,0.01l-0.01,-0.01l-0.21,0.0l-0.02,-0.02l-0.1,0.0l-0.01,0.01l-0.01,-0.01l-0.77,0.0l-0.02,-0.02l-0.25,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.21,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.25,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.04,0.0l-0.06,-0.06l-0.06,0.0l-0.04,-0.04l-0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.19l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.38l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l0.04,-0.04l0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.23l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l0.12,-0.12l0.02,0.02l0.21,0.0l0.4,-0.4l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.19,0.0l0.02,-0.02l0.04,0.0l0.21,-0.21l0.02,0.02l0.0,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.08,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.0,0.0l0.3,-0.3l0.16,0.16l0.02,0.0l0.08,0.08l0.08,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.0,0.04l0.02,0.02l-0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.28,-0.28l0.01,0.01l0.02,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.23,0.0l0.02,-0.02l0.06,0.0l0.05,-0.05l0.01,0.01l0.04,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.04,0.0l0.4,-0.4l0.0,-0.0l0.04,-0.04l0.0,-0.1l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.23,0.23l-0.14,0.0l-0.1,-0.1l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.19,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.01,0.01l-0.26,-0.26l-0.04,0.0l-0.04,-0.04l-0.08,0.0l-0.4,0.4l0.0,0.0l-0.06,0.06l0.0,0.02l-0.02,0.02l0.0,0.0l-0.01,0.01l-0.03,-0.03l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.08,0.0l-0.27,0.27l0.0,-0.01l-0.02,-0.02l0.0,-0.19l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.06l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.04,-0.04l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.04,-0.04l0.0,-0.14l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.15,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.12,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.08l0.02,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.12,0.0l0.02,-0.02l0.12,0.0l0.02,-0.02l0.44,0.0l0.01,-0.01l0.01,0.01l0.22,0.0l-0.08,0.08l0.0,0.04l0.4,0.4l0.06,0.0l0.02,-0.02l0.12,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.15,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.04l0.1,-0.1l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.1,0.0l-0.4,0.4l0.0,0.04l-0.01,0.0l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.12,-0.12l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.17l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.4,0.4l0.0,0.04l0.25,0.25l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.06l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.08,0.08l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.08,0.08l-0.17,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.23,0.0l-0.21,0.21l-0.02,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.01l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.0l0.31,-0.31l0.06,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l0.19,-0.19l0.0,-0.0l0.02,-0.02l0.0,-0.21l-0.03,-0.03l0.2,-0.2l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.15l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.4,-0.4l-0.04,0.0l-0.4,0.4l0.0,0.08l0.02,0.02l0.0,0.02l-0.23,0.23l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l-0.06,0.06l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.15l-0.31,0.31l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.21,0.0l-0.01,0.01l-0.01,-0.01l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.15l-0.02,-0.02l-0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.35l-0.02,-0.02l0.0,-0.33l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.0,-0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.23,-0.23l0.0,-0.13l-0.01,-0.01l0.01,-0.01l0.0,-0.27l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.04,-0.04l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l-0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.04,-0.04l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.04l0.04,-0.04l-0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.1l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.06,-0.06l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.04,-0.04l0.02,0.0l0.1,-0.1l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.4,-0.4l0.0,-0.08l0.02,-0.02l-0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l-0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.06l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.19l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.17l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l-0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.08l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.37,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.1,-0.1l0.14,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.04l-0.33,-0.33l0.03,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.08,-0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.4,-0.4l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.08l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.4,0.4l0.0,0.04l0.4,0.4l0.04,0.0l0.02,0.02l0.05,0.0l-0.02,0.02l0.0,0.15l0.02,0.02l-0.12,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.15,0.15l-0.25,0.25l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l0.0,-0.0l0.0,-0.13l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.13l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.03,-0.03l0.22,-0.22l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.08,-0.08l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l0.02,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.23,0.23l0.0,0.0l-0.01,0.01l-0.14,-0.14l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.18,0.0l0.0,-0.08l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.08,-0.08l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.04l0.22,-0.22l0.05,-0.05l0.0,-0.04l-0.4,-0.4l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.1,0.1l-0.02,0.0l-0.4,0.4l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.04,0.04l0.0,0.0l-0.01,0.01l-0.22,-0.22l-0.06,0.0l-0.4,0.4l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.04,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.19,0.0l0.02,0.02l0.02,0.0l0.13,0.13l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.01,0.01l0.0,0.0l0.01,0.01l0.01,0.01l0.0,0.13l-0.02,0.02l0.0,0.0l-0.31,0.31l0.0,0.1l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.19l-0.02,0.02l0.0,0.42l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.04,0.04l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.01,-0.01l-0.06,-0.02l-0.67,-0.21l-1.06,-0.56l-1.12,-0.8l-0.01,-0.01l-1.0,-0.65l-0.69,-0.76l-0.29,-0.89l-0.0,-0.01l-0.38,-1.08l-0.32,-1.18l-0.15,-1.22l-0.02,-0.09l-0.28,-0.78l-0.01,-0.04l-0.15,-0.31l-0.49,-1.03l-0.09,-0.13l-1.04,-0.94l-0.23,-0.1l-1.04,-0.09l-0.05,-0.0l-1.37,0.06l-0.12,0.03l-7.22,2.77l-0.02,0.01l-0.57,0.26l-0.53,-0.13l-0.32,-0.08l-0.12,-1.25l-0.02,-0.09l-0.24,-0.72l0.48,-1.66l-0.07,-0.36l-0.46,-0.56l-0.36,-0.14l-0.54,0.07l-0.5,-0.02l-0.74,-0.32l-0.83,-0.53l-0.04,-0.02l-0.56,-0.27l-0.51,-0.85l-0.15,-0.81l0.12,-1.47l0.0,-0.01l0.07,-1.26l0.0,-0.01l0.06,-1.5l0.19,-0.56l0.66,-0.67l0.02,-0.03l0.76,-0.92l0.03,-0.03l0.59,-0.89l0.06,-0.15l0.18,-1.04ZM304.09,686.92l0.0,-0.0l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.18,-0.18l0.01,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.06,0.0l-0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.18l-0.08,0.0l-0.02,0.02l0.0,-0.01l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.02,-0.02ZM312.35,686.45l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.17,0.17l0.02,0.0l0.1,0.1l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.17,0.17l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.17,0.0l0.02,0.02l0.19,0.0l0.02,0.02l0.17,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.02,0.02l0.06,0.0l0.02,0.02l0.08,0.0l0.04,0.04l0.08,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.15,0.0l0.01,0.01l-0.01,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.1,0.1l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.29,0.29l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.08l0.01,0.01l-0.22,0.22l0.0,0.0l-0.02,0.02l0.0,0.04l0.21,0.21l0.0,0.0l-0.25,0.25l0.0,0.04l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.02,0.02l0.1,0.0l0.1,0.1l0.04,0.0l0.04,0.04l0.06,0.0l0.04,-0.04l0.05,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.0l-0.02,0.02l-0.23,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.17,-0.17l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.21,-0.21l-0.02,0.0l-0.02,-0.02l-0.04,0.0l0.0,-0.02l-0.4,-0.4l-0.12,0.0l-0.04,0.04l-0.08,0.0l-0.02,0.02l-0.0,0.0l-0.1,0.1l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.06,-0.06l0.0,-0.15l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.4,-0.4l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.25,0.0l-0.02,-0.02l-0.02,0.0l-0.1,-0.1l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.23,0.23l-0.01,0.0l-0.11,-0.12l-0.02,-0.0l-0.0,0.02l-0.0,-0.0l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l-0.06,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.01,0.01l0.0,-0.01l0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.08l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.17l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.15l0.02,-0.02l-0.0,-0.15l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.12,-0.12l0.05,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,-0.0l0.04,-0.04l0.04,0.0l0.08,-0.08l0.02,0.0l0.04,-0.04l0.06,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.04,0.0l0.15,-0.15l0.02,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.0,-0.0l0.12,-0.13l0.06,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.08,0.08l0.0,0.0l0.1,0.1l0.02,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.19,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.06l0.04,0.04l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.12,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.15,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.1,-0.11l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l-0.0,0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0ZM314.99,695.4l0.02,0.02l0.04,0.0l0.02,0.02l0.19,0.0l0.02,0.02l0.12,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.08,0.08l0.02,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.08,0.08l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.08,0.08l0.0,0.0l0.02,0.02l0.0,0.0l0.21,0.21l0.0,0.0l0.08,0.08l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.0l0.04,0.04l-0.0,0.02l0.06,0.06l-0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.06,0.06l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.06,0.06l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.04,0.04l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.03,0.03l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.04,0.04l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.21,-0.21l-0.02,0.0l-0.15,0.15l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.02,-0.02l-0.03,0.0l0.23,-0.23l0.0,-0.0l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.19,0.0l-0.4,-0.4l-0.02,0.0l-0.06,-0.06l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.27,0.27l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.23,-0.23l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.23,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.02l0.4,0.4l0.08,0.0l0.02,-0.02l0.1,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.4,0.4l0.02,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.23,0.23l-0.31,0.31l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.01l-0.01,-0.01l0.0,-0.02l-0.06,-0.06l0.0,-0.0l-0.04,-0.04l-0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.08,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.01l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l0.0,-0.01l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.25,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l0.0,-0.24l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.08,-0.08l0.03,0.0l0.02,-0.02l0.23,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.1,-0.1l0.0,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.17,0.0l0.02,0.02l0.29,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.04,0.0l0.21,0.21l0.02,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.4,-0.4l-0.06,0.0l-0.04,-0.04l-0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.31,-0.31l0.38,-0.38l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.4,0.4l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.27,0.27l0.0,0.0l-0.08,0.08l0.0,0.0l-0.01,0.01l-0.01,-0.01l0.0,-0.04l-0.25,-0.25l0.0,-0.0l-0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.02l0.35,-0.35l0.0,-0.0l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.03l0.02,0.02l0.13,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.31,-0.31l0.06,0.0l0.02,-0.02l0.02,0.0l0.12,-0.12l0.12,0.12l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.21,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.0,0.0l0.06,-0.06l0.02,0.0l0.18,-0.18l0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.02l0.06,0.06l0.0,0.0l0.4,0.4l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.04,0.0ZM318.19,703.4l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l-0.04,0.04l-0.02,-0.02l-0.12,0.0l-0.4,0.4l0.0,0.21l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.4l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.04,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.1,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.01,0.01l-0.1,0.1l-0.09,-0.09l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.0,-0.0l-0.06,-0.06l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.08,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l0.29,0.29l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.31l0.04,0.04l0.0,0.0l0.0,0.02l0.15,0.15l0.0,0.04l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.06,0.06l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.19l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l-0.14,0.0l-0.06,0.06l-0.02,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.0,0.0l-0.08,0.08l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.21l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.38l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.1,0.0l-0.04,-0.04l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.27l-0.4,-0.4l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.35l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,-0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.06l0.1,-0.1l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.11,0.11l-0.33,0.33l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.21l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.35,0.35l0.07,0.07l0.04,0.0l0.14,0.14l0.0,0.0l0.02,0.02l0.0,0.35l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.29,0.29l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l-0.0,0.0l0.06,0.06l0.0,0.02l-0.02,0.02l0.0,0.19l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.06l0.11,0.11l0.1,0.1l0.0,0.02l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.04l0.4,0.4l0.17,0.0l0.02,-0.02l0.04,0.0l0.0,0.06l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.06,0.06l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.08,0.08l0.0,0.0l0.27,0.27l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l-0.0,0.0l-0.08,0.08l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.1l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.04l0.06,0.06l0.0,0.02l0.02,0.02l0.0,0.02l-0.06,0.0l-0.25,-0.25l-0.0,0.0l-0.06,-0.06l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.34,0.34l-0.01,-0.01l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.08,-0.08l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.08,0.08l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.02,0.0l0.0,-0.04l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.06l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.06,0.0l-0.31,0.31l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.08,-0.08l-0.0,0.0l-0.06,-0.06l-0.04,0.0l-0.06,-0.06l-0.02,0.0l-0.06,-0.06l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.01,-0.01l0.03,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.06,0.0l0.4,-0.4l0.0,-0.04l-0.4,-0.4l-0.1,0.0l-0.02,0.02l-0.12,0.0l0.0,-0.02l-0.4,-0.4l-0.06,0.0l-0.1,0.1l-0.29,-0.29l-0.04,0.0l-0.38,0.38l-0.02,0.0l-0.37,0.37l-0.31,-0.31l-0.02,0.0l-0.08,-0.08l-0.0,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.42l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.13l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.08l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.15l0.02,-0.02l-0.0,-0.38l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.08,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.08,0.0l0.1,-0.1l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.08,0.0l0.4,-0.4l0.0,-0.13l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.06,-0.06l0.0,-0.02l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.02l0.04,0.0l0.02,0.02l0.17,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.06,-0.06l0.0,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.01,-0.01l0.0,0.03l0.02,0.02l-0.0,0.04l0.04,0.04l0.0,0.02l0.4,0.4l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.08,0.0l0.27,0.27l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.33,0.33l0.02,0.0l0.04,0.04l0.06,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.19,0.0l0.02,-0.02l0.08,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0ZM321.01,706.93l0.0,-0.02l-0.02,-0.02l0.0,-0.21l-0.02,-0.02l-0.0,-0.0l-0.12,-0.12l0.01,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.06,0.06l0.02,0.0l0.06,0.06l0.02,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.0,0.0l0.04,0.04l-0.0,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.04,0.04l0.0,0.04l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.04l0.04,0.04l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.06,0.06l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.06l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.15l0.01,0.01l-0.01,0.01l0.0,0.04l-0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l-0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.04l-0.04,0.04l0.0,0.23l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.12,0.12l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.1,0.1l0.0,0.0l0.02,0.02l-0.0,0.1l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.08l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.04l-0.02,0.02l0.0,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l0.4,0.4l0.0,0.0l0.02,0.02l0.04,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,-0.02l0.0,0.01l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.08l0.01,0.01l-0.01,0.01l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l0.02,0.02l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l0.01,0.01l-0.01,0.01l0.0,0.0l-0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.04,0.04l-0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.06,0.06l0.0,0.0l0.02,0.02l0.0,0.12l-0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.06l0.04,0.04l-0.0,0.0l0.0,0.06l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.06,0.06l-0.03,0.0l0.0,0.02l0.03,0.03l0.0,0.14l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.04,0.04l0.0,0.04l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.06,0.06l0.04,0.0l0.16,-0.16l0.03,0.03l0.02,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.1,0.1l-0.02,0.0l-0.06,0.06l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.03,0.03l-0.0,0.0l-0.23,0.23l-0.1,0.1l-0.0,0.0l-0.05,0.05l-0.08,0.08l-0.0,0.0l-0.1,0.1l0.0,0.02l-0.06,0.06l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.01,0.01l-0.02,0.03l-0.12,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.05,-0.05l-0.07,-0.07l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.0,-0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.11l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.01,0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.15l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.22,0.0l0.0,-0.04l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.4,-0.4l-0.04,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.17,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.32,0.32l-0.24,-0.24l-0.0,0.0l-0.04,-0.04l-0.19,0.0l-0.25,0.25l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l0.0,-0.0l-0.1,-0.1l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.04,-0.04l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.08l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.01,-0.01l0.03,-0.03l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.06,-0.06l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.04,-0.04l0.0,0.0l0.06,-0.06l0.02,0.0l0.4,-0.4l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.35l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.1l-0.01,-0.01l0.3,-0.3l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.33l-0.01,-0.01l0.01,-0.01l0.0,0.0l0.22,-0.22l0.2,0.2l0.02,0.0l0.1,0.1l0.06,0.0l0.17,-0.17l0.0,-0.0l0.2,-0.2l0.03,-0.03l0.0,-0.0l0.17,-0.17l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.19,-0.19l0.4,-0.4l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l0.04,-0.04l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.17,-0.17l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.23l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.1l0.12,-0.12l0.0,-0.0l0.02,-0.02l0.0,-0.06l-0.02,-0.02ZM321.42,717.96l0.02,0.02l0.18,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.1l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.15l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l-0.31,0.0l-0.02,0.02l-0.23,0.0l-0.02,0.02l-0.19,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.1,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.04,-0.04l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.12,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.08,0.0l-0.01,0.01l-0.03,-0.03l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.27,0.0l-0.02,0.02l-0.01,-0.0l-0.0,-0.0l-0.02,-0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.04,-0.04l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.13l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.0,-0.0l0.03,-0.03l0.31,-0.3l0.07,0.07l0.0,0.0l0.4,0.4l0.02,0.0l0.06,0.06l0.0,0.0l0.06,0.06l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.12,0.0l0.02,0.02l0.19,0.0l0.04,-0.04l0.1,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.06,-0.06l0.02,0.0l0.15,-0.15l0.02,0.0l0.07,-0.07l0.35,-0.35l0.0,-0.02l0.08,-0.08l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.06,-0.06l0.0,0.12l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.4,0.4l0.04,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.29l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.39,0.39l-0.05,0.05l0.0,0.13l0.02,0.02l0.0,0.02l0.08,0.08l0.0,0.0l0.4,0.4l0.08,0.0l0.04,0.04l0.0,0.0l0.04,0.04l0.02,0.0l0.01,-0.01l0.03,0.03l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.23,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.03,0.03l0.0,0.0l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.08,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0ZM319.44,715.45l-0.02,0.0l-0.04,0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.06l0.02,-0.02l0.0,-0.03l0.16,0.16l0.04,0.0l0.02,0.02l-0.02,0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02ZM313.22,713.54l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.04,-0.04l-0.0,-0.0l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.1l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.04,0.04l0.17,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.19,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.01,-0.01l0.2,0.2l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.1,0.1l0.19,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.02,0.02l0.0,0.1l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.06l0.4,0.4l0.02,0.0l0.19,0.19l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.08,-0.08l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.04,-0.04l0.02,0.0l0.06,0.06l0.02,0.0l0.25,0.25l0.0,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.01,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.04,0.04l0.0,0.0l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.0,0.0l-0.04,0.04l-0.02,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.12,0.12l0.0,0.02l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.04,0.04l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.08,0.08l-0.0,0.0l-0.06,0.06l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.19,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.06,0.06l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02ZM312.76,709.55l-0.05,0.0l0.0,-0.04l0.02,-0.02l0.0,-0.14l0.1,0.0l0.02,0.02l0.02,0.0l0.0,0.02l-0.05,0.05l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.06ZM308.52,697.19l0.0,-0.25l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.23l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.19l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.06,-0.06l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.04,-0.04l0.02,0.0l0.02,0.02l0.06,0.0l0.29,0.29l0.02,0.0l0.06,0.06l0.04,0.0l0.15,-0.15l0.08,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.4,-0.4l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.08l0.12,0.0l0.02,-0.02l0.04,0.0l0.33,-0.33l0.04,0.0l0.02,-0.02l0.04,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.15,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.04,0.0l0.06,0.06l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.12,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.0,0.0l0.39,-0.39l0.0,0.03l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.12,0.12l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.12,0.0l0.02,0.02l0.12,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.06,0.06l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l-0.0,0.0l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.05l-0.29,0.31l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.01,0.01l-0.03,-0.03l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.06,-0.06l-0.0,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.0,0.0l-0.23,0.23l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.26,0.26l-0.01,-0.01l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.23,0.0l-0.06,0.06l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.04l-0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.13l-0.02,0.02l0.0,0.25l0.02,0.02l-0.0,0.17l0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.0l-0.12,0.12l-0.04,-0.04l-0.28,-0.32l-0.02,-0.0l-0.0,0.02l-0.0,-0.0l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,-0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.01,0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.0l0.02,-0.02l0.0,-0.19l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.33l0.25,-0.25l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.17l-0.4,-0.4l-0.06,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.13,0.0l-0.04,0.04l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.1,-0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.4,0.4l0.0,0.04l0.02,0.02l0.0,0.0l0.23,0.23l0.0,0.04l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.29l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l0.4,0.4l0.06,0.0l0.04,0.04l0.08,0.0l0.04,-0.04l0.0,0.0l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.17,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.08,0.08l0.0,0.0l0.02,0.02l0.02,0.0l0.17,0.17l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.25,0.25l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.0,0.0l-0.25,0.25l0.0,0.13l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.0,0.02l-0.1,0.0l-0.06,0.06l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.03,0.03l-0.36,-0.36l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.15,-0.15l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.06,-0.06l-0.06,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.13,-0.13l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,-0.0l-0.02,-0.02ZM312.32,698.6l-0.07,0.0l0.0,-0.04l0.02,-0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02ZM320.28,716.23l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.15l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.01,0.0l0.01,-0.01l0.02,0.0l0.36,-0.36l0.01,0.01l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.04,0.04l0.04,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.01,0.0l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l-0.18,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.19,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.04l-0.0,-0.0ZM319.17,704.48l-0.18,0.0l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.23,-0.23l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.08,-0.08l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.01,-0.01l0.04,-0.04l-0.0,-0.02l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.13l-0.01,-0.01l0.01,-0.01l-0.0,-0.04l0.02,-0.02l0.15,0.0l0.02,-0.02l0.08,0.0l0.04,-0.04l0.04,0.0l0.04,-0.04l0.06,0.0l0.02,-0.02l0.02,0.0l0.31,-0.31l0.06,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.02l0.12,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.12,0.0l0.04,0.04l0.04,0.0l0.04,0.04l0.13,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.08,0.0l0.04,0.04l0.08,0.0l0.04,0.04l0.08,0.0l0.02,0.02l0.08,0.0l0.03,0.03l-0.01,0.01l0.0,0.6l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.23l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.23l-0.31,0.31l0.0,0.06l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.42l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.15l0.02,0.02l-0.0,0.13l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.1l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.03l-0.18,-0.18l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.1,-0.1l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.06,0.0l-0.02,-0.02l-0.0,0.0l-0.06,-0.06l-0.04,0.0l-0.08,-0.08l-0.02,0.0l-0.15,-0.15l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.04,-0.04l-0.33,0.0l-0.02,0.02ZM319.17,698.13l0.02,0.02l0.17,0.0l0.3,-0.3l0.14,0.14l0.0,0.0l0.02,0.02l0.1,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l0.18,0.0l0.02,-0.02l0.25,0.0l0.02,-0.02l0.17,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.07l0.01,0.01l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.04l0.02,0.02l0.0,0.02l0.06,0.06l0.0,0.02l0.06,0.06l0.0,0.02l0.02,0.02l0.0,0.02l0.03,0.03l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.06l0.04,0.04l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.13l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.15l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.04l0.04,0.04l-0.0,0.02l0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.04,0.04l0.0,0.1l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.1l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,-0.02l-0.31,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.02l0.04,-0.04l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.12,-0.12l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.08,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.04,0.04l0.0,0.0l0.35,0.35l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.01,0.01l-0.01,0.01l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.13,-0.13l-0.02,0.0l-0.06,-0.06l0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.1,-0.1l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.04l-0.04,-0.04l0.0,-0.08l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0ZM318.82,697.2l-0.13,0.0l-0.02,0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.1,-0.1l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.06,-0.06l0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.0l-0.15,-0.15l0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.06,-0.07l0.02,-0.0l-0.0,-0.02l-0.12,-0.09l-0.03,-0.04l-0.02,-0.0l-0.0,0.0l-0.07,-0.06l-0.0,-0.01l-0.02,-0.02l0.0,-0.02l-0.1,-0.1l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.15,-0.15l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.04,-0.04l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.08,-0.08l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.0l0.04,-0.04l0.0,-0.04l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.1,-0.1l0.0,-0.0l0.0,-0.0l0.02,-0.02l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.06l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.15,-0.15l-0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.19,-0.19l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.02,0.0l0.07,-0.06l0.04,0.0l0.04,-0.04l0.0,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.13,-0.13l0.02,0.0l0.25,-0.25l0.02,0.0l0.06,-0.06l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.0,-0.0l0.12,-0.12l0.23,0.23l0.1,0.0l0.1,0.1l0.02,0.0l0.15,0.15l0.0,0.0l0.02,0.02l0.1,0.0l0.25,0.25l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l0.05,0.0l0.0,0.04l-0.02,0.02l0.0,0.17l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.04,0.04l0.0,0.0l0.17,0.17l0.0,0.1l0.01,0.01l-0.01,0.01l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.0l-0.25,0.25l0.0,0.08l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.06,0.06l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.31,0.31l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.08,0.08l0.0,0.04l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.08,0.0l0.19,-0.19l0.04,0.04l0.04,0.0l0.27,-0.27l0.06,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,-0.02l0.02,0.02l0.04,0.0l0.02,-0.02l0.15,0.0l0.02,-0.02l0.1,0.0l0.33,0.33l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.04,0.0l0.05,-0.05l0.01,0.01l0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l0.38,0.39l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l-0.01,0.01l-0.0,0.07l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.13l0.01,0.01l-0.01,0.01l0.0,0.04l0.04,0.04l-0.0,0.0l0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.44l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.02l0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.1l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.17,-0.17l-0.02,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.09,0.09l-0.03,-0.03l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.0,0.0l-0.32,0.32l-0.01,-0.01l-0.17,-0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02ZM321.4,690.37l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.19l0.02,0.02l0.0,0.02l0.08,0.08l0.0,0.0l0.4,0.4l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.1,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.25,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.13,-0.13l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.0,0.0l0.04,-0.04l0.05,-0.04l0.02,0.0l0.02,-0.02l0.0,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.1,-0.1l0.02,0.0l0.06,-0.06l0.02,0.0l0.04,-0.04l0.02,0.0l0.08,-0.08l0.02,0.0l0.06,-0.06l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.01,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l0.03,0.03l-0.01,0.01l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.27l-0.02,0.02l0.0,0.19l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.17l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.4,0.4l0.04,0.0l0.29,0.29l0.04,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.03,0.03l-0.03,0.03l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.1,0.1l-0.06,0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l-0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.08l0.12,-0.12l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.07,0.07l-0.03,-0.03l-0.02,0.0l-0.04,-0.04l-0.15,0.0l-0.4,0.4l0.0,0.13l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.15l0.1,0.1l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l-0.02,0.02l-0.08,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.0,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.04l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.4l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,-0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.0l-0.06,-0.06l-0.0,-0.02l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.26,-0.26l0.02,-0.02l0.15,-0.14l0.0,0.01l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.4,0.4l0.0,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.31,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.1,0.0l0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.17l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.02ZM325.86,692.49l0.0,-0.0l0.0,-0.13l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.29l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.08l0.04,-0.04l0.02,0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.08,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.04,0.0l0.06,-0.06l0.06,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.27,0.27l0.06,0.0l0.02,-0.02l0.02,0.0l0.34,-0.34l0.03,0.03l0.0,0.0l0.4,0.4l0.06,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.08,-0.08l0.1,0.0l0.02,0.02l0.1,0.0l0.04,0.04l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.08,0.08l0.0,0.02l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.02l-0.0,0.41l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.33,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.13,0.13l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.06,0.06l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.06,0.0l0.0,-0.02l-0.06,-0.06l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.02l-0.4,-0.4l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.08,-0.08ZM325.11,695.62l0.0,-0.17l0.02,-0.02l0.0,-0.04l0.04,-0.04l0.02,0.0l0.1,-0.1l0.04,0.0l0.02,-0.02l0.02,0.0l0.1,-0.1l0.07,-0.07l0.1,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.12,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.04,-0.04l0.02,0.0l0.18,-0.18l0.01,0.01l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.19,0.0l0.02,-0.02l0.1,0.0l0.02,0.02l0.0,0.0l0.08,0.08l-0.0,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.0l0.4,0.4l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,0.02l0.12,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.1,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.06,0.0l0.04,0.04l0.06,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.02,0.0l0.0,0.1l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.04,0.04l0.0,0.02l0.02,0.02l-0.0,0.0l0.4,0.4l0.06,0.0l0.04,0.04l0.04,0.0l0.0,0.02l0.04,0.04l-0.0,0.0l0.02,0.02l0.0,0.02l0.08,0.08l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.04,0.04l0.0,0.0l-0.28,0.28l-0.07,-0.07l-0.04,0.0l-0.02,0.02l-0.31,-0.31l-0.02,0.0l-0.03,0.03l-0.01,-0.01l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.4,0.37l-0.0,0.04l0.03,0.04l-0.01,0.0l0.0,0.06l-0.02,0.02l0.0,0.06l0.4,0.4l0.04,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.01,-0.01l0.03,0.03l0.04,0.0l0.1,-0.1l0.02,0.02l0.02,0.0l-0.0,0.04l0.4,0.4l0.04,0.0l0.17,0.17l0.02,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.02,0.02l0.02,0.0l0.13,0.13l0.04,0.0l0.02,-0.02l0.1,0.0l0.02,0.02l0.21,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.06,0.0l0.01,-0.01l0.01,0.01l0.06,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.06,0.06l-0.0,0.02l0.1,0.1l0.0,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.0,0.0l0.08,0.08l0.0,0.0l0.4,0.4l0.02,0.0l0.0,0.1l-0.02,0.02l0.0,0.29l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.06,0.06l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.1l0.02,0.02l-0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.33l0.02,0.02l0.0,0.23l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.19l-0.02,0.02l-0.0,0.15l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.17l0.01,0.01l-0.01,0.01l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.26,0.0l-0.02,0.02l-0.02,-0.02l-0.29,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.21l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l-0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.04,0.04l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.1,0.0l-0.02,0.02l-0.08,0.0l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.26,0.26l-0.01,-0.01l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.0,0.0l-0.02,-0.02l-0.03,0.0l0.02,-0.02l-0.0,-0.0l0.08,-0.08l0.0,-0.0l0.04,-0.04l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.06,-0.06l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.5l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.25l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.23l-0.02,-0.02l-0.0,-0.04l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.14,0.0l-0.02,-0.02l-0.0,-0.0l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.05,-0.05l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.14,-0.14l0.0,-0.06l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.31l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.06,0.06l-0.0,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.4,0.4l0.17,0.0l0.02,-0.02l0.02,0.0l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.08,0.08l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.08,0.08l0.0,0.0l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l-0.0,0.0l0.19,0.19l0.0,0.0l0.02,0.02l-0.02,0.02l-0.29,-0.29l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.23,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.06,0.0l-0.06,-0.06l-0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.15,-0.15l-0.02,0.0l-0.04,-0.04l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.19,-0.19l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.33,-0.33l-0.0,-0.0l-0.02,-0.02ZM331.25,705.03l0.25,-0.25l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,0.02l-0.17,0.0l-0.01,0.01l-0.02,-0.02l0.01,-0.01l0.0,-0.13l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.01,-0.01l0.05,-0.05l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.35,0.35l0.02,0.0l0.08,0.08l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.06,0.0l0.01,-0.01l0.01,0.01l0.0,0.04l-0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.08l0.02,0.02l0.0,0.06l0.03,0.03l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.4,0.4l0.02,0.0l0.08,0.08l0.02,0.0l0.06,0.06l0.04,0.0l0.01,-0.01l0.01,0.01l0.12,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.29,0.0l0.02,-0.02l0.23,0.0l0.02,-0.02l0.02,0.02l0.04,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.08,0.0l0.04,0.04l0.23,0.0l0.02,0.02l0.14,0.0l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.1,0.1l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.4,0.4l0.02,0.0l0.04,0.04l0.02,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.02,0.0l0.08,0.08l0.02,0.0l0.06,0.06l0.04,0.0l0.02,0.02l0.02,0.0l0.25,0.25l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.14,0.14l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.21,-0.21l-0.02,-0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.0,0.0l-0.37,0.38l-0.0,0.0l0.0,0.0l-0.0,0.0l-0.04,0.04l0.0,0.1l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.04,0.04l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.04l-0.1,0.1l0.0,0.0l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.06,-0.06l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.4,0.4l0.0,0.04l0.02,0.02l0.0,0.0l0.1,0.1l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l-0.01,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.27,-0.27l0.0,-0.02l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l0.0,-0.08l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l0.0,-0.02l-0.21,-0.21l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.0,-0.02l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.08l-0.01,-0.01l0.01,-0.01l0.0,-0.19l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.0ZM333.91,709.77l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.4,-0.4l0.0,-0.0l0.06,-0.06l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.03l0.03,0.03l-0.29,0.29l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.08l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.02l-0.06,0.06l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.4,0.4l0.0,0.0l-0.01,0.01l0.0,-0.01l0.06,-0.06l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.04,0.0l0.02,-0.02ZM333.53,710.62l-0.02,0.02l0.0,0.19l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.01l-0.16,-0.16l-0.02,0.0l-0.04,-0.04l-0.01,0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.1,-0.1l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.01,-0.01l0.0,0.01ZM334.43,711.03l-0.0,-0.04l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.04,-0.04l0.0,-0.08l-0.01,-0.01l0.01,-0.01l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.1l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.0,-0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.0,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.1,-0.1l0.01,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.08,0.0l0.04,0.04l0.04,0.0l0.08,0.08l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.1,0.1l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.08,0.08l0.0,0.0l0.02,0.02l0.02,0.0l0.1,0.1l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.23l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.1l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.17l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.19l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.04,0.04l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.1l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.03,0.03l0.0,-0.01l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.06l0.15,-0.15l0.0,-0.04l-0.4,-0.4l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.06,0.0l-0.4,0.4l0.0,0.25l0.06,0.06l-0.0,0.0l0.02,0.02l0.0,0.02l0.06,0.06l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.04,0.04l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.11,0.11l-0.01,-0.01l-0.08,0.0l-0.18,0.18l-0.01,-0.01l-0.08,0.0l-0.04,-0.04l-0.15,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.29,-0.29l-0.13,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.08,0.08l-0.04,0.0l-0.01,0.01l-0.11,-0.11l-0.08,0.0l-0.21,0.21l-0.12,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.0,0.07l-0.01,-0.01l0.0,-0.08l-0.01,0.0l-0.02,0.02l-0.05,0.0l-0.01,-0.01l-0.01,0.0l0.0,0.01l-0.02,0.0l-0.04,0.04l-0.04,0.0l0.0,-0.12l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.1,0.1l0.02,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.17,0.0l0.02,-0.02l0.04,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.23l-0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02ZM329.48,711.7l0.0,-0.15l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.02l0.06,-0.06l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.08,-0.08l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.06,-0.06l0.0,-0.0l0.08,-0.08l0.0,-0.0l0.06,-0.06l0.0,-0.0l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.04,-0.04l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.04,-0.04l0.0,-0.06l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.08,-0.08l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l-0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.04,-0.04l-0.0,-0.0l-0.21,-0.21l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.0l-0.25,-0.25l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l-0.0,-0.15l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.15l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.02l0.02,0.0l0.1,0.1l0.0,0.0l0.04,0.04l0.04,0.0l0.06,0.06l0.08,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.08,0.0l0.19,-0.19l0.02,0.0l0.02,-0.02l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.23,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.38,0.38l0.0,0.0l0.06,0.06l0.02,0.0l0.1,0.1l0.0,0.0l0.02,0.02l0.08,0.0l0.06,0.06l0.08,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.1,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.06,0.06l0.0,0.0l0.02,0.02l-0.0,0.0l0.04,0.04l0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.04,0.04l-0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.0l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.08l0.02,0.02l-0.0,0.13l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.03,0.03l-0.01,0.01l0.0,0.04l0.04,0.04l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.08,0.08l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.08l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.33,0.33l0.0,0.02l-0.02,0.02l0.0,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.21l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.13l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.04l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.19l0.02,0.02l0.0,0.1l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.19,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,-0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.0,-0.02l-0.15,-0.15l0.0,-0.02l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.1,-0.1l-0.0,-0.0l-0.17,-0.17l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.04,-0.04ZM329.38,705.05l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.01,-0.01l0.0,0.01l-0.02,0.02l0.0,0.0l-0.01,0.01l-0.01,-0.01ZM329.55,700.75l0.0,0.01l-0.01,-0.01l0.0,-0.01l0.01,0.01ZM329.53,700.72l-0.01,-0.01l0.0,-0.0l-0.04,-0.04l0.0,-0.04l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.01,-0.01l0.0,0.01l0.02,0.02l-0.0,0.15l0.01,0.01l-0.01,0.01l0.0,0.01ZM334.78,701.7l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.19l-0.02,-0.02l-0.0,-0.06l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.36,-0.36l0.01,-0.01l0.0,-0.15l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.04,-0.04l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.23,0.23l0.02,0.0l0.06,0.06l0.02,0.0l0.06,0.06l0.06,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.1,0.1l-0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.04l0.06,0.06l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.08l0.06,0.06l0.0,0.02l0.04,0.04l0.0,0.02l0.04,0.04l0.0,0.02l0.04,0.04l0.01,0.01l0.0,0.04l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.04l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.04,0.04l0.0,0.04l-0.02,0.02l0.0,0.02l0.04,0.04l-0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.13,0.13l-0.0,0.0l0.0,0.02l0.02,0.02l0.0,0.1l0.04,0.04l0.0,0.0l0.13,0.13l0.0,0.06l0.02,0.02l0.0,0.1l0.02,0.02l-0.0,0.13l0.02,0.02l0.0,0.21l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l-0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l-0.0,0.02l-0.06,0.06l-0.0,0.04l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.1l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.12,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.35,-0.35l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.01,0.01l-0.03,-0.03l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.19,-0.19l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.31l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.1l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.13l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.21l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.04l0.06,-0.06l0.0,-0.02l-0.01,-0.01l0.01,-0.01l-0.0,-0.06l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l-0.01,-0.01ZM328.35,694.26l-0.23,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,0.02l-0.14,0.0l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.12,-0.12l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.08,-0.08l0.04,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.19,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.1,0.0l0.02,0.02l0.17,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.19,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,-0.02l0.17,0.0l0.02,-0.02l0.02,0.02l0.02,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.15,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.02,0.02l0.08,0.0l0.02,-0.02l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,0.02l0.04,0.0l0.0,0.1l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l-0.12,0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.27,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.1,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02ZM331.62,694.12l0.0,-0.0l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.04l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.17,-0.17l0.0,-0.0l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.05l0.27,0.27l-0.01,0.01l0.0,0.06l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.01,0.01l-0.39,0.39l0.0,0.0l-0.02,0.02l0.0,0.04l0.08,0.08l0.0,0.04l0.02,0.02l-0.0,0.0l0.06,0.06l-0.0,0.02l0.02,0.02l0.0,0.27l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.4,0.4l0.0,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.08,0.0l-0.0,0.02l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.17,0.17l0.0,0.06l-0.15,0.15l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.17l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l0.0,-0.21l-0.02,-0.02l0.0,-0.0l0.0,-0.04l-0.02,-0.02l0.0,-0.17l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.21l-0.02,-0.02ZM332.58,694.37l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.16,-0.16l0.01,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.08,0.0l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02ZM333.27,695.43l0.0,-0.04l0.05,-0.05l0.0,0.07l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.02,-0.02ZM333.29,695.51l0.0,0.0l-0.0,0.0l0.0,-0.0ZM330.73,692.1l-0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l0.02,0.0l0.19,-0.19l0.1,0.1l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.1,0.1l0.0,0.0l-0.01,0.01l0.0,-0.03l-0.02,-0.02ZM329.63,692.16l0.02,-0.02l0.0,-0.21l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.01l0.03,0.03l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.07,0.07l-0.01,0.01l0.0,0.02l0.04,0.04l0.0,0.0l0.08,0.08l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.08l-0.08,0.0l-0.02,0.02l-0.08,0.0l0.02,-0.02l-0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06ZM328.21,690.43l0.01,0.0l0.01,0.01l-0.01,0.01l-0.01,-0.01ZM337.62,698.27l0.0,-0.33l0.01,-0.01l0.36,0.36l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.04,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,0.02l0.17,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.08,-0.08l0.0,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.02,0.02l0.04,0.0l0.02,-0.02l0.02,0.02l0.06,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.1,0.1l0.02,0.0l0.23,0.23l0.0,0.0l0.02,0.02l0.27,0.0l0.02,-0.02l0.02,0.0l0.25,-0.25l0.0,0.07l-0.02,0.02l-0.0,0.02l-0.1,0.1l0.0,0.04l-0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.08,0.08l-0.19,0.19l-0.0,0.0l-0.02,0.02l-0.0,0.0l-0.08,0.08l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.24,0.24l-0.01,-0.01l-0.08,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.08,0.08l0.0,0.08l-0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.0l0.05,0.05l0.2,0.2l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.06,0.06l0.0,0.02l0.0,0.0l-0.35,0.35l0.0,0.0l-0.02,0.02l-0.23,-0.23l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.37,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.13,-0.13l0.01,-0.01l0.0,-0.04l0.02,-0.02l0.0,-0.35l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.15,-0.15l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.08l-0.02,-0.02ZM339.99,701.78l0.0,0.0l0.04,-0.04l0.04,0.0l0.16,-0.16l0.38,0.39l0.0,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.06,0.06l0.0,0.02l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.08,0.08l0.0,0.0l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.05,0.05l0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.06,0.06l-0.0,0.0l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.01l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.05,-0.05l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.27,-0.27l-0.0,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.2,-0.2l0.0,-0.0l-0.25,-0.25l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.06,-0.06l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.19l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.04l-0.06,-0.06l-0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.1,-0.1l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.08,-0.08l0.18,0.0l0.02,-0.02l0.04,0.0l0.0,0.1l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.08l0.4,0.4l0.04,0.0l0.02,0.02l0.12,0.0l0.02,-0.02l0.0,0.0l0.1,-0.1l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02ZM342.95,706.22l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l0.33,-0.33l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.01,-0.01l0.09,0.09l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.08l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.11,0.11l-0.33,0.33l-0.0,0.02l-0.02,0.02l0.0,0.23l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.0l0.06,0.06l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.04,0.04l0.0,0.04l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.1,0.1l0.02,0.0l0.06,0.06l0.0,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.04l0.02,0.02l-0.03,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.03,0.03l-0.01,-0.01l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.14,-0.14l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l-0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.12,-0.12l0.0,-0.0l-0.08,-0.08l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.15,-0.15l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.08l-0.02,-0.02ZM344.01,706.74l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.03,-0.03l0.02,0.0l0.4,-0.4l0.27,0.27l0.02,0.0l0.01,0.01l-0.01,0.01l0.0,0.0l-0.02,0.02l0.0,0.08l-0.12,0.12l0.0,0.0l-0.08,0.08l0.0,0.06l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.01l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02ZM345.04,709.82l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.04l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l0.1,0.0l0.02,-0.02l0.04,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.2l0.31,0.31l0.0,0.0l0.09,0.09l-0.01,0.01l0.0,0.02l-0.04,0.04l-0.0,0.02l-0.02,0.02l0.0,0.08l0.01,0.01l-0.22,0.22l0.0,0.13l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.06l0.07,0.07l0.08,0.09l-0.01,0.01l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.17,0.0ZM346.32,708.91l0.15,-0.15l0.0,-0.15l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.0l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.19l-0.0,-0.0l0.23,-0.23l0.02,0.0l0.03,-0.03l0.05,0.05l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.23,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.18,-0.18l0.05,0.05l-0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.04,0.04l0.0,0.0l-0.17,0.17l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.08l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.1l0.02,0.02l-0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.04,0.0l0.0,0.04l0.02,0.02l-0.07,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.33,-0.33l-0.0,0.0l-0.02,-0.02l-0.17,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.03,0.03l-0.05,-0.05ZM345.83,707.58l0.01,-0.01l0.0,-0.01l0.01,0.01l0.0,0.04l-0.01,0.0l0.0,-0.02l-0.01,-0.01ZM345.83,707.28l0.0,0.07l-0.1,-0.1l0.0,-0.0l0.05,-0.05l0.03,0.03l-0.0,0.02l0.02,0.02ZM348.35,708.13l0.05,-0.05l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.0,-0.08l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.01,-0.01l0.01,0.01l0.0,0.08l-0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.13l0.02,0.02l-0.0,0.04l0.02,0.02l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.03l-0.29,-0.29l-0.08,0.0l-0.05,-0.05ZM342.73,704.0l-0.02,-0.02l-0.04,0.0l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.0l-0.15,-0.15l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.23,-0.23l-0.0,-0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.05,-0.05l0.0,0.01l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.4,0.4l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.21,0.0l0.02,-0.02l0.05,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l-0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l0.04,0.04l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.01l-0.04,-0.04l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0ZM343.94,704.26l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.01l0.33,0.33l-0.01,0.01l0.0,0.04l-0.02,0.02l0.0,0.1l-0.02,0.02l-0.0,0.0l-0.04,0.04l0.0,0.02l0.3,0.3l-0.03,0.03l0.0,0.0l-0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.08l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.0,0.01l-0.01,-0.01l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.19l-0.02,-0.02ZM346.04,705.27l-0.31,0.0l-0.02,-0.02l0.0,-0.19l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.04l-0.02,-0.02l0.0,-0.19l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.1,0.0l0.02,0.02l0.12,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.0,0.04l0.01,0.01l-0.07,0.07l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02ZM343.77,704.02l-0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.02,0.02l0.0,0.0l0.01,0.01l-0.01,0.01l0.0,0.13l0.04,0.04l0.0,0.0l0.03,0.03l-0.11,0.11l-0.0,0.04l-0.02,0.02l0.0,0.0l-0.08,0.08l0.0,0.0l-0.08,0.08l0.0,0.03ZM348.23,705.59l-0.0,-0.13l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l0.25,-0.25l0.02,0.0l0.06,0.06l0.02,0.0l0.04,0.04l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.17,0.0l0.02,-0.02l0.0,0.01l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.04l0.02,0.02l0.0,0.0l0.15,0.15l-0.0,0.02l0.02,0.02l0.0,0.01l0.08,0.08l0.0,0.01l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.03l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.01l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.01,0.01l-0.03,-0.03l-0.15,0.0l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02ZM350.15,707.05l0.22,-0.22l0.0,0.01l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.15l0.01,0.01l-0.01,0.01l0.0,0.13l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.07,0.07l0.0,0.02l0.02,0.02l0.0,0.04l0.12,0.12l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.08l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.08,0.0l0.0,-0.04l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.15l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.23l0.02,-0.02l-0.0,-0.08l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02ZM346.8,704.19l-0.02,-0.02l-0.01,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.01,0.0l0.04,0.04l0.04,0.0l0.06,0.06l-0.02,0.0l-0.02,-0.02l-0.01,0.0l-0.02,-0.02l-0.01,0.0ZM351.98,708.53l0.31,-0.31l0.0,-0.0l0.01,-0.01l0.0,0.03l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.35l0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.08l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.14l-0.02,0.0l-0.02,0.02l-0.15,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.04l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.0ZM351.49,707.38l-0.02,0.02l0.0,0.16l-0.01,-0.01l0.0,-0.0l-0.1,-0.1l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.1,-0.1l0.0,-0.0l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.02,0.0l0.08,-0.08l0.0,0.01l0.04,0.04l-0.0,0.08l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02ZM350.04,706.03l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l-0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.37,-0.37l0.0,-0.0l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.01,-0.01l-0.0,0.05l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.08l-0.23,0.23l0.0,0.02l-0.08,0.08l0.0,0.04l0.02,0.02l0.0,0.0l0.07,0.07l-0.07,0.07l-0.02,-0.02ZM352.77,706.84l0.35,-0.35l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.05,-0.05l0.27,-0.27l0.31,0.31l-0.01,0.01l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.19l-0.02,0.02l0.0,0.04l-0.08,0.0l-0.1,-0.1l-0.0,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.23,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,-0.08l0.0,-0.0ZM352.85,705.32l0.01,-0.01l0.01,0.01l0.21,0.0l0.02,-0.02l0.15,0.0l0.02,0.02l0.02,0.0l0.0,0.12l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.0l-0.02,0.02l-0.19,-0.19l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02ZM356.96,708.06l0.01,-0.01l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.15,-0.15l0.26,-0.26l0.39,0.39l0.06,0.0l0.16,-0.16l0.22,0.22l0.04,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.01,-0.01l0.26,-0.26l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.01l0.27,0.27l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.04,0.0l0.04,0.04l0.1,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.04,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.32,-0.32l0.12,-0.12l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.17,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.0,0.0l0.04,-0.04l0.06,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.35,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.01,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.21l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.12,0.12l0.0,0.0l0.02,0.02l0.0,0.0l0.12,0.12l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.1,0.1l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.13,0.13l0.02,0.0l0.1,0.1l0.08,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.04,0.0l0.04,0.04l0.1,0.0l0.02,0.02l0.12,0.0l0.01,-0.01l0.01,0.01l0.1,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.04,0.0l0.02,-0.02l0.02,0.0l0.1,-0.1l0.0,0.0l0.25,-0.25l0.0,0.01l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.06,0.06l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.05,0.05l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.19,0.19l0.0,0.0l0.33,0.33l0.0,0.0l0.02,0.02l-0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.04l-0.07,0.07l-0.03,0.03l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l-0.04,0.04l0.0,0.0l-0.04,0.04l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.04l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.06,0.0l-0.04,-0.04l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.19,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.15,0.15l-0.02,0.0l-0.15,0.15l-0.02,0.0l-0.15,0.15l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.06,0.06l-0.02,0.0l-0.08,0.08l-0.04,0.0l-0.06,0.06l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.04,-0.04l0.0,-0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.13l0.02,-0.02l0.0,-0.02l0.4,-0.4l0.0,-0.0l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.0l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.02l-0.02,-0.02l0.0,-0.1l-0.01,-0.01l0.01,-0.01l0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.04l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.08,-0.08l-0.06,0.0l-0.02,-0.02l-0.23,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.06,0.0l-0.04,0.04l-0.0,0.0l-0.04,0.04l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.1,-0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.0,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.06,-0.06l-0.0,0.0l-0.02,-0.02l-0.06,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.01,-0.01ZM361.26,711.75l0.02,0.02l0.17,0.0l0.02,0.02l0.1,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.15,0.0l0.02,-0.02l0.04,0.04l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.04,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.0,0.0l0.1,-0.1l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.0,0.0l0.02,0.02l0.02,0.0l0.25,0.25l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.19,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,-0.02l0.02,0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.02l0.06,0.0l0.06,-0.06l0.06,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,0.0l0.04,-0.04l0.0,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.0,0.03l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l0.4,0.4l0.0,0.0l0.06,0.06l0.02,0.0l0.08,0.08l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.02,0.02l0.04,0.0l0.02,-0.02l0.02,0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.0,-0.0l0.02,-0.02l-0.0,-0.04l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.13l-0.01,-0.01l0.01,-0.01l0.0,-0.1l0.04,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.01l0.02,0.02l0.06,0.0l0.01,-0.01l0.01,0.01l0.0,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.08,0.08l0.02,0.0l0.13,0.13l-0.05,0.05l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l0.0,0.0l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l0.0,0.0l-0.03,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.04l-0.06,0.06l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.19l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.17l-0.02,0.02l0.0,0.19l0.02,0.02l0.0,0.02l0.25,0.25l-0.0,0.0l-0.0,0.06l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.23,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.29,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.27,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.44,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.19,0.0l-0.02,-0.02l-0.19,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.25,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.12,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.31,0.0l-0.02,0.02l-0.37,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.17,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.19,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.13,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.1,0.1l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.04,0.04l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.48,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.21,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.21,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.31,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.25,0.0l-0.02,0.02l-0.02,-0.02l-0.48,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.01,0.0l0.16,-0.16l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.02l0.02,-0.02l0.0,-0.1l-0.0,-0.0l0.17,-0.17l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.12,-0.12l0.0,-0.04l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.15l-0.02,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.01l0.16,0.16l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.19,0.0l0.02,-0.02l0.06,0.0l0.21,-0.21l0.17,0.17l0.02,0.0l0.02,0.02l0.21,0.0l0.06,-0.06l0.19,0.19l0.12,0.0l0.08,-0.08l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.1,-0.1l0.02,0.0l0.17,-0.17l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.1,0.0l0.04,-0.04l0.06,0.0l0.4,-0.4l0.0,-0.04l-0.01,-0.01l0.14,-0.14l0.0,-0.04l-0.4,-0.4l-0.23,0.0l-0.02,0.02l-0.0,0.0l-0.08,0.08l-0.12,0.0l-0.02,-0.02l-0.06,0.0l-0.04,0.04l-0.1,-0.1l-0.06,0.0l-0.01,0.01l-0.01,-0.01l0.02,-0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.12,0.0l0.02,-0.02l0.02,0.02l0.04,0.0l0.1,-0.1l0.02,0.0l0.04,-0.04l0.0,0.0l0.17,-0.17l0.02,0.0l0.06,-0.06l0.02,0.0l0.08,-0.08l0.02,0.0l0.12,-0.12l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.0l0.4,0.4l0.04,0.0l0.04,0.04l0.17,0.0l0.26,-0.26l0.16,0.16l0.04,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.06,0.06l0.0,0.0l0.02,0.02l-0.0,0.04l0.04,0.04l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.13,0.13l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.15,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.2,-0.2l0.0,0.03l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.1,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.02,0.0l0.15,-0.15l0.04,0.0l0.02,0.02l0.1,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.02,0.0l0.39,-0.38l0.01,0.01l0.02,0.0l0.02,0.02l0.02,0.0l0.08,0.08l0.02,0.0l0.02,-0.02l0.1,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.08,0.0l0.02,0.02l0.15,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.15,0.0l0.02,-0.02l0.15,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.16,0.0l-0.08,0.08l-0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.08,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.12,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.4,-0.4l-0.0,-0.0l0.02,-0.02l0.0,-0.05l0.06,0.06l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.12,0.0l0.04,0.04l0.02,0.0ZM362.57,710.65l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.01,0.0l0.08,-0.08l0.02,0.0l0.04,-0.04l0.0,0.0l0.06,-0.06l0.02,0.0l0.13,-0.13l0.08,0.0l0.02,-0.02l0.44,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.12,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.06,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.08,0.08l0.02,0.0l0.04,0.04l0.04,0.0l0.0,0.02l-0.14,0.14l-0.11,0.11l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.1,-0.1l-0.0,-0.06l-0.4,-0.4l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.08,0.08l-0.02,-0.02l-0.04,0.0l-0.08,-0.08l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.04,0.04ZM361.92,710.66l-0.0,0.0l-0.0,-0.0l0.01,0.0ZM366.21,710.18l0.04,0.04l0.01,0.0l-0.01,0.01l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.14,0.14l-0.39,-0.39l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l0.0,-0.04l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.19,0.19l0.01,0.03l-0.02,0.01l0.01,0.01l0.02,-0.01l0.04,0.1l0.02,0.02l0.23,0.11l0.04,0.0l0.0,-0.02ZM351.85,710.86l-0.01,-0.01l0.03,0.0l-0.01,0.01ZM355.83,710.37l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.1,-0.1l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.23,-0.23l0.01,0.0l0.4,-0.4l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.01,-0.01l0.32,0.32l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.01,-0.01l0.01,0.01l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.12,0.0l0.0,0.02l0.02,0.02l-0.0,0.13l0.02,0.02l0.0,0.0l0.25,0.25l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.17,0.17l0.0,0.08l0.01,0.01l-0.18,0.18l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.09,0.09l-0.01,-0.01ZM358.27,710.25l0.09,-0.09l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.19,-0.19l0.02,0.02l0.04,0.0l0.02,-0.02l0.02,0.02l0.06,0.0l0.04,-0.04l0.06,0.0l0.02,-0.02l0.02,0.0l0.21,-0.21l0.01,0.0l-0.08,0.08l-0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.06l-0.1,0.1l0.0,0.1l0.15,0.15l0.0,0.0l0.02,0.02l-0.07,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,-0.0l-0.02,-0.02l-0.06,0.0l-0.01,-0.01ZM354.23,709.53l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.04,0.0l0.04,0.04l-0.0,0.0l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,0.02l0.0,-0.03l-0.02,-0.02ZM353.41,708.66l0.0,-0.02l-0.02,-0.02l0.05,0.0l0.02,0.02l-0.04,0.04l-0.02,-0.02ZM355.89,707.97l0.0,-0.0l-0.02,-0.02l0.0,-0.01l0.07,0.07l-0.03,0.03l-0.0,-0.05l-0.02,-0.02ZM340.47,700.99l0.12,0.0l0.15,-0.15l0.04,0.0l0.01,0.01l-0.22,0.22l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.03,0.03l-0.01,-0.01l-0.0,-0.08l-0.02,-0.02l0.0,-0.04ZM332.55,698.47l0.11,-0.11l0.0,-0.0l0.1,-0.1l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l-0.17,0.17l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.04l-0.06,0.06l-0.0,0.02l-0.01,0.01l-0.01,-0.01l0.0,-0.0l-0.04,-0.04l-0.03,-0.03l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.13,-0.13l-0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.09,-0.09ZM331.93,698.04l-0.02,-0.02l-0.08,0.0l0.03,-0.03l0.08,0.0l0.0,0.04l-0.02,0.02ZM330.07,704.05l-0.01,-0.01l0.0,-0.03l0.01,0.01l0.0,0.02l-0.01,0.01ZM330.05,703.97l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l0.04,0.0l0.02,-0.02l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.0,0.04l0.02,0.02l0.0,0.0l0.01,0.01l-0.01,0.01l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.01,-0.01ZM328.68,704.41l-0.01,-0.01l0.0,-0.13l-0.02,-0.02l-0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.04,-0.04l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.14,-0.14l0.33,0.0l0.02,-0.02l0.02,-0.02l0.02,0.02l0.02,0.0l0.02,-0.02l0.02,0.0l-0.0,0.04l0.02,0.02l0.0,0.02l0.04,0.04l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.06l-0.04,0.04l0.0,0.04l-0.04,0.04l-0.0,0.02l-0.08,0.08l0.0,0.06l-0.02,0.02l0.0,0.01ZM325.52,703.76l0.02,0.02l0.04,0.0l0.02,-0.02l0.02,0.02l0.1,0.0l0.04,0.04l0.21,0.0l0.02,-0.02l0.04,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.01,-0.01l0.01,0.01l0.1,0.0l0.02,0.02l0.17,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.06,0.0l0.04,0.04l0.06,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.08,0.08l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.15l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.08l0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.27l0.02,0.02l0.0,0.19l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.1l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.1l0.01,0.01l-0.01,0.01l0.0,0.1l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.19l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.02l0.04,0.04l0.0,0.04l0.04,0.04l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.21,0.21l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.36,0.36l-0.01,0.01l-0.18,0.18l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.26,-0.26l0.01,-0.01l0.0,-0.13l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.07,0.07l0.07,0.07l-0.01,0.01l-0.0,0.0l-0.23,0.23l0.0,0.0l-0.02,0.02l0.0,0.1l0.4,0.4l0.0,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.13,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.0l-0.06,0.06l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.1,0.1l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.2,0.2l-0.01,0.01l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.17l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.1l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.08,0.08l0.0,0.0l0.02,0.02l0.0,0.0l0.08,0.08l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.06,0.06l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.4,0.4l0.03,0.0l-0.01,0.01l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.01,0.01l-0.03,-0.03l-0.12,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.03,-0.03l-0.02,-0.02l-0.02,-0.0l-0.02,0.02l-0.03,0.0l0.0,0.02l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l0.15,-0.15l0.0,-0.08l-0.25,-0.26l0.0,-0.03l-0.06,-0.06l0.0,-0.02l-0.04,-0.04l0.0,0.0l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.0,-0.0l0.0,-0.03l0.0,-0.03l-0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.17l0.02,-0.02l0.0,-0.08l-0.25,-0.25l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.03,-0.03l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.1l-0.04,-0.04l-0.0,-0.08l-0.01,-0.01l0.01,-0.01l0.0,-0.15l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.15l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.17l-0.02,-0.02l-0.0,-0.13l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.06,-0.06l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.08l-0.02,-0.02l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.06,-0.06l-0.0,-0.1l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l0.0,-0.04l-0.05,-0.05l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.19,-0.19l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.02,-0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.08,-0.08l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.04,-0.04l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.06,-0.06l0.0,-0.04l0.02,-0.02l0.0,-0.29l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.19l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l-0.0,-0.15l-0.04,-0.04l0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.04,0.04l0.0,0.0l0.4,0.4l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.06,0.0ZM325.51,702.54l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.15l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.04l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.12,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.19,0.19l0.0,0.0l0.02,0.02l-0.0,0.08l0.02,0.02l0.0,0.0l0.01,0.01l-0.01,0.01l-0.0,0.0l-0.12,0.12l0.0,0.0l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.01,-0.01l0.18,-0.18l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.0l-0.15,-0.15l0.0,-0.0l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.35l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,-0.0l-0.04,-0.04l-0.02,0.0l-0.01,-0.01l0.19,-0.19l0.02,0.0l0.04,-0.04l0.04,0.0l0.04,-0.04l0.06,0.0l0.02,-0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.0,0.04l0.06,0.06l0.0,0.04l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.06,0.06l0.0,0.06l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.1l0.01,0.01l-0.01,0.01l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.0l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.4,0.4l0.0,0.0l0.02,0.02l0.02,0.0l0.01,0.01l-0.01,0.01l0.0,0.13l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.14,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.17,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.06,0.06l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.29l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.27,0.27l-0.1,0.0l-0.02,-0.02l-0.08,0.0ZM324.43,699.93l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.17l-0.02,-0.02l0.0,-0.17l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.06,-0.06l0.02,0.0l0.21,-0.21l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.27,0.26l-0.05,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.04,0.0l-0.03,0.03l-0.01,-0.01l-0.06,0.0l-0.02,0.02l-0.0,0.0l-0.1,0.1l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.1,0.1l-0.04,0.0l-0.02,0.02l-0.01,-0.01ZM325.45,699.8l0.01,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.1,-0.1ZM324.16,698.53l-0.11,-0.11l0.0,-0.1l-0.02,-0.02l0.0,-0.08l0.02,0.0l0.22,0.22l-0.05,0.05l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.01,0.01ZM327.83,702.25l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.13l-0.02,0.02l-0.0,0.08l-0.22,0.22l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.16,-0.16l0.07,-0.07l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.02,0.0l0.04,-0.04l0.06,0.0l0.04,-0.04l0.27,0.27l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.39,-0.39l0.01,0.01l0.06,0.0l0.02,0.02l-0.0,0.0l0.0,0.0l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.13ZM328.65,702.34l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.07,-0.07l0.0,0.03l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l-0.24,0.24l0.0,-0.05l0.02,-0.02l0.0,-0.15ZM328.62,700.92l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.19,0.19l-0.02,0.0l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.15l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.19l-0.27,-0.27l0.01,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.23,0.0l0.14,0.14l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.04l-0.04,0.0ZM329.79,702.23l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.04,-0.04l0.0,-0.06l0.02,-0.02l0.0,-0.05l0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.02l0.02,0.02l0.0,0.44l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.29,0.29l-0.1,-0.1l0.0,-0.0l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.08,-0.08l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.08,-0.08l0.0,-0.04l0.02,-0.02l-0.0,-0.08l0.02,-0.02l0.0,-0.15l-0.02,-0.02ZM325.67,697.44l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.15,-0.15l0.0,-0.02l-0.04,-0.04l0.0,-0.14l0.03,0.03l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.1,0.1l0.0,0.0l0.08,0.08l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.08,0.08l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l-0.07,0.0l0.0,-0.02l-0.02,-0.02ZM323.14,695.46l-0.05,-0.05l-0.04,0.0l-0.06,-0.06l-0.04,0.0l-0.22,0.22l0.0,-0.26l0.02,-0.02l0.0,-0.08l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.1,0.0l0.08,0.08l0.02,0.0l0.04,0.04l0.04,0.0l0.02,-0.02l0.1,0.0l0.08,-0.08l0.08,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l-0.3,0.3ZM325.12,698.26l-0.01,-0.01l0.0,-0.01l0.01,0.01l-0.0,0.0ZM303.74,701.2l0.01,-0.01l0.0,-0.1l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.01l0.05,0.05l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.21l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.1,0.1l-0.01,-0.01ZM306.29,700.06l-0.01,-0.01l0.03,0.0l0.04,0.04l0.02,0.0l0.01,0.01l-0.03,0.0l-0.04,-0.04l-0.02,0.0ZM334.91,717.54l0.02,-0.02l-0.0,-0.02l0.06,-0.06l0.06,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.04,0.0l0.1,0.1l0.02,0.0l0.06,0.06l0.02,0.0l0.04,0.04l0.02,0.0l0.08,0.08l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.46,0.0l0.02,0.02l0.17,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.23,0.0l0.02,-0.02l0.04,0.04l0.02,0.0l0.04,0.04l0.12,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l0.0,-0.1l-0.4,-0.4l-0.23,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.19,-0.19l-0.08,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.15,0.15l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.01,-0.01l0.01,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.08,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.25,-0.25l0.02,-0.02l-0.0,-0.02l0.06,-0.06l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.0,-0.0l0.35,-0.35l0.0,-0.04l0.02,-0.02l0.0,-0.1l0.06,-0.06l0.0,-0.0l0.19,-0.19l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.15,-0.15l0.0,-0.0l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.31,-0.31l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.03l0.03,0.03l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.08,0.08l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.1,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.27,0.27l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.19,0.0l0.06,-0.06l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.08,0.0l0.04,-0.04l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.19,0.19l0.08,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.08,0.0l0.02,0.02l0.04,0.0l0.38,-0.38l0.06,0.0l0.02,-0.02l0.17,0.0l0.02,-0.02l0.13,0.0l0.02,-0.02l0.06,0.0l0.06,0.06l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.35,0.35l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.23,0.23l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.08,-0.08l0.03,0.0l0.02,0.02l0.04,0.0l0.06,-0.06l0.02,0.0l0.4,-0.4l0.0,-0.04l-0.4,-0.4l-0.06,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.24,0.24l-0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.27,-0.27l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.15l0.04,-0.04l-0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.05,0.0l0.16,-0.16l0.0,-0.0l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.29,0.29l-0.25,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.03,0.03l-0.01,-0.01l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.1,0.0l-0.13,0.13l-0.04,0.0l-0.02,0.02l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.04,0.04l0.0,-0.01l-0.06,-0.06l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l-0.0,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.36,-0.36l0.01,0.01l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.4,0.4l0.0,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.27,0.0l0.02,-0.02l0.04,0.0l0.24,-0.24l0.01,0.01l-0.0,0.0l0.06,0.06l-0.0,0.0l0.02,0.02l0.0,0.0l0.33,0.33l-0.0,0.0l-0.0,0.0l-0.02,0.02l0.0,0.19l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.04,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.15,0.0l0.02,-0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.08,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.1,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.08,-0.08l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.04,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.4,0.4l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.35,0.35l0.02,0.0l0.02,0.02l0.04,0.0l0.06,0.06l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.17,0.0l0.02,-0.02l0.0,0.0l0.06,-0.06l0.04,0.0l0.04,-0.04l0.02,0.0l0.4,-0.4l0.0,-0.0l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.19l0.08,0.08l0.0,0.0l0.02,0.02l0.0,0.25l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.42l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.17l0.02,0.02l-0.0,0.15l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.06,0.06l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.04,0.0l-0.1,0.1l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.14,0.14l-0.05,-0.05l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.08,0.08l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.06,0.06l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.13,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.23,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.23,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.15,0.0l-0.02,-0.02l-0.27,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.13,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.12,0.0l-0.01,0.01l-0.01,-0.01l-0.12,0.0l-0.02,-0.02l-0.21,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.12,0.0l0.0,-0.14l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.08l-0.02,-0.02ZM340.3,712.89l0.02,0.02l0.04,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.01l0.12,0.12l0.02,0.0l0.02,0.02l0.03,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.04l-0.14,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.22,0.22l-0.34,-0.34l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.04,0.04l-0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.12l-0.02,0.0l-0.02,0.02l-0.15,0.0l-0.02,-0.02l-0.04,0.0l-0.1,-0.1l-0.02,0.0l-0.35,-0.35l-0.1,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.08l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.06l0.37,-0.37l0.0,-0.0l0.04,-0.04l0.0,-0.04l0.01,-0.01l0.0,0.05l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.1,0.1l0.02,0.0l0.02,0.02l0.19,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l-0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.02,0.0l0.02,0.02l0.15,0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.06,0.0l0.04,0.04l0.0,0.0ZM339.18,712.05l0.0,-0.03l-0.02,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.01l0.04,0.04l-0.06,0.06ZM341.03,709.22l0.0,-0.04l0.02,-0.02l0.0,-0.08l0.08,-0.08l0.0,-0.13l-0.02,-0.02l0.0,-0.0l-0.0,-0.0l0.21,-0.21l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.0l-0.01,-0.01l0.03,-0.03l0.0,-0.02l0.23,-0.23l0.0,-0.0l0.12,-0.12l0.0,-0.0l0.04,-0.04l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.15,-0.15l0.0,-0.0l0.14,-0.14l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.12,0.12l-0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l-0.0,0.0l0.1,0.1l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.08,0.08l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.08,0.08l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.4,0.4l0.02,0.0l0.1,0.1l0.0,0.0l0.06,0.06l0.02,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.01,0.0l-0.01,0.01l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l0.0,-0.24l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.31,0.0l-0.02,0.02l0.0,-0.01l-0.02,-0.02l-0.0,-0.02l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.01,0.0l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.17,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.35,0.35l-0.02,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.12,-0.12l0.0,-0.0l-0.02,-0.02ZM345.17,710.95l-0.03,0.0l0.01,-0.01l0.02,0.0l0.01,0.01l-0.01,0.01ZM346.22,711.52l0.01,-0.01l0.0,-0.02l-0.02,-0.02l-0.0,-0.15l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.29,-0.29l0.16,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.15,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.21,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.27,0.0l0.02,-0.02l0.0,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.1,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.01,0.01l-0.01,0.01l-0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.04,0.04l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l-0.02,0.02l0.0,0.01l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.31,-0.31l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.01,-0.01Z", "name": "Rivers"}, "2049": {"path": "M109.74,33.71l0.02,-0.19l0.12,-0.98l0.02,-0.14l0.47,-0.01l0.36,0.0l0.01,-0.0l1.55,-0.03l0.41,-0.01l0.63,0.12l0.14,0.0l1.15,-0.2l-0.01,-0.06l0.2,0.08l0.54,-0.41l0.01,-0.01l0.32,-0.26l0.32,-0.26l0.02,-0.01l0.02,-0.02l2.61,-2.38l0.09,-0.08l3.27,-2.87l0.86,-0.72l0.01,-0.01l1.13,-1.03l0.17,-0.05l0.18,-0.1l0.01,-0.01l1.5,-1.5l0.37,-0.36l0.05,-0.05l0.05,-0.04l1.11,-0.94l0.0,-0.0l2.53,-2.17l0.01,-0.01l0.21,-0.18l0.02,-0.02l0.56,-0.57l0.0,-0.0l0.0,-0.0l0.75,-0.63l1.06,-0.88l0.01,-0.01l0.49,-0.44l0.67,-0.58l0.01,-0.01l0.45,-0.42l0.21,-0.19l0.01,-0.01l0.13,-0.13l0.18,-0.17l0.87,-0.1l0.29,-0.17l0.0,-0.01l0.0,-0.0l0.05,-0.08l1.57,-0.3l1.42,-0.27l2.02,-0.37l0.07,-0.01l0.14,-0.05l0.26,-0.15l0.23,-0.02l0.66,-0.06l0.04,-0.01l1.14,-0.23l0.0,-0.0l0.05,-0.01l0.06,-0.01l0.34,-0.05l0.03,-0.01l0.4,-0.09l0.04,-0.01l0.0,-0.0l0.14,-0.03l1.33,-0.29l0.08,-0.01l0.06,-0.01l0.69,-0.19l1.43,-0.25l2.02,-0.33l0.01,-0.0l0.73,-0.14l0.44,-0.08l0.01,-0.0l0.79,-0.16l2.12,-0.42l0.09,-0.02l0.92,-0.14l0.11,-0.01l0.09,-0.02l0.54,-0.19l0.02,-0.01l0.11,-0.02l0.08,-0.02l1.48,-0.28l0.45,-0.08l2.55,-0.47l0.0,-0.0l2.31,-0.45l0.71,-0.14l0.0,-0.0l0.64,-0.13l0.02,-0.02l0.39,-0.08l0.25,0.35l0.05,0.05l0.05,0.05l1.58,1.51l0.03,0.03l0.09,0.06l0.84,0.45l0.16,0.05l2.58,0.16l2.27,0.21l0.01,0.0l0.21,0.01l0.5,0.03l0.23,0.02l0.03,0.0l0.21,0.02l0.72,0.08l0.14,0.02l0.08,0.0l0.6,-0.04l0.0,-0.0l0.11,-0.01l0.04,-0.0l0.27,-0.04l0.85,-0.14l0.29,-0.05l1.02,-0.07l0.18,-0.0l0.04,-0.0l0.17,-0.02l0.26,-0.03l0.12,-0.01l0.01,-0.0l0.1,-0.01l0.03,-0.0l0.84,-0.11l1.39,-0.19l0.27,-0.04l0.0,-0.0l0.08,-0.01l0.8,-0.07l0.3,-0.03l1.66,0.22l0.12,-0.0l0.01,-0.0l0.37,-0.06l0.63,0.2l0.25,0.08l0.07,0.02l1.25,0.15l0.13,-0.01l0.46,-0.1l0.51,0.06l0.3,0.1l0.14,0.02l0.49,-0.02l0.86,-0.04l2.34,-0.05l0.0,-0.0l2.11,-0.06l0.64,-0.02l0.29,-0.14l0.02,-0.02l0.0,-0.0l0.28,-0.34l1.1,-1.33l1.34,-1.61l0.81,-0.98l1.63,-1.96l0.32,-0.39l0.43,-0.48l0.27,-0.3l0.04,-0.04l2.35,-0.69l0.48,-0.14l0.0,-0.0l0.01,-0.0l1.28,-0.37l2.45,-0.68l0.13,-0.06l0.29,-0.21l0.27,-0.06l0.25,0.04l0.18,-0.01l2.04,-0.59l0.59,-0.13l0.02,-0.0l0.73,-0.2l0.02,-0.01l0.0,-0.0l1.5,-0.41l0.6,0.26l0.3,0.13l0.36,0.16l2.86,1.23l1.69,0.84l0.04,0.02l1.57,0.59l7.92,3.49l0.2,0.09l0.04,0.02l0.0,0.0l0.38,0.17l0.0,0.0l0.88,0.4l0.03,0.01l3.51,1.3l0.01,0.0l3.35,1.13l2.82,1.03l0.25,0.09l0.01,0.0l2.37,0.78l4.89,1.67l0.04,0.01l0.59,0.14l1.22,0.5l0.02,0.01l1.38,0.47l0.09,0.04l0.0,0.0l1.16,0.45l0.01,0.0l2.54,0.9l0.57,0.2l1.21,0.72l1.69,1.0l1.06,0.66l0.03,0.02l0.41,0.21l0.43,0.22l0.27,0.03l0.57,-0.13l0.06,-0.02l0.28,-0.11l0.02,-0.01l0.98,-0.39l0.0,-0.0l0.12,-0.05l0.08,-0.02l1.13,-0.31l0.13,-0.03l0.1,-0.04l0.1,-0.05l0.05,-0.02l0.11,-0.05l0.16,-0.06l0.03,-0.01l0.06,-0.03l0.01,-0.01l0.1,-0.06l0.16,-0.08l1.35,-0.33l0.99,-0.07l0.34,-0.02l1.32,-0.06l0.49,0.13l0.0,0.0l0.03,0.01l0.11,0.01l0.51,-0.01l0.49,-0.0l1.1,0.39l0.09,0.04l0.09,0.02l0.09,0.01l0.03,0.02l0.09,0.04l0.01,0.0l0.3,0.18l0.0,0.0l0.04,0.03l0.14,0.05l0.29,0.05l0.81,0.4l0.0,0.0l0.08,0.04l1.29,0.64l5.02,2.77l0.25,0.14l0.12,0.04l0.33,0.06l0.06,0.01l0.4,0.31l0.43,0.34l1.3,1.32l0.0,0.0l3.58,3.52l0.0,0.0l4.93,4.8l0.52,0.53l0.04,0.04l0.53,0.41l1.04,1.07l3.21,3.32l0.02,0.02l1.41,1.29l0.25,0.29l0.43,0.48l0.03,0.03l0.47,0.43l0.42,0.39l0.06,0.05l0.18,0.36l0.34,0.66l0.02,0.04l1.06,1.64l0.77,1.33l0.0,0.0l0.38,0.65l0.2,0.35l0.87,1.67l0.03,0.05l0.57,0.81l0.02,0.05l0.0,0.0l0.57,1.06l0.43,0.8l0.01,0.01l1.03,1.79l0.0,0.0l0.37,0.63l0.01,0.01l0.01,0.02l0.0,0.0l0.05,0.09l0.12,0.2l-0.78,0.58l-0.04,0.04l-1.17,1.17l-1.38,1.11l-1.46,0.79l-0.03,0.02l-1.86,1.25l-1.55,0.98l-1.17,0.68l-0.8,0.37l-0.53,0.25l-1.01,0.42l-0.92,-0.18l-0.05,-0.01l-2.2,-0.15l-2.57,-0.47l-1.05,-0.2l-0.08,-0.01l-1.8,0.04l-1.61,-0.45l-0.07,-0.01l-1.01,-0.09l-0.89,-0.39l-0.05,-0.02l-1.22,-0.34l-0.82,-1.06l-0.02,-0.02l-0.78,-0.86l-0.38,-0.44l-0.2,-0.12l-0.97,-0.26l-0.12,-0.01l-0.27,0.01l-0.28,-0.18l-0.1,-0.05l-0.98,-0.32l-0.08,-0.02l-0.84,-0.1l-1.27,-0.18l-0.06,-0.0l-1.14,0.01l-0.04,0.0l-1.49,0.17l-1.18,-0.14l-0.44,0.32l-0.19,0.95l-0.28,0.86l-0.02,0.18l0.15,1.12l-0.31,1.81l-0.01,0.05l-0.06,1.6l-0.68,1.04l-0.06,0.17l-0.11,0.92l-0.14,0.06l-0.43,-0.48l-0.22,-0.12l-1.04,-0.22l-0.82,-0.51l-0.07,-0.03l-0.65,-0.26l-0.13,-0.03l-1.12,-0.04l-0.02,-0.0l-0.93,0.01l-0.01,0.0l-1.33,0.03l-0.1,0.02l-1.22,0.35l-1.65,0.46l-0.03,0.01l-1.51,0.55l-1.48,0.53l-0.12,0.07l-1.77,1.43l-0.03,0.02l-0.79,0.77l-0.12,0.23l-0.13,0.85l-0.0,0.09l0.03,0.42l0.09,1.11l0.01,0.06l0.33,1.42l0.0,0.0l0.33,1.32l0.14,1.83l-0.17,1.65l0.01,0.12l0.29,1.39l0.06,1.63l-0.01,1.74l-0.08,0.59l-0.0,0.09l0.2,2.34l-0.05,0.13l-0.1,0.28l-1.49,1.1l-2.15,0.89l-0.02,0.01l-1.64,0.76l-0.96,0.29l-1.6,0.14l-1.38,0.09l-0.03,0.0l-0.87,0.11l-1.8,0.04l-0.05,0.0l-4.18,0.57l-2.16,-0.01l-0.06,0.0l-2.28,0.34l-2.42,0.27l-0.01,0.0l-1.69,0.25l-0.05,0.01l-0.16,0.05l-0.8,0.23l-0.17,0.1l-0.54,0.52l-0.07,0.09l-0.16,0.29l-0.5,0.91l-0.92,1.56l-1.24,1.93l-1.16,1.52l-0.87,1.08l-0.02,0.03l-1.6,2.46l-1.0,0.98l-0.0,0.0l-1.18,1.18l-0.34,0.13l-0.02,0.01l-0.45,0.2l-0.07,0.04l-0.69,0.5l-1.35,0.91l-0.8,0.54l-0.14,0.16l-0.29,0.6l-0.03,0.26l0.33,1.52l0.02,1.28l0.05,0.18l0.57,1.05l0.43,1.82l0.0,0.01l0.69,2.59l0.11,1.96l0.01,0.06l0.65,3.05l-0.36,1.78l-0.37,1.27l-0.1,0.36l-0.74,0.51l-2.05,1.41l-1.8,0.22l-1.57,-0.12l-0.08,0.0l-3.77,0.51l-1.47,-0.33l-0.12,-0.01l-2.92,0.23l-0.04,0.01l-1.6,0.3l-1.24,0.23l-3.14,-0.36l-0.08,-0.0l-2.99,0.23l-0.28,0.02l-2.09,0.15l-3.94,-0.53l-4.19,-0.76l-0.0,-0.0l-0.73,-0.13l-0.63,-0.2l-0.03,-0.01l-0.82,-0.18l-0.86,-0.2l-0.31,0.05l-0.69,0.45l-0.42,0.27l-0.15,0.19l-0.47,1.18l-0.02,0.07l-0.18,0.86l-0.07,0.3l-0.29,1.33l-0.01,0.06l-0.11,1.77l-0.0,0.02l-0.02,3.02l0.0,0.03l0.22,3.36l-0.12,2.75l-0.0,0.03l0.08,2.8l-0.27,2.73l-0.0,0.04l-0.02,4.47l0.0,0.04l0.25,2.75l-0.06,2.99l-0.16,3.25l-0.34,2.05l-0.0,0.09l0.12,2.21l-0.06,2.27l-0.17,2.62l-0.1,0.91l-0.1,0.06l-0.01,0.01l-1.57,0.95l-0.79,-0.06l-0.28,-0.54l-0.3,-1.03l-0.07,-0.13l-0.21,-0.28l-0.4,-0.15l-1.01,0.2l-0.09,0.03l-1.32,0.6l-0.8,-0.26l-0.36,-0.34l-0.13,-0.08l-0.83,-0.31l-0.07,-0.02l-0.97,-0.18l-0.19,0.01l-1.08,0.33l-0.09,0.04l-1.08,0.64l-1.16,0.68l-1.6,0.57l-0.06,0.03l-1.6,0.89l-2.18,0.7l-0.04,0.02l-1.7,0.76l-2.13,0.68l-0.07,0.03l-1.51,0.81l-0.01,0.0l-1.37,0.77l-0.08,0.06l-1.04,1.01l-0.02,0.02l-0.93,1.05l-0.04,0.06l-0.92,1.53l-1.07,1.13l-0.76,0.35l-1.13,0.01l-1.16,-0.19l-0.86,-0.15l-0.01,-0.01l-0.79,-0.54l-0.04,-0.04l-1.27,-1.35l-1.19,-1.64l-0.43,-1.12l0.21,-1.27l0.12,-0.6l0.18,-0.89l0.85,-2.82l1.02,-2.16l0.01,-0.02l0.91,-2.17l1.2,-2.42l0.04,-0.11l0.44,-2.48l0.0,-0.01l0.24,-1.57l0.17,-1.1l0.45,-1.59l0.77,-1.85l0.03,-0.09l0.48,-3.16l0.0,-0.04l0.12,-2.49l-0.0,-0.05l-0.09,-1.03l-0.14,-2.14l-0.01,-0.08l-0.44,-1.61l-0.13,-1.71l-0.09,-1.15l-0.01,-2.03l0.17,-1.4l-0.0,-0.11l-0.34,-2.01l0.01,-0.75l0.04,-2.51l0.04,-0.44l0.0,-0.02l0.07,-1.71l0.01,-0.13l0.0,-0.0l0.11,-3.06l0.0,-0.01l0.05,-2.62l-0.01,-0.1l-0.15,-0.63l0.32,-1.41l0.43,-1.36l0.01,-0.02l0.41,-1.58l0.63,-0.71l0.0,-0.01l0.8,-0.94l1.38,-0.57l1.39,-0.46l1.84,-0.33l1.56,-0.24l1.48,0.21l1.36,0.82l1.46,0.94l0.93,0.65l0.25,0.07l1.23,-0.05l0.33,-0.2l0.56,-0.97l0.04,-0.11l0.21,-0.92l0.01,-0.05l0.12,-1.28l0.24,-1.36l0.01,-0.05l0.09,-2.07l0.0,-0.01l0.02,-2.42l-0.0,-0.03l-0.18,-2.51l-0.01,-0.07l-0.91,-3.47l-0.01,-0.03l-1.1,-3.14l-0.05,-2.36l0.01,-0.08l0.3,-2.02l0.14,-0.93l0.61,-2.32l0.5,-1.89l0.01,-0.13l-0.14,-2.26l0.03,-0.14l0.32,-1.5l-0.02,-0.23l-0.78,-1.94l-0.42,-1.47l-0.04,-0.09l-0.12,-0.2l-0.65,-1.12l-0.19,-0.38l-0.06,-0.08l-0.53,-0.59l-0.0,-0.0l-0.55,-0.61l-0.05,-0.05l-0.71,-0.55l-0.07,-0.14l-0.0,-0.0l-0.22,-0.45l0.12,-0.77l0.0,-0.02l0.18,-1.8l0.17,-1.64l0.52,-0.52l0.11,-0.22l0.32,-1.98l0.68,-0.78l0.1,-0.28l-0.1,-2.01l-0.01,-0.81l0.26,-0.81l0.32,-0.41l0.05,-0.09l0.29,-0.67l0.37,-0.79l0.03,-0.1l0.15,-0.89l0.45,-0.86l0.02,-0.32l-0.23,-0.66l-0.11,-0.3l-0.13,-0.51l-0.05,-0.12l-0.5,-0.8l-0.22,-0.17l-0.81,-0.25l-0.16,-0.02l-0.88,0.08l-0.16,0.05l-0.52,0.29l-0.09,0.07l-0.73,0.75l-0.06,0.08l-0.08,0.14l-0.4,0.68l-0.04,0.09l-0.06,0.21l-0.45,0.59l-0.77,0.95l-0.05,0.08l-0.42,0.91l-0.64,0.57l-0.85,0.32l-1.14,0.14l-2.25,-0.33l-1.29,-0.45l-1.64,-1.15l-1.88,-1.32l-0.1,-0.05l-0.95,-0.31l-0.9,-0.3l-0.01,-0.0l-2.06,-0.64l-0.03,-0.01l-1.67,-0.4l-1.22,-0.31l-1.74,-0.7l-2.1,-1.09l-0.2,-0.04l-0.66,0.02l-1.16,-1.2l-0.11,-0.08l-1.99,-0.99l-1.78,-1.15l-1.31,-1.43l-0.61,-1.03l-0.19,-0.17l-0.92,-0.38l-0.19,-0.03l-1.38,0.14l-0.1,0.02l-1.1,0.4l-0.08,0.04l-1.24,0.78l-1.69,0.52l-0.67,-0.12l-1.38,-0.71l-0.17,-0.04l-1.28,-0.06l-0.03,-0.0l-0.99,0.03l-0.11,0.04l-5.22,0.14l0.01,-7.88l-0.0,-0.01l-0.03,-1.13l0.01,-0.19l0.01,-0.37l0.04,-1.49l0.0,-0.04l0.03,-0.86l0.0,-0.02l-0.02,-1.16l-0.01,-0.39l-0.03,-2.37l-0.01,-0.63l-0.0,-0.03l-0.02,-0.21l-0.08,-0.91Z", "name": "Sokoto"}, "2024": {"path": "M390.81,620.48l0.09,-0.29l0.02,-0.12l0.01,-0.68l0.01,-0.79l0.21,-0.69l0.19,-0.38l0.47,-0.56l0.05,-0.06l0.03,-0.04l0.46,-0.72l0.01,-0.02l0.4,-0.73l0.43,-0.45l0.0,-0.0l0.03,-0.03l0.02,-0.02l0.26,-0.31l0.18,-0.12l0.09,-0.08l0.14,-0.17l0.07,-0.4l-0.31,-0.82l-0.1,-0.88l0.06,-0.6l-0.0,-0.09l-0.04,-0.35l-0.01,-0.2l0.12,-0.14l0.44,-0.39l0.11,-0.16l0.03,-0.07l0.29,-0.1l0.09,-0.01l0.27,-0.14l0.34,-0.41l0.08,-0.34l-0.06,-0.29l0.2,-0.53l0.23,-0.52l0.77,-0.94l0.29,-0.33l0.32,-0.21l0.11,-0.1l0.38,-0.52l0.25,-0.3l0.03,-0.04l0.23,-0.34l0.07,-0.23l-0.01,-0.36l0.16,-0.3l0.05,-0.17l0.05,-0.87l-0.0,-0.06l-0.04,-0.52l-0.0,-0.03l-0.11,-0.7l-0.02,-0.07l-0.18,-0.51l-0.05,-0.09l-0.3,-0.44l-0.0,-0.0l-0.27,-0.38l-0.11,-0.16l-0.09,-0.14l-0.03,-0.04l-0.23,-0.25l-0.09,-0.15l0.0,-0.15l-0.0,-0.03l-0.01,-0.25l0.01,-0.16l0.04,-0.06l0.03,-0.04l0.07,-0.13l0.29,-0.23l0.25,-0.13l0.25,-0.06l0.22,-0.01l0.1,-0.02l0.26,-0.08l0.05,-0.02l0.66,-0.32l0.04,-0.02l0.47,-0.3l0.26,-0.06l0.4,-0.06l0.06,-0.01l0.55,-0.07l0.61,-0.07l0.54,0.1l0.11,0.01l0.36,-0.03l0.33,0.23l0.21,0.39l0.01,0.02l0.41,0.67l0.17,0.33l0.09,0.38l0.0,0.02l0.2,0.71l0.01,0.03l0.22,0.61l0.03,0.07l0.29,0.51l0.31,0.67l0.05,0.08l0.36,0.44l0.16,0.12l0.36,0.15l0.31,-0.01l0.26,-0.12l0.11,-0.07l0.46,-0.43l0.12,-0.22l0.09,-0.44l0.46,-1.0l0.24,-0.31l0.42,-0.22l0.12,0.02l0.22,0.03l0.2,-0.03l0.85,-0.35l0.03,-0.01l0.14,-0.07l0.54,-0.27l0.11,-0.08l0.36,-0.38l0.38,-0.34l0.26,-0.16l0.97,-0.53l0.09,-0.06l0.6,-0.58l0.1,-0.17l0.11,-0.36l0.02,-0.13l-0.01,-0.34l0.17,-0.59l0.18,-0.08l0.74,-0.03l0.03,-0.0l0.94,-0.12l0.66,0.26l0.52,0.54l0.02,0.02l0.55,0.48l0.19,0.09l0.67,0.13l0.37,-0.12l1.02,-1.11l0.11,-0.26l0.03,-0.91l0.76,-1.74l0.03,-0.2l-0.08,-0.73l0.36,-1.14l0.01,-0.18l-0.15,-0.96l0.38,-0.57l0.03,-0.05l0.41,-0.88l0.0,-0.0l0.54,-0.29l0.15,-0.13l0.64,-0.96l0.01,-0.01l0.87,-1.41l0.0,-0.0l0.62,-1.02l0.02,-0.03l0.77,-0.46l0.11,-0.1l0.58,-0.73l0.65,-0.75l0.71,-0.67l0.05,-0.06l0.38,-0.54l0.6,-0.77l0.78,-0.86l0.04,-0.05l0.62,-0.93l0.02,-0.04l0.3,-0.6l0.04,-0.18l0.0,-1.11l0.03,-0.57l-0.05,-0.22l-0.44,-0.77l-0.06,-0.08l-0.71,-0.74l-0.51,-0.56l-0.03,-0.03l-0.47,-0.91l-0.12,-0.72l0.1,-0.93l0.53,-0.64l0.57,-0.55l0.73,-0.6l0.88,-0.35l0.44,-0.09l0.26,0.17l0.35,0.05l0.64,-0.21l0.19,-0.14l0.46,-0.62l0.04,-0.07l0.3,-0.65l0.02,-0.05l0.24,-0.79l0.0,-0.22l-0.14,-0.53l-0.14,-0.72l-0.21,-0.28l-0.71,-0.35l-0.49,-0.29l-0.3,-0.4l-0.33,-0.95l-0.12,-0.75l-0.17,-0.26l-0.46,-0.33l-0.0,-0.47l0.2,-0.31l-0.02,-0.46l-0.38,-0.51l0.02,-0.18l0.25,-0.42l-0.17,-0.3l-0.01,-0.02l-0.25,-0.39l-0.18,-0.15l-0.73,-0.31l-0.18,-0.19l-0.09,-0.47l-0.06,-0.61l-0.04,-0.15l-0.44,-0.84l-0.22,-0.19l-0.54,-0.2l-0.82,-0.64l-0.0,-0.0l-1.16,-0.89l-0.6,-0.47l-0.49,-0.55l-0.5,-0.94l-0.05,-0.08l-0.67,-0.77l-0.62,-0.76l-0.39,-0.99l-0.08,-1.04l-0.0,-0.03l-0.1,-0.69l3.34,-0.78l0.16,-0.08l1.68,-1.33l0.02,-0.02l1.18,-1.06l0.05,-0.05l1.56,-2.01l2.08,-0.49l2.39,0.79l0.11,0.02l4.65,0.17l0.12,-0.01l3.79,-1.01l0.12,-0.06l1.08,-0.73l1.58,-0.81l0.05,-0.03l1.08,-0.76l0.17,-0.33l-0.01,-1.55l-0.02,-0.13l-0.74,-2.05l-0.08,-0.9l-0.06,-0.66l1.6,-1.27l1.23,-0.29l0.06,-0.02l1.22,-0.49l1.39,-0.4l0.02,-0.01l0.17,-0.06l1.14,-0.23l0.94,-0.03l0.02,-0.0l0.47,-0.04l0.98,0.14l1.36,0.56l0.06,0.02l2.08,0.49l1.59,0.38l1.4,0.57l1.84,1.14l0.05,0.03l0.93,0.42l1.53,1.0l0.0,0.0l1.77,1.14l0.52,0.38l1.16,0.84l0.03,0.02l0.92,0.56l0.26,0.16l0.75,0.46l0.01,0.01l0.57,0.33l0.39,0.62l0.17,1.1l-0.04,0.85l-0.01,0.15l-0.12,0.9l-0.13,0.91l-0.13,0.79l-0.0,0.13l0.07,0.42l-0.09,0.04l-0.25,0.34l-0.07,0.98l-0.02,0.23l0.19,0.38l0.57,0.36l0.61,0.46l0.2,0.21l0.19,0.11l1.12,0.27l0.05,0.01l0.77,0.08l0.26,0.03l0.47,0.13l0.1,0.01l1.18,0.01l0.72,0.01l0.02,0.0l0.72,-0.01l0.08,-0.01l0.65,-0.14l0.03,-0.01l1.28,-0.37l0.46,-0.04l0.0,-0.0l1.09,-0.1l0.1,-0.02l0.92,-0.33l0.5,-0.04l0.06,-0.01l0.1,-0.02l0.86,-0.21l0.01,-0.0l0.87,-0.23l0.57,-0.13l0.03,-0.01l0.55,-0.18l0.4,-0.13l0.03,-0.01l1.07,-0.43l0.32,-0.11l0.44,-0.05l0.0,-0.0l1.2,-0.15l0.53,0.0l0.64,0.11l0.31,0.09l0.26,-0.01l0.25,-0.1l0.97,0.09l0.61,0.07l0.89,0.66l0.17,0.07l0.69,0.13l0.83,0.95l0.07,0.06l0.66,0.48l0.65,0.86l0.01,0.01l0.72,0.88l0.01,0.01l0.4,0.45l0.02,0.02l1.12,1.1l0.66,0.9l0.08,0.08l1.38,1.05l0.35,0.69l0.02,0.03l0.63,1.02l0.02,0.02l0.61,0.84l0.03,0.04l0.72,0.78l0.0,0.0l0.28,0.3l0.52,0.57l0.59,0.9l0.02,0.02l0.76,0.99l0.53,0.86l0.04,0.05l0.78,0.9l0.5,0.96l0.17,0.51l-0.13,0.13l-0.11,0.41l-0.15,0.55l-0.04,0.16l-0.02,0.06l-0.01,0.17l0.04,0.24l-0.02,0.07l-0.18,0.48l-0.0,0.28l0.13,0.37l-0.07,0.29l-0.22,0.55l-0.16,0.41l-0.02,0.07l-0.06,0.29l-0.02,0.09l-0.09,0.43l-0.12,0.05l-0.21,0.21l-0.05,0.13l-0.01,0.02l-0.01,0.04l-0.02,0.11l-0.0,0.01l-0.0,0.0l-0.01,0.26l-0.0,0.0l-0.01,0.43l-0.01,0.52l-0.29,1.01l-0.45,1.56l-0.14,0.47l-0.04,-0.01l-0.31,-0.04l-2.09,-1.07l-0.16,-0.08l-0.44,-0.35l-0.19,-0.08l-0.0,-0.0l-0.0,-0.0l-0.34,-0.05l-0.22,-0.03l-0.73,-0.34l-1.07,-0.53l-0.14,-0.04l-0.09,-0.01l-0.1,-0.01l-0.31,0.11l-0.43,0.42l-0.12,0.25l-0.04,0.36l-0.02,0.22l-0.05,0.53l-0.02,0.21l-0.24,0.23l-0.0,0.0l-0.02,0.02l-0.08,0.47l0.08,0.16l0.08,0.16l0.07,0.38l-0.08,0.41l-0.0,0.13l0.04,0.29l-0.16,0.41l-0.16,0.09l-0.12,0.13l-0.01,-0.0l-0.28,-0.02l-0.4,0.26l-0.05,0.14l0.09,0.42l0.03,0.03l-0.11,0.01l-0.27,0.14l-0.31,0.36l-0.42,0.49l-0.05,0.07l-0.0,0.01l-0.0,0.0l-0.23,0.44l-0.36,0.7l-0.49,0.95l-0.06,0.11l-0.02,0.03l-0.04,0.05l-0.0,0.0l-0.18,0.25l-0.13,0.17l-0.02,0.03l-0.05,0.09l-0.01,0.01l-0.0,0.0l-0.24,0.61l-0.04,0.1l-1.4,2.18l-0.2,0.04l-0.43,0.09l-0.35,0.07l-0.07,0.01l-0.07,0.02l-0.01,0.0l-0.0,0.0l-0.23,0.1l-0.31,0.13l-0.85,0.12l-0.1,0.03l-0.01,0.0l-1.18,0.5l-0.0,0.0l-0.01,0.0l-0.08,0.05l-0.5,0.37l-1.35,1.0l-0.12,0.09l-0.06,0.06l-0.01,0.01l-0.55,0.64l-0.67,0.57l-0.18,0.15l-0.01,0.0l-0.0,0.0l-0.11,0.16l-0.43,1.15l-0.02,0.06l-0.14,0.39l-0.51,1.37l-1.04,1.03l-0.09,0.09l-0.07,0.07l-1.03,0.93l-1.02,0.93l-0.04,0.01l-0.12,0.04l-0.13,0.08l-1.02,0.89l-1.28,1.11l-0.33,0.28l-0.0,0.0l-0.13,0.12l-0.01,0.01l-0.83,0.78l-0.1,0.09l-0.81,0.77l-0.44,0.29l-0.05,0.04l-0.01,0.01l-0.83,0.75l-1.79,1.62l-0.14,0.12l-0.05,0.05l-0.01,0.01l-0.2,0.26l-0.12,0.15l-0.24,0.14l-0.38,0.22l-0.33,0.2l-0.31,0.19l-0.43,0.25l-0.07,0.04l-0.12,0.07l-0.05,0.03l-1.16,0.94l-1.45,1.18l-0.82,0.24l-0.46,0.14l-0.17,0.11l-0.67,0.69l-0.05,0.06l-1.26,2.01l-1.95,1.01l-0.16,0.15l-0.72,1.21l-0.33,0.15l-0.21,0.1l-0.16,0.13l-0.1,0.13l-0.04,0.06l-0.04,0.4l0.46,0.98l0.03,0.05l0.07,0.11l0.45,0.46l0.18,0.11l0.13,0.04l0.68,0.19l0.04,0.05l0.04,0.16l-0.09,0.45l-0.15,0.27l-0.72,0.52l-0.11,0.12l-0.14,0.23l-0.05,0.13l-0.03,0.15l-0.04,0.21l0.09,0.34l0.45,0.52l-0.0,0.05l-0.46,0.76l-1.54,1.97l-0.27,-0.4l-0.7,0.07l-0.15,0.36l-0.03,0.21l0.08,0.55l0.12,0.79l0.02,0.11l0.03,0.09l0.06,0.16l0.13,0.31l0.12,0.16l0.06,0.05l0.02,0.02l0.57,0.46l0.14,0.31l0.11,0.25l0.19,0.19l1.05,0.5l0.04,0.09l0.21,0.49l0.18,0.42l0.03,0.06l0.04,0.07l0.42,0.64l0.05,0.06l0.35,0.36l0.45,0.47l0.07,0.05l0.43,0.29l0.23,0.15l0.41,0.4l0.32,0.31l0.04,0.04l0.0,0.0l0.03,0.02l0.43,0.58l0.26,0.75l0.07,1.15l-0.14,0.45l-0.65,0.68l-0.09,0.16l-0.34,1.09l-0.88,1.18l-0.16,0.22l-0.02,0.03l-0.56,0.95l-0.04,0.09l-0.04,0.12l-0.13,0.41l-0.24,0.8l-0.01,0.06l-0.06,0.4l-0.1,0.71l-0.15,0.3l-0.06,0.06l-0.96,1.02l-0.06,0.08l-0.29,0.52l-0.04,0.12l-0.13,0.74l0.01,0.19l0.35,1.12l-0.03,0.53l-0.13,0.38l-0.06,0.19l-0.02,0.13l0.0,0.6l0.01,0.1l0.14,0.53l0.04,0.16l-0.29,0.29l-0.11,0.2l-0.32,1.38l-0.4,1.74l-0.22,0.79l-0.19,0.69l-0.29,1.03l-0.3,1.05l-0.01,0.16l0.24,1.91l0.01,0.11l-0.01,0.18l-0.05,1.2l-0.01,0.23l-0.02,0.57l0.0,0.06l0.13,1.23l-0.1,1.75l-0.0,0.01l-0.02,0.54l-0.2,0.26l-0.48,0.62l-0.05,0.08l-0.2,0.45l-0.22,0.49l-0.19,0.23l-0.31,0.38l-0.06,0.11l-0.11,0.29l-0.09,0.24l-0.08,0.2l-0.07,0.17l-0.21,0.53l-0.39,0.5l-0.31,0.4l-0.58,0.43l-1.53,0.42l-0.22,0.16l-0.06,0.09l-0.06,0.09l-0.06,0.3l0.07,0.38l-0.02,0.13l-0.34,0.17l-0.13,0.11l-0.12,0.15l-0.21,0.26l-0.37,0.28l-0.34,0.25l-0.15,0.21l-0.15,0.52l-0.17,0.58l-0.11,0.12l-0.16,0.17l-0.08,0.14l-0.2,0.54l-0.0,0.0l-0.0,0.01l-0.01,0.24l0.04,0.17l0.06,0.24l-0.49,0.22l-0.22,0.48l0.11,0.37l-0.11,0.03l-0.18,0.1l-1.1,1.1l-0.08,0.08l-0.11,0.34l0.01,0.08l0.0,0.0l0.03,0.18l0.13,0.24l0.15,0.13l0.03,0.02l0.21,0.1l0.05,0.01l0.49,0.07l-0.15,0.06l-0.11,0.13l-0.0,0.0l-0.0,0.0l-0.14,0.01l-0.21,0.08l-0.09,0.06l-0.15,0.11l-0.16,0.25l-0.07,0.38l-0.52,0.37l-0.06,0.04l-0.13,0.09l-0.11,0.11l-0.17,0.27l-0.07,0.11l-0.02,0.4l0.11,0.21l-0.01,0.02l-0.52,0.37l-0.36,-0.02l-0.4,0.26l-0.15,0.4l-0.03,0.15l0.0,0.19l0.0,0.14l0.03,0.15l0.27,0.66l0.05,0.11l-0.06,0.33l-0.12,0.15l-1.41,0.18l-0.17,0.06l-0.53,0.35l-0.11,0.11l-0.56,0.81l-0.3,0.21l-0.0,0.0l-0.04,0.03l-0.1,0.11l-0.02,0.03l-0.0,0.0l-0.23,0.35l-0.06,0.16l-0.06,0.35l-0.03,0.16l-0.0,0.1l0.06,0.64l0.08,0.21l0.38,0.5l0.06,0.06l0.87,0.72l0.14,0.12l0.29,0.54l0.03,0.84l-0.31,0.18l-0.61,0.36l-0.03,0.02l-1.16,0.83l-0.35,0.15l-0.14,0.06l-0.51,0.02l-0.43,-0.22l-0.03,-0.07l-0.06,-0.13l-0.18,-0.37l-0.22,-0.2l-0.48,-0.19l-0.28,-0.0l-0.45,0.16l-0.15,0.1l-0.77,0.8l-0.01,0.01l-0.02,0.02l-0.06,0.09l-0.06,0.11l-0.4,0.72l-0.03,0.07l-0.2,0.65l-0.05,0.0l-0.02,-0.02l-0.08,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.21,0.21l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.19l-0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.52l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.02l-0.0,0.08l-0.02,0.02l0.0,0.02l0.02,0.02l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.08l0.4,0.4l0.02,0.0l0.02,-0.02l0.27,0.0l0.02,-0.02l0.25,0.0l0.02,-0.02l0.19,0.0l0.4,-0.4l0.0,-0.04l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.08l0.04,-0.04l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.03l0.07,0.07l0.0,0.04l0.04,0.04l0.0,0.02l0.06,0.06l0.0,0.0l0.02,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.21l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l-0.06,0.06l0.0,0.02l0.07,0.07l-0.01,0.01l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.04l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.0,-0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.05,0.0l-0.01,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.06,0.06l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l-0.04,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.13,0.13l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.01,0.01l-0.01,0.01l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.17,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.1,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.06,-0.06l-0.08,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.4,0.4l0.0,0.02l0.33,0.33l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.14l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l0.0,0.04l-0.02,-0.02l0.0,-0.04l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.08,0.0l0.0,0.04l-0.01,-0.01l0.0,-0.06l-0.03,0.0l-0.02,0.02l-0.01,-0.01l-0.01,0.0l0.0,0.03l-0.01,0.01l-0.01,0.0l-0.02,0.02l-0.02,0.0l-0.05,0.05l-0.03,-0.05l-0.02,0.01l-0.11,0.16l-0.12,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.08,0.0l-0.01,0.01l-0.03,-0.03l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.1,0.1l-0.27,-0.27l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.15,0.0l-0.04,-0.04l-0.1,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.04,-0.04l-0.1,0.0l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.04,-0.04l0.0,-0.17l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.06,0.0l0.02,-0.02l0.12,0.0l0.1,0.1l0.06,0.0l0.12,-0.12l0.02,0.02l0.19,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.1,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.0,-0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.17,-0.17l0.0,-0.0l-0.4,-0.4l-0.08,0.0l-0.02,0.02l-0.1,0.0l-0.4,0.4l0.0,0.23l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.13l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l-0.37,0.37l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.1,-0.1l-0.06,0.0l-0.04,-0.04l-0.08,0.0l-0.06,0.06l-0.04,0.0l-0.02,0.02l-0.15,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.02l-0.06,0.06l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.1,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.04,0.04l-0.01,0.0l-0.02,-0.02l-0.03,0.0l-0.02,-0.02l-0.33,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l0.0,-0.02l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.08,0.08l-0.06,0.0l-0.03,-0.03l-0.03,-0.03l-0.1,0.0l-0.01,0.01l-0.04,-0.04l-0.01,0.0l-0.03,-0.04l-0.01,-0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,-0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.12,-0.12l0.0,-0.06l-0.15,-0.15l0.0,-0.23l-0.02,-0.02l0.0,-0.16l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.02,0.02l0.04,0.0l0.02,-0.02l0.0,0.0l0.27,-0.27l0.02,0.0l0.15,-0.15l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,-0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.06,0.0l0.02,-0.02l0.44,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.17,0.0l0.4,-0.4l0.0,-0.06l-0.4,-0.4l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.58,0.0l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.06l-0.0,0.0l0.04,-0.04l0.0,-0.03l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.04,0.04l-0.08,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.13,0.0l-0.04,0.04l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.06,0.06l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.08,0.0l-0.02,0.02l-0.08,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.23,0.23l-0.02,0.0l-0.24,0.24l-0.0,-0.01l-0.03,0.0l-0.03,0.04l-0.02,0.02l-0.23,0.23l-0.02,0.0l-0.25,0.25l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.0,0.0l-0.21,0.21l-0.02,0.0l-0.27,0.27l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.23,0.23l-0.02,0.0l-0.27,0.27l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.23,0.23l-0.02,0.0l-0.09,0.09l-0.12,-0.26l-0.05,-0.08l-0.44,-0.56l-0.08,-0.08l-0.92,-0.68l-0.38,-0.28l-0.0,-0.0l-0.33,-0.23l-0.07,-0.04l-0.74,-0.33l-0.25,-0.25l-0.01,-0.01l-1.69,-1.56l-1.11,-1.25l-0.0,-0.0l-1.01,-1.13l-0.04,-0.05l-1.06,-1.31l-0.01,-0.01l-1.14,-1.3l-0.18,-0.21l-0.09,-0.08l-1.3,-0.82l-1.02,-0.97l-1.22,-1.3l-0.21,-0.23l-1.09,-1.75l-0.02,-0.03l-1.34,-1.74l-0.0,-0.0l-0.8,-1.02l-0.83,-1.38l-0.73,-1.66l-0.5,-1.66l-0.34,-1.28l-0.36,-1.51l-0.09,-1.35l0.01,-0.12l0.07,-1.61l0.21,-0.84l0.01,-0.08l0.08,-2.02l0.43,-1.2l0.02,-0.16l-0.1,-1.49l-0.02,-0.11l-0.38,-1.06l-0.13,-0.18l-0.84,-0.66l-0.13,-0.07l-1.43,-0.45l-1.36,-1.1l-0.08,-0.05l-1.0,-0.46l-0.44,-0.2l-0.03,-0.01l-0.81,-0.31l-0.16,-0.03l-2.23,0.12l-0.03,0.0l-1.11,0.14l-0.1,0.03l-1.2,0.48l-0.85,-0.07l-0.48,-0.71l-0.31,-1.35l-0.25,-0.29l-0.85,-0.32l-0.52,-1.28l-0.15,-0.53l0.8,-1.38l0.05,-0.16l0.05,-0.46l0.02,-0.16l0.29,-0.52l0.42,-0.06l0.39,-0.03l0.05,-0.0l1.01,0.24l1.7,0.58l0.1,0.02l1.21,0.09l0.39,-0.22l0.73,-1.48l0.03,-0.28l-0.44,-1.71l-0.01,-0.03l-0.48,-1.4l-0.07,-0.13l-1.21,-1.41l-0.83,-0.97l-0.84,-1.95l-0.28,-1.54l-0.01,-0.04l-0.43,-1.44l-0.28,-0.95l-0.01,-0.04l-0.64,-1.6l-0.07,-0.72l-0.13,-1.44l0.02,-2.31l0.19,-1.29l0.46,-1.99l0.01,-0.07l0.05,-1.2l-0.04,-0.2l-0.59,-1.17l-0.17,-0.17l-0.42,-0.23Z", "name": "Cross River"}, "2025": {"path": "M175.48,608.3l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.04,-0.04l3.43,-8.36l4.7,-11.46l6.11,3.16l0.84,1.07l0.06,0.07l1.01,0.81l0.16,0.55l-0.01,0.42l-0.02,0.49l-0.27,1.42l-0.2,0.73l-0.37,1.35l-0.01,0.19l0.24,1.17l0.01,0.03l0.54,1.88l0.03,1.46l0.03,1.49l0.42,0.39l1.25,-0.05l-0.03,0.03l0.0,0.0l-0.08,0.08l-0.02,0.0l-0.13,0.13l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.12,0.0l-0.02,-0.02l-0.17,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.19,0.0l-0.08,0.08l-0.0,0.0l-0.1,0.1l-0.02,0.0l-0.19,0.19l-0.04,0.0l-0.06,0.06l-0.1,0.0l-0.02,0.02l-0.08,0.0l-0.06,0.06l-0.04,0.0l-0.04,0.04l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.06,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.1,0.1l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.1,0.1l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.02,0.0l-0.05,0.05l-0.01,0.01l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.1,0.1l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.06,0.06l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.08,0.08l-0.06,0.0l-0.06,0.06l-0.04,0.0l-0.06,0.06l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.33,0.33l-0.04,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.06,0.06l0.0,0.0l-0.08,0.08l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.25,0.25l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.06,0.06l0.0,0.0l-0.02,0.02l0.0,0.1l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.17l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.23,-0.23l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.08,-0.08l0.0,-0.02l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.08,-0.08l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.13,-0.13l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.15,-0.15l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.08l-0.04,-0.04l0.0,-0.0l0.0,-0.13l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.08,-0.08l0.0,-0.06l-0.02,-0.02ZM196.47,603.24l0.16,-0.12l0.02,-0.02l0.98,-0.9l1.66,-1.21l0.12,-0.15l0.63,-1.29l-0.01,-0.36l-0.47,-0.88l-0.01,-0.01l-0.54,-0.93l0.05,-0.89l0.53,-0.25l1.03,-0.32l1.31,0.57l0.12,0.03l2.16,0.25l0.18,-0.02l0.6,-0.21l0.28,-0.1l2.82,-0.49l1.49,0.32l1.11,1.04l0.02,0.01l1.55,1.29l0.17,0.08l2.14,0.49l0.41,-0.16l0.78,-1.08l0.06,-0.11l0.15,-0.47l0.76,-0.74l0.38,-0.37l1.62,-0.46l0.07,-0.03l0.84,-0.43l1.39,-0.4l0.07,-0.03l0.91,-0.47l0.68,-0.22l0.01,-0.0l0.39,-0.13l0.41,0.15l0.62,0.46l0.63,0.83l0.18,0.13l0.64,0.24l0.01,0.0l1.34,0.45l1.79,0.81l0.0,0.0l0.02,0.01l0.94,0.49l1.57,0.92l0.02,0.01l1.43,0.75l1.61,0.96l1.03,1.22l0.84,1.19l0.46,0.9l0.13,0.15l0.99,0.68l0.03,0.02l0.17,0.1l1.66,1.15l0.05,0.03l1.76,0.86l0.42,0.75l-0.46,1.3l-0.92,1.73l-0.54,0.56l-0.08,0.13l-0.4,1.0l0.08,0.42l0.94,1.0l0.02,0.02l0.13,0.12l0.66,0.63l-0.19,0.39l-0.23,0.45l-0.03,0.08l-0.29,1.09l0.17,0.44l0.74,0.46l0.17,0.06l1.85,0.22l0.14,-0.01l1.47,-0.37l2.28,-0.3l0.04,-0.01l1.53,-0.35l1.0,-0.23l0.04,-0.01l2.19,-0.73l0.11,-0.05l0.17,-0.12l1.49,-1.06l0.92,-0.62l0.02,-0.02l0.77,-0.61l0.09,-0.1l0.71,-1.1l0.77,-1.2l0.74,-0.72l0.04,-0.05l0.2,-0.26l0.27,-0.35l0.87,-0.73l0.62,-0.49l1.36,-0.79l0.76,-0.38l0.15,-0.13l0.59,-0.88l1.3,-1.05l0.13,-0.19l0.12,-0.37l1.67,-1.81l0.05,-0.48l-0.08,-0.03l0.38,-1.25l0.0,-0.01l0.17,-0.63l0.18,-0.64l0.0,-0.02l0.24,-1.07l0.01,-0.12l-0.1,-1.13l-0.01,-0.06l-0.06,-0.26l-0.18,-0.74l-0.19,-0.25l-1.15,-0.64l-0.19,-0.05l-0.69,-0.01l-0.62,-0.26l-0.66,-0.83l-0.05,-0.05l-0.65,-0.58l-0.15,-0.09l-0.77,-0.24l-0.62,-0.83l-0.02,-0.03l-0.77,-0.85l-0.87,-1.11l-0.68,-1.18l-0.01,-0.01l-0.77,-1.27l-0.95,-1.8l-0.17,-1.56l0.07,-1.21l-0.0,-0.06l-0.12,-1.39l-0.01,-0.07l-0.42,-1.55l-0.2,-0.25l-0.83,-0.42l-0.82,-0.49l-0.39,-0.73l-0.01,-1.02l0.19,-1.67l0.27,-0.83l0.4,-0.94l0.34,-0.55l1.03,-1.18l0.95,-0.6l0.49,-0.08l1.24,0.45l1.09,0.45l0.86,1.38l0.0,0.01l0.86,1.31l0.76,1.22l0.02,0.03l0.58,0.76l0.35,0.16l0.78,-0.06l0.27,-0.14l0.65,-0.75l0.02,-0.02l0.65,-0.88l1.02,-1.02l0.06,-0.08l0.47,-0.8l0.09,-0.16l0.26,-0.41l0.49,-0.51l0.47,-0.35l0.59,-0.44l0.81,-0.38l0.13,-0.06l2.02,-0.79l0.01,-0.0l1.22,-0.52l0.01,-0.01l2.32,-1.1l0.59,-0.1l0.1,-0.03l0.35,-0.16l1.29,-0.59l0.05,-0.03l1.75,-1.13l0.02,-0.01l1.27,-0.92l1.12,-0.45l0.01,-0.0l1.03,-0.43l0.06,-0.03l1.26,-0.83l0.04,-0.03l0.89,-0.78l0.52,-0.45l1.08,-0.64l0.78,-0.45l0.26,-0.05l0.09,-0.03l0.97,-0.43l0.89,-0.2l0.97,-0.1l0.01,-0.0l1.2,-0.15l0.14,0.0l1.23,0.02l1.1,0.32l0.01,0.0l1.36,0.35l0.2,0.0l0.99,-0.24l0.12,-0.05l0.82,-0.54l0.1,-0.09l0.51,-0.67l0.01,-0.01l0.42,-0.58l0.33,1.74l0.04,0.12l0.43,0.77l0.07,0.8l0.02,0.09l0.25,0.79l0.0,0.0l0.29,0.9l0.38,1.45l0.15,1.0l0.04,1.62l0.01,0.09l0.37,1.45l0.12,0.19l0.85,0.78l0.38,0.44l-0.03,0.81l-0.06,0.68l0.02,0.16l0.56,1.68l0.14,1.57l0.01,0.04l0.32,1.72l0.01,0.04l0.05,0.16l0.27,0.9l0.28,1.66l0.14,1.02l0.01,0.06l0.43,1.41l0.01,0.04l0.16,0.38l0.32,0.76l0.03,0.05l0.25,0.41l0.26,1.42l-0.17,0.92l-0.31,0.85l-0.0,0.0l-0.01,0.02l-0.04,0.1l-0.01,0.02l-0.26,0.84l-0.43,0.67l-0.04,0.09l-0.04,0.12l-0.21,0.67l-0.02,0.07l-0.18,1.23l-0.0,0.06l-0.0,0.25l-0.0,0.9l-0.0,0.22l0.0,0.01l0.02,1.06l-0.09,1.56l-0.0,0.0l-0.05,1.07l-0.13,0.84l-0.6,0.72l-0.23,0.27l-0.08,0.16l-0.32,1.26l-0.72,1.07l-0.04,0.08l-0.42,1.09l-0.57,0.82l-0.05,0.11l-0.29,0.91l-0.01,0.07l-0.15,1.07l-0.43,1.26l-0.63,1.37l-0.57,0.94l-0.05,0.26l0.13,0.92l-0.23,0.82l-0.01,0.02l-0.28,1.22l-0.75,1.08l-0.02,0.03l-0.62,1.1l-0.02,0.04l-0.65,1.51l-0.02,0.06l-0.23,0.88l-0.55,0.57l-0.35,0.17l-0.19,0.2l-0.12,0.28l0.03,0.09l-0.03,0.05l-0.01,0.03l-0.08,0.04l-0.19,0.45l-0.0,0.31l0.36,0.87l0.21,0.7l0.0,0.0l0.26,0.87l0.0,0.01l0.24,0.75l0.21,0.97l-0.14,0.9l-0.44,0.89l-0.03,0.1l-0.24,1.21l-0.0,0.0l-0.13,0.64l-0.37,0.97l-0.6,0.98l-0.32,0.18l-0.08,0.04l-0.07,0.05l-0.51,0.46l-0.51,0.45l-0.7,0.39l-0.21,0.11l-0.15,0.15l-0.06,0.1l-0.37,0.63l-0.03,0.06l-0.41,1.07l-0.02,0.05l-0.17,0.71l-0.01,0.07l-0.07,1.09l0.01,0.1l0.13,0.65l0.13,0.86l-0.01,0.68l0.01,0.09l0.1,0.47l-0.05,0.92l-0.22,0.59l-0.42,0.18l-0.07,0.04l-0.67,0.48l-0.7,0.09l-0.1,0.03l-1.03,0.43l-0.04,0.02l-0.42,0.24l-0.07,0.05l-0.68,0.63l-0.07,0.09l-0.23,0.39l0.01,0.01l-0.1,0.28l0.01,0.1l0.01,0.07l0.08,0.27l0.04,0.08l0.09,0.15l0.01,0.02l0.21,0.32l0.23,0.39l0.01,0.01l0.07,0.11l0.02,0.03l0.0,0.0l0.12,0.19l0.22,0.46l0.14,0.33l0.12,0.35l0.11,0.32l0.04,0.54l0.01,0.04l0.06,0.33l-0.33,0.2l-0.09,0.05l-0.06,0.04l-0.5,0.43l-0.25,0.18l-0.48,0.29l-0.62,0.31l-0.02,0.01l-0.53,0.32l-0.04,0.02l-0.86,0.39l-0.71,0.3l-0.02,0.01l-0.28,0.13l-0.59,0.14l-0.3,0.07l-0.02,0.0l-0.9,0.26l-0.08,0.03l-0.58,0.31l-0.55,0.0l-0.48,-0.19l-0.15,-0.03l-0.93,0.0l-0.06,0.0l-0.29,0.05l-0.21,0.03l-0.39,-0.11l-0.61,-0.18l-0.32,-0.11l-0.19,-0.02l-0.62,0.09l-0.11,0.03l-0.59,0.27l-0.0,0.0l-0.44,0.2l-0.77,-0.07l-0.08,0.0l-0.68,0.08l-0.32,0.22l-0.24,0.5l-0.17,0.28l-0.05,0.11l-0.06,0.26l-0.32,0.68l-0.17,0.22l-0.05,0.08l-0.18,0.41l-0.07,0.16l-0.01,0.01l-0.19,0.47l-0.09,0.14l-0.05,0.11l-0.15,0.58l-0.1,0.34l-0.01,0.01l-0.2,0.16l-0.15,0.23l-0.07,0.1l-0.45,0.21l-0.42,0.1l-0.95,0.19l-0.26,0.03l-0.2,0.02l-0.27,-0.05l-0.19,-0.25l-0.2,-0.26l-0.21,-0.14l-0.45,-0.13l-0.13,-0.04l-0.11,-0.02l-0.76,0.0l-0.17,0.0l-0.1,0.01l-0.26,0.06l-0.24,0.17l-0.14,0.22l-0.04,0.1l-0.29,0.93l-0.02,0.15l0.07,0.94l0.1,0.19l0.19,0.51l-0.05,0.62l-0.01,0.16l-0.0,0.05l0.0,0.11l-0.64,0.44l-0.27,0.15l-0.34,0.09l-0.32,0.01l-0.16,0.04l-0.16,0.07l-0.19,0.09l-0.12,0.09l-0.32,0.34l-0.08,0.06l-0.15,0.08l-0.01,0.0l-0.43,0.26l-0.12,0.04l-0.15,0.05l-0.01,0.0l-0.63,0.21l-0.44,0.11l-0.07,0.02l-0.49,0.22l-0.38,0.02l-0.06,0.0l-0.07,-0.03l-0.67,-0.29l-0.11,-0.03l-0.71,-0.09l-0.28,-0.03l-0.11,0.0l-0.43,0.06l-0.8,0.11l-0.16,0.06l-0.21,0.14l-0.15,0.18l-0.4,0.96l-0.15,0.22l-0.04,0.08l-0.2,0.52l-0.26,0.25l-0.07,0.06l-0.06,0.03l-0.04,0.02l-0.54,0.34l-0.25,0.06l-0.95,0.22l-0.63,0.02l-0.49,-0.32l-0.2,-0.06l-0.67,-0.03l-0.28,-0.05l-0.1,-0.02l-0.31,-0.2l-0.14,-0.49l-0.17,-0.23l-0.37,-0.23l-0.3,-0.26l-0.18,-0.65l-0.38,-0.29l-0.35,-0.01l-0.23,-0.27l-0.03,-0.03l-0.51,-0.49l-0.16,-0.09l-0.14,-0.04l-0.32,-0.1l-0.25,-0.17l-0.33,-0.26l-0.38,-0.06l-0.61,0.22l-0.18,0.13l-0.3,0.39l-0.07,0.15l-0.1,0.44l-0.41,0.84l-0.02,0.03l-0.1,0.12l-0.04,0.06l-0.16,0.27l-0.05,0.15l-0.05,0.39l-0.16,0.34l-0.1,0.17l-0.24,0.3l-0.11,0.14l-0.05,0.07l-0.11,0.22l-0.16,0.09l-0.37,0.14l-0.02,0.01l-0.02,0.01l-0.0,0.0l-0.37,0.17l-0.18,0.02l-0.18,-0.01l-0.25,0.09l-0.03,0.01l-0.11,0.06l-0.6,0.46l-0.24,0.18l-0.08,0.06l-0.69,0.45l-0.46,0.15l-0.32,0.02l-0.47,-0.11l-0.24,-0.25l-0.22,-0.12l-1.14,-0.19l-0.15,0.0l-0.64,0.15l-0.13,0.06l-0.44,0.29l-0.03,0.02l-0.59,0.47l-0.39,0.31l-0.3,0.09l-0.51,0.15l-0.81,0.09l-0.14,0.04l-0.48,0.25l-0.1,0.05l-0.04,0.02l-0.75,0.51l-0.09,0.08l-0.4,0.5l-0.13,0.14l-0.69,0.13l-0.13,0.02l-0.16,0.07l-0.82,0.58l-0.02,0.01l-0.46,0.37l-0.63,0.33l-0.62,0.31l-0.1,0.05l-0.49,-0.26l-0.11,-0.04l-0.34,-0.07l-0.0,-0.0l-0.13,-0.03l-0.23,0.02l-0.75,0.3l-0.02,0.01l-0.49,0.23l-0.6,-0.01l-0.64,-0.05l-0.61,-0.52l-0.42,-0.65l-0.23,-0.17l-0.97,-0.26l-0.78,-0.55l-0.02,-0.01l-0.65,-0.41l-0.67,-0.63l-0.17,-0.09l-0.82,-0.22l-0.0,-0.0l-0.06,-0.02l-0.15,-0.01l-0.53,0.06l-0.73,-0.4l-0.12,-0.04l-1.2,-0.21l-0.48,-0.43l-0.1,-0.07l-1.15,-0.53l-1.27,-0.76l-0.06,-0.03l-0.44,-0.17l-0.72,-0.61l-0.19,-0.21l-0.24,-0.26l-0.16,-0.17l-0.51,-0.7l-0.07,-0.07l-0.03,-0.03l0.39,-0.39l0.0,-0.0l0.13,-0.13l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.02l0.12,-0.12l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.12,-0.12l0.09,-0.08l0.04,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.35,0.35l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.17,0.0l-0.16,0.16l-0.22,-0.22l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.1l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.34,0.34l-0.11,-0.11l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.06,0.0l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.17l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.05l0.02,0.02l0.06,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.15,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.12,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.15,0.0l0.02,0.02l0.31,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.12,0.0l0.02,-0.02l0.02,0.0l0.15,-0.15l0.04,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.08,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l0.37,0.37l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.17,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.09,-0.09l0.01,-0.01l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.06,0.0l-0.1,-0.1l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.06,-0.06l-0.02,0.0l-0.11,0.11l-0.28,-0.28l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.17,0.0l-0.02,0.02l-0.08,0.0l-0.04,0.04l-0.0,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.4,0.0l-0.02,-0.02l-0.5,0.0l-0.01,0.01l-0.01,-0.01l-0.19,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.13,-0.13l-0.0,0.0l-0.02,-0.02l-0.12,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.16,0.0l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.15,0.0l0.06,-0.06l0.02,0.0l0.04,-0.04l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.17,0.0l0.02,-0.02l0.17,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.27l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.03,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.15,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.21,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.08,0.0l0.08,-0.08l0.02,0.0l0.25,-0.25l0.12,0.0l0.02,-0.02l0.04,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.11l0.36,-0.36l0.15,0.16l0.02,0.0l0.04,0.04l0.21,0.0l0.04,-0.04l0.0,-0.0l0.38,-0.39l0.03,-0.03l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.01,-0.01l0.01,0.01l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.02l0.06,0.06l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.1,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.06,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.4,-0.4l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.38,0.39l-0.01,0.01l-0.17,-0.17l-0.02,0.0l-0.15,-0.15l-0.27,0.0l-0.02,0.02l-0.06,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.21l0.02,0.02l0.0,0.21l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.08,0.08l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.16,0.16l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.15,0.0l-0.02,-0.02l-0.23,0.0l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.12,0.0l0.23,-0.23l0.0,-0.0l0.02,-0.02l0.0,-0.21l-0.37,-0.37l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.06,-0.06l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.03,0.03l-0.01,-0.01l-0.04,0.0l0.0,-0.14l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.04,-0.04l-0.08,0.0l0.0,-0.13l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.06,0.0l0.04,0.04l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.04,0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.02,0.0l0.07,-0.07l0.27,0.26l0.08,0.08l0.17,0.0l0.33,0.33l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.23,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.29,0.0l0.0,0.06l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.0l0.4,0.4l0.15,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.0,-0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.23,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.2,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.4,-0.4l-0.37,0.0l-0.02,-0.02l-0.23,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.01,0.01l-0.22,-0.22l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.4,0.4l0.0,0.0l-0.06,0.06l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.03l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.5,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.01,0.0l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.06,-0.06l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.1,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.17,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.1,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.15,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,-0.02l0.12,0.0l0.02,0.02l0.04,0.0l0.01,-0.01l0.01,0.01l0.1,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.02l0.04,0.0l0.02,-0.02l0.02,0.02l0.08,0.0l0.02,-0.02l0.08,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.08,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.06,0.0l0.04,-0.04l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.08,0.0l0.04,-0.04l0.06,0.0l0.04,-0.04l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.06,-0.06l0.02,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.0,0.0l0.04,-0.04l0.06,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.02,0.0l0.15,-0.15l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.02,0.02l0.1,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.1,0.0l0.04,0.04l0.0,0.0l0.01,0.01l-0.03,0.03l-0.02,0.0l-0.4,0.4l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.4,0.4l0.06,0.0l0.4,-0.4l0.0,-0.0l0.12,-0.12l0.02,0.02l0.02,0.0l0.08,0.08l0.06,0.0l0.4,-0.4l0.0,-0.04l-0.15,-0.15l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.09,-0.09l0.01,-0.01l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.23,-0.23l0.0,-0.0l0.0,-0.08l-0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.01,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.04,0.04l0.02,0.0l0.08,0.08l0.02,0.0l0.02,0.02l0.02,0.0l0.27,0.27l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.0,0.0l0.06,0.06l0.02,0.0l0.0,-0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.04,0.04l0.02,0.0l0.1,0.1l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.01l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.02l0.12,0.12l0.0,0.0l0.0,0.0l-0.06,0.06l0.0,0.02l0.4,0.4l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.21,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.0,0.0l0.04,0.04l0.02,0.0l0.08,0.08l0.02,0.0l0.08,0.08l0.02,0.0l0.1,0.1l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.08,0.08l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.08,0.08l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.04,0.04l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.23l-0.02,0.02l0.0,0.29l-0.08,0.08l-0.02,0.0l-0.23,0.23l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.13,0.13l-0.04,0.0l-0.04,0.04l-0.0,0.0l-0.06,0.06l-0.15,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l0.0,0.04l0.4,0.4l0.27,0.0l0.1,-0.1l0.04,0.0l0.08,-0.08l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.17,-0.17l0.04,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.12,0.0l0.04,-0.04l0.0,0.0l0.1,-0.1l0.02,0.0l0.04,-0.04l0.25,0.25l0.12,0.0l0.02,-0.02l0.02,0.0l0.13,-0.13l0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.04,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.17,-0.17l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.0,0.08l0.02,0.02l0.0,0.08l0.4,0.4l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.15,0.0l0.02,-0.02l0.31,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.04,0.0l0.02,0.02l0.04,0.0l0.4,-0.4l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.12,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.17,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.0,0.0l-0.08,0.08l0.0,-0.01l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.04,-0.04l0.0,-0.02l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.0,-0.0l-0.04,-0.04l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l0.0,-0.11l0.02,0.0l0.02,-0.02l0.08,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.02,0.02l0.02,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.08,-0.08l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.06,-0.06l0.0,-0.0l0.14,-0.14l0.02,0.0l0.35,-0.35l0.02,0.0l0.04,-0.04l0.06,0.0l0.0,0.18l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.15,0.0l0.02,0.02l0.06,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.29,0.29l0.02,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,0.02l0.15,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.23,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.04,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.06,-0.06l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.04l0.04,-0.04l0.0,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.08,-0.08l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.05,-0.05l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.0,0.0l-0.06,-0.06l-0.15,0.0l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.04,-0.04l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.0,-0.0l0.15,-0.15l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.04,0.0l0.0,-0.02l-0.06,-0.06l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.08,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.29,0.0l-0.02,0.02l-0.15,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.17,-0.17l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.01,-0.01l0.03,-0.03l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.06,-0.06l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.01,-0.01l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.17,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.21,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.06,-0.06l0.04,0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.02,0.0l0.17,0.17l0.04,0.0l0.4,-0.4l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.0,-0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.21l0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,0.0l0.02,-0.02l0.02,0.0l0.1,-0.1l0.02,0.0l0.1,-0.1l0.02,0.0l0.19,-0.19l0.12,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l0.1,-0.1l0.0,-0.02l0.02,-0.02l0.0,-0.13l-0.29,-0.29l0.0,-0.06l-0.4,-0.4l-0.1,0.0l-0.39,0.39l0.0,-0.01l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.21,-0.21l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.08,-0.08l0.0,-0.06l-0.01,-0.01l0.03,-0.03l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.27,0.27l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.03,-0.03l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.06,0.06l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.0,-0.0l-0.06,-0.06l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.03,0.03l-0.01,-0.01l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.02,-0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.11l0.25,-0.25l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.12,-0.12l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.23l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.36,-0.36l0.09,-0.09l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.28,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.0,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.03,-0.03l0.01,0.01l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.06l0.04,-0.04l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.06,-0.06l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.03,-0.03l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.19,-0.19l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.19l-0.02,-0.02l0.0,-0.13l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.33,0.0l0.02,-0.02l0.17,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.19,0.0l-0.02,0.02l-0.19,0.0l-0.04,-0.04l-0.0,0.0l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.21,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.17l0.01,0.01l-0.03,0.03l0.0,0.02l-0.08,0.08l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.12,0.13l0.0,0.02l-0.06,0.06l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.12,0.12l0.0,-0.01l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.25,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l0.0,0.04l-0.02,0.02l0.0,0.02l-0.06,0.06l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.01,0.01l-0.28,-0.28l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.19,0.0l-0.02,0.02l-0.12,0.0l-0.4,0.4l0.0,0.0l-0.06,0.06l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.4l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.01l-0.29,-0.29l-0.04,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.21,0.0l-0.06,0.06l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.01l-0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.04,-0.04l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.23,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.12,0.0l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.29l-0.01,-0.01l0.01,-0.01l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.02l0.02,0.0l0.02,0.02l0.15,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.0,-0.0l0.08,-0.08l0.02,0.0l0.06,-0.06l0.02,0.0l0.13,-0.13l0.02,0.0l0.31,-0.31l0.02,0.0l0.07,-0.07l0.01,0.01l0.04,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.0,0.0l0.04,-0.04l0.02,0.02l0.06,0.0l0.1,0.1l0.02,0.0l0.23,0.23l0.08,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.15,-0.15l0.35,-0.35l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.01,-0.01l0.03,-0.03l0.0,-0.0l0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.1l-0.06,-0.06l0.0,-0.06l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.06,-0.06l0.08,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.18,0.18l0.02,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.05,0.05l0.02,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.19,-0.19l0.04,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.0,0.0l0.04,-0.04l0.0,0.0l0.38,-0.38l0.02,0.0l0.02,0.02l0.04,0.0l0.13,-0.13l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.31,0.31l0.08,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.25,0.25l0.04,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.08,0.0l-0.01,0.01l-0.28,-0.28l-0.23,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.0,0.0l-0.31,0.31l-0.02,0.0l-0.23,0.23l-0.21,-0.21l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.14,-0.14l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.23,-0.23l0.0,-0.17l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.12l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.13l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.19l0.02,0.02l0.0,0.08l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.0,0.0l-0.23,0.23l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.02l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.21l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.27l0.02,0.02l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.02l-0.08,0.0l-0.02,0.02l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.06,0.06l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.04,0.04l-0.06,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.38,-0.38l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.06,0.06l0.0,0.0l-0.02,0.02l0.0,0.23l-0.02,0.02l0.0,0.29l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.31,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.54,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.08,-0.08l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.01,0.0l0.02,0.02l0.12,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.03l0.02,-0.02l-0.0,-0.13l0.34,-0.34l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.06,-0.06l-0.14,0.0l0.01,-0.01l0.08,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.08,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.1,0.0l0.01,0.01l0.01,0.01l0.0,0.0l0.02,0.02l0.0,0.0l0.0,0.0l0.01,0.01l0.35,0.35l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.25,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.03,-0.03l0.03,-0.03l0.0,-0.02l0.02,-0.02l0.0,-0.23l0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.06l-0.03,-0.03l0.01,-0.01l0.0,-0.1l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.17l0.02,-0.02l0.0,-0.21l0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.12,0.11l0.05,0.05l0.02,0.0l0.06,0.06l0.02,0.0l0.06,0.06l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.29,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.1,0.0l0.01,-0.01l0.01,0.01l0.1,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.04,0.04l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.17,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.1,-0.1l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.37,-0.37l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.06,-0.06l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.04,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.15,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.03,-0.03l-0.05,-0.05l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.33,0.33l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.0,0.0l-0.38,0.37l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.06,0.06l0.0,0.02l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.0l-0.06,0.06l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.0l0.08,0.08l0.0,0.0l0.02,0.02l0.0,0.0l0.28,0.28l-0.01,0.01l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.19,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.37,-0.37l0.0,-0.0l-0.08,-0.08l0.1,-0.1l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.15,-0.15l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.06l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.12,-0.12l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.04,0.04l0.02,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.06,0.06l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.01,-0.01l0.01,0.01l0.06,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.12,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,-0.0l-0.02,-0.02l-0.01,0.0l0.39,-0.39l0.0,-0.0l0.06,-0.06l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.01l0.2,0.2l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.06,0.0l0.02,0.02l0.17,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.03,0.03l0.01,0.01l0.0,0.0l0.01,0.01l0.14,0.14l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.04,0.0l0.02,-0.02l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.1,0.0l0.02,-0.02l0.04,0.0l0.02,0.02l0.15,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,-0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.4,-0.4l-0.1,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.21,0.0l-0.02,-0.02l-0.1,0.0l0.0,-0.25l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l0.13,-0.13l0.0,-0.08l-0.4,-0.4l-0.56,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.1,0.1l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.04l-0.04,0.04l0.0,0.02l-0.04,0.04l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.23l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.06l-0.02,0.02l-0.03,-0.0l-0.02,0.02l-0.05,0.0l-0.06,0.06l-0.01,-0.0l-0.02,0.02l-0.01,0.0l-0.38,0.38l-0.0,0.0l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.19l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.4,0.4l0.0,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l-0.22,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.08,0.08l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.12l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.25l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.08l0.04,0.04l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.06,0.06l0.0,0.02l0.04,0.04l0.0,0.0l0.06,0.06l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.08,0.08l0.0,0.02l0.04,0.04l0.0,0.02l0.08,0.08l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.0l0.04,0.04l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.21,0.0l-0.01,0.01l-0.01,-0.01l-0.0,0.0l-0.02,-0.02l-0.31,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.27,0.0l-0.04,0.04l-0.21,0.0l-0.02,0.02l-0.19,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.4,-0.4l-0.02,0.0l-0.27,-0.27l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.4,0.4l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.1,0.0l-0.19,0.19l-0.02,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.06,0.06l0.0,0.04l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.06,0.06l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.1,0.1l0.0,0.0l-0.02,0.02l0.0,0.04l-0.18,0.19l-0.02,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.0l-0.06,0.06l0.0,0.0l-0.15,0.15l0.0,0.06l-0.02,0.02l0.0,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.27,0.0l-0.02,0.02l-0.33,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.1,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.08,0.08l-0.06,0.0l-0.03,0.03l-0.01,0.01l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.1,-0.1l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,-0.02l-0.29,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.03,-0.03l-0.02,0.0l-0.11,-0.11l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.04,0.0l0.02,-0.02l0.0,0.0l0.17,-0.17l0.02,0.0l0.1,-0.1l0.06,0.0l0.06,-0.06l0.02,0.0l0.08,-0.08l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.19,-0.19l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.29l-0.02,-0.02l0.0,-0.1l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.15,-0.15l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.08,-0.08l0.0,-0.21l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.23l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.08,-0.08l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.06,-0.06l0.02,0.0l0.04,-0.04l0.0,0.0l0.04,-0.04l0.02,0.0l0.25,-0.25l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.02l0.12,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.25,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.23l-0.02,-0.02l0.0,-0.13l0.02,-0.02l0.02,-0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.1,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.01,-0.01l0.01,0.01l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.29,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.01,-0.01l0.01,0.01l0.25,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.15,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.12,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.12,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.19,0.0l0.06,-0.06l0.04,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.19,0.0l0.02,-0.02l0.17,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.0,0.0l0.08,-0.08l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.06,0.06l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.4,0.4l0.04,0.0l0.02,0.02l0.25,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.06,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.12,0.12l0.0,-0.03l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.31,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.04,0.04l-0.06,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.17,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.07,0.07l-0.01,-0.01l-0.04,0.0l-0.04,0.04l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.13,-0.13l0.0,-0.0l0.0,-0.02l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.08,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.0l-0.12,0.12l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.02,-0.02l-0.27,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.19,0.0l-0.01,0.01l-0.01,-0.01l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.08,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.44,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.31,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.23l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.15l0.25,-0.25l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.01,-0.01l0.03,-0.03l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.05,-0.05l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.06l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.17l-0.08,-0.08l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.03,-0.03l-0.01,-0.01l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.19,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.35,0.35l0.0,-0.07l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.13l-0.04,-0.04l0.0,-0.19l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.38,-0.38ZM197.67,606.36l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l-0.29,0.29l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.04l-0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.38,0.38l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.15,0.0l0.02,0.02l0.15,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.06,0.0l0.01,0.01l-0.01,0.01l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.19l0.02,0.02l0.0,0.14l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.17,0.0l-0.08,0.08l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.02,0.02l0.02,0.0l0.08,0.08l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.44,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l-0.04,0.04l-0.02,0.0l-0.13,0.13l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.1,0.1l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.17,0.17l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.25l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.31l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.4l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.1,0.1l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.17,0.17l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.17l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.19l-0.12,0.12l-0.12,0.0l-0.02,0.02l-0.07,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.0,0.0l-0.04,0.04l-0.02,0.0l-0.21,0.21l-0.35,-0.35l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.29,0.29l0.0,0.04l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.17,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.0,0.0l0.02,-0.02l0.09,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.0,-0.0l0.01,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.02l-0.06,0.06l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.21l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.17l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.0l0.01,0.01l-0.01,0.01l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.31l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,-0.0l-0.06,-0.06l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.29,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.12,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.6,0.0l-0.02,0.02l-0.23,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.03,0.03l-0.05,-0.05l-0.02,0.0l-0.01,0.01l-0.03,-0.03l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.12,0.0l-0.4,0.4l0.0,0.04l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.01,0.01l-0.01,0.01l-0.02,0.0l-0.06,0.06l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.19,0.19l-0.04,0.0l-0.08,-0.08l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.15,-0.15l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.1,0.0l-0.02,0.02l-0.0,0.0l-0.05,0.05l-0.03,-0.03l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.04,0.0l0.06,0.06l0.0,0.0l0.04,0.04l0.02,0.0l0.1,0.1l0.02,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.02,0.0l0.08,0.08l0.0,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.04,0.0l0.03,0.03l-0.03,0.03l-0.02,0.0l-0.06,0.06l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.08,-0.08l-0.0,-0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.14,0.0l-0.27,-0.27l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.04,-0.04l-0.0,-0.0l-0.23,-0.23l-0.02,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.23,-0.23l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.33,-0.33l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.29,-0.29l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.25,-0.25l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l-0.0,-0.02l-0.08,-0.08l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.03,-0.03l-0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.25,-0.25l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.0l-0.04,-0.04l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.19l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.21l0.02,-0.02l0.0,-0.13l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.12,-0.12l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.21l0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.17l-0.01,-0.01l0.01,-0.01l0.0,-0.1l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l-0.03,-0.03l0.01,-0.01l0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.4,-0.4l0.0,-0.13l-0.02,-0.02l0.0,-0.04l-0.0,-0.0l0.18,-0.18l0.04,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.15,0.0l0.01,-0.01l0.01,0.01l1.17,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.19,0.19l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.17l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.4,0.4l0.02,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.08,0.0l0.02,0.02l0.4,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.08,-0.0l0.02,-0.02l0.02,0.0l0.0,0.12l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.13l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.08l0.01,0.01l-0.01,0.01l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.08l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.03,0.03l0.39,0.39l0.0,0.0l0.15,0.15l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.08,0.08l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.06,0.0l0.02,-0.02l0.02,0.02l0.1,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.0,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.04,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.04,0.0l0.06,0.06l0.04,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.4,0.4l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.27,0.0l0.02,-0.02l0.04,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.15,-0.15l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.1l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.0,0.0l0.38,-0.38l0.0,-0.0l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.39,-0.4l-0.06,-0.0l-0.02,0.02l-0.03,0.0l-0.11,0.11l-0.02,0.02l-0.21,-0.21l-0.21,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.23,0.23l-0.25,0.25l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.01,0.01l0.0,-0.1l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.08,-0.08l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.06,-0.06l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.08,-0.08l-0.04,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.13,-0.13l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.4,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.04,-0.04l0.0,-0.04l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.19l-0.02,-0.02l-0.0,-0.11l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.08,-0.08l0.0,-0.0l0.0,-0.02l0.02,-0.02l0.0,-0.25l-0.2,-0.2l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.14l0.06,0.06l0.0,0.0l0.02,0.02l0.27,0.0l0.31,-0.31l0.23,0.0l0.4,-0.4l0.0,-0.06l-0.4,-0.4l-0.33,0.0l-0.29,0.29l-0.04,0.0l-0.0,-0.0l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.19l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.06,0.06l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.12,0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.25l-0.02,-0.02l0.0,-0.19l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.06l-0.04,-0.04l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.23l-0.02,-0.02l0.0,-0.11l0.02,-0.02l0.02,0.0l0.06,-0.06l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.06,-0.06l0.04,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.08,0.0l0.06,-0.06l0.12,0.0l0.4,-0.4l0.0,-0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.06,-0.06l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.02,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.08,-0.08l0.02,0.0l0.02,-0.02l0.02,0.0l0.1,-0.1l0.02,0.0l0.04,-0.04l0.0,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.0,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.27,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.08,-0.08l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.19,-0.19l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.31,-0.31l0.06,0.0l0.04,0.04l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.06,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.1,0.1l0.04,0.0l0.06,0.06l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.58l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.23l0.01,0.01l-0.01,0.01l0.0,0.1l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.13l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.08l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.19,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.13,0.13l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.21l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.04l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.0l0.04,0.04l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.0,0.08l-0.15,0.15l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.35,0.35l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.52,0.0l0.02,0.02l0.4,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.04,0.0l0.38,0.38l0.06,0.0l0.4,-0.4l0.0,-0.06l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.06l-0.4,-0.4l-0.04,0.0l-0.17,0.17l-0.25,0.0l-0.02,-0.02l-0.25,0.0l-0.02,0.02l-0.03,0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.08l-0.04,-0.04l0.0,-0.08l0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l-0.32,-0.32l0.03,-0.03l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.44l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.29l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.1l-0.01,-0.01l0.01,-0.01l0.0,-0.1l-0.02,-0.02l0.0,-0.17l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l0.04,-0.04l0.0,-0.06l0.02,-0.02l0.04,0.0l0.04,-0.04l0.06,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.06,-0.06l0.02,0.0l0.17,-0.17l0.02,0.0l0.04,-0.04l0.0,0.0l0.13,-0.13l0.02,0.0l0.06,-0.06l0.02,0.0l0.13,-0.13l0.04,0.0l0.06,-0.06l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.04,0.0l0.1,-0.1l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.0,0.06l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.19l-0.02,0.02l0.0,0.19l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.02,0.0ZM211.28,620.12l0.02,0.02l0.5,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,-0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.06,0.0l0.04,-0.04l0.17,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.21,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.1,0.1l-0.13,0.13l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.08l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.21l-0.02,0.02l-0.0,0.73l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.33,-0.33l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.29,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.35,0.0l-0.02,0.02l-0.23,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.06,0.0l0.0,-0.02l0.04,-0.04l0.0,-0.06l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.13,-0.13l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.23,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.1,0.1l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.0,0.0l-0.07,0.07l-0.37,0.36l-0.0,0.0l-0.04,0.04l0.0,0.0l-0.06,0.06l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.27l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.08l-0.04,0.0l-0.04,-0.04l-0.04,0.0l-0.04,0.04l-0.0,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.15,0.0l-0.01,0.01l-0.01,-0.01l-0.23,0.0l-0.35,-0.35l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.0,0.0l-0.06,0.06l0.0,0.02l-0.17,0.17l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.08,0.08l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.0l-0.15,0.15l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.08l-0.02,0.02l-0.12,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.31,0.0l-0.02,-0.02l-0.23,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.06,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.04,0.0l-0.04,-0.04l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.06,-0.06l-0.1,0.0l-0.02,-0.02l-0.04,0.0l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.1,-0.1l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.12,-0.12l0.0,-0.0l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.31l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.21l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.08l0.08,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,0.02l0.08,0.0l0.04,0.04l0.06,0.0l0.1,0.1l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.0,0.04l0.08,0.08l0.0,0.0l0.4,0.4l0.02,0.0l0.15,0.15l0.0,0.0l0.02,0.02l0.02,0.0l0.15,0.15l0.02,0.0l0.02,0.02l0.0,0.0l0.17,0.17l0.02,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.01,-0.01l0.01,0.01l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.23,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.02l0.08,0.0l0.04,-0.04l0.0,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.04,-0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,-0.02l0.19,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.15,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.1,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.19,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.17,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.0,0.0l0.1,-0.1l0.02,0.0l0.02,-0.02l0.02,0.0l0.17,-0.17l0.02,0.0l0.31,-0.31l0.04,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.01,-0.01l0.03,-0.03l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.17,-0.17l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.4,-0.4l0.0,-0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.19,0.0l0.02,0.02l0.06,0.0l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.03,0.03l0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.08,0.08l0.0,0.06l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.08,0.08l0.0,0.02l0.17,0.17l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.08,0.0ZM211.46,623.26l-0.39,0.39l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.14l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.36,0.36l-0.01,-0.01l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.13,-0.13l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.02l-0.04,-0.04l0.0,-0.08l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.12l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.04,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.08,-0.08l0.04,0.0l0.06,-0.06l0.02,0.0l0.04,-0.04l0.04,0.0l0.4,-0.4l0.0,-0.0l0.06,-0.06l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.01,0.0l-0.12,0.12l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.23l-0.02,0.02l0.0,0.44l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.12,0.0l0.02,0.02l0.15,0.0l0.02,0.02l0.67,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.08,0.0ZM215.29,627.7l0.0,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.15,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.12,0.0l0.02,-0.02l0.15,0.0l0.02,-0.02l0.25,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.08,0.0l0.0,0.04l-0.02,0.02l0.0,0.31l0.01,0.01l-0.01,0.01l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.04,0.04l0.0,0.0l0.04,0.04l0.0,0.0l0.4,0.4l0.02,0.0l0.1,0.1l0.02,0.0l0.02,0.02l0.02,0.0l0.1,0.1l0.02,0.0l0.1,0.1l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.17,0.0l0.06,-0.06l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.0,0.0l0.04,-0.04l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.25l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.19l-0.02,-0.02l0.0,-0.23l-0.02,-0.02l0.0,-0.08l-0.04,-0.04l0.0,-0.13l-0.02,-0.02l0.0,-0.02l0.32,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.21l0.02,0.02l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.12,0.0l0.02,-0.02l0.12,0.0l0.02,-0.02l0.0,-0.0l0.39,-0.39l0.03,-0.03l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.31l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.01,-0.01l0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.02,0.02l0.02,0.0l0.08,0.08l0.02,0.0l0.02,0.02l0.1,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.04,0.04l0.06,0.0l0.02,0.02l-0.29,0.29l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.02l0.02,0.02l0.0,0.0l0.37,0.37l0.0,0.11l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.06l0.03,0.03l-0.01,0.01l0.0,0.06l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.04l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.02l-0.06,0.06l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.23l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.12,0.12l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.08,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.01,-0.01l0.01,0.01l0.06,0.0l0.02,-0.02l0.15,0.0l0.02,-0.02l0.03,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.1l0.02,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.01,0.01l-0.01,0.01l0.0,0.02l0.0,0.0l-0.13,0.13l-0.35,0.35l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.02l-0.01,0.01l0.0,-0.03l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.12,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.4,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.04,0.0l-0.04,0.04l-0.0,0.0l-0.13,0.13l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.1l-0.04,0.04l0.0,0.1l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.13l-0.02,0.02l0.0,0.12l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l0.0,-0.01l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l0.0,-0.0l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l-0.4,-0.4l-0.04,0.0l-0.4,0.4l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.19,0.19l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.06l-0.02,0.02l0.0,0.16l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,-0.0l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.13,-0.13l-0.02,0.0l-0.02,-0.02l-0.19,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.11,0.11l-0.15,-0.15l0.38,-0.38l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.06,-0.06l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.4,-0.4l-0.04,0.0l-0.06,0.06l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.27,0.27l0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.4,0.4l0.06,0.0l0.06,0.06l0.08,0.0l0.02,-0.02l0.04,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.01,-0.01l0.05,0.05l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.17,0.17l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.04,-0.04l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.33,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.25,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.19,-0.19l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.15,0.0l-0.04,0.04l-0.06,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.4,0.4l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.28,0.28l-0.01,0.01l-0.04,0.0l-0.06,0.06l-0.02,0.0l-0.1,0.1l-0.08,0.0l-0.04,0.04l-0.02,0.0l-0.4,0.4l0.0,0.1l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.02l-0.06,0.06l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.1l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l0.02,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.01,0.01l-0.03,0.03l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.08,0.08l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.01,0.01l-0.03,0.03l0.0,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.08,-0.08l-0.04,0.0l-0.21,-0.21l-0.12,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.02,-0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.02,0.02l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.15,0.0l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.04,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.06,0.0l0.04,-0.04l0.02,0.0l0.06,-0.06l0.06,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.06,-0.06l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.14,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.02,0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.19,-0.19l0.02,0.0l0.1,-0.1l0.02,0.02l0.0,0.02l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.1,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.4l0.02,-0.02l0.0,-0.0l0.33,-0.33l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.4,-0.4l-0.06,0.0l-0.4,0.4l0.0,0.04l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.27l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.01,0.01l-0.32,-0.32l-0.15,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.21,0.21l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.04,-0.04l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.05,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.02,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l0.16,0.0l0.02,0.02l0.31,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.06,-0.06l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.27l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.03,-0.03l0.26,-0.26l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.17l-0.23,-0.23l0.0,-0.0l0.0,-0.08l0.02,-0.02l0.0,-0.15l-0.0,-0.0l0.14,-0.14l0.02,0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.16l0.06,0.0l0.02,-0.02l0.37,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.27,0.0l0.04,-0.04l0.04,0.0l0.02,-0.02l0.02,0.0l0.34,-0.34l0.39,0.39l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.03,0.0l0.01,-0.01l0.02,0.0l0.02,-0.02l0.02,0.0l0.23,-0.23l0.02,0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.1,0.0l0.02,-0.02l0.27,0.0l0.02,-0.02l0.02,0.0l0.15,-0.15l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.13,-0.13l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.17,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02ZM224.66,632.55l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.04,0.04l0.04,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.06,0.0l0.06,0.06l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.0,0.0l0.02,0.02l0.27,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.13,-0.13l0.06,0.0l0.01,-0.01l0.01,0.01l0.15,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.1,0.0l0.04,0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.15,0.15l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.06,0.06l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.0l0.4,0.4l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l-0.06,0.06l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.21l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.19l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.21,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.06,0.0l-0.01,0.01l-0.32,-0.32l-0.1,0.0l-0.04,0.04l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.16,0.16l0.0,-0.05l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.13l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.33l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.27l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.23,0.23l-0.12,-0.12l-0.02,0.0l-0.02,-0.02l-0.29,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.13,0.13l-0.0,0.0l-0.27,0.27l-0.19,0.18l-0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.21,0.21l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.21l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.4,-0.4l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.0,0.0l-0.04,0.04l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.12,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.23,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.06,0.06l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.03l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.01,0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.02l0.08,-0.08l0.0,-0.0l0.05,-0.05l0.03,-0.03l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.19,-0.19l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l0.1,0.0l0.02,0.02l0.23,0.0l0.02,0.02l0.12,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.25,0.0l0.01,-0.01l0.01,0.01l0.15,0.0l0.01,-0.01l0.01,0.01l0.06,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,-0.02l0.35,0.0l0.02,0.02l0.12,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.0,0.0l0.02,0.02l0.06,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,-0.02l0.13,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.1,0.0l0.04,-0.04l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.0,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.08,-0.08l0.02,-0.0l0.25,-0.25l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.01,-0.01l0.01,0.01l0.06,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.15,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.01,-0.01l0.34,0.34l0.04,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.15,-0.15l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.21,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l0.0,-0.01l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.06,-0.06l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.29l0.02,-0.02l0.0,-0.06l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.12,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.38,0.38l0.0,0.0l0.13,0.13l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.12,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.23,0.0l0.02,-0.02l0.23,0.0l0.02,-0.02l0.58,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.17,-0.17l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.0,0.0ZM216.4,642.79l-0.02,-0.02l-0.25,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.03,-0.03l-0.1,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.08,-0.08l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.1,-0.1l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.03,0.0l0.08,-0.08l0.21,0.21l0.12,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.1,0.0l0.4,-0.4l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.01l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.12,0.0l0.29,-0.29l0.1,0.0l0.02,-0.02l0.02,0.0l0.14,-0.14l0.2,0.2l0.02,0.0l0.02,0.02l0.25,0.0l0.02,-0.02l0.33,0.33l0.06,0.0l0.05,-0.05l0.01,0.01l0.0,0.0l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.15,0.15l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.03,0.03l0.03,0.03l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.08,0.08l0.0,0.02l0.06,0.06l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.25l-0.04,0.0l-0.02,0.02l-0.12,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.1,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.0,-0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.21,0.0ZM220.12,643.23l-0.06,0.0l0.0,-0.04l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.03,-0.03l-0.07,-0.07l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.0,-0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.27,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.19,0.0l0.04,0.04l0.04,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.04,0.0l0.06,0.06l0.06,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.27,0.0l0.02,-0.02l0.15,0.0l0.04,-0.04l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.1,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.1,-0.1l0.02,0.0l0.02,-0.02l0.02,0.0l0.12,-0.12l0.02,0.02l0.04,0.0l0.4,-0.4l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.19,0.19l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.08,0.0l-0.02,0.02l-0.08,0.0l-0.01,0.01l-0.03,-0.03l-0.31,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.04,0.0l-0.06,-0.06l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.27,0.0l-0.02,0.02l-0.23,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.12,0.12l-0.29,-0.29l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.19,-0.19l-0.02,0.0l-0.02,-0.02l0.0,-0.02l-0.33,-0.33l0.0,-0.0l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.1,-0.1l0.0,-0.0l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.1,0.0l-0.4,0.4l0.0,0.13l0.02,0.02l0.0,0.02l-0.16,0.16l-0.01,0.01l0.0,0.0l-0.02,0.02l0.0,0.02l-0.29,0.29l0.0,0.08l-0.12,0.0l-0.02,0.02l-0.06,0.0l-0.06,0.06l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.04l-0.04,0.04l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.19,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.17,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.13l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.02,-0.02l0.0,-0.0l0.08,-0.08l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.15,-0.15l0.0,-0.1l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.08l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.08l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.1l0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.1l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.12l0.02,0.0l0.02,-0.02l0.12,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.15,0.0l0.04,-0.04l0.17,0.0l0.02,-0.02l0.15,0.0l0.02,-0.02l0.23,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.0,0.0l0.19,0.19l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.25l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.19,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.23,0.0l0.04,-0.04l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.27,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.14l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.23,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.23,0.0l0.04,-0.04l0.0,-0.0l0.23,-0.23l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.15,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.17,-0.17l0.02,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.01,-0.01l0.0,0.05l0.01,0.01l-0.01,0.01l0.0,0.17l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.1,0.0l0.02,-0.02l0.0,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.0,-0.0l0.1,-0.1l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.1,0.0l0.29,0.29l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.17,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.33l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.1l-0.17,0.17l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.04l0.4,0.4l0.0,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.15,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.01,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.21l-0.17,0.16l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.1,0.1l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.12,0.12l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.04,0.04l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02ZM211.03,650.39l0.08,0.08l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.26,0.26l-0.03,0.03l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.19l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.25,0.25l0.0,0.02l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l-0.2,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.33,0.0l-0.1,0.1l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.05,0.05l-0.01,0.01l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.19l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,-0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.06,0.06l-0.0,0.0l-0.13,0.13l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.08,-0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.23l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.05,0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.29l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.06l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.06,0.0l-0.4,0.4l0.0,0.15l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.21l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.12,0.12l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.01,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.21l0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.27,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.08,0.0l0.02,-0.02l0.15,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.0,0.0l0.29,-0.29l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.02,0.0l0.06,0.06l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.23l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.04l0.1,0.1l0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.02,0.02l0.02,0.0l0.13,0.13l0.0,0.0l0.04,0.04l0.02,0.0l0.13,0.13l0.02,0.0l0.02,0.02l0.0,0.0l0.08,0.08l0.02,0.0l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.48,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.19,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.25,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.21,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.1,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.06,0.06l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.0,0.0l-0.08,-0.08l-0.02,0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l0.25,-0.25l0.0,-0.02l-0.04,-0.04l0.0,-0.21l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.13l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.21l-0.02,-0.02l0.0,-0.19l-0.04,-0.04l0.0,0.0l0.0,-0.04l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l0.06,-0.06l0.0,-0.0l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.01l-0.04,-0.04l0.0,-0.03l-0.1,-0.1l0.0,-0.06l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.13l-0.01,-0.01l0.01,-0.01l0.0,-0.1l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.04l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.07l-0.02,-0.02l0.0,-0.07l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.1l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l0.06,-0.06l0.0,-0.06l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.0l-0.1,-0.1l0.0,-0.0l0.0,-0.08l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l-0.03,-0.03l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.21l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.06l0.02,0.0l0.02,0.02l0.04,0.0l0.13,0.13l0.02,0.0l0.04,0.04l0.15,0.0l0.04,0.04l0.04,0.0l0.02,-0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.04,-0.04l0.0,0.0l0.04,-0.04l0.04,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.1,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.08,0.0l0.04,-0.04l0.02,0.0l0.06,0.06l0.0,0.06l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.04,0.04l0.17,0.0l0.02,-0.02l0.02,0.0l0.38,-0.38l0.3,0.3l0.02,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.0,-0.0l0.33,-0.33l0.14,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.12,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.0,-0.0l0.03,-0.03l0.01,0.01l0.06,0.0l0.02,-0.02l0.02,0.0l0.1,-0.1l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.15,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,-0.02l0.19,0.0l0.02,-0.02l0.04,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.1,0.0l0.01,-0.01l0.01,0.01l0.12,0.0l0.02,-0.02l0.02,0.02l0.12,0.0l0.02,-0.02l0.17,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.08,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.14,0.0l0.0,0.02l0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.29,0.29l0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.21,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.25l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l-0.33,0.33l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.35l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.06,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.4,0.4l0.0,0.0l0.02,0.02l0.06,0.0l0.17,-0.17l0.1,0.1l0.21,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.0,-0.0l0.4,-0.4l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.08,-0.08l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.0,0.0l0.08,-0.08l0.02,0.0l0.34,-0.34l0.01,0.01l0.02,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.1,0.0l0.29,-0.29l0.19,0.19l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.21,-0.21l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.11,-0.11l0.03,-0.03l0.0,-0.04l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.21l0.02,-0.02l0.0,-0.14l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.03,-0.03l0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.27,0.27l0.0,0.04l0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.08l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.04,0.04l0.0,0.1l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.36,0.36l0.08,0.08l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.01,-0.01l0.01,0.01l0.2,0.0l0.0,0.1l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.08,0.08l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,-0.02l0.0,0.0l0.19,-0.19l0.02,0.0l0.06,-0.06l0.0,0.0l0.02,-0.02l0.02,0.0l0.01,-0.01l0.17,0.17l0.09,0.09l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.12,-0.12l0.31,-0.31l0.38,0.38l0.02,0.0l0.04,0.04l0.06,0.0l0.02,0.02l0.04,0.0ZM209.43,649.47l-0.01,-0.01l0.01,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.03,0.0l-0.02,0.02l-0.0,0.08l-0.02,0.02l0.0,0.08l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0ZM210.58,644.89l0.22,-0.22l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.04,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.1,0.0l0.02,-0.02l0.04,0.0l0.02,0.02l0.15,0.0l0.02,0.02l0.21,0.0l0.02,0.02l0.12,0.0l0.02,-0.02l0.15,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.19,0.0l0.02,0.02l0.12,0.0l0.02,0.02l0.12,0.0l0.02,0.02l0.02,0.0l0.0,0.02l0.04,0.04l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.27,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.23,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.15,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.14,0.0l-0.11,-0.11ZM213.51,644.54l0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.03,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.06,-0.06l0.08,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.04,-0.04l0.15,0.0l0.02,-0.02l0.04,0.04l0.12,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.12,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.0,0.0l0.06,-0.06l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l-0.02,0.0l-0.29,0.29l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.21,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02ZM219.77,646.3l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.4,-0.4l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.01,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.31,0.0l0.02,-0.02l0.15,0.0l0.02,-0.02l0.17,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.15,0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.02,0.0l0.08,-0.08l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.35,0.35l0.04,0.0l0.04,-0.04l0.0,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.02l0.17,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.31,0.31l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.31,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.21,0.0l0.02,-0.02l0.17,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.04l0.01,0.01l-0.3,0.3l0.0,0.15l0.02,0.02l0.0,0.02l0.06,0.06l0.0,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.0l0.01,0.01l0.01,0.01l-0.0,0.01l0.02,0.02l0.0,0.03l0.01,0.01l-0.04,0.02l0.01,0.02l0.1,0.07l0.0,0.01l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.4,0.4l0.02,0.0l0.08,0.08l0.04,0.0l0.0,-0.01l0.03,0.03l0.01,-0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.19,0.19l0.0,0.0l0.04,0.04l0.03,0.0l0.01,0.01l-0.01,0.01l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.06,0.06l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.19,0.0l-0.02,0.02l-0.33,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.02l-0.06,0.06l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.1,0.0l-0.06,-0.06l-0.02,0.0l-0.13,-0.13l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.06,0.0l-0.06,0.06l-0.0,0.0l-0.1,0.1l-0.02,0.0l-0.35,0.35l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.15,0.15l-0.02,0.0l-0.31,0.31l-0.02,0.0l-0.4,0.4l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.21,0.0l-0.01,0.01l-0.01,-0.01l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.04,-0.04l0.0,-0.04l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02ZM217.68,628.12l0.0,0.1l-0.01,-0.01l0.0,-0.0l-0.04,-0.04l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.01,-0.01l0.0,0.01l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.13l0.02,0.02ZM222.21,625.47l0.03,-0.03l0.01,0.01l0.04,0.0l0.02,0.02l0.02,0.0l0.01,0.01l-0.21,0.21l0.0,-0.01l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04ZM206.28,638.1l-0.02,0.02l0.0,0.19l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.06,0.06l-0.02,0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.15l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.0,-0.0l0.23,-0.23l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.04,-0.04l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.17,-0.17l0.0,-0.02l-0.02,-0.02l0.0,-0.02l0.29,0.0l0.02,-0.02l0.29,0.0l0.02,-0.02l0.19,0.0l0.04,-0.04l0.02,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.4l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.1,-0.1l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.1,-0.1l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.08,0.08l-0.14,0.14l0.0,-0.03l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.21l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.04,-0.04l0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.13l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.08l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.01,-0.01l0.01,0.01l0.1,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.21,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.21,0.21l0.04,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.06,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.08,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.21,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.39,-0.39l0.07,0.07l0.0,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.12,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.38,-0.38l0.02,0.02l0.02,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.15,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.29,0.29l0.1,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.08,-0.08l0.08,0.0l0.19,0.19l0.19,0.0l0.02,-0.02l0.04,0.0l0.31,-0.31l0.0,0.1l-0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l-0.04,0.0l-0.08,0.08l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.06,0.06l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l-0.33,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.26,0.26l-0.01,-0.01l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.15l-0.4,-0.4l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.08l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.15,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.05,0.05l-0.01,0.01l-0.02,0.0l-0.08,0.08l-0.05,-0.05l0.01,-0.01l0.0,-0.06l0.02,-0.02l0.0,-0.04l-0.4,-0.4l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.15,0.15l0.0,0.08l-0.02,0.02l0.0,0.1l0.0,0.0l-0.27,0.27l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.27l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.3,0.3l-0.01,0.01l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.27l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.21,0.21l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l-0.06,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.0,0.0l-0.04,0.04l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.17l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.02l0.21,0.21l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.06,0.06l0.0,0.02l0.04,0.04l0.0,0.08l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.01,0.01l-0.03,0.03l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.04ZM206.53,642.79l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.25,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.35,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.08,0.08l-0.08,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.23,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.15,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.06,0.0l-0.04,-0.04l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.17,0.0l-0.02,-0.02l-0.1,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.17,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.04,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.17,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.06,-0.06l-0.08,0.0l-0.11,-0.11l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,-0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,-0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,-0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.13,-0.13l-0.04,0.0l-0.08,-0.08l-0.02,-0.0l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.06,-0.06l-0.02,0.0l-0.38,-0.38l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.13,-0.13l-0.02,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.17,-0.17l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.05,-0.05l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l0.0,-0.0l-0.01,-0.01l-0.01,-0.01l0.0,-0.0l-0.01,-0.01l-0.16,-0.16l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.03,-0.03l-0.03,-0.03l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.1,-0.1l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.01l-0.02,-0.02l0.0,-0.01l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.17,-0.17l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.21,-0.21l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.1,-0.1l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.1l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.06,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.0,0.0l0.04,-0.04l0.0,0.0l0.4,-0.4l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.19,-0.19l0.0,-0.02l0.04,-0.04l0.0,-0.15l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.08,-0.08l0.02,0.0l0.21,-0.21l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.04,-0.04l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.0,0.0l0.06,-0.06l0.02,0.0l0.15,-0.15l0.02,0.0l0.09,-0.09l0.11,0.11l0.04,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.08,-0.08l0.02,0.0l0.02,-0.02l0.17,0.0l0.02,0.02l0.1,0.0l0.02,-0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,-0.02l0.02,0.02l0.08,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.1,0.0l0.02,0.02l0.06,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,0.02l0.06,0.0l0.04,-0.04l0.02,0.0l0.01,-0.01l0.03,0.03l0.1,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.12,0.0l0.02,-0.02l0.1,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.12,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.12,0.0l0.02,0.02l0.33,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.31,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.06,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,0.02l0.25,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.19,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,0.02l0.25,0.0l0.02,-0.02l0.1,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.25,0.0l0.04,0.04l0.12,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.12,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.04,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.12,0.0l0.02,-0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.06,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,-0.02l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,-0.02l0.02,0.02l0.06,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.08,0.08l0.06,0.0l0.02,0.02l0.02,0.0l0.01,0.01l-0.3,0.3l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.04,0.0l0.02,-0.02l0.06,0.0l0.06,-0.06l0.02,0.0l0.04,-0.04l0.04,0.0l0.04,-0.04l0.02,0.0l0.15,-0.15l0.02,0.0l0.19,-0.19l0.06,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.15,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.06,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.02,0.02l0.25,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.15,0.0l0.02,0.02l0.17,0.0l0.02,0.02l0.33,0.0l0.02,0.02l0.31,0.0l0.01,-0.01l0.01,0.01l0.33,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.0,0.0l0.02,0.02l0.12,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.08,0.0l0.02,0.02l0.02,0.0l0.03,-0.03l0.01,0.01l0.04,0.0l0.02,-0.02l0.01,0.0l-0.1,0.1l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.15,0.15l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.0l-0.04,0.04l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.08l-0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.21l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.08,0.08l0.0,0.02l0.02,0.02l0.0,0.04l0.03,0.03l0.01,0.01l0.0,0.0l0.01,0.01l0.03,0.03l0.0,0.02l0.13,0.13l-0.13,0.13l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.33,0.33l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.23l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l-0.31,0.31l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.4,0.4l0.02,0.0l0.04,0.04l0.02,0.0l0.06,0.06l0.0,0.17l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.18,0.18l-0.01,-0.01l0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.04,-0.04l-0.15,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.1l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.44l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.25,0.0l-0.12,0.12l-0.12,-0.12l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.12,0.0l-0.4,0.4l0.0,0.04l0.29,0.29l0.0,0.04l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.14,0.0l0.18,0.18l0.0,0.08l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.06,0.06l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.18,0.0l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.06,0.06l0.19,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.16,0.0l0.0,0.06l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.12,0.12l0.0,0.0l0.4,0.4l0.06,0.0l0.04,-0.04l0.17,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.08,-0.08l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.08,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.08,0.08l0.02,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.02,0.0l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.1l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.19l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.08l0.02,0.02l0.0,0.11l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.08l0.04,0.04l0.0,0.04l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.23,0.23l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.02l0.04,0.04l0.0,0.0l0.4,0.4l0.02,0.0l0.06,0.06l0.02,0.0l0.04,0.04l0.0,0.02l0.04,0.04l0.0,0.03l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0ZM201.87,634.38l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.23,-0.23l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.08l0.19,-0.2l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.04,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.04,0.0l0.06,0.06l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.1,0.1l0.08,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.35,0.0l0.02,-0.02l0.06,0.0l0.01,-0.01l0.01,0.01l0.08,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.12,0.0l0.02,-0.02l0.04,0.0l0.01,-0.01l0.03,0.03l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.06,0.06l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l0.0,0.0l-0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.23l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.03,0.03l-0.01,-0.01l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l0.0,-0.31l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02ZM207.53,627.93l-0.12,0.0l-0.04,0.04l-0.0,0.0l-0.05,0.05l-0.1,0.1l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.1,0.1l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.0l-0.02,0.02l0.0,0.0l-0.27,0.27l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.1l-0.29,-0.29l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.06,0.06l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l-0.31,0.31l-0.02,0.0l-0.02,-0.02l-0.17,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.21l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.01,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.13,-0.13l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,-0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.4,-0.4l0.0,-0.0l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.06,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.0l0.1,-0.1l0.0,-0.0l0.06,-0.06l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.09,-0.09l0.03,-0.03l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.1l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.13l-0.04,-0.04l0.0,-0.06l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.04l0.35,0.0l0.02,0.02l0.21,0.0l0.02,0.02l0.21,0.0l0.02,0.02l0.15,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.06,0.06l0.02,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.1,0.0l0.02,0.02l0.23,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.19,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.19,0.19l0.08,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.44,0.0l0.02,-0.02l0.27,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.08,0.0l0.02,0.02l0.06,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.08,0.08l0.02,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.02,0.0l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.1l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.4,0.4l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.1l0.0,0.0l-0.16,0.16l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.04,-0.04l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.19,-0.19l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.12,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.03,0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.1l-0.4,-0.4l-0.12,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02ZM204.13,631.39l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.08l-0.14,-0.14l0.14,-0.14l0.0,0.05ZM204.76,630.4l0.0,0.01l-0.01,0.0l0.01,-0.01ZM208.24,636.09l-0.02,-0.02l-0.06,0.0l-0.04,0.04l-0.17,0.0l-0.04,0.04l-0.02,0.0l-0.12,0.12l-0.32,0.32l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.08l0.02,0.02l-0.03,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l0.0,-0.0l0.0,-0.02l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.04,0.0l0.04,-0.04l0.08,0.0l0.02,-0.02l0.17,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.04,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.0,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.15l0.31,-0.31l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.35,-0.35l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.03,-0.03l0.22,-0.22l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.27l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.12,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.15,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.17,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.07,-0.07l0.18,0.18l0.01,0.0l-0.16,0.16l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.33l0.02,0.02l0.0,0.04l-0.27,0.27l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.24,0.24l-0.01,0.01l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.08,0.08l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.0l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.15,0.0ZM211.78,626.93l0.0,-0.06l-0.02,-0.02l0.0,-0.04l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.01,-0.01l0.01,0.01l0.06,0.0l0.02,0.02l0.35,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.15,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.06,0.0l0.08,-0.08l0.02,0.0l0.04,-0.04l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,-0.02l0.08,0.0l0.04,0.04l0.02,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.01,-0.01l0.01,0.01l0.08,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.0,0.02l-0.02,0.02l0.0,0.18l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.17,0.17l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.21,0.0l-0.04,0.04l-0.15,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.27,0.27l-0.23,-0.23l-0.02,0.0l-0.13,-0.13l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l0.0,-0.0l-0.01,-0.01l-0.01,-0.01l0.0,-0.0l-0.01,-0.01l-0.01,-0.01ZM204.7,635.37l0.0,-0.01l-0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.29,0.29l-0.01,0.0l-0.02,0.02l-0.37,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.12,0.12ZM213.42,614.91l0.01,-0.01l0.0,-0.02l-0.31,-0.31l0.01,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.08,0.08l0.08,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.12,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l-0.02,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.05,-0.05ZM191.71,611.91l-0.04,-0.04l-0.12,0.0l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.04,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.23,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.12,0.0l-0.14,0.14l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.19l-0.02,0.02l0.0,0.19l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.01,0.01l-0.22,-0.22l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0ZM200.43,611.98l0.01,0.0l-0.01,0.01l-0.01,0.0l0.01,-0.01Z", "name": "Delta"}, "2026": {"path": "M374.48,603.42l0.24,0.39l0.21,0.06l0.11,0.01l0.43,-0.01l0.06,-0.0l0.02,0.01l0.52,-0.21l0.02,-0.04l0.77,-1.71l0.03,-0.12l0.06,-0.5l-0.01,-0.14l-0.37,-1.6l-0.02,-0.07l-0.63,-1.39l-0.15,-1.26l-0.03,-0.23l-0.01,-1.47l0.14,-0.19l1.59,-1.81l0.6,-0.5l0.77,-0.65l0.1,-0.14l0.97,-2.1l0.03,-0.21l-0.17,-1.54l-0.03,-0.12l-0.51,-1.16l-0.09,-1.3l0.04,-1.61l-0.01,-0.08l-0.29,-1.53l-0.0,-0.01l-0.16,-0.77l-0.03,-0.08l-0.44,-1.0l-0.27,-1.99l-0.11,-0.23l-1.19,-1.18l0.02,-1.25l0.83,-2.19l0.62,-0.68l0.07,-0.11l0.92,-2.12l0.01,-0.02l0.85,-2.26l0.03,-0.16l-0.06,-1.43l0.02,-1.18l0.0,-0.0l0.01,-1.78l0.04,-2.65l-0.03,-0.15l-0.45,-1.15l-0.14,-0.18l-0.2,-0.15l-0.18,-1.48l-0.15,-1.26l-0.1,-1.07l-0.02,-0.1l-0.45,-1.26l-0.06,-0.1l-0.3,-0.41l-0.28,-0.82l-0.14,-0.79l-0.04,-0.12l-0.26,-0.51l-0.04,-0.07l-0.31,-1.01l0.04,-0.26l0.8,0.18l0.08,0.01l1.88,0.03l0.94,0.22l0.11,0.01l1.15,-0.06l1.14,0.1l0.01,0.0l1.33,0.09l0.08,-0.0l1.3,-0.19l0.05,-0.01l0.25,-0.07l-0.08,0.47l0.02,0.23l0.78,1.87l0.09,0.14l2.62,2.48l0.01,0.01l2.23,2.0l0.11,0.07l1.15,0.48l1.0,0.42l0.31,0.0l1.71,-0.72l0.21,-0.2l1.2,-2.5l0.04,-0.12l0.54,-3.91l0.55,-2.16l0.01,-0.09l0.07,-2.24l0.27,-1.31l3.85,-0.45l1.86,0.16l1.67,0.14l0.21,-0.04l2.32,-1.12l0.17,-0.16l0.83,-1.45l0.34,-0.53l0.89,-1.38l0.27,-0.08l1.05,-0.29l2.56,-0.02l0.37,-0.27l0.5,-1.4l0.5,-0.94l1.61,1.2l0.41,3.33l0.02,0.09l0.6,1.68l0.02,0.06l1.08,2.0l0.1,0.12l0.79,0.62l-0.02,0.12l-0.0,0.12l0.14,0.94l0.09,1.08l0.03,0.11l0.43,1.1l0.06,0.11l0.66,0.81l0.01,0.01l0.65,0.74l0.5,0.94l0.05,0.08l0.54,0.62l0.05,0.05l0.63,0.5l0.0,0.0l1.16,0.89l0.87,0.67l0.11,0.06l0.46,0.17l0.33,0.63l0.05,0.55l0.0,0.03l0.11,0.61l0.11,0.21l0.32,0.34l0.13,0.09l0.7,0.3l0.14,0.21l-0.12,0.11l-0.06,0.52l0.08,0.29l0.31,0.41l-0.12,0.18l-0.06,0.22l0.0,0.8l0.17,0.33l0.49,0.35l0.1,0.62l0.02,0.07l0.36,1.05l0.06,0.11l0.39,0.51l0.11,0.1l0.57,0.34l0.03,0.01l0.54,0.27l0.11,0.54l0.01,0.03l0.12,0.43l-0.2,0.66l-0.28,0.59l-0.36,0.48l-0.34,0.11l-0.23,-0.16l-0.3,-0.06l-0.64,0.13l-0.07,0.02l-0.97,0.38l-0.11,0.06l-0.79,0.65l-0.03,0.02l-0.6,0.58l-0.03,0.03l-0.62,0.75l-0.09,0.21l-0.12,1.11l0.0,0.11l0.14,0.84l0.04,0.12l0.52,1.02l0.06,0.09l0.07,0.07l0.51,0.56l0.01,0.01l0.68,0.7l0.36,0.63l-0.02,0.46l-0.0,0.02l-0.0,1.03l-0.25,0.5l-0.59,0.88l-0.77,0.85l-0.02,0.02l-0.62,0.79l-0.01,0.02l-0.37,0.52l-0.69,0.65l-0.03,0.03l-0.67,0.77l-0.01,0.01l-0.54,0.68l-0.79,0.47l-0.14,0.14l-0.07,0.11l-0.62,1.02l-0.87,1.4l-0.58,0.87l-0.45,0.24l0.02,0.03l-0.28,0.14l-0.49,1.06l-0.44,0.68l-0.06,0.28l0.16,1.02l-0.36,1.14l-0.02,0.16l0.08,0.71l-0.75,1.71l-0.03,0.15l-0.03,0.84l-0.77,0.84l-0.35,-0.07l-0.45,-0.4l-0.57,-0.59l-0.14,-0.1l-0.84,-0.33l-0.2,-0.02l-1.02,0.14l-0.8,0.04l-0.14,0.03l-0.42,0.18l-0.22,0.26l-0.24,0.83l-0.02,0.12l0.01,0.33l-0.06,0.2l-0.48,0.47l-0.93,0.51l-0.02,0.01l-0.3,0.19l-0.05,0.04l-0.42,0.37l-0.03,0.02l-0.32,0.34l-0.48,0.24l-0.13,0.06l-0.74,0.3l-0.12,-0.01l-0.24,-0.03l-0.24,0.04l-0.61,0.32l-0.13,0.11l-0.32,0.41l-0.05,0.08l-0.5,1.08l-0.03,0.09l-0.07,0.36l-0.31,0.29l-0.05,0.02l-0.11,-0.04l-0.26,-0.32l-0.3,-0.64l-0.02,-0.03l-0.28,-0.49l-0.2,-0.56l-0.19,-0.69l-0.09,-0.43l-0.04,-0.1l-0.2,-0.39l-0.01,-0.02l-0.41,-0.67l-0.25,-0.46l-0.12,-0.14l-0.53,-0.37l-0.26,-0.07l-0.45,0.04l-0.55,-0.1l-0.12,-0.0l-0.68,0.08l-0.0,0.0l-0.55,0.07l-0.0,0.0l-0.07,0.01l-0.01,0.0l-0.42,0.06l-0.03,0.01l-0.35,0.08l-0.13,0.05l-0.5,0.32l-0.61,0.29l-0.18,0.06l-0.21,0.01l-0.08,0.01l-0.33,0.08l-0.09,0.03l-0.33,0.17l-0.07,0.04l-0.39,0.31l-0.11,0.13l-0.1,0.18l-0.09,0.13l-0.07,0.2l-0.02,0.29l-0.0,0.05l0.01,0.26l-0.0,0.25l0.06,0.21l0.17,0.28l0.05,0.06l0.24,0.26l0.08,0.12l0.11,0.16l0.0,0.0l0.27,0.39l0.27,0.39l0.15,0.42l0.1,0.64l0.04,0.48l-0.04,0.75l-0.17,0.32l-0.05,0.2l0.01,0.34l-0.15,0.22l-0.25,0.29l-0.02,0.02l-0.35,0.47l-0.3,0.2l-0.08,0.07l-0.33,0.38l-0.01,0.01l-0.81,0.99l-0.06,0.1l-0.25,0.59l-0.01,0.02l-0.24,0.64l-0.02,0.13l-0.0,0.03l0.01,0.09l0.04,0.2l-0.11,0.14l-0.07,0.02l-0.5,0.18l-0.24,0.24l-0.06,0.15l-0.38,0.34l-0.03,0.03l-0.25,0.27l-0.1,0.28l0.01,0.38l0.0,0.04l0.04,0.32l-0.06,0.6l0.0,0.08l0.11,0.97l0.02,0.1l0.24,0.64l-0.13,0.09l-0.08,0.08l-0.29,0.35l-0.02,0.02l-0.46,0.48l-0.06,0.08l-0.42,0.76l-0.44,0.69l-0.03,0.04l-0.0,0.0l-0.5,0.59l-0.05,0.07l-0.23,0.45l-0.03,0.07l-0.24,0.78l-0.02,0.11l-0.01,0.85l-0.01,0.62l-0.07,0.22l-1.18,-0.18l-0.99,-0.85l-0.05,-0.04l-1.64,-1.02l-1.08,-0.83l-0.76,-1.13l-0.17,-1.29l-0.08,-1.25l-0.04,-0.14l-0.72,-1.54l-0.09,-0.12l-0.78,-0.72l-0.23,-0.1l-0.9,-0.08l-0.03,-0.0l-0.68,-0.01l-1.22,-0.09l-0.02,-0.0l-1.8,-0.03l-2.24,-0.07l-0.22,-0.01l-0.64,-0.04l-0.34,-0.02l-1.7,-0.32l-0.09,-0.01l-2.07,0.08l-1.49,-0.11l-1.93,-0.17l-1.54,-0.15l-0.58,-0.64l-0.36,-0.4l-0.04,-0.71l0.11,-0.93l0.01,-0.09l0.0,-0.03l0.05,-1.24l0.45,-1.03l0.03,-0.14l0.05,-1.23l-0.0,-0.06l-0.18,-1.86l-0.04,-1.4l0.07,-0.39l0.01,-0.06l0.0,-0.04l0.17,-0.06l1.26,-0.15l0.11,-0.03l0.97,-0.4l0.02,-0.01l0.92,-0.44l0.45,-0.03l0.76,0.47l0.83,0.52l0.58,0.89l0.29,0.18l0.79,0.09l1.21,1.27l1.08,1.31l0.12,0.09Z", "name": "Ebonyi"}, "2027": {"path": "M173.75,575.37l0.4,-0.12l0.27,-0.28l0.24,-0.9l0.03,-0.09l0.18,-0.53l0.02,-0.1l0.07,-1.04l0.08,-0.88l0.39,-0.59l0.34,-0.05l0.33,-0.29l0.13,-0.48l0.37,-0.14l0.58,0.17l0.28,-0.02l1.51,-0.7l0.66,-0.28l0.22,-0.22l0.34,-0.88l0.41,-1.0l0.03,-0.12l0.13,-1.37l0.13,-1.16l0.56,-0.6l0.62,-0.49l0.05,-0.04l0.79,-0.85l0.07,-0.1l0.45,-0.91l0.01,-0.03l0.56,-1.47l0.02,-0.07l0.19,-1.05l0.24,-1.03l-0.01,-0.22l-0.25,-0.72l-0.01,-0.03l-0.45,-1.05l-0.07,-0.1l-0.31,-0.35l-0.53,-0.61l-0.19,-0.91l-0.08,-0.17l-0.58,-0.72l-0.1,-0.09l-0.5,-0.3l-0.06,-0.03l-0.44,-0.17l-0.31,-0.17l-0.03,-0.7l0.16,-0.93l0.0,-0.04l0.07,-0.81l-0.01,-0.14l-0.17,-0.59l0.13,-0.45l0.64,-0.41l0.17,-0.43l-0.18,-0.15l0.05,-0.16l-0.0,-0.24l-0.1,-0.31l0.1,-0.76l0.0,-0.04l0.03,-0.83l0.52,-1.04l0.31,-0.34l0.55,-0.59l0.71,-0.58l0.47,-0.37l0.12,-0.16l0.27,-0.64l0.23,-0.53l0.69,-0.55l1.01,-0.24l0.03,-0.01l0.16,-0.05l0.26,-0.24l0.14,-0.4l0.02,-0.1l0.04,-0.46l0.22,-0.74l0.51,-1.0l0.3,-0.45l0.63,-0.2l0.25,-0.25l0.25,-0.72l0.02,-0.19l-0.04,-0.3l-0.04,-0.63l-0.0,-0.01l-0.05,-0.57l0.44,-0.76l0.67,-0.46l1.7,-0.62l1.11,0.36l0.1,0.02l1.33,0.07l0.11,-0.01l1.5,-0.33l1.15,-0.11l0.71,0.14l1.25,0.28l0.13,0.01l1.66,-0.19l1.62,0.11l0.04,0.0l1.64,-0.04l1.54,0.23l0.05,0.0l0.78,0.01l0.65,0.01l0.05,-0.0l1.36,-0.15l1.69,-0.11l0.06,-0.01l0.84,-0.19l0.85,0.14l0.93,0.23l0.35,0.29l0.7,0.61l0.39,0.66l0.01,0.01l0.23,0.37l0.17,0.28l-0.07,0.2l-0.38,0.56l-0.72,0.57l-0.01,0.01l-0.7,0.6l-0.05,0.05l-0.37,0.45l-0.07,0.4l0.29,0.76l0.24,0.97l0.06,0.14l0.65,0.92l0.24,0.91l0.12,1.0l0.06,0.16l0.6,0.96l0.28,0.8l0.39,0.27l0.9,-0.04l0.28,-0.14l0.49,-0.56l0.02,-0.02l0.47,-0.62l0.25,-0.22l0.38,-0.05l0.2,-0.08l0.67,-0.51l0.06,-0.06l0.84,-1.01l0.99,-0.58l0.93,0.06l0.42,0.06l0.42,0.38l0.87,1.26l0.17,0.14l0.98,0.43l0.38,-0.03l0.66,-0.44l0.91,-0.23l0.03,-0.01l1.55,-0.53l0.23,-0.2l0.23,-0.48l0.01,-0.03l0.36,-0.95l0.03,-0.05l0.28,-0.44l0.02,-0.04l0.54,-1.12l0.02,-0.04l0.34,-1.0l0.01,-0.05l0.23,-1.14l0.01,-0.04l0.08,-0.84l0.2,-0.87l0.01,-0.06l0.05,-0.76l0.19,-1.22l0.35,-0.94l0.08,-0.08l0.75,0.2l0.3,0.27l0.65,-0.17l0.18,-0.55l0.0,-0.24l-0.16,-0.51l0.01,-0.57l0.09,-0.05l0.2,-0.02l-0.0,-0.01l0.26,-0.1l0.12,-0.12l0.26,-0.26l-0.07,-0.08l0.21,-0.2l0.01,-0.43l-0.02,-0.14l-0.2,-0.56l-0.06,-0.11l-0.36,-0.48l-0.05,-0.05l-0.5,-0.47l-0.26,-0.27l-0.13,-0.14l0.17,-0.54l0.0,-0.02l0.09,-0.35l0.0,-0.02l0.06,-0.26l-0.15,-0.4l-0.17,-0.13l-0.0,-0.5l0.09,-0.59l0.19,-0.55l0.01,-0.05l0.12,-0.63l0.23,-0.51l0.04,-0.16l0.01,-0.66l0.31,-0.31l0.1,-0.16l0.1,-0.33l0.06,-0.13l0.42,-0.48l0.01,-0.01l0.36,-0.44l0.28,-0.13l0.11,-0.08l0.33,-0.32l0.45,-0.31l0.38,0.02l0.4,-0.27l0.22,-0.66l0.18,-0.28l0.06,-0.3l-0.1,-0.47l-0.24,-0.29l-0.03,-0.01l-0.0,-0.09l0.14,-0.4l0.2,-0.2l0.11,-0.09l0.11,-0.16l0.22,-0.53l0.01,-0.03l0.2,-0.64l0.01,-0.04l0.12,-0.6l0.3,-0.57l0.02,-0.04l0.24,-0.6l0.32,-0.5l0.0,-0.0l0.32,-0.52l0.02,-0.04l0.29,-0.6l0.02,-0.06l0.18,-0.64l0.0,-0.01l0.09,-0.36l0.0,-0.01l0.1,-0.41l0.25,-0.42l0.23,-0.34l0.31,-0.38l0.07,-0.12l0.15,-0.43l-0.12,-0.43l-0.16,-0.14l0.03,-0.28l-0.0,-0.1l-0.05,-0.41l0.07,-0.23l0.13,-0.18l0.04,-0.07l0.26,-0.58l0.24,-0.28l0.02,-0.02l0.3,-0.39l0.09,-0.11l0.11,-0.14l0.29,-0.31l0.46,-0.29l0.08,-0.07l0.43,-0.48l0.35,-0.13l0.01,-0.01l0.31,-0.13l0.11,-0.07l0.36,-0.32l0.49,-0.23l0.08,-0.05l0.12,-0.09l0.66,-0.21l0.21,-0.15l0.39,-0.57l0.04,-0.07l0.22,-0.52l0.02,-0.08l0.15,-0.75l0.25,-0.92l0.0,-0.02l0.17,-0.72l0.38,-0.52l0.1,-0.14l-0.1,-0.57l-0.36,-0.24l-0.08,-0.57l-0.02,-0.07l-0.28,-0.82l-0.02,-0.05l-0.38,-0.74l-0.12,-0.56l0.03,-0.84l0.25,-0.69l0.27,-0.24l0.1,-0.14l0.31,-0.71l0.03,-0.12l0.06,-0.69l-0.12,-0.33l-0.36,-0.34l-0.21,-0.1l-0.45,-0.08l-0.06,-0.01l-0.31,-0.01l-0.35,-0.04l-0.12,-0.03l-0.3,-0.32l-0.21,-0.12l-0.1,-0.02l-0.03,-0.06l-0.3,-0.68l0.04,-0.82l0.14,-0.62l0.29,-0.42l0.48,-0.49l0.0,-0.0l0.4,-0.41l0.09,-0.13l0.15,-0.36l0.17,0.09l0.2,0.05l0.53,-0.02l0.52,0.03l0.03,0.0l0.36,-0.01l0.28,-0.12l0.18,-0.18l0.27,-0.08l0.1,-0.05l0.23,-0.15l0.03,-0.02l0.25,-0.2l0.07,-0.08l0.09,-0.14l0.15,-0.22l0.03,-0.05l0.1,-0.21l0.27,-0.32l0.03,-0.04l0.32,-0.5l0.04,-0.08l0.22,-0.62l0.36,-0.3l0.43,-0.34l0.09,-0.1l0.37,-0.57l0.01,-0.02l0.19,-0.32l0.61,0.46l0.3,0.08l0.75,-0.11l0.04,-0.01l0.31,-0.08l0.01,-0.0l0.54,-0.16l0.35,-0.07l0.62,0.32l0.21,0.32l0.01,0.13l-0.39,0.91l-0.04,0.09l0.04,0.39l0.56,0.79l0.29,0.17l1.21,0.11l0.12,-0.01l0.78,-0.16l0.07,-0.02l0.32,-0.13l0.1,0.17l-0.0,0.15l-0.1,0.11l-0.07,0.11l-0.12,0.3l-0.2,0.47l-0.19,0.23l-0.06,0.1l-0.4,0.93l-0.02,0.05l-0.28,1.04l-0.01,0.11l0.01,0.48l-0.01,0.81l0.02,0.14l0.22,0.62l0.11,0.59l0.18,0.27l0.81,0.5l0.03,0.01l0.05,0.03l0.35,0.35l0.14,0.09l0.58,0.22l0.19,0.02l0.62,-0.08l0.56,0.2l0.6,0.28l0.52,-0.17l0.16,-0.29l0.98,-0.38l0.03,-0.01l0.63,-0.31l0.63,-0.24l1.4,-0.44l0.57,-0.18l0.11,-0.06l0.62,-0.44l0.68,-0.25l0.1,-0.05l0.51,-0.38l0.39,-0.24l0.07,0.05l0.11,0.31l0.06,0.12l0.69,0.89l0.3,0.57l0.06,0.09l0.32,0.34l0.33,0.12l0.59,-0.07l0.14,0.13l0.05,0.04l0.45,0.32l0.16,0.17l0.0,0.0l0.41,0.41l0.07,0.31l0.44,0.31l0.47,-0.05l0.48,0.46l0.51,1.01l0.04,0.06l0.49,0.67l0.14,0.12l0.69,0.34l0.17,0.04l0.38,0.01l0.13,-0.02l0.59,-0.19l0.96,-0.11l0.4,0.05l0.25,0.03l0.39,-0.19l0.23,-0.37l0.28,-0.05l0.35,0.15l0.16,0.03l0.93,-0.0l0.48,0.09l0.13,0.0l0.38,-0.06l0.44,-0.02l0.02,0.04l0.17,0.57l0.09,0.15l0.28,0.31l0.14,0.68l0.15,0.24l0.32,0.24l0.07,1.3l0.07,0.21l0.27,0.39l0.06,0.07l0.27,0.25l0.26,0.1l0.0,0.0l0.18,0.05l0.14,0.37l0.01,0.28l0.02,0.1l0.34,1.14l0.13,0.2l0.43,0.34l0.01,0.01l0.3,0.22l-0.13,0.09l-0.14,0.46l0.41,1.17l0.02,0.04l0.39,0.81l0.3,0.22l0.55,0.08l0.14,-0.01l0.64,-0.14l0.81,-0.18l0.01,-0.0l0.57,-0.15l0.03,-0.01l0.97,-0.33l0.76,-0.23l0.36,0.32l0.54,-0.01l0.57,-0.55l0.55,-0.12l0.19,-0.1l0.36,-0.34l0.62,-0.08l0.01,-0.0l0.99,-0.16l0.11,-0.03l0.29,-0.14l0.76,0.62l0.45,0.45l0.06,0.05l0.56,0.38l0.15,0.63l0.04,0.88l0.05,0.17l0.44,0.82l0.11,0.13l0.6,0.46l0.58,0.44l0.01,0.01l0.44,0.31l0.08,0.58l0.01,0.05l0.26,0.91l0.08,0.15l0.39,0.46l0.08,0.16l-0.06,0.85l-0.04,0.55l-0.0,0.04l0.01,0.54l0.0,0.05l0.14,0.96l0.14,1.05l-0.33,1.22l-0.01,0.09l-0.0,0.14l-0.0,0.0l-0.03,0.83l-0.34,0.83l-0.48,0.93l-0.04,0.1l-0.21,1.04l-0.3,0.61l-0.0,0.01l-0.27,0.58l-0.28,0.6l-0.03,0.22l0.14,1.03l0.0,0.0l0.08,0.54l0.05,0.8l-0.05,0.86l-0.09,1.08l-0.05,0.56l-0.0,0.04l-0.31,0.79l-0.0,0.01l-0.53,1.5l-0.01,0.03l-0.17,0.66l-0.34,0.29l-0.13,0.21l-0.29,1.21l-0.49,1.05l-0.91,1.24l-0.05,0.1l-0.45,1.26l-1.17,1.69l-0.04,0.38l0.57,1.42l0.16,0.19l0.51,0.31l0.27,0.59l-0.12,0.65l-0.12,0.65l-0.01,0.07l-0.01,0.74l-0.35,0.88l-0.02,0.07l-0.28,1.44l-0.01,0.04l-0.19,2.08l0.01,0.14l0.39,1.43l0.05,0.11l0.51,0.81l0.11,0.77l0.05,0.15l0.69,1.14l0.03,0.04l0.51,0.63l0.46,0.6l0.18,0.67l0.01,0.03l0.3,0.84l0.08,1.37l0.01,0.06l0.27,1.31l0.0,0.0l0.34,1.59l-0.08,0.77l0.01,0.13l0.11,0.47l0.04,0.17l-0.17,0.22l-0.0,0.01l-0.65,0.89l-0.47,0.61l-0.71,0.47l-0.82,0.2l-1.26,-0.33l-1.15,-0.33l-0.1,-0.02l-1.29,-0.02l-0.17,-0.0l-0.06,0.0l-1.23,0.15l-0.98,0.1l-0.04,0.01l-0.95,0.21l-0.08,0.03l-0.97,0.43l-0.28,0.06l-0.13,0.05l-0.84,0.49l-0.0,0.0l-1.12,0.66l-0.06,0.04l-0.54,0.48l-0.87,0.76l-1.21,0.79l-0.99,0.42l-1.16,0.46l-0.09,0.05l-1.3,0.94l-1.72,1.11l-1.26,0.58l-0.3,0.14l-0.59,0.1l-0.1,0.03l-2.36,1.12l-1.21,0.51l-2.03,0.8l-0.03,0.01l-0.15,0.07l-0.85,0.4l-0.07,0.04l-0.62,0.46l-0.5,0.37l-0.05,0.04l-0.55,0.56l-0.05,0.06l-0.28,0.45l-0.01,0.01l-0.1,0.16l-0.45,0.76l-1.0,1.01l-0.04,0.04l-0.66,0.9l-0.53,0.62l-0.4,0.03l-0.43,-0.57l-0.75,-1.21l-0.01,-0.01l-0.86,-1.31l-0.93,-1.49l-0.19,-0.16l-1.22,-0.51l-0.02,-0.01l-1.34,-0.49l-0.2,-0.02l-0.68,0.11l-0.15,0.06l-1.07,0.68l-0.09,0.07l-1.09,1.25l-0.04,0.05l-0.37,0.6l-0.03,0.06l-0.41,0.98l-0.01,0.03l-0.29,0.88l-0.02,0.08l-0.2,1.73l-0.0,0.05l0.02,1.15l0.05,0.18l0.49,0.91l0.15,0.15l0.93,0.55l0.02,0.01l0.68,0.35l0.37,1.35l0.11,1.33l-0.07,1.22l0.0,0.07l0.18,1.67l0.04,0.14l0.99,1.87l0.01,0.02l0.77,1.28l0.69,1.2l0.03,0.05l0.9,1.14l0.02,0.02l0.77,0.85l0.68,0.92l0.2,0.14l0.81,0.25l0.56,0.5l0.71,0.89l0.16,0.12l0.79,0.33l0.15,0.03l0.66,0.01l0.91,0.51l0.14,0.57l0.06,0.23l0.09,1.04l-0.23,1.0l-0.17,0.63l-0.17,0.62l-0.38,1.26l-0.16,0.4l0.09,0.1l-1.44,1.57l-0.09,0.15l-0.11,0.34l-1.26,1.01l-0.08,0.09l-0.56,0.84l-0.67,0.34l-0.02,0.01l-1.4,0.81l-0.05,0.03l-0.65,0.51l-0.01,0.01l-0.91,0.76l-0.06,0.06l-0.29,0.39l-0.18,0.24l-0.75,0.73l-0.06,0.07l-0.8,1.23l-0.67,1.04l-0.71,0.56l-0.91,0.62l-0.01,0.01l-1.5,1.07l-0.12,0.08l-2.12,0.7l-0.98,0.23l-1.52,0.35l-2.29,0.31l-0.04,0.01l-1.42,0.36l-1.69,-0.2l-0.41,-0.26l0.21,-0.76l0.21,-0.41l0.33,-0.65l-0.08,-0.47l-0.88,-0.83l-0.12,-0.11l-0.75,-0.81l0.27,-0.69l0.52,-0.54l0.07,-0.09l0.96,-1.8l0.02,-0.06l0.53,-1.5l-0.03,-0.33l-0.57,-1.02l-0.17,-0.16l-1.84,-0.9l-1.65,-1.14l-0.03,-0.02l-0.17,-0.1l-0.89,-0.61l-0.42,-0.84l-0.03,-0.05l-0.86,-1.23l-0.02,-0.03l-1.09,-1.28l-0.1,-0.09l-1.68,-1.0l-0.02,-0.01l-1.43,-0.75l-1.57,-0.92l-0.02,-0.01l-0.96,-0.5l-0.02,-0.01l-0.03,-0.01l-1.81,-0.82l-0.04,-0.01l-1.35,-0.45l-0.52,-0.19l-0.59,-0.78l-0.08,-0.08l-0.72,-0.53l-0.1,-0.05l-0.6,-0.22l-0.27,-0.0l-0.52,0.18l-0.71,0.23l-0.06,0.03l-0.91,0.47l-1.39,0.4l-0.07,0.03l-0.84,0.43l-1.68,0.48l-0.17,0.1l-0.45,0.44l-0.83,0.81l-0.1,0.17l-0.16,0.51l-0.59,0.81l-1.79,-0.41l-1.47,-1.22l-1.18,-1.11l-0.19,-0.1l-1.67,-0.36l-0.15,-0.0l-2.93,0.51l-0.06,0.02l-0.31,0.11l-0.51,0.18l-2.01,-0.23l-1.39,-0.61l-0.28,-0.02l-1.2,0.38l-0.05,0.02l-0.77,0.37l-0.23,0.34l-0.07,1.25l0.05,0.23l0.6,1.03l0.37,0.69l-0.49,1.02l-1.6,1.16l-0.04,0.03l-0.99,0.91l-1.53,1.23l-0.63,0.47l-1.48,0.06l-0.02,-1.08l-0.03,-1.51l-0.02,-0.1l-0.55,-1.92l-0.22,-1.06l0.34,-1.25l0.2,-0.74l0.01,-0.03l0.28,-1.47l0.01,-0.06l0.02,-0.52l0.02,-0.48l-0.02,-0.13l-0.21,-0.73l-0.13,-0.2l-1.07,-0.86l-0.87,-1.11l-0.13,-0.11l-6.25,-3.23l0.15,-0.38l0.02,-0.05l0.18,-0.69l-0.08,-0.19l0.05,-0.02l-0.02,-0.05l-0.07,-0.13l-0.58,-0.74l-0.34,-0.52l-0.07,-0.55l-0.05,-0.15l-0.39,-0.7l-0.06,-0.08l-0.68,-0.71l-0.08,-0.06l-0.34,-0.21l-0.01,-0.01l-0.58,-0.34l-0.1,-0.04l-0.48,-0.13l-0.11,-0.01l-1.18,0.01l-0.17,-0.28l-0.0,-0.61l-0.09,-0.25l-0.52,-0.66l-0.3,-0.53l-0.06,-0.08l-0.44,-0.44l-0.27,-0.51l-0.16,-0.16l-0.67,-0.38l-0.05,-0.02l-0.2,-0.08l-0.45,-0.26l-0.28,-0.31l-0.08,-0.07l-0.23,-0.15l-0.29,-0.32l-0.26,-0.13l-0.65,-0.05l-0.22,-0.33l-0.12,-0.38l0.09,-0.27l0.14,-0.26l-0.0,-0.01Z", "name": "Edo"}, "2020": {"path": "M455.52,254.46l0.05,-0.02l0.87,-0.59l0.13,-0.14l0.89,-1.66l0.81,-1.05l0.02,-0.03l1.4,-2.18l0.03,-0.05l1.02,-2.23l0.02,-0.07l0.59,-2.43l0.01,-0.11l-0.09,-2.42l-0.04,-0.15l-0.93,-2.01l-0.07,-0.11l-1.31,-1.36l-0.38,-0.39l-0.02,-0.02l-1.61,-1.5l-1.28,-1.87l-0.52,-2.3l-0.29,-3.55l-0.18,-4.71l0.07,-0.59l0.46,-3.59l0.88,-3.45l0.95,-1.84l0.44,-0.19l0.57,-0.24l3.18,0.18l0.12,-0.01l2.46,-0.61l0.19,-0.11l1.25,-1.29l0.02,-0.03l2.07,-2.6l0.04,-0.06l1.56,-2.86l1.58,-2.02l1.22,-0.89l0.11,-0.22l0.03,0.01l0.16,-0.44l0.5,-0.34l0.69,-0.46l0.06,-0.05l1.34,-1.31l1.6,-1.32l0.09,-0.1l0.76,-1.25l2.86,-1.81l0.56,-0.1l1.21,-0.21l1.24,1.15l0.24,0.11l1.38,0.12l0.17,-0.02l2.55,-0.91l0.06,-0.03l1.26,-0.71l0.03,-0.01l0.06,-0.02l2.51,-0.92l0.14,-0.03l1.14,-0.21l2.62,0.53l0.01,0.0l4.52,0.78l3.75,1.5l0.03,0.01l3.97,1.19l0.05,0.01l1.23,0.21l0.23,-0.03l3.92,-1.71l2.49,0.8l1.37,2.34l0.69,1.89l0.35,0.26l3.78,0.25l0.05,-0.0l0.42,-0.03l0.0,-0.0l1.32,-0.09l2.88,-0.2l4.71,-0.27l0.06,-0.01l1.74,-0.35l0.03,-0.01l2.48,-0.71l1.13,0.3l1.4,2.06l1.7,3.65l0.63,2.51l-0.14,3.48l-0.79,3.37l-0.01,0.08l-0.05,2.34l-0.0,0.19l0.03,0.15l0.97,2.48l0.09,0.14l1.63,1.65l0.19,0.11l4.1,0.97l0.03,0.01l2.81,0.47l0.15,-0.0l4.81,-1.1l0.03,-0.01l1.88,-0.57l1.71,0.19l2.16,1.57l0.14,0.06l2.98,0.75l0.22,-0.01l2.25,-0.69l0.27,-0.49l-0.53,-1.86l-0.01,-0.02l-0.79,-2.22l0.05,-1.98l1.72,-2.14l2.94,-1.58l1.26,-0.25l1.3,-0.26l0.04,-0.01l2.27,-0.68l0.07,-0.03l1.75,-0.94l0.05,-0.03l2.23,-1.68l0.13,-0.17l1.34,-3.3l-0.04,-0.38l-0.12,-0.18l-1.13,-1.59l-0.31,-0.17l-5.01,-0.14l-1.56,-0.15l-4.13,-0.39l-6.9,-1.53l-0.02,-0.0l-2.15,-0.33l-1.77,-0.27l-0.03,-0.0l-3.71,-0.32l-3.48,-2.14l-2.46,-3.25l-0.39,-0.6l-1.49,-2.27l-0.01,-0.02l-1.98,-2.74l-1.24,-2.94l-0.56,-3.06l-0.5,-0.31l-3.2,0.9l-1.21,0.19l-0.24,-0.22l-0.98,-0.92l-0.44,-1.22l-0.14,-0.62l0.61,-1.56l1.28,-2.29l0.0,-0.01l0.12,-0.22l0.97,-1.82l0.05,-0.22l-0.21,-2.91l-0.01,-0.04l-0.42,-2.31l-0.01,-0.03l-0.67,-2.65l-0.01,-0.03l-0.62,-1.88l-0.03,-0.08l-0.48,-0.82l-0.24,-0.18l-2.2,-0.61l-0.15,-0.01l-0.77,0.08l-2.55,0.25l-0.14,0.04l-2.49,1.21l-0.05,0.0l-2.93,0.05l-0.25,-0.12l-1.09,-0.51l-0.13,-1.35l0.71,-3.39l1.63,-2.71l1.29,-1.73l0.78,-0.79l1.14,-0.0l2.16,0.04l0.07,-0.0l3.98,-0.59l0.14,-0.05l2.98,-1.75l3.61,-1.91l4.0,-1.6l0.0,-0.0l0.99,-0.4l4.77,-1.36l0.02,-0.0l3.42,-1.12l0.03,-0.01l2.71,-1.14l0.01,-0.0l3.31,-1.47l1.47,-0.41l0.14,-0.07l1.44,-1.13l0.15,-0.32l-0.01,-1.21l-0.02,-1.51l-0.02,-0.11l-0.65,-2.15l1.09,-3.13l0.01,-0.02l1.76,-6.12l1.21,-2.83l0.63,-1.47l0.01,-0.03l1.18,-3.46l0.01,-0.05l0.72,-3.45l0.41,-1.51l0.26,-0.97l0.72,-1.58l1.25,-0.7l2.0,-0.82l2.05,-0.72l2.21,-0.61l1.75,-0.04l1.02,0.84l0.94,1.84l0.14,1.6l0.58,0.32l1.38,-0.71l0.05,-0.03l1.21,-0.85l1.27,-0.71l1.91,-1.07l0.01,-0.01l2.41,-1.43l0.05,-0.04l1.75,-1.44l1.78,-1.03l0.02,-0.01l1.33,-0.89l1.21,1.21l0.08,0.06l2.72,1.64l2.84,2.21l2.22,2.08l1.34,3.41l0.25,1.59l0.35,2.23l0.31,4.62l-0.22,2.16l0.08,0.28l2.13,2.87l1.61,2.64l0.29,4.02l-0.04,3.99l0.0,0.05l0.4,3.26l0.02,0.08l1.12,3.2l-0.12,2.26l0.0,0.08l0.37,2.33l0.02,0.07l0.6,1.74l0.89,2.59l0.01,0.01l1.24,3.17l0.03,0.07l0.76,1.2l0.62,0.98l0.98,2.22l1.72,4.65l0.01,0.02l2.01,4.75l1.22,3.83l0.09,3.48l-0.14,0.89l-0.21,1.4l-1.27,3.25l-0.03,0.12l-0.14,2.28l-0.5,1.89l-0.42,1.58l-0.01,0.08l-0.11,2.37l0.07,0.25l0.75,1.05l0.11,0.1l1.23,0.8l0.17,0.06l1.9,0.22l0.43,0.06l-0.42,0.78l-1.4,1.74l-0.09,0.11l-0.01,0.01l-1.21,1.65l-2.4,1.35l-2.47,1.35l-2.35,1.22l-0.13,0.11l-1.81,2.28l-0.03,0.04l-1.27,2.14l-2.34,2.04l-1.69,0.87l-2.38,0.28l-0.08,0.02l-2.28,0.78l-0.15,0.09l-1.74,1.65l-0.06,0.07l-1.66,2.45l-0.06,0.13l-0.86,3.39l-0.01,0.05l-0.32,2.55l-0.96,2.57l-1.37,3.43l-0.01,0.04l-0.79,2.86l-2.12,2.86l-0.01,0.01l-0.09,0.13l-2.11,3.09l-0.07,0.17l-0.25,1.67l0.26,0.43l2.45,0.89l0.28,0.1l2.7,1.04l3.37,1.53l1.27,1.9l0.53,2.79l0.0,3.1l0.01,0.07l0.49,2.62l0.08,0.17l1.07,1.39l0.18,0.13l2.16,0.8l0.03,0.01l3.78,1.05l2.58,1.23l1.34,2.89l0.12,0.26l0.96,2.59l-0.15,3.26l-0.33,3.86l-0.0,0.02l-0.1,3.24l0.0,0.07l0.47,3.34l-0.86,1.82l-0.96,0.1l-0.03,0.0l-3.53,0.64l-0.1,0.03l-2.41,1.11l-0.16,0.14l-1.58,2.32l-0.06,0.3l0.39,1.96l0.09,0.18l2.72,3.21l0.05,0.05l2.48,2.11l0.06,0.04l2.99,1.69l3.01,2.46l0.02,0.01l2.51,1.84l0.0,0.0l3.11,2.24l2.32,1.94l0.95,2.12l0.22,1.13l0.0,0.01l0.25,1.14l0.24,3.08l0.0,0.01l0.5,4.39l0.05,0.16l0.17,0.28l0.46,1.02l0.45,0.98l0.01,0.02l1.07,2.05l0.95,2.01l0.05,0.08l1.94,2.44l-0.1,0.72l-0.45,0.12l-0.58,0.16l-1.28,0.02l-2.81,-0.23l-3.01,-0.59l-2.69,-0.63l-0.08,-0.01l-2.06,-0.08l-0.19,0.04l-2.14,1.02l-2.79,1.07l-0.03,0.01l-3.02,1.48l-2.08,0.92l-0.02,0.01l-2.66,1.31l-2.42,-0.18l-2.81,-0.74l-0.1,-0.01l-1.67,-0.01l-0.18,0.04l-2.08,1.03l-0.02,0.01l-2.79,1.54l-0.08,0.06l-0.65,0.61l-1.99,-1.18l-2.1,-1.25l-0.01,-0.01l-3.15,-1.73l-2.43,-1.58l-2.39,-1.6l-0.01,-0.0l-2.64,-1.71l-0.04,-0.02l-3.4,-1.63l-0.03,-0.01l-2.49,-0.99l-0.02,-0.01l-2.53,-0.87l-2.79,-1.27l-0.0,-0.0l-2.13,-0.96l-2.48,-1.52l-0.01,-0.01l-2.64,-1.5l-0.04,-0.02l-2.96,-1.29l-3.08,-1.64l-0.11,-0.04l-3.06,-0.61l-3.49,-1.73l-0.39,-0.2l-3.26,-1.69l-0.73,-0.41l-0.52,-0.29l-0.75,-0.42l-0.37,-0.01l-1.51,0.75l-0.04,0.02l-2.17,1.42l-0.17,0.25l-0.36,1.74l0.12,0.37l1.16,1.08l1.37,1.7l1.2,1.99l0.31,1.95l-0.52,1.69l-1.65,0.28l-0.08,0.02l-1.67,0.67l-0.54,0.22l-1.59,0.35l-0.23,0.15l-1.4,1.86l-0.05,0.09l-0.79,1.9l-1.21,2.37l-0.42,0.12l-0.0,0.0l-2.86,0.85l-0.03,0.01l-1.79,0.67l-1.65,-0.01l-0.02,0.0l-1.31,0.07l-0.02,0.0l-3.46,0.37l-3.56,0.11l-0.02,0.0l-2.0,0.16l-3.67,-0.89l-0.06,-0.01l-1.09,-0.1l-1.44,-0.64l-0.24,-0.11l-0.14,-0.03l-2.23,-0.11l-0.09,-0.0l-2.26,-0.15l-0.01,-0.0l-1.16,-0.06l-1.71,-0.6l-0.9,-0.74l-0.39,-0.35l-0.47,-0.42l-0.38,-0.83l-0.56,-1.34l-0.63,-1.62l-0.38,-1.05l-0.03,-0.07l-0.42,-0.7l-0.05,-0.07l-0.67,-0.7l-0.02,-0.02l-0.95,-0.86l-0.11,-0.07l-1.3,-0.55l-0.03,-0.01l-1.85,-0.64l-0.01,-0.0l-1.47,-0.48l-0.58,-0.83l-0.01,-1.03l0.11,-0.78l0.18,-0.46l0.16,-0.42l0.86,-1.81l0.94,-1.39l0.02,-0.03l0.33,-0.58l0.36,-0.63l0.04,-0.12l0.13,-0.67l0.15,-0.75l0.0,-0.13l-0.33,-2.49l-0.07,-1.77l0.09,-2.87l-0.01,-0.08l-0.32,-1.8l-0.03,-0.09l-0.86,-1.99l-0.05,-0.08l-1.04,-1.42l-0.07,-0.08l-1.13,-0.91l-0.17,-0.08l-1.28,-0.25l-0.12,-0.0l-1.81,0.21l-0.04,0.01l-2.55,0.54l-0.0,0.0l-2.84,0.64l-3.45,0.45l-0.06,0.01l-1.48,0.41l-0.44,0.12l-0.04,0.01l-0.11,0.05l0.02,-2.21l0.08,-9.02l-0.01,-0.1l-0.05,-0.2l-0.15,-1.61l0.15,-1.21l0.0,-0.09l-0.19,-1.9l-0.02,-1.24l-0.01,-0.08l-0.35,-1.53l-0.01,-0.04l-0.38,-1.13l-0.03,-0.07l-0.83,-1.45l-0.0,-0.01l-1.01,-1.67l-0.0,-0.01l-0.9,-1.44l-0.04,-0.06l-0.42,-0.47l-0.14,-0.1l-1.44,-0.63l-0.07,-0.02l-1.92,-0.45l-0.07,-0.01l-1.85,-0.12l-0.03,-0.0l-2.0,0.03l-0.06,0.0l-1.38,0.21l-0.19,0.08l-0.19,0.15l-0.45,-0.49l-0.02,-0.02l-0.65,-0.63l-0.83,-0.94l-0.01,-0.01l-0.86,-0.93l-0.07,-0.06l-1.12,-0.75l-0.09,-0.04l-0.89,-0.31l-1.16,-0.92l-0.24,-0.64l0.23,-0.58l0.96,-1.33l0.01,-0.02l0.97,-1.5l0.03,-0.07l0.59,-1.44l0.03,-0.1l0.14,-1.18l0.67,-2.46l0.01,-0.15l-0.08,-0.79Z", "name": "Bauchi"}, "2021": {"path": "M203.48,663.74l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.1,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.1,-0.1l0.04,0.0l0.02,-0.02l0.15,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.14,-0.14l0.18,0.18l0.04,0.0l0.02,0.02l0.19,0.0l0.04,0.04l0.06,0.0l0.02,0.02l0.02,0.0l0.1,0.1l0.1,0.0l0.13,-0.13l0.04,0.0l0.02,0.02l0.08,0.0l0.17,-0.17l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.0,0.0l0.08,-0.08l0.15,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.03l-0.02,0.02l0.0,0.02l0.4,0.4l0.08,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.19,0.19l0.02,0.0l0.15,0.15l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.06,0.0l0.26,-0.26l0.01,0.01l0.02,0.0l0.1,-0.1l0.02,0.0l0.02,-0.02l0.0,0.0l0.34,-0.34l0.07,0.06l0.16,0.13l0.5,0.68l0.03,0.04l0.18,0.19l0.24,0.26l0.21,0.22l0.03,0.03l0.79,0.67l0.11,0.07l0.47,0.19l1.26,0.75l0.04,0.02l1.11,0.51l0.52,0.47l0.2,0.1l1.25,0.22l0.78,0.43l0.24,0.05l0.58,-0.07l0.71,0.19l0.63,0.59l0.06,0.05l0.68,0.42l0.83,0.58l0.13,0.06l0.89,0.24l0.37,0.57l0.08,0.09l0.75,0.64l0.23,0.09l0.78,0.07l0.03,0.0l0.71,0.01l0.18,-0.04l0.57,-0.26l0.63,-0.25l0.01,0.0l0.28,0.06l0.62,0.33l0.37,0.01l0.28,-0.14l0.62,-0.31l0.01,-0.0l0.66,-0.35l0.06,-0.04l0.48,-0.38l0.74,-0.52l0.04,-0.01l0.83,-0.15l0.23,-0.13l0.23,-0.26l0.02,-0.02l0.37,-0.46l0.68,-0.46l0.08,-0.04l0.0,-0.0l0.41,-0.22l0.77,-0.08l0.07,-0.01l0.54,-0.15l0.38,-0.11l0.14,-0.07l0.46,-0.36l0.0,-0.0l0.58,-0.46l0.36,-0.24l0.49,-0.11l0.93,0.16l0.23,0.24l0.2,0.11l0.64,0.15l0.12,0.01l0.43,-0.03l0.1,-0.02l0.56,-0.18l0.09,-0.05l0.75,-0.49l0.02,-0.02l0.09,-0.07l0.24,-0.18l0.0,-0.0l0.55,-0.42l0.11,-0.04l0.09,0.02l0.26,-0.03l0.12,-0.03l0.43,-0.19l0.01,-0.01l0.39,-0.15l0.06,-0.03l0.3,-0.17l0.16,-0.17l0.04,-0.07l0.11,-0.21l0.09,-0.11l0.26,-0.32l0.03,-0.04l0.12,-0.21l0.02,-0.03l0.2,-0.41l0.04,-0.12l0.05,-0.37l0.1,-0.17l0.08,-0.1l0.06,-0.07l0.05,-0.08l0.45,-0.93l0.03,-0.08l0.09,-0.4l0.18,-0.23l0.29,-0.1l0.17,0.13l0.02,0.01l0.31,0.21l0.11,0.05l0.38,0.12l0.05,0.02l0.43,0.42l0.38,0.44l0.26,0.03l-0.0,0.06l0.08,0.0l0.14,0.0l0.13,0.48l0.12,0.2l0.41,0.35l0.05,0.04l0.26,0.17l0.14,0.5l0.17,0.23l0.51,0.32l0.15,0.06l0.18,0.03l0.31,0.05l0.05,0.0l0.58,0.02l0.51,0.33l0.23,0.06l0.8,-0.02l0.08,-0.01l0.99,-0.23l0.31,-0.07l0.12,-0.05l0.58,-0.36l0.08,-0.04l0.08,-0.05l0.12,-0.1l0.02,-0.02l0.33,-0.32l0.09,-0.14l0.22,-0.56l0.15,-0.22l0.04,-0.07l0.37,-0.88l0.03,-0.02l0.71,-0.1l0.0,-0.0l0.38,-0.05l0.22,0.03l0.65,0.08l0.61,0.27l0.16,0.07l0.18,0.03l0.15,-0.01l0.0,-0.0l0.45,-0.02l0.15,-0.03l0.53,-0.24l0.42,-0.11l0.03,-0.01l0.64,-0.21l0.14,-0.05l0.17,-0.05l0.09,-0.04l0.47,-0.28l0.17,-0.1l0.06,-0.04l0.12,-0.1l0.04,-0.03l0.28,-0.3l0.13,-0.06l0.08,-0.04l0.28,-0.01l0.09,-0.01l0.43,-0.11l0.09,-0.04l0.33,-0.19l0.03,-0.02l0.73,-0.5l0.11,-0.07l0.17,-0.34l-0.01,-0.31l0.01,-0.13l0.05,-0.71l-0.02,-0.17l-0.23,-0.63l-0.05,-0.07l-0.06,-0.73l0.25,-0.81l0.03,-0.04l0.06,-0.01l0.12,-0.0l0.71,-0.0l0.08,0.02l0.32,0.09l0.12,0.15l0.28,0.37l0.24,0.15l0.48,0.1l0.12,0.01l0.26,-0.03l0.27,-0.03l0.03,-0.01l0.97,-0.19l0.02,-0.0l0.47,-0.11l0.07,-0.03l0.58,-0.27l0.15,-0.12l0.14,-0.19l0.01,-0.02l0.08,-0.13l0.06,-0.02l0.22,-0.19l0.04,-0.07l0.03,-0.07l0.15,-0.48l0.01,-0.02l0.13,-0.53l0.07,-0.12l0.03,-0.06l0.2,-0.49l0.07,-0.15l0.16,-0.37l0.17,-0.22l0.04,-0.07l0.36,-0.76l0.03,-0.07l0.06,-0.23l0.15,-0.24l0.02,-0.03l0.15,-0.32l0.42,-0.05l0.84,0.08l0.21,-0.04l0.54,-0.25l0.54,-0.24l0.47,-0.07l0.24,0.08l0.01,0.0l0.62,0.18l0.01,0.0l0.48,0.13l0.17,0.01l0.29,-0.05l0.26,-0.04l0.83,-0.0l0.48,0.19l0.15,0.03l0.73,-0.0l0.19,-0.05l0.63,-0.33l0.86,-0.25l0.29,-0.07l0.64,-0.15l0.08,-0.03l0.3,-0.15l0.7,-0.3l0.01,-0.0l0.89,-0.4l0.04,-0.02l0.06,-0.04l0.0,-0.0l0.52,-0.31l0.62,-0.31l0.02,-0.01l0.51,-0.3l0.03,-0.02l0.28,-0.2l0.03,-0.02l0.48,-0.42l0.05,-0.03l0.58,-0.34l0.19,-0.42l-0.11,-0.59l-0.04,-0.57l-0.02,-0.1l-0.12,-0.36l-0.12,-0.37l-0.01,-0.03l-0.11,-0.26l0.39,0.08l0.24,-0.02l0.98,-0.42l1.23,-0.08l1.12,-0.06l1.26,0.49l0.91,0.46l0.78,0.6l0.23,1.06l0.07,0.16l0.44,0.58l0.15,1.06l-0.13,1.03l-0.36,0.81l-0.68,0.81l-0.47,0.36l-0.52,0.31l-0.0,0.0l-0.36,0.22l-0.24,0.13l-0.09,0.06l-0.23,0.22l-0.11,0.19l-0.2,0.78l-0.0,0.18l0.11,0.54l0.08,0.17l0.3,0.37l-0.0,0.07l-0.12,0.1l-0.82,0.29l-0.07,0.03l-0.66,0.39l-0.2,0.31l-0.1,1.03l-0.14,0.42l-0.22,0.69l-0.38,0.68l-0.49,0.45l-1.12,-0.08l-1.14,-0.19l-0.1,-0.0l-0.88,0.07l-0.35,0.3l-0.12,0.46l-0.39,0.42l-0.04,0.05l-0.8,1.2l-0.03,0.04l-0.55,1.1l-0.65,1.08l-0.01,0.02l-0.5,0.94l-0.48,0.89l-0.57,1.02l-0.65,1.09l-0.01,0.01l-0.61,1.12l-0.02,0.04l-0.29,0.71l-0.54,1.33l-0.01,0.02l-0.4,1.1l-0.01,0.02l-0.4,1.34l-0.02,0.12l0.02,0.92l0.05,0.18l0.34,0.61l0.17,0.17l0.69,0.34l0.31,0.02l0.82,-0.29l0.2,0.04l-0.03,1.11l-0.68,1.29l-0.01,0.01l-0.04,0.12l-0.18,1.02l-0.53,0.8l-0.73,0.89l-0.71,0.72l-0.09,0.15l-0.24,0.71l-0.02,0.11l-0.06,1.55l-0.07,1.25l-0.13,1.52l0.01,0.11l0.18,0.94l0.05,0.13l0.61,1.02l0.17,0.16l0.65,0.31l0.84,0.54l0.06,0.03l0.84,0.36l0.14,0.03l0.61,0.03l0.07,-0.0l0.35,-0.05l0.18,0.23l-0.45,1.57l0.01,0.24l0.27,0.79l0.14,1.48l0.3,0.35l0.6,0.15l0.66,0.17l0.26,-0.02l0.69,-0.31l7.15,-2.74l1.28,-0.06l0.88,0.07l0.88,0.79l0.45,0.96l0.14,0.29l0.26,0.72l0.15,1.21l0.01,0.05l0.33,1.22l0.01,0.03l0.38,1.09l0.31,0.97l0.08,0.15l0.78,0.86l0.08,0.07l1.04,0.67l1.14,0.81l0.04,0.03l1.11,0.59l0.07,0.03l0.68,0.21l0.35,0.17l0.01,-0.02l0.15,0.15l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.02,0.0l0.04,-0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.19l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.42l-0.02,0.02l0.0,0.19l-0.02,0.02l-0.0,0.1l-0.02,0.02l0.0,0.29l-0.02,0.02l-0.0,0.1l-0.02,0.02l-0.0,0.23l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.13l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.1,0.0l-0.4,0.4l0.0,0.06l0.27,0.27l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.35,0.36l-0.07,0.07l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.06,0.06l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.0l-0.08,0.08l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.1l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.12l-0.02,0.02l-0.0,0.15l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.08l0.01,0.01l-0.01,0.01l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l-0.0,0.1l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.19l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.06l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.27l-0.02,0.02l0.0,0.38l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.02l0.06,0.06l-0.0,0.04l0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.06l0.02,0.02l-0.0,0.1l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.27l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.15l0.02,0.02l-0.0,0.17l0.02,0.02l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.29l0.02,0.02l0.0,0.22l-0.01,-0.01l-0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.1l-0.04,-0.04l-0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.1l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.1l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.06l-0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.1l-0.06,-0.06l-0.0,-0.08l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.0,0.0l-0.06,-0.06l-0.06,0.0l-0.06,-0.06l0.0,-0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l0.0,-0.06l0.02,0.0l0.04,-0.04l0.0,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.08,-0.08l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.15l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l0.15,-0.15l0.0,-0.04l-0.4,-0.4l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.03,0.03l-0.01,-0.01l-0.02,0.0l-0.06,-0.06l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.13,-0.13l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.21,-0.21l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.19l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.25l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.06,-0.06l-0.0,-0.04l-0.17,-0.17l0.0,-0.0l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.01,-0.01l0.01,-0.01l-0.0,-0.1l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.23l0.16,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.29l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.19l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.0,-0.0l0.04,-0.04l0.0,-0.06l-0.4,-0.4l-0.12,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.4,0.4l0.0,0.06l0.16,0.16l-0.01,0.01l0.0,0.08l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.01l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.1l0.02,0.02l0.0,0.02l-0.2,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.04,-0.04l-0.0,0.0l-0.06,-0.06l-0.02,0.0l-0.0,-0.08l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.1l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l-0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.12,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l-0.0,-0.02l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.4,0.4l0.0,0.04l0.4,0.4l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.04,0.04l0.0,0.04l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.17,-0.17l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.06,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.35,-0.35l0.0,-0.02l-0.4,-0.4l-0.0,0.0l-0.06,-0.06l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.02l0.4,0.4l0.12,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.06l0.4,0.4l0.0,0.0l0.02,0.02l0.02,0.0l0.33,0.33l0.0,0.0l0.04,0.04l0.02,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.06,0.06l-0.12,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.17,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.4,0.4l0.0,0.21l0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.19l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.03,0.0l-0.25,0.25l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.06,0.06l0.0,0.06l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.23l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.1l0.02,0.02l-0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.23l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.27l0.02,0.02l-0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.31,0.31l-0.1,0.1l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.06,0.06l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.0l0.04,0.04l-0.0,0.02l0.02,0.02l0.0,0.02l0.17,0.17l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.23,0.23l-0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.16,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.04,-0.04l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.15l-0.4,-0.4l-0.04,0.0l-0.4,0.4l-0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.06l0.06,0.06l-0.0,0.0l0.02,0.02l0.0,0.04l0.4,0.4l0.04,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.03,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.06,0.06l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.21l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.18,0.0l0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.1l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.29,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.21,0.0l0.02,0.02l0.04,0.0l0.0,0.02l0.02,0.02l-0.0,0.0l0.01,0.01l-0.01,0.01l0.0,0.04l0.37,0.37l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.06l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.08,0.08l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.06l0.04,0.04l0.0,0.02l0.02,0.02l-0.0,0.02l0.23,0.23l0.0,0.0l0.04,0.04l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.06l0.04,0.04l0.0,0.04l0.02,0.02l-0.0,0.0l0.06,0.06l-0.0,0.04l0.02,0.02l0.0,0.04l0.1,0.1l-0.0,0.04l0.4,0.4l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.1,0.1l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.06,0.0l0.13,0.13l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.29,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.08,0.08l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.02l0.06,0.06l0.0,0.02l0.06,0.06l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.08l0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.21l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.1l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.17l0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.08l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.12,0.0l-0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.06,-0.06l0.0,0.0l0.02,-0.02l0.02,0.0l0.05,-0.05l0.01,0.01l0.0,0.0l0.02,0.02l0.0,0.02l0.4,0.4l0.0,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.02l0.01,0.0l-0.04,0.04l0.0,0.02l0.02,0.02l-0.0,0.0l0.4,0.4l0.1,0.0l0.04,-0.04l0.0,0.0l0.39,-0.39l0.0,0.12l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.1,0.1l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.4,0.4l0.0,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.04,0.04l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.15,0.15l0.0,0.04l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.14l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.06l0.02,0.02l-0.0,0.02l0.4,0.4l0.42,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.0,0.12l0.02,0.02l0.0,0.23l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.35l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.08,0.08l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.17l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l0.02,0.02l-0.03,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.19,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.65,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.19,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.01,0.01l-0.01,-0.01l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.19,0.0l-0.02,0.02l-0.17,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.04,0.04l-0.0,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.08,0.08l-0.0,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.08l-0.06,0.06l-0.04,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.03,-0.04l0.01,-0.0l-0.0,-0.02l-0.07,-0.06l-0.21,-0.27l-0.02,-0.01l-0.01,0.05l-0.09,-0.08l-0.09,-0.09l-0.02,0.0l-0.21,-0.21l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.16,-0.16l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.35,-0.35l0.01,0.0l0.02,0.02l0.23,0.0l0.02,-0.02l0.17,0.0l0.1,0.1l0.02,0.0l0.02,0.02l0.15,0.0l0.06,-0.06l0.33,0.33l0.1,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.17,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.08,0.0l0.04,0.04l0.15,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.19,-0.19l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.04,0.0l0.09,-0.09l0.01,0.01l0.02,0.0l0.02,0.02l0.04,0.0l0.4,-0.4l0.04,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.04,-0.0l0.04,-0.04l0.02,0.0l0.27,-0.27l0.04,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.1,-0.1l0.02,0.0l0.4,-0.4l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.1,-0.1l0.0,-0.0l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.15l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.14l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.27,0.27l-0.02,-0.02l-0.12,0.0l-0.4,0.4l0.0,0.06l-0.02,0.02l-0.0,0.08l-0.04,0.0l-0.06,-0.06l-0.23,0.0l-0.2,0.2l-0.24,-0.24l-0.04,0.0l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.33,0.0l-0.02,0.02l-0.17,0.0l-0.18,0.18l-0.05,-0.05l-0.02,0.0l-0.06,-0.06l-0.1,0.0l-0.0,-0.04l-0.02,-0.02l0.0,-0.0l0.15,-0.15l0.0,-0.04l-0.4,-0.4l-0.06,0.0l-0.04,0.04l-0.04,0.0l-0.03,0.03l-0.01,-0.01l-0.15,0.0l-0.14,0.14l-0.2,-0.2l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.04,0.0l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.17l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l-0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.06l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.21l-0.02,-0.02l0.0,-0.23l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.04,-0.04l0.0,-0.04l-0.01,-0.01l0.01,-0.01l-0.0,-0.27l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.06l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.15l-0.01,-0.01l0.01,-0.01l0.0,-0.23l0.02,-0.02l-0.0,-0.1l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.35l0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.46l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.5l-0.02,-0.02l0.0,-0.25l0.02,-0.02l0.0,-0.15l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.06,-0.06l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.29,-0.29l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.08,-0.08l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.23,-0.23l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.13,-0.13l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.04,0.0l-0.12,-0.12l-0.05,-0.05l-0.02,0.0l-0.04,-0.04l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.06,-0.06l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.02,0.0l0.0,-0.25l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.1l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.06,-0.06l0.02,0.0l0.04,-0.04l0.0,0.0l0.06,-0.06l0.02,0.0l0.13,-0.13l0.04,0.0l0.4,-0.4l0.0,-0.1l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.02,-0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.0l-0.06,-0.06l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.17,-0.17l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.13,-0.13l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.05l0.02,0.02l0.21,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.4,-0.4l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.06,-0.06l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.1,-0.1l0.0,-0.0l-0.01,-0.01l0.01,-0.01l0.0,0.0l0.4,-0.4l-0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.0l-0.17,-0.17l0.25,-0.25l0.0,-0.17l0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.04,-0.04l0.0,-0.1l-0.4,-0.4l-0.04,0.0l-0.4,0.4l0.0,0.29l0.02,0.02l0.0,0.04l0.06,0.06l0.0,0.02l0.01,0.01l-0.01,0.01l-0.0,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.16,0.16l-0.3,0.3l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.08l0.04,0.04l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.08,0.08l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.23,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.1l-0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l-0.37,0.37l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.17,0.17l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.06l0.06,0.06l-0.0,0.04l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.32,0.32l-0.01,0.01l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.4,0.4l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.01l-0.12,-0.12l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.33,-0.33l-0.04,0.0l-0.08,0.08l-0.02,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.15l0.04,0.04l0.0,0.02l0.4,0.4l0.02,0.0l0.02,0.02l0.44,0.0l0.01,0.01l-0.01,0.01l0.0,0.04l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.19,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.13l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.17,0.17l-0.25,0.25l0.0,0.0l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.0,0.0l-0.25,0.25l0.0,0.12l-0.02,-0.02l-0.02,0.0l-0.17,-0.17l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.4,0.4l0.0,0.04l0.02,0.02l0.0,0.0l0.08,0.08l0.0,0.04l0.29,0.29l0.13,0.13l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.29,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.02,0.0l0.02,0.02l0.23,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.27l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.04l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.1,0.1l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.04,0.04l0.04,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.04,0.0l0.06,0.06l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,0.02l0.02,0.0l0.08,0.08l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.15,0.15l0.02,0.0l0.02,0.02l0.02,0.0l0.08,0.08l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.01,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.29l0.01,0.01l-0.01,0.01l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l-0.04,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.39,0.39l-0.03,-0.03l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.03,-0.03l-0.18,-0.18l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.06,0.06l-0.04,-0.04l-0.04,0.0l-0.15,0.15l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.1,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.21,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.15l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l-0.0,-0.04l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.23l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.19l-0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.13l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.02,-0.02l0.0,-0.17l0.02,-0.02l0.0,-0.21l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.14,0.0l-0.1,-0.1l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.09,-0.09l0.11,-0.11l0.0,-0.04l-0.4,-0.4l-0.19,0.0l-0.4,0.4l0.0,0.04l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.23,0.23l0.0,0.04l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.08l-0.06,0.06l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.04l0.27,0.27l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.04,0.04l0.0,0.06l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.1l-0.04,-0.04l-0.04,0.0l-0.4,0.4l0.0,0.23l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.1l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.0l0.4,0.4l0.02,0.0l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.4l0.02,0.02l0.0,0.21l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.1l0.02,0.02l-0.0,0.1l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l-0.0,0.0l0.0,0.0l0.35,0.36l0.0,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.23,0.0l0.02,0.02l0.23,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.25l-0.02,0.02l-0.0,0.23l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.01,0.01l-0.01,0.01l-0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.1,0.1l0.0,0.02l-0.06,0.06l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.25l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.06,0.06l0.04,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.4,0.4l0.02,0.0l0.09,0.09l0.24,0.24l0.0,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l-0.0,1.0l0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.04l-0.21,0.21l0.0,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.19l0.02,0.02l0.0,0.04l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.23,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.1l-0.02,0.02l-0.0,0.0l-0.04,0.04l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.21l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.15l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.4,0.4l0.0,0.0l0.04,0.04l0.02,0.0l0.08,0.08l0.04,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.37,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.0,0.12l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.1l-0.02,0.02l0.0,0.1l0.01,0.01l-0.01,0.01l0.0,0.06l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.17,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,0.02l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.21,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.33,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,0.02l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.33,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.33,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.06,0.06l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.19,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,-0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.12,0.0l-0.4,0.4l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.1,0.1l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.01,0.01l-0.03,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.21,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.19,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.13,0.0l-0.04,0.04l-0.01,-0.0l-0.0,-0.02l-0.04,0.0l-0.07,0.08l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.09,-0.0l-0.02,0.03l-0.07,0.0l-0.02,0.02l-0.08,0.0l-0.04,0.04l-0.03,-0.0l-0.02,0.02l-0.11,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.12,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.04,-0.04l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.0,0.0l-0.06,-0.06l-0.02,0.0l-0.1,-0.1l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.07,-0.07l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.12,-0.12l0.23,0.0l0.4,-0.4l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.08l0.04,-0.04l0.0,-0.44l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.08,-0.08l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.35l-0.01,-0.01l0.01,-0.01l0.0,-0.06l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.02l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.0,0.0l0.02,-0.02l0.02,0.0l0.1,-0.1l0.04,0.0l0.04,-0.04l0.0,0.0l0.02,-0.02l0.02,0.0l0.17,-0.17l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.06,-0.06l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.03l0.08,0.08l0.06,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.12,-0.13l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.04,-0.04l-0.0,-0.04l0.04,-0.04l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.06l0.04,-0.04l-0.0,-0.08l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.1l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.1l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.17l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.5l-0.02,-0.02l0.0,-0.04l0.06,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.08l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.16l-0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.15,0.0l-0.02,0.02l-0.08,0.0l-0.08,0.08l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l0.0,0.04l0.35,0.35l0.0,0.0l0.02,0.02l-0.0,0.21l0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.1,0.0l0.02,-0.02l0.02,-0.0l0.0,0.1l0.02,0.02l0.0,0.04l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.23,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.23l-0.02,0.02l0.0,0.31l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.31l0.02,0.02l0.0,0.13l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.08l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.04,0.04l0.0,0.03l-0.07,-0.07l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.15l-0.02,-0.02l0.0,-0.25l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.06l-0.04,-0.04l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.1,-0.1l0.07,-0.07l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l-0.0,-0.06l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.06,-0.06l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.19,-0.19l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.0,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.04l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.13l0.02,-0.02l-0.0,-0.15l0.02,-0.02l0.0,-0.02l0.31,-0.31l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.17l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.37,-0.37l0.0,-0.06l-0.02,-0.02l0.0,-0.13l-0.4,-0.4l-0.04,0.0l-0.4,0.4l0.0,0.17l0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.26,0.26l-0.2,0.2l0.0,0.04l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.1l-0.02,0.02l0.0,0.17l-0.02,0.02l0.0,0.04l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.02l-0.08,0.08l0.0,0.06l0.02,0.02l-0.0,0.21l0.01,0.01l-0.01,0.01l0.0,0.0l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.08,0.0l0.01,0.01l-0.18,0.18l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l-0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.17l0.02,0.02l-0.0,0.15l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.17l-0.02,0.02l0.0,0.0l-0.17,0.17l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.25l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l-0.0,0.25l0.02,0.02l0.0,0.31l0.02,0.02l0.0,0.13l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.06l0.04,0.04l0.0,0.04l0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.27l-0.02,0.02l-0.0,0.08l-0.02,0.02l0.0,0.29l0.02,0.02l0.0,0.17l-0.02,0.02l0.0,0.17l-0.02,0.02l0.0,0.19l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l-0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.13,0.13l-0.02,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.01l-0.02,0.02l0.0,0.03l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.21l0.02,0.02l0.0,0.19l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.13l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.31,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.54,0.0l-0.02,0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.25,-0.25l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.06,-0.06l0.0,-0.21l0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.0,-0.0l0.06,-0.06l0.0,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.19l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.08,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.1,0.1l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.0,-0.0l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.4,0.4l0.0,0.04l0.02,0.02l0.0,0.04l0.04,0.04l-0.0,0.0l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.08l0.02,0.02l-0.0,0.0l0.0,0.08l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.03,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.09l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.04l-0.04,0.04l0.0,0.02l-0.04,0.04l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l0.0,-0.0l-0.04,-0.04l-0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l-0.03,-0.03l-0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.06,-0.06l-0.0,0.0l-0.04,-0.04l-0.04,0.0l-0.04,-0.04l-0.06,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,-0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.21,0.0l-0.02,0.02l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.1l0.02,-0.02l-0.0,-0.38l0.12,-0.12l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.08,0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.38l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.04,-0.04l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.01,-0.01l0.04,-0.04l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.17l0.02,-0.02l0.0,-0.31l0.02,-0.02l0.0,-0.19l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.23l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.01,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.12,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.19,0.0l0.02,-0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.02l-0.06,-0.06l-0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.04l0.15,-0.15l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.06,-0.06l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.15l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.1l0.02,-0.02l0.0,-0.19l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.13l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.06l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.06,-0.06l-0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.04,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.21l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.21,-0.21l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.37,-0.37l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.02l-0.21,-0.21l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.19l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l0.0,-0.06l-0.4,-0.4l-0.04,0.0l-0.4,0.4l0.0,0.13l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.4,0.4l0.0,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.0,0.1l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.15l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.21,0.21l-0.0,0.0l-0.0,0.06l-0.02,0.02l0.0,0.21l0.02,0.02l0.0,0.02l0.06,0.06l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.03,0.03l-0.32,0.32l0.0,0.02l-0.04,0.04l0.0,0.1l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.15l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l-0.0,0.17l-0.02,0.02l0.0,0.41l-0.27,-0.27l-0.02,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.35l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.15l-0.4,-0.4l-0.04,0.0l-0.4,0.4l0.0,0.19l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.04,0.04l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.1l0.02,0.02l-0.0,0.1l0.02,0.02l-0.02,0.02l0.0,0.44l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.31,0.31l0.0,0.0l0.04,0.04l-0.0,0.06l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.08l0.19,0.19l0.0,0.04l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.02l0.08,0.08l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.02l0.04,0.04l-0.0,0.0l0.06,0.06l-0.0,0.0l0.02,0.02l0.0,0.04l0.04,0.04l-0.0,0.02l0.08,0.08l0.0,0.02l0.02,0.02l0.0,0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.52,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.28,0.28l-0.01,-0.01l-0.02,0.0l-0.08,-0.08l-0.08,0.0l0.0,-0.08l-0.01,-0.01l0.01,-0.01l-0.0,-0.17l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.08l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.06,-0.06l-0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.27l-0.4,-0.4l-0.04,0.0l-0.4,0.4l0.0,0.31l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.08,0.08l0.0,0.02l0.06,0.06l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.04,0.04l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.17l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.08l0.01,0.01l-0.01,0.01l0.0,0.13l0.01,0.01l-0.01,0.01l-0.0,0.0l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.1l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.29,0.29l-0.0,0.0l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.17l0.02,0.02l-0.0,0.08l0.0,0.0l-0.18,0.18l-0.12,0.0l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.1,0.1l-0.12,-0.12l-0.01,0.0l0.06,-0.06l0.0,-0.04l-0.33,-0.33l-0.0,-0.08l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.04l0.19,0.19l-0.0,0.0l0.0,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.16,-0.16l0.01,-0.01l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.08,-0.08l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.42l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.29l-0.4,-0.4l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.4,0.4l0.0,0.06l0.1,0.1l-0.0,0.19l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.42l0.02,0.02l-0.0,0.1l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.13l0.02,0.02l-0.0,0.02l0.03,0.03l0.3,0.31l0.0,0.04l0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.05,0.05l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.4,0.4l0.0,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.0,0.04l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.06l0.02,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.11l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.25l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.1l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.13l-0.04,0.04l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.31l0.02,0.02l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.07,0.07l-0.01,0.01l0.0,0.02l-0.04,0.04l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l-0.02,0.0l-0.4,0.4l-0.0,0.0l-0.1,0.1l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.08,0.08l-0.02,0.0l-0.1,0.1l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.06,0.06l-0.02,0.0l-0.1,0.1l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.1,0.1l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.06,0.06l-0.02,0.0l-0.08,0.08l-0.0,0.0l-0.1,0.1l-0.02,0.0l-0.06,0.06l-0.0,-0.01l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.1l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.15l0.02,-0.02l-0.0,-0.1l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.13l0.06,-0.06l0.0,-0.04l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.15l-0.01,-0.01l0.01,-0.01l0.0,-0.08l-0.02,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.23l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l0.0,-0.04l-0.04,-0.04l0.0,-0.04l-0.04,-0.04l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.13l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.12,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.13l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.04l0.02,-0.02l-0.0,-0.13l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.17l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.17l-0.23,-0.23l0.0,-0.0l0.0,-0.19l-0.02,-0.02l0.0,-0.12l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.1,-0.1l0.0,-0.02l-0.4,-0.4l-0.04,0.0l-0.4,0.4l0.0,0.08l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.15,0.15l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.08,0.08l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.08l-0.15,0.15l0.0,0.02l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.0l0.29,0.29l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.06l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.12,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.22,0.22l-0.34,-0.34l-0.04,0.0l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.38l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.0,0.0l0.04,-0.04l0.02,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.08l0.02,-0.02l0.0,-0.38l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.23l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.06l0.08,0.0l0.02,-0.02l0.02,0.0l0.16,-0.16l0.32,0.32l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.33,0.0l0.02,-0.02l0.06,0.0l0.25,-0.25l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.09,-0.09l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.19l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l-0.0,-0.15l-0.02,-0.02l0.0,-0.35l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l-0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.4,-0.4l-0.06,0.0l-0.14,0.14l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.23l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l-0.12,0.12l0.0,0.04l0.15,0.15l0.0,0.1l0.02,0.02l0.0,0.19l0.02,0.02l-0.0,0.08l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l-0.0,0.0l0.04,0.04l0.0,0.02l0.06,0.06l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.25,0.25l0.0,0.02l0.02,0.02l0.0,0.02l-0.14,0.14l-0.12,0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.15,0.0l-0.04,0.04l-0.0,0.0l-0.24,0.24l-0.01,-0.01l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.21l-0.4,-0.4l-0.04,0.0l-0.4,0.4l-0.0,0.17l-0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.27l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.02l-0.0,0.04l-0.06,0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.08l-0.4,-0.4l-0.04,0.0l-0.4,0.4l0.0,0.13l0.02,0.02l-0.0,0.1l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.08l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.17l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.4,0.4l0.02,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.12,0.0l0.02,-0.02l0.02,0.0l-0.0,0.02l0.02,0.02l0.0,0.06l0.1,0.1l-0.0,0.04l0.02,0.02l0.0,0.17l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.08l-0.02,0.02l-0.0,0.17l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.1,0.1l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.21l0.01,0.01l-0.01,0.01l0.0,0.31l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.11,0.11l-0.04,0.04l0.0,0.04l-0.02,0.02l-0.0,0.0l-0.17,0.17l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.25,0.0l-0.4,0.4l0.0,0.04l0.37,0.37l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.08l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.08l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.25l0.02,0.02l0.0,0.19l0.02,0.02l0.0,0.1l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.08,0.08l0.0,0.0l0.4,0.4l0.02,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.19l0.02,0.02l-0.0,0.1l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.15l0.02,0.02l-0.0,0.15l0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.31l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.06l-0.02,0.02l0.0,0.06l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.19l-0.02,0.02l0.0,0.25l0.02,0.02l0.0,0.13l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.06,0.06l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.01l-0.01,-0.01l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.08,-0.08l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.02,-0.02l-0.02,-0.0l-0.02,-0.02l-0.01,0.0l0.12,-0.12l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.1,-0.1l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.06l-0.0,-0.0l0.15,-0.15l0.0,-0.04l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.1,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.03,0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.01,-0.01l0.04,-0.04l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.15l0.02,-0.02l0.0,-0.19l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.35,-0.35l-0.01,-0.01l0.0,-0.0l0.0,-0.0l0.23,-0.23l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.38l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.21l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.08,-0.08l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.08,0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.31,-0.31l0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.1,-0.1l-0.0,-0.0l-0.02,-0.02l0.0,-0.08l0.02,0.0l0.4,-0.4l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.23,-0.23l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.19l-0.23,-0.23l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.06,0.0l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.1l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.01,0.0l0.39,-0.39l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.1l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.07,0.07l-0.24,-0.24l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.4,0.4l0.0,0.04l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.31l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.4,0.4l0.0,0.02l0.01,0.01l-0.01,0.01l-0.0,0.02l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l-0.12,0.12l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.13l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l0.0,0.0l-0.06,0.06l0.0,0.02l-0.1,0.1l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.27l-0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.1l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.21l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.02l0.04,0.04l0.0,0.0l0.13,0.13l0.0,0.02l0.02,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.04,0.04l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.04,0.04l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.08l0.02,0.02l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.19,0.19l0.0,0.0l0.02,0.02l0.0,0.33l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.23l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.04l0.4,0.4l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.0,0.06l0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.0l-0.08,0.08l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.13l0.02,0.02l-0.0,0.08l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.04,0.04l0.02,0.0l0.08,0.08l0.08,0.0l0.0,0.23l-0.02,0.02l0.0,0.15l0.01,0.01l-0.01,0.01l0.0,0.08l0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.04,0.04l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.19l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.27,0.27l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.13l0.02,0.02l-0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.1,0.1l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.29,0.0l0.01,-0.01l0.01,0.01l0.31,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.0,0.02l0.03,0.03l-0.01,0.01l0.0,0.02l0.02,0.02l-0.0,0.0l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.44l0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.38l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.1,0.1l0.0,0.0l-0.06,0.06l0.0,0.0l-0.08,0.08l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.04,0.04l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.27l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.08,0.0l-0.3,0.3l-0.16,-0.16l-0.19,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.17l0.02,0.02l-0.0,0.04l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.02,0.02l0.02,0.0l0.08,0.08l0.02,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.38,0.38l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.19,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.18,0.0l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l-0.0,0.06l-0.04,0.04l0.0,0.0l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.04l-0.01,0.01l-0.0,-0.07l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.25,-0.25l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.08,-0.08l0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.0,-0.02l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.27,-0.27l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.17l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.0l0.15,-0.15l0.0,-0.04l0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.06,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,-0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.4,0.4l0.0,0.04l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.02,0.02l0.12,0.0l0.02,0.02l0.04,0.0l0.01,0.01l-0.01,0.01l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.04l-0.04,0.04l0.0,0.02l-0.1,0.1l-0.01,0.01l0.0,0.0l-0.01,0.01l-0.04,0.04l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.17l0.0,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.04l0.4,0.4l0.06,0.0l0.02,-0.02l0.02,-0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.18,0.18l0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.17,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.19,0.0l-0.15,0.15l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.1,0.1l-0.08,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.04l0.4,0.4l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.18,0.0l-0.01,0.01l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.21,-0.21l-0.12,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l0.0,-0.03l-0.4,-0.4l-0.05,0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.4,-0.4l-0.1,0.0l-0.24,0.24l-0.16,-0.16l-0.02,0.0l-0.15,-0.15l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l0.0,0.08l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.19,0.19l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.13,0.13l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.01,0.01l-0.01,0.01l0.0,0.02l-0.1,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.23,-0.23l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.12,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l-0.04,0.0l-0.01,0.01l-0.16,-0.16l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.12l0.29,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.12,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.08,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.1,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.1,-0.1l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.02l0.04,-0.04l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.1,-0.1l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.21,-0.21l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.06,-0.06l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.04,-0.04l-0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.23l0.02,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.08l-0.06,-0.06l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.04,0.0l-0.17,0.17l-0.02,0.0l-0.02,0.02l0.0,-0.01l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.03,-0.03l0.01,-0.01l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.35l0.02,-0.02l-0.0,-0.13l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,0.02l0.17,0.0l0.04,-0.04l0.12,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.04,-0.04l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.06,-0.06l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.29l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l-0.0,-0.31l-0.02,-0.02l0.0,-0.23l0.02,-0.02l0.0,-0.31l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.21l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.08l0.02,-0.02l0.0,-0.21l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.1l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.02,0.0l0.08,-0.08l0.02,-0.0l0.02,-0.02l0.02,0.0l0.1,-0.1l0.02,0.0l0.17,-0.17l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.21l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.21l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.4,-0.4l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.04,0.04l-0.02,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.19l-0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.0l0.06,0.06l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l0.0,-0.51l0.02,-0.02l0.0,-0.17l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.35l-0.0,-0.0l0.33,-0.33l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.19,-0.19l0.0,-0.02l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.18,-0.18l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.13l-0.02,-0.02l-0.0,-0.08l-0.02,-0.01l-0.0,-0.01l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.0,-0.0l0.29,-0.29l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.1l-0.0,-0.0l0.29,-0.29l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.13l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.33,-0.33l0.0,-0.0l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.23,-0.23l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.21l-0.4,-0.4l-0.17,0.0l-0.4,0.4l0.0,0.04l-0.02,0.02l0.0,0.1l-0.02,0.02l-0.0,0.1l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.08l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.06l0.1,0.1l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.25,0.25l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.02l0.07,0.07l-0.32,0.32l0.0,0.04l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.02l0.06,0.06l0.0,0.06l-0.37,0.37l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.19l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.12,0.12l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l-0.0,0.23l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.13,0.13l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.03l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.27l-0.02,0.02l0.0,0.02l-0.1,0.1l-0.0,0.02l-0.02,0.02l0.0,0.06l0.26,0.26l-0.05,0.05l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.33,0.33l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.27l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.0l-0.04,0.04l-0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.31l-0.02,0.02l-0.0,0.06l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.04,0.04l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.01,0.01l-0.01,-0.01l0.0,-0.0l-0.32,-0.32l0.26,-0.26l-0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.27l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.33,-0.33l0.0,-0.0l0.04,-0.04l0.0,-0.33l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.25l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.17l0.02,-0.02l0.0,-0.08l-0.04,-0.04l0.0,-0.0l-0.0,-0.0l0.25,-0.25l-0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.25l-0.02,-0.02l0.0,-0.29l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.04,0.0l-0.4,0.4l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.35l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.1l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.27,0.27l0.0,0.13l-0.02,0.02l0.0,0.33l0.02,0.02l0.0,0.23l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.08l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.31l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.13l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.37,0.37l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.31l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.01l-0.07,0.0l-0.02,-0.02l-0.35,0.0l-0.08,0.08l-0.02,0.0l-0.13,0.13l-0.02,0.0l-0.01,0.01l-0.01,-0.01l0.0,-0.0l0.0,-0.02l0.04,-0.04l-0.0,-0.04l0.04,-0.04l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.04l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.13l-0.02,-0.02l0.0,-0.19l-0.02,-0.02l0.0,-0.15l-0.01,-0.01l0.01,-0.01l0.0,-0.13l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.33,-0.33l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.4,-0.4l-0.02,0.0l-0.17,-0.17l-0.04,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.04,0.04l0.0,0.04l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.33l0.02,0.02l-0.0,0.33l0.01,0.01l-0.01,0.01l0.0,0.0l-0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l-0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.4,0.4l0.02,0.0l0.04,0.04l0.06,0.0l0.04,0.04l0.06,0.0l0.03,0.03l0.38,0.38l0.0,0.0l0.08,0.08l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.12,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.31l0.02,0.02l0.0,0.04l0.02,0.02l-0.02,0.02l0.0,0.21l0.02,0.02l0.0,0.25l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.04,0.0l-0.4,0.4l0.0,0.04l0.04,0.04l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.23l-0.02,0.02l-0.0,0.08l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.12,0.12l-0.25,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.0,0.0l-0.4,0.4l0.0,0.02l-0.1,0.1l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.27l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.08,0.08l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.1,0.1l-0.0,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l-0.12,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.12,0.0l-0.02,0.02l-0.08,0.0l-0.13,0.13l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.06,0.06l-0.0,0.0l-0.04,0.04l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.1,0.0l-0.4,0.4l0.0,0.02l0.02,0.02l0.0,0.0l0.25,0.25l-0.0,0.0l0.0,0.0l-0.02,0.02l0.0,0.02l-0.06,0.06l0.0,0.04l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l-0.0,0.0l-0.04,0.04l0.0,0.04l-0.03,0.03l-0.0,-0.01l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.29,-0.29l0.0,-0.0l-0.02,-0.02l0.0,-0.04l0.06,-0.06l0.0,-0.0l0.06,-0.06l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.08,-0.08l-0.0,-0.0l-0.04,-0.04l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.33l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.08l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.1l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.35l-0.02,-0.02l-0.0,-0.17l-0.02,-0.02l0.0,-0.25l-0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.01,-0.01l0.05,-0.05l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.4,-0.4l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.27,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.06,-0.06l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l-0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,0.0l0.06,-0.06l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.08,-0.08l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.1,-0.1l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,0.0l0.4,-0.4l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.06,-0.06l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.08,-0.08l0.0,-0.02l0.02,-0.02l-0.0,-0.14l0.04,0.04l0.04,0.0l0.02,-0.02l0.04,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.1,0.0l-0.04,0.04l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.14,0.14l-0.16,-0.16l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.4,0.4l0.0,0.1l0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.1l-0.02,0.02l-0.0,0.1l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.15,0.15l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.21,0.21l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.06,0.06l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.04,0.04l0.0,0.0l-0.12,0.12l-0.02,0.0l-0.4,0.4l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.13l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.04,0.04l0.0,0.0l-0.19,0.19l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.25,0.25l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.35l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.25l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.12,0.12l0.0,0.0l-0.08,0.08l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.02l-0.04,0.04l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.08,0.08l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.01l-0.04,-0.04l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.29,0.29l-0.05,0.0l0.14,-0.14l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.21,0.0l0.02,0.02l0.15,0.0l0.02,0.02l0.02,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.27l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.06,0.06l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.06,0.0l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.06,0.06l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.04,0.04l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.08l-0.02,0.02l0.0,0.4l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.08,0.08l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.08,0.08l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.06,0.06l0.02,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.4,0.4l0.0,0.06l-0.02,0.02l0.0,0.04l0.02,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l0.02,0.02l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.08l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.04,0.04l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.15l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.03l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.15,0.0l-0.04,-0.04l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.25,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.31,0.0l-0.01,0.01l-0.03,-0.03l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.13l0.02,-0.02l-0.0,-0.08l0.02,-0.02l0.0,-0.33l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.04l0.04,-0.04l0.0,-0.19l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.11,-0.11l0.24,-0.24l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.1l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.02,0.02l0.08,0.0l0.4,-0.4l0.0,-0.08l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.02,-0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.1l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.08,-0.08l-0.0,-0.08l-0.19,-0.19l0.13,-0.13l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.1,-0.1l-0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.33l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.06,-0.06l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.29,-0.29l0.0,-0.0l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.4,-0.4l-0.04,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.06,0.06l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.27,0.27l0.0,0.02l-0.12,0.13l0.0,0.1l-0.02,0.02l0.0,0.0l-0.06,0.06l-0.06,0.0l-0.02,0.02l-0.27,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.06l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.03,-0.02l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.04,-0.04l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.17l-0.01,-0.01l0.01,-0.01l0.0,-0.19l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.13l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.06,-0.06l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l-0.0,-0.1l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.29l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l-0.0,-0.17l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.23l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.08,-0.08l0.0,-0.04l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.06,0.0l-0.04,-0.04l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.0,0.0l-0.06,-0.06l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.17,-0.17l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.35,-0.35l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.08,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.08,0.08l0.02,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.02,0.0l0.17,0.17l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.08,0.08l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.19,0.19l0.04,0.0l0.08,0.08l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.0,0.04l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.23l0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.04,0.04l0.0,0.1l-0.02,0.02l-0.0,0.04l-0.21,0.21l0.0,0.04l0.15,0.15l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.04l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.13l0.01,0.01l-0.01,0.01l0.0,0.06l-0.02,0.02l-0.0,0.04l-0.06,0.0l-0.4,0.4l0.0,0.04l0.25,0.25l0.0,0.06l0.02,0.02l0.0,0.1l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l-0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.04,0.04l0.02,0.0l0.08,0.08l0.02,0.0l0.06,0.06l0.01,0.0l0.05,0.04l0.02,0.0l0.0,-0.01l0.05,0.05l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.17l-0.02,0.02l-0.0,0.08l-0.04,0.04l0.0,0.31l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.13l0.02,0.02l-0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.08l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.07,0.0l-0.06,-0.06l-0.0,-0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.06,0.0l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,-0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.03,-0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,-0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,-0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.06,-0.06l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.1,-0.1l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.19,-0.19l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.06,-0.06l-0.02,0.0l-0.12,-0.13l-0.02,-0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.04l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.04l0.1,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.33,0.33l0.02,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.04,0.0l0.35,0.35l0.0,0.0l0.04,0.04l0.02,0.0l0.06,0.06l0.04,0.0l0.02,0.02l0.17,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.0,0.0l0.06,-0.06l0.02,0.0l0.08,-0.08l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.02,0.0l0.33,-0.33l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.04,0.04l0.17,0.0l0.4,-0.4l0.0,-0.04l-0.4,-0.4l-0.12,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.19,-0.19l-0.02,0.0l-0.04,-0.04l-0.08,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.11,-0.11l0.24,-0.24l0.0,-0.0l0.02,-0.02l0.0,-0.19l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.19,-0.19l-0.04,0.0l-0.02,-0.02l-0.13,-0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.04,0.0l-0.25,0.25l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.08l-0.0,-0.0l0.04,-0.04l0.04,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.02,0.0l0.04,-0.04l0.06,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.0,0.0l0.02,0.02l0.21,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.12,0.0l0.02,-0.02l0.06,-0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.06,-0.06l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.0,0.0l0.02,-0.02l0.02,0.0l0.08,-0.08l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.08,-0.08l0.02,0.0l0.02,-0.02l0.02,0.0l0.15,-0.15l0.04,0.0l0.02,-0.02l0.0,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.08,-0.08l0.02,0.0l0.4,-0.4l0.0,-0.02l0.06,-0.06l0.0,-0.04l0.04,0.0l0.02,-0.02l0.04,0.0l0.31,0.31l0.0,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.21,0.0l0.4,-0.4l0.0,-0.04l-0.11,-0.11l0.22,-0.22l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.13l-0.02,-0.02l-0.0,-0.13l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.15,-0.15l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.1,-0.1l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.06,-0.06l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.16,-0.16l0.01,-0.01l0.06,0.0l0.02,-0.02l0.08,0.0l0.4,-0.4l0.0,-0.04l-0.4,-0.4l-0.12,0.0l-0.02,0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.17,0.0l-0.02,0.02l-0.04,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.1,0.1l-0.0,0.0l-0.02,0.0l-0.02,0.02l-0.4,-0.4l-0.04,0.0l-0.02,-0.02l-0.17,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.4,0.4l0.0,0.04l0.13,0.13l-0.23,0.23l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.01l-0.02,-0.02l-0.02,0.0l-0.15,-0.15l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.04,-0.04l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.06,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.13l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.07,0.07l0.21,0.21l-0.34,0.34l-0.0,0.0l-0.02,0.02l0.0,0.23l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.05,0.05l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.06,0.06l-0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l-0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.13,0.13l0.0,0.0l0.04,0.04l0.0,0.0l0.01,0.01l-0.01,0.01l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.0,-0.14l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.4,0.4l0.0,0.04l0.02,0.02l0.0,0.02l0.25,0.25l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.06,0.06l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.04,0.04l-0.02,0.0l-0.06,0.06l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.03l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.0,0.0l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.14,-0.15l-0.0,-0.0l-0.1,-0.1l-0.02,0.0l-0.21,-0.21l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.04,-0.04l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.17,-0.17l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.1,-0.1l-0.05,-0.05l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.02,-0.02l0.4,-0.4l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.0,-0.0l0.03,-0.03l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,-0.0l0.02,-0.02l0.12,0.0l0.01,-0.01l0.01,0.01l0.12,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.15,-0.15l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.04,-0.04l0.27,-0.27l0.0,-0.0l0.04,-0.04l-0.0,-0.02l0.02,-0.02l0.0,-0.04l0.04,-0.04l-0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.08,-0.08l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.04l0.1,-0.1l0.0,-0.02l0.04,-0.04l0.0,-0.04l0.02,-0.02l-0.0,-0.1l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.23l-0.02,-0.02l0.0,-0.0l-0.1,-0.1l0.0,-0.0l0.0,-0.02l-0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.04l0.04,-0.04l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.08,-0.08l0.0,-0.0l0.04,-0.04l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.05,-0.05l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.15,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.31,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.07,-0.07l0.01,-0.01l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.1,-0.1l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.21,-0.21l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.4,-0.4l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.05,0.05l-0.39,0.39l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.06,0.06l-0.0,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.21,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.19,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.21,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.04,0.04l0.0,0.04l-0.02,0.02l-0.0,0.29l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.04l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.0l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.27,0.27l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.0,-0.18l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.39,-0.39l0.01,-0.01l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.08l-0.13,-0.13l0.25,-0.25l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.08l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.08l0.06,0.0l0.02,0.02l0.15,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.08l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.28,-0.28l0.14,-0.14l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.04l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l-0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.15l0.02,-0.02l-0.0,-0.1l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l-0.4,-0.4l-0.04,0.0l-0.4,0.4l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.16l-0.06,0.0l-0.4,0.4l-0.0,0.0l-0.1,0.1l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.15,0.15l-0.0,0.0l-0.08,0.08l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.35,0.35l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.06l0.01,0.01l-0.01,0.01l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.21l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.1,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.27l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.4,0.4l0.0,0.0l0.06,0.06l0.04,0.0l0.04,0.04l0.06,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.0,0.04l0.02,0.02l0.0,0.02l-0.18,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.15,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.07,0.07l-0.01,-0.01l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.17,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.15,0.0l-0.1,0.1l-0.08,-0.08l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.05,-0.05l0.12,-0.12l-0.0,-0.0l0.02,-0.02l0.0,-0.19l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.06,-0.06l-0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.15,-0.15l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l0.04,-0.04l0.1,0.0l0.02,-0.02l0.08,0.0l0.04,-0.04l0.1,0.0l0.06,-0.06l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.15,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,-0.0l0.04,-0.04l0.02,0.0l0.01,-0.01l0.01,0.01l0.08,0.0l0.02,0.02l0.04,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.06,-0.06l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.12,-0.12l0.1,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.31,0.0l0.04,-0.04l0.21,0.0l0.02,-0.02l0.02,0.02l0.12,0.0l0.01,-0.01l0.01,0.01l0.12,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.04,0.0l0.01,-0.01l0.01,0.01l0.21,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.01,-0.01l0.01,0.01l0.04,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l0.0,-0.0l0.03,-0.03l0.07,-0.07l0.02,-0.0l0.1,-0.1l0.04,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.0,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.35,-0.35l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.21l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.13l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.23l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.15l0.02,-0.02l-0.0,-0.19l0.02,-0.02l0.0,-0.29l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.17,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.4,-0.4l0.0,-0.04l-0.38,-0.38l0.27,-0.27l0.0,-0.0l0.02,-0.02l-0.0,-0.08l0.02,-0.02l0.0,-0.06l-0.15,-0.15l0.0,-0.0l0.0,-0.02l0.15,-0.15l0.0,-0.04l-0.4,-0.4l-0.08,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.13l0.02,0.02l-0.0,0.0l0.05,0.05l-0.34,0.34l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.04,0.0l-0.06,0.06l-0.0,0.0l-0.06,0.06l-0.04,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.35l0.02,0.02l-0.08,0.08l-0.0,0.1l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l-0.0,0.13l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.23l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.1l0.0,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.39,0.39l-0.05,0.05l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.27,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.08,-0.08l0.47,0.0l0.4,-0.4l0.0,-0.0l0.04,-0.04l-0.0,-0.08l0.02,-0.02l0.0,-0.23l-0.02,-0.02l0.0,-0.17l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.12,0.0l-0.04,0.04l-0.02,0.0l-0.06,0.06l-0.0,0.0l-0.09,0.09l-0.32,-0.32l-0.08,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.04l0.04,0.04l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.17,0.17l-0.4,0.4l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l-0.0,0.02l-0.02,0.02l0.0,0.06l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.13,0.13l0.0,0.02l0.02,0.02l-0.0,0.0l0.04,0.04l-0.03,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.06,0.06l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.13,0.13l-0.04,0.0l-0.04,0.04l-0.04,0.0l-0.4,0.4l-0.0,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.29,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.08,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l-0.17,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.02,0.0l-0.08,-0.08l-0.0,-0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.03,-0.03l0.1,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.04,0.0l0.02,-0.02l0.04,-0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.03l0.02,0.02l0.04,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.4,0.4l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.12,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.17,0.0l0.02,0.02l0.42,0.0l0.04,-0.04l0.0,-0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l-0.0,-0.03l0.02,0.02l0.06,0.0l0.4,-0.4l0.0,-0.04l-0.17,-0.17l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.03,0.03l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.19,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.16l-0.29,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.06,-0.06l-0.06,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l-0.33,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l0.0,-0.14l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.08,-0.08l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l0.0,-0.13l0.23,-0.23l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.28,-0.28l0.03,0.03l0.08,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.17,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.21,-0.21l0.06,0.06l0.02,0.0l0.02,0.02l0.17,0.0l0.1,-0.1l0.02,0.02l0.0,0.0l0.37,0.37l0.05,0.05l0.02,0.0l0.08,0.08l0.0,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.15,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.04,0.04l0.08,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.29,-0.29l0.02,0.0l0.04,0.04l0.02,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.1,0.0l0.4,-0.4l0.0,-0.04l-0.4,-0.4l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.13,-0.13l-0.04,0.0l-0.02,-0.02l-0.15,0.0l-0.14,0.14l-0.26,-0.26l-0.04,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l-0.0,0.04l-0.04,0.04l0.0,0.0l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.0l-0.03,0.03l-0.0,-0.03l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.1,0.0l-0.27,0.27l-0.04,-0.04l-0.17,0.0l-0.3,0.3l-0.14,-0.14l-0.0,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.04,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.06l-0.06,0.06l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.23,0.23l-0.12,0.0l-0.1,-0.1l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.03,-0.03l0.16,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.06,-0.06l0.02,0.0l0.4,-0.4l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.46l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.04,-0.04l0.0,-0.0l0.06,-0.06l0.08,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.12,0.0l0.02,0.02l0.19,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.4,-0.4l0.0,-0.0l0.04,-0.04l0.31,0.31l0.02,0.0l0.08,0.08l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.06,0.06l0.25,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.27,-0.27l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.08,0.0l0.4,0.4l0.04,0.0l0.02,0.02l0.1,0.0l0.08,-0.08l0.04,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.01,-0.01l0.18,0.18l0.02,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.17,0.0l0.04,-0.04l0.04,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l0.0,-0.15l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.02l0.06,-0.06l0.1,0.0l0.4,-0.4l0.0,-0.06l-0.4,-0.4l-0.23,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.19,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.16l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.15,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l-0.19,-0.19l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.1,0.1l-0.0,0.0l-0.15,0.15l-0.02,0.0l-0.02,-0.02l0.0,-0.06l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.16,-0.16l0.01,-0.01l-0.0,-0.02l0.12,-0.12l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.29l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.17,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.13l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.0l-0.4,-0.4l-0.06,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.04l0.02,0.0l0.02,-0.02l0.17,0.0l0.02,-0.02l0.35,0.0l0.02,0.02l0.17,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.02,0.02l0.5,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.08,-0.08l0.02,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.06,-0.06l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.1l0.2,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.08,0.0l0.06,-0.06l0.06,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.06,-0.06l0.04,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.04,0.0l0.01,-0.01l0.26,0.26l0.08,0.0l0.04,0.04l0.08,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.04,0.0l0.01,-0.01l0.01,0.01l0.08,0.0l0.13,0.13l0.04,0.0l0.04,0.04l0.1,0.0l0.01,-0.01l0.01,0.01l0.0,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.1,0.0l0.34,-0.34l0.11,0.11l0.0,0.0l0.4,0.4l0.04,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.23,-0.23l0.0,-0.04l-0.4,-0.4l-0.04,0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.33,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.27,-0.27l-0.06,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.04l-0.14,0.0l-0.02,0.02l-0.0,0.0l-0.0,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.4,0.4l-0.0,0.0l-0.1,0.1l0.0,0.08l-0.02,0.02l0.0,0.19l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.01,0.01l-0.01,0.01l-0.08,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.0,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l-0.0,0.1l-0.02,0.02l0.0,0.04l-0.06,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.0,-0.0l-0.12,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.1,0.0l-0.02,-0.02l-0.21,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.0,0.0l-0.08,0.08l-0.02,0.0l-0.4,0.4l-0.0,0.0l-0.08,0.08l0.0,0.0l-0.1,0.1l-0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.38,0.39l0.0,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.06,0.0l0.04,0.04l0.02,0.0l-0.0,0.18l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.1l0.02,0.02l0.0,0.18l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.25,0.25l-0.04,0.0l-0.06,0.06l-0.0,0.0l-0.4,0.4l0.0,0.04l-0.04,0.04l-0.01,0.01l-0.0,0.0l-0.08,0.08l0.0,0.02l-0.04,0.04l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.06l0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.08l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.04,-0.04l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l0.0,-0.0l0.0,-0.15l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.15,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.06l0.31,0.31l-0.08,0.08l0.0,0.0l-0.02,0.02l0.0,0.0l-0.08,0.08l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.08l0.06,0.06l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.4,0.4l0.02,0.0l0.08,0.08l0.04,0.0l0.08,0.08l0.02,0.0l0.08,0.08l0.02,0.0l0.06,0.06l0.0,0.02l-0.02,0.02l0.0,0.38l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l-0.01,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,-0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.03,-0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.0,-0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.01,-0.01l0.0,-0.0l-0.01,-0.01l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.1,-0.1l-0.0,-0.02l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.08,-0.08l-0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.1,-0.1l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.01,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.42,0.0l0.04,-0.04l0.06,0.0l0.02,-0.02l0.17,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.12,0.0l0.02,-0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.19,0.0l0.01,-0.01l0.01,0.01l0.17,0.0l0.02,-0.02l0.77,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.15,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.06,0.06l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.13,0.13l0.0,0.0l0.02,0.02l0.04,0.0l0.1,0.1l0.02,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.0,0.0l0.04,0.04l0.02,0.0l0.1,0.1l0.02,0.0l0.08,0.08l0.04,0.0l0.06,0.06l0.02,0.0l0.1,0.1l0.04,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.08,0.08l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.17,0.0l0.02,-0.02l0.12,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.02,0.0l0.06,-0.06l0.02,0.0l0.15,-0.15l0.02,0.0l0.02,-0.02l0.02,0.0l0.23,-0.23l0.02,0.0l0.02,-0.02l0.0,0.0l0.06,-0.06l0.37,0.37l0.04,0.0l0.04,-0.04l0.02,0.0l0.4,-0.4l0.0,-0.06l-0.06,-0.06l0.0,-0.19l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.07,-0.07l0.01,-0.01l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.12,-0.12l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.15,-0.15l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.17,-0.17l0.0,-0.0l0.08,-0.08l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.23,-0.23l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.08,-0.08l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.06,-0.06l0.0,-0.0l0.02,-0.02l0.04,0.0l0.15,-0.15l0.02,0.0l0.1,-0.1l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.0,0.0l0.08,-0.08l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.06,0.0l0.08,-0.08l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.04,0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.04,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,-0.0l0.15,-0.15l0.02,0.0l0.04,-0.04l0.04,0.0l0.4,-0.4l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.0l0.15,-0.15l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.04l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.06,-0.06l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.08,-0.08l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.08,-0.08l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.21,-0.21l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l-0.0,-0.15l0.02,-0.02l0.0,-0.15l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.06l0.04,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.0,0.0l0.06,0.06l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.08,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.39,-0.39l0.01,0.01l0.04,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.17,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.06,-0.06l0.02,0.0l0.33,-0.33l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.1,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.12,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.27,0.0l0.06,-0.06l0.02,0.0l0.04,-0.04l0.0,0.0l0.19,-0.19l0.04,0.0l0.4,-0.4l0.0,-0.06l-0.4,-0.4l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.25,0.25l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.33,0.0l-0.02,0.02l-0.04,0.0l-0.06,0.06l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.29,0.29l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.13,-0.13l-0.24,0.0l0.39,-0.39l0.0,-0.0l0.06,-0.06l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.1l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.17,-0.17l0.06,-0.06l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.1,0.0l0.02,0.02l0.17,0.0l0.02,-0.02l0.21,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.01,-0.01l0.0,0.01l0.02,-0.0l0.04,-0.05l0.01,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.01,-0.01l0.01,0.03l0.01,-0.0l-0.01,-0.04l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.17,0.0l0.4,-0.4l0.0,-0.04l-0.4,-0.4l-0.21,0.0l-0.04,-0.04l-0.04,0.0l-0.23,0.23l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.29,0.29l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.08,-0.08l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l-0.0,-0.17l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.27l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.4,-0.4l-0.02,0.0l-0.08,-0.08l-0.31,0.0l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l-0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.0l0.04,0.04l0.0,0.0l0.4,0.4l0.04,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.04,0.0l0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.27l0.02,0.02l0.0,0.14l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.21,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.19l-0.02,0.02l-0.0,0.08l-0.02,0.02l0.0,0.13l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.67,0.0l-0.02,-0.02l-0.31,0.0l-0.02,-0.02l-0.15,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.27,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.0,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.15,0.0l-0.02,0.02l-0.06,0.0l-0.4,0.4l0.0,0.02l-0.08,0.08l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.07l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.33l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.54l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.06l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.19l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.02l-0.01,0.01l-0.03,-0.03l-0.02,0.0l-0.04,-0.04l-0.0,0.0l-0.06,-0.06l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.32,0.0l0.14,-0.14l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.21l-0.02,-0.02l0.0,-0.17l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.08,0.0l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.19,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.04,0.04l-0.04,0.0l-0.13,0.13l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.03,0.03l0.0,-0.01l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.15l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.04,-0.04l-0.0,-0.04l0.02,-0.02l0.0,-0.02l0.04,-0.04l-0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.12,-0.12l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.06,-0.06l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.33,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.15,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.23,0.0l0.02,-0.02l0.1,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.0,0.0l0.4,-0.4l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.08,-0.08l0.0,-0.04l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l-0.0,-0.04l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.31,-0.31l0.0,-0.0l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.1,-0.1l0.02,0.0l0.02,-0.02l0.02,0.0l0.08,-0.08l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.06,-0.06l0.02,0.0l0.06,-0.06l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.25,0.0l0.02,-0.02l0.1,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.19,0.19l0.0,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.1,0.0l0.19,0.19l0.04,0.0l0.4,-0.4l0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.04l-0.4,-0.4l-0.06,0.0l-0.23,0.23l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.06,0.0l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.01,-0.01l0.01,-0.01l-0.0,-0.04l0.02,-0.02l0.0,-0.25l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.1l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.4,-0.4l-0.06,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.0l-0.08,0.08l-0.0,0.02l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.0l-0.08,0.08l0.0,0.08l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.0,0.0l-0.01,0.01l-0.12,-0.12l0.03,-0.03l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.2,-0.2l0.01,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.29,0.0l0.02,-0.02l0.04,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.01,-0.01l0.01,-0.01l0.0,-0.0l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.01,-0.01l0.01,-0.01l0.12,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.08l-0.4,-0.4l-0.04,0.0l-0.06,0.06l-0.15,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.19,0.0l-0.02,-0.02l-0.1,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.08,0.08l0.0,0.0l0.08,0.08l-0.01,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.19,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.08,0.08l0.0,0.02l0.02,0.02l-0.0,0.0l0.29,0.29l0.0,0.06l0.01,0.01l-0.01,0.01l-0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.21l0.02,0.02l0.0,0.02l0.29,0.29l0.0,0.17l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.0,0.0l-0.12,0.12l-0.02,0.0l-0.19,0.19l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.1,0.1l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.25,0.25l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l-0.0,0.02l-0.1,0.1l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.04l-0.0,0.06l-0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.15l0.04,0.04l-0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l-0.0,0.02l0.33,0.33l-0.0,0.0l0.02,0.02l-0.05,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.46l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.19,-0.19l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.06l-0.04,-0.04l0.0,-0.08l-0.4,-0.4l-0.1,0.0l-0.4,0.4l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.17,0.17l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.23l-0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l-0.01,0.0l-0.02,0.02l-0.04,0.0l-0.27,0.27l-0.04,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.1,0.1l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.0,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l-0.04,0.0l-0.15,0.15l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.08,0.08l-0.02,0.0l-0.06,0.06l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l0.0,-0.17l-0.4,-0.4l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.25,0.25l-0.08,-0.08l0.0,-0.06l0.02,-0.02l0.0,-0.23l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.14l0.06,0.06l0.02,0.0l0.02,0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.25l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l-0.0,-0.08l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.06l0.08,-0.08l0.0,-0.25l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.06,0.06l-0.1,-0.1l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.13l0.04,-0.04l0.0,-0.08l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,0.0l0.4,-0.4l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.25l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.0,-0.0l-0.17,-0.17l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.06,0.0l-0.4,0.4l0.0,0.04l0.4,0.4l0.02,0.0l0.04,0.04l0.06,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.0,0.17l-0.25,0.25l-0.0,0.0l-0.04,0.04l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.12,0.12l0.0,0.13l-0.02,0.02l-0.0,0.15l-0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.17,0.17l0.0,0.0l0.02,0.02l0.0,0.0l0.08,0.08l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.04,0.04l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.17l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.08l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.1l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.23l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.23l-0.02,0.02l0.0,0.06l-0.04,0.04l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.04,0.04l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.21,0.21l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.06,-0.06l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.06,-0.06l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.19,-0.19l0.0,-0.0l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.15l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.04,-0.04l-0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.03,-0.03l-0.01,-0.01l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.08,-0.08l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.21,-0.21l-0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.03,-0.03l-0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.17,-0.17l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.19,-0.19l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.05,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.08l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.35l-0.37,-0.37l0.0,-0.21l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.25l0.02,-0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.21,-0.21l0.0,-0.0l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.21l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.13l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.04,-0.04l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.05l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.02,-0.01l-0.0,-0.01l-0.02,0.01l0.0,-0.01l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02ZM220.16,687.61l0.0,0.02l0.4,0.4l0.19,0.0l0.02,-0.02l0.1,0.0l0.04,-0.04l0.12,0.0l0.08,-0.08l0.04,-0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.08,-0.08l0.02,0.0l0.01,-0.01l0.01,0.01l0.12,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.06,0.0l0.04,0.04l0.06,0.0l0.08,0.08l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.08,0.08l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.06,0.0l0.04,0.04l0.06,0.0l0.02,0.02l0.15,0.0l0.02,0.02l-0.31,0.31l0.0,0.02l-0.06,0.06l0.0,0.0l-0.04,0.04l-0.0,0.06l-0.02,0.02l0.0,0.29l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.1,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.17,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.08,0.0l0.02,0.02l0.08,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.15,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.0,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.13l0.02,-0.02l-0.0,-0.1l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.1l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.23l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.4l-0.02,-0.02l0.0,-0.05l0.04,0.04l0.04,0.0l0.06,0.06l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.12,0.0l0.02,0.02l0.1,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.12,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l-0.0,0.02l0.02,0.02l0.0,0.0l0.01,0.01l0.37,0.37l0.0,0.0l0.1,0.1l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.19,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.54,0.0l0.01,-0.01l0.01,0.01l0.23,0.0l0.02,0.02l0.29,0.0l0.02,0.02l0.1,0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.29,0.0l0.02,-0.02l0.15,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.13,-0.13l0.02,0.0l0.0,0.12l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.0,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.21l0.02,0.02l-0.0,0.0l0.01,0.01l-0.01,0.01l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.06,0.06l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.06,0.06l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.08,0.08l0.0,0.02l-0.1,0.1l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.1,0.1l-0.0,0.0l-0.1,0.1l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.04,0.0l-0.15,0.15l-0.04,0.0l-0.06,0.06l-0.04,0.0l-0.02,0.02l-0.15,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.17,0.17l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.17,0.17l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.12,0.12l0.0,0.04l-0.02,0.02l0.0,0.0l-0.12,0.12l0.0,0.0l-0.08,0.08l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.06,0.06l-0.02,0.0l-0.23,0.23l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.09,0.09l-0.04,0.04l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.04l-0.08,0.08l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.04l-0.04,0.04l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.1,0.1l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.06,0.0l-0.1,0.1l-0.13,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.08,-0.08l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.19,-0.19l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.13,-0.13l-0.0,0.0l-0.1,-0.1l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.21,-0.21l-0.02,0.0l-0.04,-0.04l-0.06,0.0l-0.06,-0.06l-0.02,0.0l-0.01,0.01l-0.03,-0.03l-0.0,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.13,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.1,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.19,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.33,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.1,0.0l-0.1,0.1l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.1,-0.1l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.0,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.06l-0.08,-0.08l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l-0.01,-0.01l0.0,-0.02l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.27l-0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.14,-0.14l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.0,0.0l0.02,-0.02l0.02,0.0l0.03,-0.03l0.01,0.01l0.04,0.0l0.02,-0.02l0.02,0.0l0.08,-0.08l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.04,0.0l0.06,-0.06l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.04,-0.04l0.02,0.0l0.04,-0.04l0.02,0.0l0.06,-0.06l0.0,0.0l0.06,-0.06l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.06,-0.06l0.0,-0.02l0.02,-0.02l-0.0,-0.05l0.16,0.16l0.0,0.0l-0.02,0.02l0.0,0.1l0.04,0.04l0.0,0.08l0.4,0.4l0.02,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.35,0.0l0.02,-0.02l0.06,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.12,0.0l-0.02,0.02l-0.25,0.0l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.21l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.25,0.0l-0.01,0.01l-0.32,-0.32l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.1,0.0l-0.04,0.04l-0.02,0.0l-0.04,0.04l-0.0,0.0l-0.4,0.4l0.0,0.06l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.31l-0.02,0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l0.0,-0.02l0.04,-0.04l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.21l-0.02,-0.02l0.0,-0.0l-0.4,-0.4l-0.04,0.0l-0.02,-0.02l-0.19,0.0l-0.14,0.14l-0.28,-0.28l-0.02,0.0l0.0,-0.02l-0.0,-0.0l0.4,-0.4l0.0,-0.02l-0.4,-0.4l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.04,0.04l-0.06,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.29,0.29l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.06,0.06l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.29,0.29l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.18,0.18l-0.03,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.13,0.13l-0.04,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.08,0.0l-0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.08l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.19l-0.4,-0.4l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.08,-0.08l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.21,-0.21l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.17,-0.17l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.13,-0.13l-0.02,0.0l-0.02,-0.02l-0.01,-0.0l-0.18,-0.18l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.06,-0.06l-0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.01l0.02,0.02l0.02,0.0l0.06,0.06l0.0,0.0l0.06,0.06l0.02,0.0l0.04,0.04l0.02,0.0l0.13,0.13l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.15,0.15l0.02,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.02,0.0l0.1,0.1l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.1,0.1l0.0,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.04,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.29,0.0l0.02,0.02l0.08,0.0l0.02,-0.02l0.46,0.0l0.02,-0.02l0.25,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.08,-0.08l0.02,0.0l0.08,-0.08l0.01,-0.01l0.02,0.0l0.1,-0.1l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.19,0.19l0.02,0.0l0.04,0.04l0.02,0.0l0.25,0.25l0.02,0.0l0.27,0.27l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.06,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.06,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.27,0.0l0.02,-0.02l0.04,0.0l0.02,0.02l0.13,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.06,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.04,-0.04l0.0,0.01l-0.02,0.02l-0.0,0.13l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l-0.0,0.0l0.06,0.06l-0.0,0.0l0.15,0.15ZM232.51,687.44l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.19l-0.02,-0.02l0.0,-0.03l0.15,0.15l-0.03,0.03l0.0,0.06l-0.02,0.0l-0.12,0.12l0.0,-0.05ZM232.77,689.18l-0.01,0.01l-0.04,0.0l-0.14,0.14l0.0,-0.03l-0.02,-0.02l0.0,-0.08l0.14,0.0l0.02,-0.02l0.05,0.0ZM236.99,715.97l0.0,-0.02l-0.02,-0.02l0.0,-0.01l0.04,0.04l0.02,0.0l0.02,0.02l0.08,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.06l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.05,-0.05l-0.05,-0.05l-0.0,-0.0l-0.08,-0.08ZM241.25,713.43l-0.12,-0.12l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.19,-0.19l-0.0,-0.02l-0.06,-0.06l-0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.01,0.0l0.02,-0.02l0.08,0.0l0.25,-0.25l0.0,0.07l0.4,0.4l0.0,0.0l0.05,0.05l-0.28,0.28l-0.04,0.0ZM241.3,711.94l-0.01,-0.01l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.01,0.0l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.14l0.3,0.3l0.0,0.0l0.02,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l-0.0,0.04l-0.02,0.02l0.0,0.08l0.04,0.04l0.0,0.0l0.04,0.04l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l-0.0,0.04l-0.03,0.03ZM253.22,717.94l-0.0,-0.08l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.14,-0.14l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.4,0.4l0.0,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.15l0.01,0.01l-0.01,0.01l0.0,0.1l-0.02,0.02l0.0,0.21l-0.01,0.01l-0.01,-0.01l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l0.02,-0.02l0.0,-0.1l-0.04,-0.04l0.0,-0.02l-0.4,-0.4l-0.04,0.0l-0.28,0.28l-0.16,-0.16l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l0.15,-0.15l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.13l-0.02,-0.02ZM254.44,720.62l-0.08,-0.08l-0.02,0.0l0.0,-0.08l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.01,-0.01l-0.0,0.16l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l-0.04,0.04l0.0,0.01ZM258.23,713.25l0.01,-0.01l0.0,-0.06l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.04,0.04l0.01,0.01l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.0l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.08,0.08l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.05,0.05l-0.08,0.08l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.03,0.03l-0.01,-0.01l-0.04,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.03,-0.03l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.08,-0.08l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.08,-0.08l-0.02,-0.0l-0.04,-0.04l-0.06,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.04,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.0,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.1l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.15l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l-0.0,-0.17l-0.01,-0.01ZM260.71,713.93l0.02,-0.02l-0.0,-0.03l0.1,0.1l0.0,0.0l0.1,0.1l0.02,0.0l0.06,0.06l0.0,0.0l0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.04,0.04l-0.37,0.0l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.12,-0.12l-0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06ZM259.65,712.12l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.4l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.21l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.01,-0.01l0.0,0.05l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.25l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.04,0.04l-0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.15l-0.02,0.02l-0.0,0.19l-0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.08l0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.13l0.02,0.02l-0.0,0.1l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.44l0.06,0.06l0.0,0.16l-0.05,-0.05l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.3,-0.3l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.1,-0.1l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02ZM258.88,723.24l0.04,0.04l0.02,0.0l0.08,0.08l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.1,0.0l0.02,-0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.15,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.17,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.33,0.33l0.0,0.0l0.06,0.06l0.02,0.0l0.06,0.06l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.04,0.0l0.02,0.02l0.17,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.21,0.21l0.02,0.0l0.04,0.04l0.23,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.0,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.03l0.01,0.01l-0.01,0.01l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.4,0.4l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.17,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.01,-0.01l0.01,0.01l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.13,0.13l0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.04l0.06,0.06l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.08l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.41l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.17,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.31,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.19,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.44,0.0l-0.02,-0.02l-0.15,0.0l-0.06,0.06l-0.06,0.0l-0.02,0.02l-0.27,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.19,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.33,0.0l-0.02,0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,0.02l-0.15,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.33,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.65,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.17,0.0l-0.02,-0.02l-0.19,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.37,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.08,0.0l-0.02,0.02l-0.27,0.0l-0.02,0.02l-0.33,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.13l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.15l0.02,-0.02l0.0,-0.27l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.15l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.1l-0.01,-0.01l0.01,-0.01l0.0,-0.08l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.15l-0.04,-0.04l0.0,-0.12l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.25l-0.02,-0.02l-0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.08l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.08,-0.08l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.4,0.4l0.04,0.0l0.02,0.02l0.02,0.0l0.27,0.27l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.21,0.21l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.12,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.06,-0.06l0.04,0.0l0.02,-0.02l0.0,0.0l0.06,-0.06l0.04,0.0l0.02,-0.02l0.04,0.0l0.01,-0.01l0.24,0.24l0.02,0.0ZM256.24,720.06l0.0,-0.0l-0.29,-0.29l0.0,-0.04l-0.02,-0.02l0.0,-0.19l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.21l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.06,-0.06l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.17,-0.17l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.06,-0.06l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.02,0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.0,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.08,-0.08l0.02,0.0l0.35,-0.35l0.14,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.19,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.13,-0.13l0.04,0.0l0.06,-0.06l0.02,0.0l0.04,-0.04l0.02,0.0l0.25,-0.25l0.06,0.0l0.02,-0.02l0.19,0.0l0.02,-0.02l0.04,0.0l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.19l0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.13l-0.02,0.02l0.0,0.02l0.02,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.35l0.02,0.02l0.0,0.25l0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.15l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.1,0.1l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.0,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.06,0.0l-0.02,-0.02l-0.05,-0.05l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,-0.02l-0.42,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.15,0.15l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.05,0.05l-0.05,-0.05ZM263.01,722.87l0.01,-0.01l0.01,0.0l-0.01,0.01l-0.01,0.0ZM263.08,722.84l0.01,0.0l-0.01,0.01l-0.01,0.0l0.01,-0.01ZM264.53,723.26l-0.01,-0.01l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.12,-0.12l0.0,-0.0l-0.02,-0.02l0.0,-0.02l0.12,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.06,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.06,-0.06l0.02,0.0l0.02,-0.02l0.0,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,0.0l0.04,-0.04l0.02,0.0l0.4,-0.4l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.03,-0.03l0.0,0.03l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.13l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.32,0.32ZM264.94,714.95l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.1,-0.1l0.0,-0.0l-0.08,-0.08l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.27,-0.27l0.0,-0.0l-0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.27l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.23l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.35,-0.35l0.08,-0.08l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.08,-0.08l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.19l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.21,-0.21l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.4,-0.4l-0.08,0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.19l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.06,-0.06l-0.0,-0.0l0.0,-0.0l-0.02,-0.02l-0.01,-0.01l0.0,-0.0l-0.0,-0.0l-0.1,-0.1l0.0,-0.15l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l-0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.23l0.02,-0.02l-0.0,-0.08l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.08l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.06,-0.06l-0.0,-0.0l0.37,-0.37l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.1l-0.04,-0.04l0.0,-0.02l-0.06,-0.06l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.29,-0.29l0.17,-0.17l0.0,-0.13l-0.02,-0.02l-0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.01l0.22,0.22l0.0,0.0l0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.1l0.02,0.02l-0.0,0.1l0.02,0.02l0.0,0.02l0.4,0.4l0.18,0.0l-0.08,0.08l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.02,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.21l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.21,0.21l-0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.08,0.08l0.0,0.06l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.19,0.19l0.18,0.19l0.0,0.0l0.02,0.02l-0.0,0.0l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.04,0.04l0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.27l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.08l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.08l-0.02,0.02l-0.0,0.15l-0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.12,0.12l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l-0.12,0.12l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.04,0.04l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.02l0.29,0.29l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.08,0.08l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.15l-0.02,0.02l-0.0,0.06l-0.02,0.02l-0.0,0.0l-0.21,0.21l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.4,0.4l0.02,0.0l0.06,0.06l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.31,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.06,0.06l0.02,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.22l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.25,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l-0.0,0.01l-0.01,-0.01ZM272.53,713.77l0.0,-0.02l0.02,-0.02l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.06l0.02,-0.02l-0.0,-0.03l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.13,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.18,-0.18l0.04,0.0l0.02,0.02l0.15,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.15,0.0l0.02,-0.02l0.04,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l-0.0,-0.03l0.01,0.01l-0.0,0.06l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.08,0.08l0.0,0.0l0.02,0.02l-0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.1l0.02,0.02l0.0,0.15l0.02,0.02l-0.0,0.13l0.02,0.02l0.0,0.31l0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.06l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.01,0.01l-0.04,0.04l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.04,0.0l-0.08,-0.08l-0.04,0.0l-0.04,-0.04l-0.04,0.0l-0.04,-0.04l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.17,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.08,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.13,0.13l-0.04,0.0l-0.04,-0.04l-0.0,0.0l-0.02,-0.02l-0.0,0.0l-0.02,-0.02l-0.02,0.0l-0.14,-0.15l-0.0,-0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l0.0,-0.02l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.15l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.06l-0.02,-0.02l0.0,-0.13l-0.02,-0.02l-0.0,-0.06l-0.02,-0.02ZM290.1,712.89l0.02,0.0l0.4,-0.4l0.0,-0.0l0.04,-0.04l0.0,-0.01l0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.0l0.02,0.02l-0.0,0.0l0.4,0.4l0.19,0.0l0.02,0.02l0.08,0.0l0.4,-0.4l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.04l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.23,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,-0.02l0.29,0.0l0.04,-0.04l0.04,0.0l0.4,-0.4l0.0,-0.0l0.04,-0.04l0.0,-0.0l0.04,-0.04l-0.0,-0.02l0.02,-0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.02l0.06,0.06l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.04l0.06,0.06l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.06l0.01,0.01l-0.01,0.01l0.0,0.04l0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.1l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.06l-0.04,0.04l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.06l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l-0.0,0.0l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.08l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.1l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.17l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.23l-0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.1l0.01,0.01l-0.01,0.01l-0.0,0.1l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.1l0.01,0.01l-0.01,0.01l0.0,0.1l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.08l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.1l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.38l-0.02,0.02l0.0,0.08l0.01,0.01l-0.01,0.01l0.0,0.02l0.02,0.02l0.0,0.15l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.02l0.01,0.01l-0.01,0.01l-0.0,0.13l-0.02,0.02l0.0,0.04l0.01,0.01l-0.01,0.01l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.1l-0.02,0.02l0.0,0.06l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.0l-0.08,0.08l0.0,0.0l-0.04,0.04l-0.02,0.0l-0.17,0.17l-0.08,0.08l-0.06,0.0l-0.04,0.04l-0.1,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.1,0.0l-0.08,0.08l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l0.0,-0.01l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.23l0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.06,-0.06l0.0,-0.0l-0.4,-0.4l-0.02,0.0l-0.06,-0.06l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.13l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.06l-0.01,-0.01l0.01,-0.01l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.35l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l-0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.25,-0.25l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.15,-0.15l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.06,-0.06l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.04l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.08l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.25l0.02,-0.02l0.0,-0.29ZM289.58,707.19l-0.02,0.0l-0.01,0.01l-0.04,-0.04l0.3,-0.3l0.0,-0.0l0.02,-0.02l-0.0,-0.08l0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.04l-0.21,-0.21l0.23,-0.23l0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.04,-0.04l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.03l0.07,0.07l0.0,0.0l0.4,0.4l0.02,0.0l0.02,0.02l0.02,0.0l0.13,0.13l0.02,0.0l0.1,0.1l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.1,0.0l-0.2,0.2l-0.0,0.04l-0.06,0.06l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.52,0.0l-0.02,-0.02l-0.12,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.06,0.06ZM299.19,715.61l0.0,0.01l-0.01,0.01l0.0,-0.01l0.01,-0.01ZM294.83,706.25l0.01,0.01l-0.01,0.01l0.0,-0.01l0.01,-0.01ZM297.22,708.05l-0.0,-0.08l-0.12,-0.12l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.02l-0.29,-0.29l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.05,-0.05l-0.03,-0.03l0.0,-0.02l-0.06,-0.06l-0.0,-0.0l-0.35,-0.35l0.17,-0.17l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.06,-0.06l-0.0,-0.04l0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.04l-0.4,-0.4l-0.12,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.2,0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.35l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l0.0,-0.12l0.04,0.0l0.02,-0.02l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.16,-0.16l0.01,0.0l0.27,-0.27l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.19,0.0l0.02,-0.02l0.02,0.02l0.02,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.06l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.21l0.02,0.02l-0.0,0.13l0.02,0.02l0.0,0.08l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.06l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.27l0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.06,0.06l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.08,0.08l-0.0,0.04l0.02,0.02l0.0,0.0l0.04,0.04l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.0l0.4,0.4l0.02,0.0l0.04,0.04l0.02,0.0l0.06,0.06l0.06,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.08,0.08l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.13,0.13l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.08,0.08l0.02,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.05,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.21,0.21l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.4,0.4l0.0,0.02l-0.13,0.13l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.04,0.04l0.0,0.02l-0.08,0.08l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.04,0.04l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.04,0.0l-0.04,-0.04l-0.02,0.0l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l-0.0,-0.04l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.04,-0.04l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l-0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.06l-0.02,-0.02ZM295.02,704.98l0.01,-0.01l0.0,-0.02l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.17l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.4,-0.4l-0.04,0.0l0.0,-0.04l-0.02,-0.02l0.0,-0.13l0.02,-0.02l0.0,-0.04l0.12,-0.12l0.0,-0.02l0.1,-0.1l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.36,-0.36l0.01,-0.01l0.0,-0.13l-0.02,-0.02l-0.0,-0.1l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l-0.0,-0.19l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l0.0,-0.1l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.02,-0.02l0.0,-0.25l-0.01,-0.01l0.01,-0.01l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.12,-0.12l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.06,-0.06l0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.0l-0.37,-0.37l0.2,0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.33,0.33l0.02,0.0l0.08,0.08l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.33,0.0l0.02,-0.02l0.15,0.0l0.02,-0.02l0.1,0.0l0.0,0.1l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.15,0.15l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.0l-0.1,0.1l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.04,0.04l-0.0,0.04l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.06,0.06l0.0,0.0l0.02,0.02l-0.0,0.0l0.1,0.1l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l-0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l-0.06,0.06l-0.0,0.0l-0.4,0.4l0.0,0.19l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.1,0.1l-0.02,0.02l-0.0,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.29l0.02,0.02l0.0,0.17l0.02,0.02l0.0,0.21l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.01,0.01l0.0,-0.14l-0.01,-0.01ZM301.59,714.98l0.0,0.0l-0.0,0.0l0.0,-0.0ZM275.0,716.5l-0.02,0.02l0.0,0.17l0.02,0.02l-0.0,0.13l0.02,0.02l0.0,0.15l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.08l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.1l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.1l-0.02,0.02l0.0,0.06l-0.02,0.02l0.0,0.17l-0.02,0.02l-0.0,0.1l-0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.02l0.08,0.08l0.0,0.02l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.02l0.4,0.4l0.02,0.0l0.15,0.15l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.06,0.0l0.02,-0.02l0.1,0.0l0.02,0.02l0.15,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.08,0.0l0.04,0.04l0.04,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l-0.0,0.08l0.02,0.02l0.0,0.13l0.02,0.02l0.0,0.08l0.02,0.02l-0.0,0.04l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.04l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.02l0.01,0.01l-0.01,0.01l-0.0,0.02l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.0l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.02l-0.02,0.02l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.17,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.4,0.4l0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.04,0.04l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.25,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.1,0.0l-0.04,0.04l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.35,-0.35l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.13,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.38,0.38l-0.04,0.04l-0.0,0.0l-0.06,0.06l-0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l-0.0,0.04l-0.02,0.02l0.0,0.04l-0.02,0.02l0.0,0.27l-0.02,0.02l-0.0,0.06l-0.02,0.02l0.0,0.02l0.4,0.4l0.04,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.01l0.37,0.37l0.02,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.17,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.1,0.0l0.02,-0.02l0.08,0.0l0.02,-0.02l0.23,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.06,0.0l0.04,0.04l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.17,0.0l0.02,-0.02l0.0,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.13l0.02,-0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.1,0.0l0.02,0.02l0.15,0.0l0.04,-0.04l0.02,-0.0l0.38,-0.38l0.02,-0.02l0.01,0.01l0.01,0.01l0.0,0.02l0.06,0.06l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.04,0.04l0.0,0.0l0.04,0.04l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.04,0.04l0.0,0.02l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.1,0.1l0.0,0.0l0.02,0.02l0.0,0.0l0.29,0.29l-0.0,0.02l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.02l0.04,0.04l0.0,0.0l0.1,0.1l0.0,0.0l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.0l0.21,0.21l0.0,0.0l0.02,0.02l0.0,0.0l0.2,0.2l-0.03,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.15,0.0l-0.01,0.01l-0.01,-0.01l-0.1,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.25,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.19,0.0l-0.02,0.02l-0.25,0.0l-0.02,0.02l-0.25,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.13,0.0l-0.02,0.02l-0.25,0.0l-0.02,0.02l-0.19,0.0l-0.02,0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.19,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.27,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.23,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.29,0.0l-0.02,0.02l-0.08,0.0l-0.02,0.02l-0.33,0.0l-0.02,0.02l-0.23,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.17,0.0l-0.01,0.01l-0.01,-0.01l-0.12,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.19,0.0l-0.02,0.02l-0.02,-0.02l-0.12,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.21,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.21,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.1,0.0l-0.02,0.02l-0.13,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.15,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.17,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.06,0.0l-0.02,0.02l-0.21,0.0l-0.02,0.02l-0.29,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.25,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.15,0.0l-0.01,0.01l-0.01,-0.01l-0.04,0.0l-0.02,0.02l-0.12,0.0l-0.02,0.02l-0.46,0.0l-0.02,0.02l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.12,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.37,0.0l-0.02,0.02l-0.12,0.0l-0.02,-0.02l-0.04,0.0l-0.01,0.01l-0.01,-0.01l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.1,0.0l-0.02,0.02l-0.21,0.0l-0.02,0.02l-0.02,0.0l-0.02,-0.02l-0.19,0.0l-0.02,-0.02l-0.08,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.04,-0.04l-0.02,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.04,0.0l0.0,-0.16l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.23,-0.23l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.0l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.08,-0.08l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.08,-0.08l0.0,-0.06l0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.06l0.1,-0.1l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.01l0.01,0.01l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.4,0.4l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.1,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.0l-0.1,0.1l0.0,0.0l-0.02,0.02l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.0,0.0l-0.04,0.04l0.0,0.0l-0.02,0.02l0.0,0.08l-0.02,0.02l0.0,0.08l0.4,0.4l0.02,0.0l0.04,0.04l0.25,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.27,0.0l0.04,-0.04l0.02,0.0l0.4,-0.4l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.4,-0.4l-0.04,0.0l0.0,-0.04l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.08l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.4,-0.4l-0.0,0.0l-0.02,-0.02l-0.04,0.0l-0.04,-0.04l-0.27,0.0l0.0,-0.02l0.02,-0.02l0.0,-0.23l0.12,0.0l0.06,-0.06l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.1l0.02,-0.02l0.0,-0.13l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.01,0.0l0.02,-0.02l0.0,0.0l0.04,-0.04l0.02,0.0l0.08,-0.08l0.02,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.0,-0.0l0.04,-0.04l0.02,0.0l0.08,-0.08l0.12,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.04,0.04l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.1,0.1l0.0,0.02l-0.19,0.19l-0.28,-0.28l-0.02,0.0l-0.4,0.4l-0.0,0.0l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.02l-0.06,0.06l0.0,0.02l0.19,0.19l-0.0,0.0l0.0,0.02l0.02,0.02l0.0,0.0l0.39,0.39l-0.22,0.22l0.0,0.0l-0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.0l0.4,0.4l0.04,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.15,0.15l0.0,0.0l0.02,0.02l0.15,0.0l0.02,-0.02l0.02,0.0l0.02,-0.02l0.12,0.0l0.01,-0.01l0.03,0.03l0.0,0.0l0.06,0.06l0.02,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l0.0,-0.04l-0.02,-0.02l-0.0,-0.0l-0.06,-0.06l-0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.12,-0.12l-0.0,-0.02l-0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.0,-0.0l0.35,-0.35l-0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.02l-0.04,-0.04l0.0,-0.02l-0.02,-0.02l0.0,-0.18l0.08,0.0l0.4,-0.4l0.0,-0.0l0.02,-0.02l-0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.19l0.02,-0.02l-0.0,-0.04l0.04,0.0l0.02,0.02l0.1,0.0l0.4,-0.4l0.0,-0.04l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.1l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.19l-0.02,-0.02l0.0,-0.15l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.06l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.0,-0.02l-0.28,-0.28l0.03,-0.03l0.0,-0.02l-0.25,-0.25l0.0,-0.02l-0.02,-0.02l0.0,-0.02l-0.02,-0.02l-0.0,-0.04l-0.02,-0.02l0.0,-0.04l-0.02,-0.02l0.0,-0.08l-0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l-0.01,-0.01l0.01,-0.01l0.0,-0.04l-0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.15l0.08,-0.08l-0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.04l0.04,-0.04l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.04l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.02,0.0l0.02,-0.02l0.02,0.0l0.04,-0.04l0.02,-0.0l0.02,-0.02l0.06,0.0l0.02,-0.02l0.04,0.0l0.02,-0.02l0.02,0.02l0.08,0.0l0.02,-0.02l0.02,0.02l0.08,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.02,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.04,0.0l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.01,-0.01l0.01,0.01l0.02,0.0l0.01,-0.01l0.01,0.01l0.06,0.0l0.02,0.02l0.04,0.0l0.02,-0.02l0.02,0.02l0.06,0.0l0.02,0.02l0.02,0.0l0.02,-0.02l0.04,0.0l0.01,-0.01l0.01,0.01l0.0,0.0l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.04l0.04,0.04l0.0,0.0l0.02,0.02l0.0,0.06ZM270.2,720.15l0.02,-0.02l0.02,0.0l0.17,-0.17l0.02,0.0l0.4,-0.4l-0.0,-0.02l0.02,-0.02l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.02,-0.02l-0.0,-0.02l0.04,-0.04l0.02,0.0l0.4,-0.4l-0.0,-0.0l0.04,-0.04l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.06l0.02,-0.02l0.0,-0.06l0.02,-0.02l-0.0,-0.06l0.02,-0.02l0.0,-0.02l0.02,-0.02l0.0,-0.02l0.04,-0.04l0.0,-0.0l0.02,-0.02l0.0,-0.0l0.08,-0.08l0.0,-0.02l0.06,-0.06l0.0,-0.02l0.08,-0.08l0.04,0.0l0.05,-0.05l0.01,0.01l0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l-0.0,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.06l0.02,0.02l0.0,0.06l0.4,0.4l0.02,0.0l0.02,0.02l-0.0,0.02l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.27l0.02,0.02l0.0,0.04l-0.06,0.0l-0.4,0.4l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.04,0.04l0.0,0.0l-0.02,0.02l-0.0,0.02l-0.02,0.02l0.0,0.02l-0.02,0.02l0.0,0.04l-0.02,0.02l-0.0,0.02l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.0,0.0l-0.06,0.06l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.25,0.25l-0.06,0.0l-0.01,0.01l-0.01,-0.01l-0.08,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.02,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.06,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.04,0.0l-0.02,-0.02l-0.02,0.0l-0.04,-0.04l-0.15,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.04,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.06,0.06l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.02,0.0l-0.02,0.02l-0.0,0.0l-0.02,0.02l-0.02,0.0l-0.04,0.04l-0.02,0.0l-0.02,0.02l-0.04,0.0l0.0,-0.04l0.02,-0.02l-0.0,-0.04l0.02,-0.02l0.0,-0.04ZM226.97,707.34l-0.02,-0.02l-0.26,0.0l0.03,-0.03l0.08,0.0l0.02,-0.02l0.02,0.0l0.05,-0.04l0.02,0.0l0.02,-0.02l0.04,0.0l0.02,0.02l0.0,0.02l0.02,0.02l0.0,0.04l0.02,0.02l0.0,0.0l0.02,0.02l-0.0,0.0l0.02,0.02l-0.01,0.0l-0.02,-0.02l-0.06,0.0ZM216.61,694.01l0.0,-0.01l-0.02,-0.02l-0.0,-0.0l-0.02,-0.02l0.0,-0.0l-0.02,-0.02l0.03,0.0l0.02,0.02l0.06,0.0l0.01,0.01l-0.01,0.01l0.0,0.06l0.01,0.01l-0.06,-0.04Z", "name": "Bayelsa"}, "2022": {"path": "M361.93,516.64l-0.01,-0.02l0.29,-0.09l0.59,0.41l1.67,1.76l0.05,0.04l1.35,1.0l0.97,1.15l0.35,0.14l0.82,-0.1l1.51,1.18l0.25,0.08l2.13,0.0l0.39,-0.32l0.55,-2.84l0.01,-0.1l-0.13,-2.41l1.02,-1.55l2.37,-1.11l0.0,-0.0l0.15,-0.07l3.62,-1.71l0.02,-0.01l1.55,-0.86l0.05,-0.03l2.15,-1.61l0.06,-0.06l0.14,-0.16l1.71,-1.99l0.07,-0.11l0.79,-1.88l0.02,-0.05l0.82,-2.95l0.27,-0.84l0.45,-1.39l0.02,-0.07l0.26,-1.98l0.0,-0.02l0.19,-2.12l0.06,-0.62l0.51,-1.44l1.43,-1.4l0.11,-0.21l0.43,-2.2l-0.27,-0.46l-1.79,-0.57l-0.19,-0.01l-2.52,0.45l-0.17,-0.01l-1.08,-0.06l-1.33,-1.11l-0.37,-1.66l-0.0,-0.01l-0.57,-2.24l-0.52,-2.63l-0.11,-2.54l-0.0,-0.04l-0.36,-2.55l-0.2,-2.82l-0.02,-0.27l0.24,-3.11l0.0,-0.03l0.02,-2.59l-0.0,-0.04l-0.19,-1.82l-0.08,-0.82l-0.03,-0.11l-0.88,-2.24l-0.11,-0.16l-1.42,-1.23l-1.79,-1.87l-0.93,-1.74l-0.01,-0.02l-1.27,-2.06l-0.39,-2.34l0.15,-2.79l-0.01,-0.11l-0.39,-1.78l0.08,-2.13l0.22,-0.86l0.57,0.03l2.71,0.71l3.99,1.51l0.05,0.02l3.33,0.74l0.03,0.01l4.38,0.63l0.05,0.0l2.35,0.06l3.43,0.8l1.37,0.79l0.06,0.03l0.7,0.27l0.22,-0.06l0.15,0.09l0.0,0.0l1.34,0.79l0.06,0.03l1.67,0.62l2.68,1.02l0.02,0.01l0.51,0.16l1.74,0.54l1.72,1.06l0.01,0.0l2.5,1.49l0.03,0.01l1.7,0.85l0.13,0.04l3.92,0.45l0.64,0.2l1.72,0.54l0.17,0.02l1.14,-0.15l1.97,1.4l1.87,1.87l0.16,0.1l1.75,0.56l1.26,0.75l0.09,0.04l1.08,0.32l0.12,0.06l2.12,0.96l0.44,-0.08l1.37,-1.33l0.12,-0.26l0.11,-1.65l-0.03,-0.17l-0.24,-0.62l-0.62,-1.63l-0.61,-1.88l-0.02,-0.05l-0.92,-1.93l-0.62,-1.36l-0.33,-1.39l-0.03,-0.09l-0.53,-1.02l-0.55,-1.26l-0.48,-1.65l-0.04,-0.09l-0.68,-1.14l-0.2,-1.58l0.12,-1.29l0.23,-1.25l0.65,-1.18l0.03,-0.06l0.28,-0.81l0.65,-0.65l0.03,-0.04l0.73,-0.93l1.36,-0.75l1.2,-0.66l1.2,-0.66l0.01,-0.01l0.88,-0.52l1.59,-0.32l1.37,-0.21l0.04,-0.0l1.63,-0.0l1.29,0.14l1.86,0.39l1.14,0.49l1.9,0.88l0.04,0.02l1.22,0.4l1.56,0.53l0.01,0.0l1.44,0.46l1.87,0.64l1.73,0.62l1.27,0.46l0.06,0.02l0.93,0.19l2.65,0.56l2.17,0.69l0.06,0.01l2.52,0.43l0.01,0.0l2.52,0.37l0.04,0.0l3.39,0.13l0.05,-0.0l2.2,-0.17l2.05,-0.12l0.49,0.02l0.42,-0.4l0.0,-0.09l0.2,0.14l4.23,2.91l8.96,7.17l-0.69,0.62l-0.1,0.13l-0.63,1.4l-0.42,0.34l-0.12,0.17l-0.32,0.87l-0.62,0.66l-0.04,0.05l-0.49,0.74l-0.72,1.01l-0.05,0.11l-0.29,0.89l0.19,0.48l1.01,0.54l0.14,0.04l1.3,0.16l0.37,-0.16l0.06,-0.07l0.76,-0.45l0.73,-0.32l1.64,-0.62l0.06,-0.03l1.31,-0.75l1.37,-0.36l0.03,-0.01l1.05,-0.36l0.0,-0.0l0.2,-0.07l0.88,-0.16l1.46,-0.18l1.3,-0.08l0.06,-0.01l1.71,-0.39l1.59,0.02l0.08,-0.01l1.87,-0.36l1.34,0.09l0.02,0.0l0.68,0.01l0.92,0.01l1.43,0.05l1.95,0.36l0.06,0.01l1.61,0.06l0.01,0.0l1.81,0.01l2.41,0.51l1.85,0.48l0.04,0.01l2.02,0.3l0.96,0.25l1.62,0.54l1.26,1.05l0.02,0.02l1.24,0.9l0.7,0.9l0.02,0.02l1.11,1.21l0.03,0.03l0.83,0.75l0.91,0.97l0.66,0.77l0.46,0.98l0.1,0.13l1.06,0.89l1.12,1.65l0.03,0.04l0.99,1.09l0.92,1.28l0.05,0.06l1.21,1.13l0.23,0.22l0.97,0.99l0.02,0.02l1.27,1.14l0.03,0.02l0.58,0.43l1.34,0.99l0.24,0.18l1.71,1.55l0.8,0.79l1.58,1.58l-0.12,0.58l0.09,0.34l1.28,1.49l-0.27,1.05l0.05,0.32l0.6,0.91l0.01,1.02l-0.18,1.37l-0.3,0.73l-0.03,0.1l-0.2,1.64l-0.58,1.56l-0.0,0.01l-0.6,1.72l-0.74,1.24l-0.04,0.1l-0.41,1.51l-0.46,0.94l-0.04,0.18l0.03,2.2l0.0,0.05l0.02,0.19l0.16,1.24l0.08,1.05l0.02,0.29l0.0,0.04l0.2,1.16l-0.16,0.85l-0.45,0.85l-0.58,0.74l-1.18,1.01l-0.96,0.53l-0.22,0.12l-1.25,0.61l-0.09,0.06l-1.03,0.93l-1.35,1.21l-0.03,0.03l-0.77,0.82l-0.07,0.1l-0.05,0.11l-0.86,0.74l-0.08,0.09l-0.83,1.29l-0.62,0.89l-0.03,0.05l-0.68,1.33l-0.8,1.42l-0.01,0.02l-0.77,1.61l-0.02,0.05l-0.29,0.92l-0.01,0.04l-0.62,3.16l-0.0,0.0l-0.76,4.03l-0.0,0.03l-0.23,2.26l-0.39,3.0l-0.53,1.42l0.07,0.4l0.6,0.72l-0.34,1.11l-0.01,0.19l0.2,1.02l-0.1,1.41l-0.0,0.03l0.05,2.55l-0.02,0.68l0.0,0.03l0.1,1.69l-0.12,0.76l-0.0,0.05l-0.05,1.56l-0.09,0.71l-0.22,1.06l-0.31,0.62l-0.04,0.18l0.02,1.26l-0.14,0.38l-0.61,1.47l-0.01,0.02l-0.17,0.5l-0.01,0.03l-0.32,1.23l-0.01,0.04l-0.06,0.44l-0.0,0.07l0.02,0.69l-0.35,1.05l-0.0,0.0l-0.12,0.37l-0.02,0.17l0.01,0.08l-0.0,0.0l-0.07,0.01l-0.21,0.08l-0.17,0.14l-0.49,-0.31l-0.2,-0.06l-0.38,-0.02l-0.23,-0.01l-0.2,-0.06l-0.2,-0.06l-0.24,-0.18l-0.05,-0.04l-0.26,-0.08l-0.17,0.01l-0.16,0.01l-0.26,0.12l-0.05,0.05l-0.11,0.11l-0.1,0.16l-0.3,0.93l-0.2,0.25l-0.21,0.27l-0.09,0.25l0.0,0.59l-0.05,0.18l-0.08,0.31l0.04,0.3l0.11,0.18l0.04,0.06l0.04,0.65l-0.01,0.01l-0.09,0.1l-0.27,0.16l-0.98,0.57l-0.09,0.05l-1.73,1.01l-0.41,0.12l-0.56,0.17l-0.8,-0.03l-0.19,-0.01l-0.31,-0.06l-0.68,-0.13l-1.0,-0.2l-1.06,-0.21l-0.05,0.0l-0.18,-0.52l-0.02,-0.05l-0.53,-1.03l-0.05,-0.08l-0.79,-0.91l-0.52,-0.85l-0.02,-0.03l-0.76,-1.0l-0.6,-0.92l-0.04,-0.05l-0.55,-0.6l-0.0,-0.0l-0.28,-0.3l-0.7,-0.77l-0.59,-0.81l-0.61,-0.99l-0.38,-0.75l-0.11,-0.14l-1.41,-1.07l-0.65,-0.88l-0.04,-0.05l-1.13,-1.12l-0.38,-0.43l-0.71,-0.87l-0.68,-0.9l-0.08,-0.08l-0.67,-0.49l-0.89,-1.02l-0.23,-0.13l-0.74,-0.13l-0.91,-0.67l-0.19,-0.08l-0.72,-0.08l-0.01,-0.0l-1.07,-0.09l-0.18,0.03l-0.2,0.08l-0.2,-0.06l-0.05,-0.01l-0.7,-0.12l-0.07,-0.01l-0.59,-0.0l-0.05,0.0l-1.22,0.15l-0.48,0.06l-0.09,0.02l-0.37,0.13l-0.02,0.01l-1.06,0.43l-0.38,0.12l-0.53,0.17l-0.56,0.13l-0.01,0.0l-0.87,0.23l-0.86,0.21l-0.07,0.02l-0.53,0.05l-0.1,0.02l-0.92,0.33l-1.04,0.1l-0.5,0.04l-0.08,0.01l-1.3,0.38l-0.6,0.13l-0.67,0.01l-0.71,-0.01l-0.0,-0.0l-1.13,-0.01l-0.45,-0.12l-0.06,-0.01l-0.29,-0.04l-0.01,-0.0l-0.75,-0.08l-0.98,-0.24l-0.14,-0.14l-0.05,-0.04l-0.65,-0.49l-0.03,-0.02l-0.38,-0.24l0.05,-0.74l0.15,-0.06l0.24,-0.43l-0.11,-0.67l0.12,-0.73l0.0,-0.01l0.14,-0.92l0.0,-0.01l0.12,-0.92l0.0,-0.03l0.01,-0.16l0.04,-0.89l-0.0,-0.08l-0.19,-1.22l-0.06,-0.15l-0.49,-0.77l-0.14,-0.13l-0.07,-0.04l-0.58,-0.33l-0.75,-0.46l-0.0,-0.0l-0.26,-0.16l-0.91,-0.55l-1.15,-0.83l-0.53,-0.39l-0.02,-0.01l-1.78,-1.14l-1.56,-1.02l-0.05,-0.03l-0.94,-0.42l-1.84,-1.15l-0.06,-0.03l-1.46,-0.6l-0.06,-0.02l-1.62,-0.39l-0.0,-0.0l-2.05,-0.48l-1.38,-0.57l-0.09,-0.03l-1.07,-0.16l-0.09,-0.0l-0.51,0.04l-0.96,0.04l-0.06,0.01l-1.2,0.24l-0.05,0.01l-0.18,0.06l-1.4,0.41l-0.04,0.01l-1.21,0.49l-1.29,0.3l-0.16,0.08l-1.84,1.46l-0.15,0.35l0.08,0.88l0.08,0.95l0.02,0.1l0.74,2.03l0.01,1.27l-0.89,0.63l-1.58,0.81l-0.04,0.02l-1.05,0.71l-3.66,0.98l-4.53,-0.16l-2.44,-0.81l-0.22,-0.01l-2.33,0.55l-0.22,0.14l-1.62,2.1l-1.14,1.02l-1.6,1.26l-3.11,0.73l-0.09,-0.07l-0.91,-0.72l-1.02,-1.9l-0.57,-1.61l-0.42,-3.45l-0.16,-0.27l-2.12,-1.58l-0.59,0.13l-0.73,1.38l-0.02,0.05l-0.41,1.17l-2.33,0.02l-0.1,0.01l-1.1,0.31l-0.41,0.12l-0.23,0.17l-0.97,1.51l-0.34,0.54l-0.01,0.02l-0.77,1.35l-2.11,1.02l-1.56,-0.13l-1.9,-0.16l-0.08,0.0l-4.18,0.48l-0.35,0.32l-0.34,1.63l-0.01,0.07l-0.07,2.23l-0.54,2.14l-0.01,0.04l-0.54,3.87l-1.11,2.3l-1.41,0.59l-0.85,-0.36l-1.09,-0.46l-2.18,-1.95l-2.56,-2.41l-0.7,-1.68l0.18,-0.98l0.15,-0.83l1.11,-2.01l0.03,-0.06l0.69,-1.86l0.01,-0.04l0.77,-2.99l0.01,-0.13l-0.23,-3.16l-0.01,-0.06l-0.56,-2.38l-0.3,-1.28l-0.06,-0.13l-1.72,-2.6l-0.09,-0.1l-1.85,-1.4l-0.19,-0.08l-3.39,-0.42l-0.0,-0.0l-0.01,-0.0l-0.3,0.09l-1.23,1.0l-0.04,0.04l-1.38,1.48l-2.28,0.8l-1.31,-0.69l-0.59,-0.31l-1.45,-0.76l-1.41,-1.1l-0.0,-0.0l-2.88,-2.22l-1.87,-2.05l-1.43,-1.78l-0.03,-0.04l-0.0,-0.0l-0.1,-0.12l-1.12,-2.54l-0.86,-2.96l-0.03,-0.08l-1.22,-2.18l0.07,-0.27l0.05,-0.02l0.04,-0.03l0.04,-0.02l-0.07,-0.14l0.0,-0.01l-0.01,-0.0Z", "name": "Benue"}, "2023": {"path": "M702.78,293.15l-4.53,-0.48l-3.05,-0.68l-0.0,-0.0l-0.09,-0.02l-2.18,-1.05l-2.31,-1.52l-2.12,-1.86l-0.11,-0.22l-1.15,-2.44l-1.31,-3.14l-0.05,-0.08l-0.34,-0.45l-0.84,-1.14l-0.14,-0.12l-2.41,-1.24l-0.08,-0.03l-2.67,-0.73l-1.65,-0.8l-2.14,-2.13l-2.88,-4.17l-0.91,-3.2l1.49,-2.44l2.19,-3.28l2.47,-3.25l0.07,-0.16l0.75,-3.65l-0.01,-0.21l-0.88,-2.61l-0.03,-0.06l-0.51,-0.94l0.19,-0.05l2.99,-0.65l0.22,-0.14l2.03,-2.45l0.02,-0.03l1.17,-1.71l0.91,-1.33l0.07,-0.23l-0.09,-3.92l-0.0,-0.01l-0.24,-6.18l0.72,-3.24l2.0,-3.3l3.09,-2.24l2.84,-0.76l3.36,-0.75l0.05,-0.02l2.7,-1.02l4.54,-1.1l0.09,-0.03l3.14,-1.59l0.49,-0.25l0.05,-0.03l3.76,-2.58l0.11,-0.11l2.49,-3.68l0.03,-0.05l0.07,-0.19l0.29,-3.56l-0.01,-0.1l-0.91,-4.99l-0.05,-3.5l1.04,-3.32l3.45,-3.99l0.05,-0.07l1.61,-3.06l2.34,-4.0l3.02,-2.53l0.04,-0.04l2.42,-2.78l0.06,-0.09l0.2,-0.43l0.99,-2.12l0.03,-0.27l-1.01,-4.03l-0.06,-0.12l-1.59,-2.38l-0.05,-0.06l-2.2,-2.15l-0.25,-0.11l-2.5,-0.18l-0.08,0.0l-3.31,0.41l-0.47,-0.26l-0.15,-2.01l1.65,-3.03l0.01,-0.01l2.34,-4.68l1.67,-3.22l0.04,-0.25l-1.07,-6.01l-0.01,-0.06l-0.1,-0.31l-0.86,-2.6l0.16,-4.13l0.21,-1.27l0.62,-3.85l0.0,-0.0l0.75,-4.66l0.72,-4.01l0.0,-0.03l0.35,-3.32l0.42,-2.52l0.01,-0.06l0.06,-3.04l0.13,-2.43l-0.0,-0.05l-0.12,-1.5l-0.05,-0.16l-1.06,-1.92l-0.96,-2.54l0.12,-0.47l0.49,-1.98l0.9,-1.14l3.01,-2.27l2.61,-1.95l0.06,-0.05l1.9,-2.13l0.02,-0.02l1.44,-1.86l1.43,-1.85l0.05,-0.08l2.23,-5.09l0.03,-0.19l-0.03,-0.43l-0.1,-1.96l-0.01,-0.06l-0.46,-2.13l-0.16,-0.24l-1.33,-0.92l-2.01,-1.78l-0.02,-0.02l-2.4,-1.87l-1.68,-2.11l-0.67,-1.85l-0.78,-2.64l0.41,-3.81l0.86,-3.1l0.01,-0.03l0.27,-1.36l0.25,-1.27l0.01,-0.06l0.12,-2.56l0.0,-0.03l-0.05,-2.02l0.01,-0.13l0.38,-0.04l0.0,0.0l0.04,0.19l0.5,0.0l0.32,-0.25l0.03,-0.02l0.02,0.0l0.57,0.19l0.01,0.0l1.16,0.37l0.14,0.02l0.68,-0.03l0.69,-0.02l0.52,0.14l0.67,0.44l0.16,0.06l0.44,0.07l0.28,-0.06l0.28,-0.18l0.17,-0.21l0.11,-0.3l0.05,-0.15l0.0,-0.25l-0.15,-0.48l0.12,0.01l0.61,0.06l0.32,-0.12l0.07,-0.07l0.11,-0.34l-0.04,-0.25l-0.15,-0.17l0.08,-0.56l-0.18,-0.19l-0.07,-0.08l-0.0,-0.0l0.0,-0.0l0.08,-0.14l0.0,-0.0l0.06,-0.1l0.14,-0.24l-0.01,-0.41l-0.07,-0.11l-0.02,-0.03l-0.0,-0.0l-0.02,-0.03l-0.04,-0.06l-0.0,-0.0l-0.02,-0.05l-0.05,-0.09l-0.0,-0.0l-0.06,-0.11l-0.04,-0.08l-0.02,-0.03l0.01,-0.03l0.05,-0.09l0.09,-0.18l0.06,-0.13l0.17,-0.18l0.0,-0.0l0.03,-0.03l0.44,-0.47l0.52,-0.28l0.1,-0.07l0.29,-0.3l0.3,0.15l0.23,0.04l0.39,-0.05l0.03,0.0l0.02,0.15l0.16,0.26l0.12,0.09l0.38,0.04l0.21,-0.09l0.22,-0.21l0.16,-0.38l0.1,-0.23l0.04,-0.04l0.0,-0.0l0.12,-0.14l0.13,-0.04l0.1,-0.05l0.42,-0.26l0.04,-0.65l-0.23,-0.19l-0.01,-0.03l-0.05,-0.26l0.03,-0.52l0.04,-0.09l0.08,-0.2l0.68,-0.85l0.01,-0.49l-0.24,-0.33l-0.04,-0.06l-0.47,-0.14l-0.1,0.04l-0.0,0.0l-0.03,0.01l0.04,-0.09l0.0,-0.02l0.04,-0.98l0.11,-0.1l0.73,-0.24l0.18,-0.13l0.31,-0.39l-0.03,-0.53l-0.26,-0.26l-0.05,-0.05l0.49,-0.56l0.07,-0.11l0.11,-0.28l0.08,-0.19l0.02,-0.09l0.08,-0.53l0.38,0.25l0.61,-0.25l0.07,-0.32l-0.02,-0.24l-0.04,-0.09l0.09,0.01l0.76,-0.05l0.55,0.31l0.22,0.05l0.6,-0.04l0.25,-0.11l0.58,-0.56l0.1,-0.15l0.3,-0.83l0.05,0.22l0.02,-0.01l0.06,0.29l0.19,0.18l0.25,0.1l0.32,0.02l0.19,-0.03l0.18,-0.08l0.05,-0.02l0.13,0.25l0.08,0.32l0.21,0.26l0.11,0.05l0.15,0.04l0.3,0.02l0.2,-0.04l0.21,-0.11l0.14,-0.11l0.18,-0.23l0.39,-0.51l0.38,-0.49l0.05,-0.08l0.35,-0.77l0.01,-0.31l-0.14,-0.36l0.01,0.0l0.15,-0.0l0.22,-0.05l0.27,0.25l0.01,0.01l0.37,0.32l0.32,0.09l0.25,-0.03l0.13,-0.04l0.1,-0.05l0.2,-0.1l0.18,-0.5l-0.07,-0.18l-0.1,-0.14l0.52,-0.07l0.07,-0.02l0.58,-0.19l0.16,-0.1l0.08,-0.08l0.2,-0.2l0.11,-0.19l0.07,-0.28l-0.16,-0.43l-0.19,-0.13l0.1,-0.18l0.29,-0.31l0.41,-0.43l0.03,0.01l0.62,0.02l0.11,-0.01l0.7,-0.17l0.07,-0.02l0.6,-0.27l0.08,-0.03l0.07,-0.03l0.41,-0.23l0.1,-0.08l0.51,-0.58l0.07,-0.12l0.09,-0.23l0.0,-0.28l-0.03,-0.07l0.06,-0.1l0.19,-0.07l0.38,-0.26l0.89,-0.56l0.14,-0.09l0.0,-0.0l0.02,-0.01l0.15,-0.18l0.01,-0.01l0.0,-0.0l0.06,-0.16l0.3,0.12l0.28,-0.09l0.26,-0.25l0.02,-0.06l0.16,-0.43l0.02,-0.21l-0.18,-0.98l-0.11,-0.21l-0.19,-0.19l-0.05,-0.02l0.02,-0.01l0.01,-0.03l0.14,0.05l0.03,0.0l0.23,0.0l0.39,-0.3l0.05,-0.21l-0.03,-0.28l-0.11,-0.21l0.2,0.15l0.2,0.08l0.06,0.01l0.0,0.0l0.4,0.04l0.48,0.13l0.48,-0.24l0.07,-0.18l0.02,-0.23l-0.04,-0.18l-0.1,-0.2l-0.34,-0.36l-0.0,-0.01l0.08,-0.27l0.23,-0.48l0.05,-0.1l0.1,-0.16l0.02,-0.39l-0.09,-0.17l0.38,0.3l0.22,0.08l0.3,0.02l0.39,-0.24l0.11,-0.25l0.03,-0.2l-0.03,-0.32l-0.1,-0.22l-0.28,-0.31l-0.09,-0.1l-0.03,-0.14l0.04,-0.23l0.61,0.17l0.04,0.31l0.38,0.35l0.52,0.02l0.27,0.23l0.31,0.09l1.34,-0.17l0.29,-0.18l0.46,-0.73l0.06,-0.06l0.38,-0.36l0.6,-0.19l0.16,-0.09l0.22,-0.2l0.0,0.0l0.17,0.43l0.03,0.07l0.37,0.25l0.37,-0.25l0.03,-0.07l0.35,-0.83l0.02,-0.03l0.34,0.23l0.77,-0.02l0.15,-0.04l0.6,-0.27l0.22,-0.01l0.13,0.11l0.27,0.1l0.25,-0.0l0.22,-0.07l0.32,-0.21l0.09,-0.08l0.99,-1.21l0.02,-0.0l0.72,0.42l0.11,0.04l0.37,0.09l0.49,-0.45l-0.05,-0.35l-0.02,-0.07l-0.04,-0.11l0.06,-0.24l0.06,0.03l0.33,0.03l0.21,-0.07l0.15,-0.09l0.43,-0.42l0.52,-0.01l-0.11,0.15l-0.08,-0.0l-0.28,0.12l-0.3,0.3l-0.12,0.24l-0.04,0.3l0.15,0.36l0.37,0.3l0.17,0.08l0.52,0.11l0.21,0.12l0.3,0.04l0.14,0.21l0.53,0.12l0.21,-0.12l0.16,-0.17l0.5,-1.04l0.05,-0.04l1.03,0.94l0.21,0.1l0.33,0.05l0.46,-0.39l0.0,-0.19l-0.06,-0.22l-0.04,-0.05l0.11,-0.5l-0.14,-0.18l0.16,0.0l0.06,-0.0l0.4,-0.06l0.05,0.36l-0.23,0.82l0.01,0.24l0.09,0.25l0.42,0.26l0.36,-0.04l0.32,0.16l0.21,0.04l0.21,-0.02l0.22,-0.09l0.11,-0.09l0.12,-0.45l-0.01,-0.04l0.04,-0.04l0.01,-0.0l0.25,-0.39l-0.01,-0.12l0.87,-0.26l0.15,0.01l0.0,0.0l0.35,1.05l0.06,0.12l0.25,0.32l0.27,0.15l0.28,0.04l0.3,-0.09l0.04,-0.04l0.0,-0.0l0.06,-0.05l0.14,-0.33l-0.01,-0.19l-0.01,-0.09l-0.02,-0.09l-0.05,-0.15l0.0,-0.01l0.48,-0.24l0.22,-0.31l0.07,-0.54l0.21,-0.69l0.19,0.08l0.12,-0.03l0.28,-0.3l0.05,-0.23l0.36,-0.09l0.19,-0.05l0.1,-0.04l0.41,-0.23l0.14,-0.13l0.26,-0.4l0.05,-0.12l0.07,-0.26l0.01,-0.18l-0.05,-0.26l-0.19,-0.27l-0.21,-0.12l-0.17,-0.04l0.02,-0.07l0.05,-0.19l0.11,0.05l0.6,0.3l0.29,0.02l0.23,-0.07l0.2,-0.14l0.18,-0.23l0.08,-0.27l-0.0,-0.03l0.35,-0.22l0.13,-0.14l0.07,-0.12l-0.01,-0.42l-0.23,-0.35l-0.43,-0.17l-0.08,0.02l-0.02,-0.24l-0.05,-0.17l-0.14,-0.24l0.16,-0.06l0.15,-0.1l0.32,-0.35l0.08,-0.12l0.23,-0.58l0.26,-0.25l0.35,-0.16l0.22,-0.43l-0.02,-0.11l-0.13,-0.23l-0.0,-0.0l0.51,-0.25l0.07,-0.05l0.6,-0.47l0.19,0.05l0.49,-0.27l0.14,-0.47l0.0,-0.21l-0.07,-0.3l0.16,-0.01l0.35,-0.26l0.11,-0.32l0.2,-0.07l0.25,-0.3l0.05,-0.29l0.89,-0.03l0.17,-0.05l0.26,-0.14l0.15,-0.13l0.07,-0.11l0.05,-0.12l0.21,-0.84l0.02,-0.03l0.39,-0.0l0.27,-0.11l0.15,-0.15l0.08,0.27l-0.12,0.55l-0.01,0.09l0.01,1.13l0.0,0.02l0.06,0.9l0.01,0.07l0.27,1.04l0.02,0.07l0.01,0.01l0.17,0.37l0.16,1.29l0.02,0.03l0.06,0.59l-0.26,1.11l-0.41,0.54l-0.08,0.18l-0.26,1.75l0.02,0.21l0.58,1.45l0.04,0.07l0.38,0.57l1.13,1.71l0.88,1.46l0.02,0.02l0.62,0.89l0.55,1.29l-0.04,0.73l-0.2,-0.14l-0.2,0.1l-0.09,0.07l-0.57,0.55l-0.07,0.1l-0.49,0.94l-0.04,0.12l-0.1,0.67l-0.0,0.05l-0.01,0.62l-0.15,0.97l0.1,0.33l1.68,1.91l0.02,0.02l1.2,1.17l0.1,0.07l1.24,0.63l0.22,0.04l0.71,-0.08l0.25,0.05l-0.3,0.22l-0.12,0.51l0.34,0.65l0.3,0.21l0.41,0.06l0.32,0.11l0.37,0.59l0.21,0.56l0.15,0.67l0.04,0.11l0.23,0.4l0.61,1.04l0.01,0.01l0.86,1.36l0.01,0.01l0.76,1.1l0.03,0.04l0.44,0.5l0.65,0.75l0.92,1.79l0.36,0.22l0.27,-0.01l0.1,0.16l0.0,0.01l0.31,0.48l0.01,0.02l0.42,0.58l0.01,0.01l0.61,0.8l0.02,0.03l0.47,0.51l0.9,0.99l0.14,0.1l0.88,0.36l0.25,0.02l0.17,-0.04l1.06,1.07l0.32,0.12l0.73,-0.06l0.36,0.2l0.44,0.3l1.01,0.84l0.18,0.09l1.22,0.25l0.04,0.01l0.95,0.08l1.11,0.29l0.09,0.01l0.68,0.01l0.33,0.16l0.1,0.35l-0.15,-0.0l-0.39,0.31l-0.11,0.47l-0.03,-0.33l-0.52,-0.35l-0.21,0.07l-0.26,0.26l-0.02,0.05l-0.22,0.19l-0.07,-0.05l-0.05,-0.03l-0.2,-0.09l-0.39,0.03l-0.37,0.26l-0.07,0.59l0.43,0.49l0.18,0.4l0.36,0.24l0.33,0.0l0.08,0.14l0.29,0.54l0.07,0.37l-0.04,0.13l-0.02,0.13l0.03,0.96l0.07,0.21l0.27,0.41l0.43,0.17l1.35,-0.35l0.03,-0.01l0.77,-0.25l0.01,-0.0l0.61,-0.22l0.79,-0.23l0.0,-0.0l1.16,-0.35l0.21,-0.15l0.43,-0.6l0.5,-0.59l0.02,-0.02l0.41,-0.57l0.62,-0.64l0.73,-0.64l0.7,-0.45l0.03,-0.02l0.78,-0.58l0.02,-0.01l0.62,-0.52l0.01,-0.01l0.6,-0.55l0.04,-0.05l0.2,-0.26l0.86,-0.53l0.35,-0.08l-0.17,0.26l-0.97,1.09l-0.08,0.39l0.18,0.55l0.49,0.26l0.41,-0.12l0.07,0.22l-0.09,0.34l-0.0,0.15l-0.46,-0.11l-0.42,0.28l-0.56,0.28l-0.21,0.26l-0.16,0.65l-0.01,0.07l-0.01,0.12l-0.36,0.4l-0.35,0.15l-0.78,0.1l-0.02,0.0l-0.18,0.03l-0.06,0.02l-0.94,0.34l-0.26,0.44l0.09,0.61l0.04,0.13l0.26,0.48l0.28,0.83l0.02,0.05l0.02,0.03l-0.16,0.17l-0.02,0.02l-0.29,0.37l-0.43,0.36l-0.27,0.18l-0.13,0.14l-0.32,0.56l-0.01,0.02l-0.44,0.89l-0.01,0.03l-0.23,0.57l-0.2,0.48l-0.19,0.21l-0.05,0.08l-0.44,0.83l-0.01,0.03l-0.37,0.85l-0.02,0.25l0.13,0.55l0.1,0.19l0.36,0.37l0.33,0.12l0.43,-0.05l0.19,-0.07l0.39,-0.28l0.1,-0.05l-0.0,0.06l0.15,1.2l-0.1,1.07l-0.42,0.85l-0.24,0.47l0.06,0.46l0.45,0.09l0.09,-0.04l0.31,0.05l-0.05,0.22l-0.24,0.85l-0.53,0.38l-0.12,0.13l-0.76,1.39l0.02,0.42l0.49,0.69l0.42,0.16l0.62,-0.15l0.02,-0.0l0.97,-0.28l0.07,0.13l-0.11,0.14l-0.59,0.36l-0.76,0.22l-0.66,0.06l-0.23,0.1l-0.62,0.55l-0.03,0.57l0.2,0.21l0.39,0.12l0.39,-0.1l0.07,-0.02l0.19,-0.09l0.9,0.31l0.02,0.01l-0.01,0.01l-0.01,0.02l-0.26,0.59l0.13,0.49l0.25,0.18l0.21,0.07l0.72,0.04l-0.28,0.23l-0.37,-0.02l-0.05,0.0l-0.41,0.03l-0.17,0.05l-0.68,0.39l-0.18,0.46l0.15,0.51l0.2,0.12l-0.04,0.01l-0.41,0.22l-0.21,0.33l-0.03,0.51l0.09,0.28l0.32,0.39l0.37,0.14l0.28,-0.05l-0.03,0.13l-0.35,0.66l-0.4,0.49l0.3,0.65l0.27,0.0l0.01,-0.0l0.39,-0.01l0.6,-0.01l-0.08,0.13l-0.6,0.18l-0.09,0.04l-1.0,0.58l-0.06,0.65l0.36,0.3l0.3,0.09l0.69,-0.08l0.48,-0.01l-0.11,0.14l-0.76,0.2l-0.0,0.0l-0.93,0.25l-0.18,0.11l-0.39,0.4l0.18,0.67l0.54,0.15l0.16,0.01l0.86,-0.11l0.67,0.03l0.01,0.19l0.42,0.37l0.55,-0.03l0.32,0.19l0.27,0.4l0.05,0.07l0.2,0.71l-0.12,0.66l-0.15,0.6l0.42,0.5l0.33,-0.02l0.39,0.12l0.28,0.18l0.35,0.05l0.27,-0.09l0.36,0.26l0.25,0.99l0.11,0.62l0.14,0.24l0.74,0.62l0.25,0.09l0.64,0.01l0.28,-0.1l0.28,-0.26l0.02,-0.02l0.55,-0.57l0.23,-0.15l0.21,0.09l0.16,0.35l0.18,0.69l0.01,0.02l0.16,0.53l0.03,0.06l0.27,0.53l0.05,0.07l0.36,0.44l0.15,0.12l0.34,0.15l0.02,0.01l0.58,0.21l0.33,1.11l0.23,0.25l0.43,0.18l0.1,0.03l1.11,0.15l0.44,0.13l0.3,0.26l0.05,0.68l-0.09,0.36l0.01,0.23l0.27,0.79l0.14,0.19l0.31,0.24l-0.26,0.77l-0.01,0.03l-0.1,0.4l0.11,0.39l0.45,0.43l0.02,0.02l0.41,0.34l0.28,0.09l0.28,-0.02l0.32,0.33l0.1,0.07l0.43,0.23l0.23,0.05l0.43,-0.05l0.18,-0.06l0.55,-0.36l0.57,-0.14l0.57,-0.02l0.8,0.11l0.62,0.15l-0.07,0.34l-0.22,0.23l-0.08,0.43l0.04,0.09l0.34,0.25l1.0,0.07l0.31,-0.11l0.04,-0.03l0.07,-0.09l0.35,-0.65l0.14,-0.03l0.29,-0.03l0.64,0.01l0.86,0.01l0.31,-0.14l0.16,-0.19l0.02,-0.02l0.03,-0.04l0.45,-0.22l0.16,-0.06l0.01,-0.0l0.75,-0.3l0.65,-0.05l0.37,-0.03l0.54,-0.03l0.95,-0.0l0.11,0.0l0.0,0.01l-0.03,0.29l-0.03,0.31l0.02,0.17l0.14,0.43l0.48,0.26l0.52,-0.13l-0.11,0.47l0.03,0.06l-0.43,0.24l-0.04,0.13l-0.02,0.0l-0.07,0.01l-0.17,0.01l-0.21,0.01l-0.36,0.31l-0.03,0.12l-0.03,0.12l0.07,0.33l0.03,0.04l0.0,0.0l0.05,0.07l0.03,0.04l-0.23,0.27l-0.03,0.04l-0.1,0.29l0.02,0.21l0.32,0.36l0.74,0.15l0.22,0.11l0.74,1.17l0.12,0.12l0.72,0.47l0.44,0.33l0.11,0.15l0.15,0.51l0.17,0.22l0.05,0.03l0.28,0.18l0.26,0.06l0.25,-0.03l0.23,-0.02l0.06,-0.01l0.52,-0.14l0.75,-0.2l0.23,0.08l0.26,0.0l0.8,-0.27l0.02,-0.0l0.03,-0.01l0.57,-0.09l0.23,0.03l0.17,0.12l0.26,0.54l0.26,0.54l0.65,0.1l0.36,-0.37l0.0,-0.0l0.01,-0.01l0.01,-0.06l0.21,0.08l0.11,-0.01l0.22,-0.01l0.21,-0.07l0.42,-0.29l0.16,-0.11l0.02,-0.01l0.66,-0.51l0.18,-0.03l1.14,0.62l0.08,0.03l0.3,0.09l0.16,0.01l0.04,-0.0l0.4,-0.04l0.23,0.0l0.4,0.0l0.38,0.15l0.35,0.14l0.16,0.03l0.27,-0.01l0.23,-0.01l0.1,-0.01l1.39,-0.39l0.26,0.03l0.71,0.25l0.28,-0.01l0.55,-0.22l0.2,-0.03l0.07,-0.01l0.13,-0.02l0.33,0.09l0.12,0.08l0.07,0.05l0.25,0.69l0.32,0.26l0.14,0.02l0.38,-0.18l0.23,-0.35l0.18,-0.15l0.3,0.0l0.15,0.1l0.3,0.51l0.0,0.0l0.01,0.02l0.56,0.13l0.16,-0.1l0.05,0.27l0.09,0.12l0.23,0.16l0.29,0.07l0.07,0.1l0.21,0.3l0.15,0.13l0.28,0.14l0.28,0.14l0.13,0.04l0.77,0.1l0.16,0.34l-0.2,-0.02l-0.06,-0.0l-0.42,0.31l-0.04,0.16l0.08,0.34l0.15,0.18l0.0,0.02l-0.09,0.16l-0.11,0.21l0.04,0.43l0.02,0.03l0.11,0.14l0.35,0.15l0.49,-0.05l0.06,0.05l0.19,0.31l0.3,0.19l0.6,0.06l0.52,0.37l0.03,0.04l-0.0,0.17l-0.06,0.21l-0.07,0.24l-0.0,0.22l0.09,0.31l0.1,0.37l0.02,0.07l0.22,0.47l0.41,0.08l-0.01,0.05l-0.03,0.06l-0.22,0.14l-0.18,0.11l-0.17,0.22l-0.05,0.15l-0.06,0.18l0.24,0.5l0.49,0.18l0.05,0.01l0.08,0.02l0.96,0.22l0.1,0.13l0.28,0.15l0.21,0.02l0.82,0.07l0.29,0.06l0.03,0.01l-0.02,0.06l0.09,0.44l0.39,0.38l0.36,0.52l-0.14,0.1l-0.13,0.08l-0.18,0.24l-0.04,0.14l0.16,0.43l0.09,0.06l0.01,0.01l0.17,0.07l0.83,0.1l0.05,0.02l0.04,0.16l0.27,0.29l0.54,0.16l0.13,0.02l0.4,-0.01l0.38,-0.45l-0.02,-0.2l0.08,-0.02l0.2,0.07l0.05,-0.0l0.12,-0.01l0.19,-0.18l0.16,0.06l0.43,-0.09l0.28,-0.28l0.15,0.21l-0.08,0.33l0.21,0.45l0.61,0.31l0.25,0.51l0.08,0.39l0.04,0.18l-0.04,0.15l-1.45,1.11l-0.11,0.13l-0.23,0.44l-0.05,0.18l-0.01,0.68l-0.01,0.38l-0.11,0.52l-0.6,0.78l-0.09,0.07l-0.08,0.06l-0.15,0.23l-0.07,0.3l0.0,0.19l0.18,0.67l0.07,0.14l0.14,0.19l0.51,0.68l-0.01,0.15l-0.24,0.2l-0.85,0.26l-0.17,0.11l-0.72,0.75l-0.11,0.3l0.01,0.22l0.02,0.31l-0.17,0.44l-0.02,0.2l0.04,0.27l0.06,0.48l0.06,0.16l0.15,0.25l0.15,0.25l0.32,0.59l0.35,0.81l0.02,0.04l0.66,1.11l0.01,0.17l0.04,0.16l0.19,0.37l0.15,0.16l0.4,0.24l0.04,0.08l0.08,0.15l-0.13,0.12l-0.2,0.19l-0.03,0.03l-0.41,0.47l-0.05,0.07l-0.49,0.86l-0.08,0.15l-0.05,0.19l-0.0,0.16l-0.0,0.28l0.01,0.11l0.19,0.68l0.02,0.06l0.09,0.18l-0.08,0.12l-0.1,0.05l-0.17,0.08l-0.11,0.08l-0.2,0.2l-0.06,0.06l-0.06,0.08l-0.2,0.33l-0.23,0.03l-0.34,0.74l-0.03,0.04l-0.97,1.04l-0.08,0.13l-0.16,0.4l-0.03,0.19l0.01,0.07l0.03,0.28l0.1,0.23l0.34,0.37l-0.1,0.15l-0.3,0.46l-0.05,0.3l0.02,0.1l-0.03,0.41l0.02,0.16l0.32,0.92l-0.26,0.78l-0.02,0.1l-0.05,0.91l0.02,0.14l0.29,0.95l-0.11,0.29l-0.45,0.57l-0.11,0.14l-0.07,0.12l-0.06,0.17l-0.06,0.06l-0.25,0.24l-0.6,0.25l-0.12,0.08l-0.56,0.54l-0.05,0.06l-0.41,0.58l-0.6,0.27l-0.24,0.11l-0.1,0.07l-0.17,0.15l-0.14,0.13l-0.13,0.26l-0.02,0.17l-0.05,0.49l0.05,0.25l0.24,0.41l0.58,0.97l0.06,0.08l0.7,0.7l0.11,0.08l1.54,0.72l0.77,0.56l0.09,0.14l0.1,0.15l0.06,0.07l0.15,0.14l0.39,0.37l0.0,-0.0l0.11,0.17l0.16,0.07l0.53,0.23l0.36,0.25l0.08,0.2l0.1,0.23l0.06,0.09l0.1,0.13l0.23,0.29l0.03,0.22l0.05,0.37l0.02,0.07l0.26,0.84l0.03,0.73l0.06,0.19l0.05,0.08l-0.09,0.3l-0.39,1.34l-0.01,0.07l-0.16,1.46l-0.03,0.25l0.0,0.1l0.08,0.64l0.07,0.51l-0.09,0.42l-0.06,0.3l-0.49,0.48l-0.82,0.49l-0.69,0.16l-0.06,0.02l-1.68,0.67l-0.54,0.12l-0.08,0.03l-2.41,1.1l-0.97,0.44l-0.0,0.0l-0.26,0.12l-1.0,0.46l-0.52,0.13l-0.19,0.05l-0.77,0.05l-0.49,0.03l-0.04,0.01l-1.45,0.26l-0.1,0.03l-0.97,0.45l-0.07,0.03l-0.11,0.05l-0.15,0.13l-0.05,0.06l-0.18,0.25l-0.06,0.12l-0.34,1.19l-0.08,0.29l-0.4,0.73l-0.15,0.27l-0.69,0.71l-0.06,0.02l-0.46,0.13l-0.02,0.01l-0.78,0.27l-0.93,0.32l-0.07,0.03l-0.96,0.57l-0.82,0.4l-0.07,0.02l-0.47,0.13l-1.48,0.31l-0.05,0.02l-0.65,0.24l-0.45,0.17l-0.09,0.05l-0.58,0.4l-0.39,0.27l-1.36,0.47l-0.07,0.03l-1.37,0.82l-0.59,0.35l-1.43,0.84l-0.06,0.04l-0.58,0.49l-0.09,0.11l-0.34,0.58l-0.36,0.63l-0.62,0.72l-0.01,0.01l-0.93,1.17l-0.19,0.12l-0.39,0.23l-0.06,0.04l-0.19,0.16l-0.01,0.0l-0.85,0.2l-0.08,0.03l-0.72,0.34l-0.99,0.47l-0.44,0.21l-0.07,0.02l-0.02,0.01l-0.05,0.01l-0.82,0.23l-0.08,0.03l-0.29,0.16l-0.12,0.02l-0.0,0.0l-0.11,0.02l-0.05,0.01l-0.15,0.02l-0.16,0.03l-0.09,0.01l-0.0,0.0l-0.01,0.0l-0.49,0.06l-0.0,0.0l-0.01,0.0l-0.25,-0.0l-0.58,-0.01l-0.01,-0.0l-0.48,-0.1l-0.81,-0.55l-0.77,-0.63l-0.15,-0.25l-0.18,-0.29l-0.06,-0.07l-0.37,-0.37l-0.4,-0.4l-0.09,-0.07l-0.42,-0.23l-0.11,-0.04l-1.35,-0.27l-0.14,-0.05l-0.56,-0.2l-0.13,-0.02l-0.75,0.0l-0.06,0.0l-0.97,-0.76l-0.22,-0.17l-0.18,-0.08l-0.61,-0.1l-0.23,0.03l-0.44,0.19l-0.24,0.11l-0.08,0.05l-0.18,0.14l-0.27,0.21l-0.12,0.14l-0.03,0.06l-0.14,0.3l-0.1,0.22l-0.03,0.08l-0.48,2.0l-0.18,0.64l-0.02,0.08l-0.62,0.75l-0.56,0.68l-0.01,0.01l-0.27,0.15l-0.11,0.09l-0.9,1.1l-0.08,0.17l-0.16,0.77l-0.01,0.05l-0.09,1.05l-0.04,0.12l-0.04,0.03l-0.12,0.09l-0.18,0.09l-0.03,0.01l-0.22,0.32l-0.06,0.65l-0.08,0.12l-0.17,0.25l-0.46,0.66l-0.05,0.08l-0.99,0.57l-0.34,0.16l-0.12,0.06l-0.16,0.14l-0.21,0.31l-0.07,0.2l-0.0,0.04l-0.04,0.57l0.03,0.18l0.31,0.75l0.01,0.02l-0.51,0.13l-0.19,0.11l-0.17,0.18l-0.42,0.44l-0.07,0.1l-0.18,0.37l-0.26,0.51l-0.13,0.26l-0.07,0.14l-0.02,0.03l-0.16,0.13l-0.32,0.01l-0.31,0.17l-0.39,0.56l-0.18,0.14l-0.33,0.19l-0.1,0.09l-0.52,0.61l-0.48,0.57l-0.06,0.09l-0.07,0.16l-0.1,0.23l-0.03,0.08l-0.12,0.54l-0.14,0.44l-0.26,0.23l-0.32,0.19l-0.16,0.18l-0.16,0.35l-0.04,0.19l0.02,0.39l0.01,0.18l-0.07,0.26l-0.02,0.07l-0.03,0.03l-0.3,0.27l-0.03,0.03l-0.04,0.05l-0.3,0.08l-0.15,-0.03l-0.15,-0.0l-0.38,0.07l-0.02,0.0l-0.49,0.07l-0.17,0.07l-1.69,1.17l-1.13,0.36l-1.39,0.22l-0.29,0.04l-0.22,0.11l-0.67,0.67l-0.25,0.22l-0.14,0.26l-0.07,0.73l-0.1,1.02l-0.01,0.07l-1.89,0.43l-0.04,0.01l-2.2,0.75l-0.0,0.0l-2.4,0.83l-4.56,0.35l-2.89,-0.71l-1.44,-0.61l-0.68,-0.81l-0.36,-0.14l-1.77,0.24l-1.97,0.27l-0.34,0.35l-0.3,2.85l-0.0,0.07l0.21,3.4l-0.19,2.61l-0.02,0.29l-0.03,0.46l-1.05,4.92l-1.46,4.36l-1.16,2.51l-2.11,4.35l-0.03,0.08l-1.22,5.31l-0.01,0.03l-0.19,1.33l-0.3,2.17l-0.06,0.46l-1.2,1.28l-2.38,0.27l-2.64,-0.26l-2.81,-1.21l-2.86,-1.35l-0.85,-1.0l-0.01,-0.01l-2.53,-2.7l-0.08,-0.07l-3.12,-1.89l-0.07,-0.03l-3.47,-1.25l-0.07,-0.02l-4.73,-0.78l-0.05,-0.01l-5.58,-0.18l-0.22,0.05l-3.04,1.78l-0.08,0.07l-2.55,2.61l-0.06,0.07l-2.62,4.38l-2.49,1.22l-0.17,0.08l-2.0,0.08l-1.94,0.08l-0.37,0.28l-0.96,3.14l-2.84,3.04l-2.88,1.32l-4.1,1.31l-4.11,0.24l-0.02,0.0l-3.45,0.35l-0.09,0.02l-0.48,0.16l-2.57,0.89l-0.15,0.1l-2.16,2.16l-0.72,0.72l-0.04,0.04l-2.09,2.75l-2.5,2.9l-0.02,0.02l-2.88,3.79l-0.03,0.05l-1.61,2.88l-1.98,2.23l-2.03,1.24l-2.49,0.91l-2.91,0.65l-1.14,0.02l-0.03,0.0l-2.05,0.21ZM834.25,86.08l0.24,-0.04l0.02,0.12l-0.06,0.05l-0.04,-0.05l-0.17,-0.08ZM764.06,32.17l-0.3,-0.2l0.1,0.04l0.2,0.16ZM763.74,31.97l-0.08,-0.0l0.02,-0.02l0.0,-0.0l0.03,0.01l0.03,0.01Z", "name": "Borno"}, "2038": {"path": "M214.21,447.37l-0.16,-0.11l-0.15,-0.16l-0.03,-0.68l-0.01,-1.3l0.05,-1.25l0.12,-1.13l-0.0,-0.1l-0.05,-0.3l0.11,-0.04l0.82,-0.28l0.13,-0.07l0.09,-0.07l0.0,-0.0l0.65,-0.56l0.13,-0.22l0.26,-1.2l-0.01,-0.19l-0.4,-1.46l-0.09,-0.7l-0.07,-0.18l-0.49,-0.7l-0.18,-0.14l-1.31,-0.54l-1.45,-1.11l-0.1,-0.06l-1.78,-0.68l-0.92,-0.62l-0.1,-0.46l-0.02,-0.1l-0.17,-0.25l-1.88,-1.23l-0.3,-0.29l-0.01,-0.01l-0.6,-0.56l-0.1,-0.38l0.03,-0.07l-0.09,-0.42l-0.12,-0.12l-0.06,-0.05l-0.4,-0.28l-1.15,-0.95l-1.13,-1.49l-0.46,-1.13l-0.02,-0.04l-1.04,-1.91l-0.0,-0.01l-0.28,-0.49l-0.46,-0.79l0.16,-0.94l0.36,-0.41l0.93,-0.97l0.02,-0.02l1.22,-1.48l0.03,-0.05l1.23,-2.02l0.01,-0.02l0.87,-1.63l0.65,-1.06l1.77,-1.96l0.34,-0.3l1.67,-1.49l0.08,-0.09l0.6,-0.99l1.12,-0.55l0.09,-0.06l1.03,-0.9l0.9,-0.78l0.57,-0.24l0.04,-0.02l0.29,-0.1l0.08,0.04l0.07,0.36l0.07,0.16l0.66,0.89l0.13,0.5l0.09,0.16l0.78,0.9l0.01,0.01l0.63,0.69l0.08,0.07l0.82,0.53l1.15,0.9l0.02,0.02l1.11,0.75l0.1,0.05l1.25,0.41l0.84,0.4l0.2,0.11l0.98,0.53l0.08,0.03l0.98,0.28l0.01,0.0l2.03,0.51l0.96,0.58l0.21,0.06l1.17,-0.01l0.96,0.11l0.94,0.35l1.08,0.64l0.12,0.05l1.21,0.26l0.13,0.01l1.14,-0.12l0.98,-0.07l1.45,-0.08l0.85,0.01l0.52,0.04l0.0,0.0l0.45,0.04l0.72,0.58l0.2,0.09l0.66,0.08l0.1,-0.0l2.07,-0.27l0.73,0.06l0.02,0.0l1.74,0.06l0.32,0.21l0.04,0.02l0.51,0.25l0.1,0.03l1.81,0.34l0.02,0.0l1.07,0.16l0.02,0.0l0.95,0.08l0.48,0.14l0.01,0.0l0.58,0.15l1.42,0.41l0.06,0.01l0.21,0.03l0.1,0.01l0.09,0.0l1.21,-0.1l0.07,-0.01l0.82,-0.21l1.6,-0.3l0.31,-0.29l0.23,-0.84l0.57,-1.12l0.03,-0.07l0.03,-0.09l0.37,-1.53l0.06,-0.03l0.14,-0.13l0.43,-0.64l0.07,-0.26l-0.14,-1.51l0.42,-0.85l0.04,-0.13l0.1,-0.91l0.27,-1.59l0.0,-0.09l-0.08,-1.34l0.15,-1.35l0.33,-1.39l0.25,-0.94l0.34,-1.08l0.0,-0.01l0.25,-0.9l0.3,-0.74l0.01,-0.02l0.62,-1.73l0.01,-0.02l0.46,-1.47l0.01,-0.04l0.21,-1.05l0.28,-0.49l0.56,-0.41l0.06,-0.05l0.74,-0.79l0.05,-0.07l0.66,-1.14l0.01,-0.02l0.35,-0.68l0.08,-0.12l0.71,0.1l0.84,0.23l0.78,0.3l1.07,0.48l1.04,0.78l0.05,0.03l1.15,0.6l1.13,0.77l0.62,0.8l0.06,0.06l0.66,0.57l0.99,0.89l0.69,0.75l0.25,0.44l0.02,0.03l0.37,0.54l0.01,0.01l0.0,0.0l0.02,0.03l0.01,0.01l0.0,0.0l0.04,0.06l0.34,0.52l0.11,0.16l0.0,0.0l0.33,0.49l0.18,0.26l0.03,0.04l0.23,0.27l0.36,0.43l0.09,0.27l0.13,0.39l0.0,0.0l0.0,0.01l0.0,0.01l0.02,-0.01l0.08,0.19l0.44,0.42l0.14,0.32l0.1,0.23l0.23,1.13l0.02,0.06l0.25,0.65l0.37,0.96l0.42,1.48l0.2,0.75l0.19,0.69l0.01,0.04l0.34,0.87l0.11,0.33l0.3,0.9l0.0,0.01l0.44,1.2l0.19,0.88l0.15,0.23l0.67,0.52l0.0,0.0l0.07,0.05l0.02,0.01l0.44,0.3l0.45,0.31l0.03,0.02l0.94,0.54l1.1,0.63l0.01,0.0l0.78,0.43l0.52,0.46l0.2,0.26l0.0,0.0l0.63,0.81l0.04,0.05l0.99,0.94l0.03,0.02l0.33,0.26l0.5,0.4l0.09,0.12l0.75,1.04l0.01,0.02l0.86,1.08l0.01,0.01l0.1,0.12l0.54,0.64l0.72,0.86l0.81,1.05l0.79,1.37l0.01,0.02l0.73,1.07l0.02,0.03l1.15,1.39l0.02,0.02l0.81,0.86l0.02,0.02l1.28,1.49l0.1,0.08l0.94,0.57l0.22,0.13l0.2,0.06l0.79,0.01l0.44,0.01l0.37,0.15l0.23,0.09l0.43,-0.08l0.26,-0.26l0.03,-0.03l0.14,-0.17l0.06,-0.11l0.14,-0.36l0.0,-0.01l0.27,-0.74l0.02,-0.08l0.04,-0.31l0.12,-0.87l0.13,-0.9l0.04,-0.26l0.01,-0.03l0.29,-0.72l0.28,-0.53l0.31,-0.47l0.03,-0.05l0.31,-0.68l0.01,-0.03l0.2,-0.42l0.4,0.27l0.07,0.05l0.3,0.42l0.41,0.16l0.35,-0.07l0.2,-0.04l0.32,-0.4l-0.0,-0.22l-0.0,-0.5l-0.01,-0.07l-0.12,-0.67l-0.06,-0.34l0.0,-0.97l0.19,-0.53l0.43,-0.18l0.05,-0.03l0.5,-0.3l0.7,-0.39l0.09,0.06l0.37,0.03l0.18,-0.08l0.01,-0.01l0.03,-0.01l0.54,-0.29l0.06,-0.04l0.12,-0.1l0.0,-0.0l0.42,-0.33l0.23,-0.13l0.48,-0.27l0.18,-0.23l0.25,-0.8l0.1,-0.32l0.1,-0.14l0.27,-0.39l0.06,-0.12l0.24,-0.84l0.03,-0.1l0.01,-0.02l0.0,-0.0l0.23,-0.55l0.03,-0.12l0.02,-0.28l0.47,0.03l0.74,0.13l0.08,0.01l0.12,-0.0l0.0,-0.0l0.61,-0.02l0.51,0.06l0.2,-0.08l0.0,0.01l0.55,-0.14l0.13,-0.02l0.81,-0.1l0.87,0.18l0.03,0.01l1.14,0.14l0.06,0.0l1.15,-0.03l0.78,0.02l0.42,0.01l0.23,-0.07l0.62,-0.41l0.23,-0.02l0.09,-0.01l-0.29,1.09l-0.01,0.03l-0.29,1.51l-0.59,1.28l-0.55,0.85l-0.67,0.99l-0.07,0.22l0.0,1.04l0.05,0.2l0.3,0.52l0.1,0.57l0.06,0.15l0.54,0.83l0.1,0.1l0.56,0.42l0.46,0.42l0.23,0.8l0.31,0.28l0.04,0.01l0.88,1.13l0.07,1.0l-0.15,1.12l0.05,0.25l0.66,1.19l-0.0,1.13l-0.22,1.11l-0.0,0.15l0.24,1.38l-0.29,1.07l-0.0,0.02l-0.3,1.38l-0.19,0.76l-0.01,0.01l-0.61,2.39l-0.01,0.12l0.11,1.86l-0.1,1.99l-0.0,0.01l-0.04,1.64l-1.85,1.92l-0.08,0.13l-1.03,2.57l-0.03,0.1l-0.32,2.74l-0.0,0.07l0.11,1.79l0.15,0.29l0.84,0.68l0.39,0.06l1.03,-0.38l0.16,-0.06l0.14,-0.09l0.74,-0.7l0.0,-0.0l1.63,-1.57l1.49,-0.8l1.83,-0.64l0.03,-0.01l1.65,-0.72l0.04,-0.02l1.41,-0.8l0.82,-0.32l1.46,-0.55l0.05,-0.02l0.94,-0.5l1.34,-0.54l0.03,-0.01l1.6,-0.81l1.46,-0.55l1.77,-0.54l1.75,-0.5l2.06,-0.38l0.02,-0.0l2.48,-0.6l2.65,-0.61l0.03,-0.01l2.69,-0.86l1.48,-0.17l0.81,-0.1l1.66,-0.16l0.02,-0.0l0.31,-0.05l2.04,-0.31l2.13,-0.05l1.86,0.22l2.39,0.59l0.07,0.01l2.53,0.16l3.24,0.37l0.03,0.0l3.05,0.14l-0.19,0.74l-0.01,0.08l-0.09,2.23l0.01,0.1l0.39,1.78l-0.15,2.78l0.0,0.09l0.41,2.46l0.05,0.14l1.31,2.12l0.95,1.78l0.06,0.09l1.84,1.93l0.03,0.03l1.36,1.18l0.82,2.1l0.08,0.77l0.18,1.8l-0.02,2.55l-0.24,3.13l-0.0,0.06l0.02,0.3l0.21,2.84l0.0,0.03l0.35,2.54l0.11,2.56l0.01,0.06l0.53,2.67l0.0,0.02l0.57,2.25l0.4,1.79l0.13,0.22l1.54,1.28l0.23,0.09l1.21,0.07l0.22,0.01l0.09,-0.01l2.47,-0.44l1.36,0.43l-0.34,1.73l-1.41,1.38l-0.1,0.15l-0.56,1.57l-0.02,0.1l-0.06,0.67l-0.19,2.11l-0.25,1.93l-0.44,1.36l-0.28,0.85l-0.0,0.02l-0.82,2.93l-0.76,1.8l-1.67,1.94l-0.11,0.13l-2.1,1.57l-1.52,0.84l-3.6,1.7l-0.15,0.07l-2.47,1.16l-0.16,0.14l-1.15,1.75l-0.07,0.24l0.13,2.49l-0.48,2.47l-1.66,-0.0l-1.53,-1.19l-0.3,-0.08l-0.77,0.1l-0.86,-1.02l-0.07,-0.06l-1.36,-1.01l-1.68,-1.76l-0.06,-0.05l-1.01,-0.71l-0.39,-0.04l-0.11,0.05l-0.1,0.12l-0.14,-0.13l-1.03,-1.28l-0.4,-0.14l-0.37,0.08l-0.47,-0.26l-0.06,-0.03l-0.72,-0.27l-0.13,-0.03l-0.34,-0.01l-0.56,-0.35l-0.29,-0.05l-0.94,0.18l-0.01,0.0l-1.23,0.26l-0.03,0.01l-0.43,0.13l-1.4,0.36l-0.22,0.15l-0.37,0.49l-0.48,0.45l-0.24,0.17l-0.08,0.08l-0.2,0.25l-0.43,0.33l-0.04,0.04l-0.09,0.09l-0.56,0.58l-0.2,0.1l-0.08,0.04l-0.0,0.0l-0.05,0.03l-0.23,0.11l-0.46,0.14l-0.01,0.0l-0.3,0.1l-0.0,0.0l-0.52,0.18l-0.55,0.18l-0.02,0.01l-0.44,0.17l-0.16,0.11l-0.44,0.5l-0.34,0.31l-0.06,0.07l-0.35,0.53l-0.52,0.72l-0.45,0.52l-0.11,0.12l-0.07,0.1l-0.05,0.12l-0.2,0.45l-0.3,0.4l-0.77,0.73l-0.03,0.03l-0.81,0.97l-0.7,0.76l-0.01,0.02l-0.96,1.16l-0.75,0.58l-0.1,0.11l-0.47,0.8l-1.78,1.26l-0.48,0.18l-0.38,0.14l-0.0,0.0l-0.12,0.04l-0.06,0.03l-0.75,0.42l-0.04,0.03l-0.87,0.64l-0.8,0.54l-0.68,0.46l-0.02,0.02l-0.62,0.49l-0.57,0.4l-0.11,0.12l-0.25,0.43l-0.39,0.35l-0.01,0.01l-0.46,0.43l-0.56,0.41l-0.04,0.04l-0.54,0.53l-0.07,0.09l-0.34,0.61l-0.34,0.45l-0.55,0.62l-0.73,0.74l-0.04,0.04l-0.39,0.53l-0.33,0.33l-0.4,0.37l-0.01,0.01l-0.45,0.44l-0.71,0.28l-0.49,0.06l-0.62,-0.31l-0.34,-0.61l-0.42,-0.75l-0.09,-0.11l-0.61,-0.53l-0.04,-0.22l-0.37,-0.33l-0.51,-0.03l0.02,-0.4l0.07,-0.95l-0.0,-0.07l-0.04,-0.38l-0.0,-0.11l-0.11,-0.26l-0.05,-0.05l-0.16,-0.33l-0.22,-0.2l-0.57,-0.22l-0.07,-0.02l-0.53,-0.1l-0.27,0.05l-0.51,0.29l-0.17,0.18l-0.25,0.55l-0.01,0.03l-0.36,0.97l-0.01,0.03l-0.23,0.8l-0.71,1.23l-0.03,0.06l-0.21,0.56l-0.15,0.33l-0.67,0.66l-0.11,0.2l-0.1,0.47l-0.0,0.01l-0.37,0.68l-0.69,0.92l-0.44,0.46l-0.62,0.48l-1.14,0.5l-0.12,0.08l-0.79,0.75l-0.64,0.46l-0.13,0.16l-0.2,0.45l-0.95,0.99l-0.1,0.18l-0.2,0.83l-0.36,1.13l-0.0,0.0l-0.32,1.05l-0.41,1.0l-0.02,0.07l-0.19,0.93l-0.01,0.12l0.1,1.0l-0.05,0.44l-0.0,0.02l-0.07,0.88l-0.0,0.01l-0.05,0.83l-0.21,0.5l-0.16,0.38l-1.27,1.33l-0.03,0.04l-0.45,0.61l-0.63,0.5l-0.88,0.45l-0.56,-0.07l-0.94,-0.15l-0.01,-0.0l-1.16,-0.17l-1.06,-0.32l-0.06,-0.01l-0.43,-0.06l-0.22,0.03l-0.92,0.42l-0.64,0.26l0.06,-0.64l-0.01,-0.12l-0.35,-1.65l-0.27,-1.28l-0.08,-1.39l-0.02,-0.11l-0.31,-0.87l-0.19,-0.73l-0.07,-0.14l-0.51,-0.67l-0.01,-0.01l-0.49,-0.61l-0.64,-1.05l-0.11,-0.77l-0.06,-0.16l-0.52,-0.83l-0.36,-1.3l0.18,-1.99l0.27,-1.38l0.36,-0.91l0.03,-0.14l0.01,-0.78l0.11,-0.61l0.14,-0.77l-0.03,-0.24l-0.37,-0.82l-0.16,-0.18l-0.5,-0.31l-0.44,-1.09l1.08,-1.56l0.05,-0.09l0.45,-1.26l0.9,-1.22l0.04,-0.07l0.52,-1.12l0.03,-0.08l0.27,-1.12l0.34,-0.29l0.13,-0.2l0.2,-0.76l0.52,-1.48l0.32,-0.84l0.02,-0.11l0.01,-0.1l0.05,-0.56l0.0,-0.01l0.09,-1.09l0.0,-0.01l0.05,-0.88l-0.0,-0.05l-0.06,-0.83l-0.0,-0.03l-0.08,-0.56l-0.12,-0.91l0.23,-0.49l0.27,-0.57l0.32,-0.65l0.03,-0.1l0.21,-1.04l0.46,-0.9l0.01,-0.03l0.38,-0.91l0.03,-0.14l0.03,-0.9l0.0,-0.09l0.34,-1.25l0.01,-0.16l-0.15,-1.13l-0.0,-0.0l-0.14,-0.93l-0.01,-0.49l0.04,-0.53l0.07,-0.96l-0.04,-0.21l-0.15,-0.3l-0.05,-0.08l-0.37,-0.43l-0.23,-0.8l-0.11,-0.72l-0.17,-0.27l-0.57,-0.4l-0.57,-0.44l-0.53,-0.41l-0.35,-0.67l-0.03,-0.83l-0.01,-0.08l-0.19,-0.82l-0.16,-0.24l-0.65,-0.44l-0.43,-0.43l-0.03,-0.03l-0.97,-0.8l-0.43,-0.05l-0.47,0.23l-0.92,0.15l-0.74,0.09l-0.22,0.1l-0.38,0.35l-0.55,0.12l-0.19,0.1l-0.39,0.38l-0.25,-0.22l-0.38,-0.08l-0.97,0.3l-0.01,0.0l-0.96,0.33l-0.55,0.14l-0.81,0.18l-0.0,0.0l-0.57,0.13l-0.27,-0.04l-0.28,-0.59l-0.31,-0.87l0.11,-0.08l0.16,-0.39l-0.06,-0.37l-0.16,-0.25l-0.46,-0.33l-0.32,-0.26l-0.29,-0.97l-0.01,-0.3l-0.02,-0.12l-0.23,-0.63l-0.28,-0.25l-0.05,-0.01l-0.36,-0.09l-0.15,-0.13l-0.18,-0.26l-0.07,-1.36l-0.16,-0.3l-0.34,-0.26l-0.13,-0.64l-0.1,-0.19l-0.3,-0.32l-0.15,-0.51l-0.01,-0.04l-0.13,-0.32l-0.39,-0.24l-0.74,0.04l-0.04,0.0l-0.33,0.05l-0.45,-0.08l-0.07,-0.01l-0.89,0.0l-0.39,-0.17l-0.23,-0.03l-0.57,0.11l-0.26,0.18l-0.19,0.3l-0.44,-0.05l-0.09,-0.0l-1.04,0.12l-0.07,0.02l-0.56,0.18l-0.22,-0.0l-0.52,-0.26l-0.41,-0.56l-0.52,-1.04l-0.08,-0.11l-0.66,-0.64l-0.32,-0.11l-0.3,0.03l-0.02,-0.07l-0.11,-0.19l-0.49,-0.49l-0.18,-0.19l-0.06,-0.05l-0.45,-0.32l-0.25,-0.24l-0.33,-0.11l-0.58,0.07l-0.15,-0.15l-0.29,-0.55l-0.04,-0.06l-0.67,-0.86l-0.13,-0.37l-0.15,-0.2l-0.39,-0.27l-0.44,-0.01l-0.63,0.39l-0.03,0.02l-0.48,0.36l-0.65,0.24l-0.03,0.01l-0.1,0.05l-0.61,0.44l-0.51,0.16l-1.41,0.45l-0.02,0.01l-0.66,0.25l-0.04,0.02l-0.63,0.31l-1.1,0.43l-0.2,0.18l-0.05,0.09l-0.28,-0.13l-0.04,-0.01l-0.67,-0.24l-0.18,-0.02l-0.61,0.08l-0.41,-0.15l-0.33,-0.33l-0.1,-0.07l-0.09,-0.05l-0.64,-0.4l-0.08,-0.45l-0.02,-0.07l-0.21,-0.58l0.01,-0.74l-0.0,-0.01l-0.01,-0.43l0.25,-0.96l0.36,-0.85l0.19,-0.23l0.06,-0.1l0.22,-0.53l0.1,-0.24l0.15,-0.17l0.1,-0.26l0.01,-0.42l-0.06,-0.22l-0.34,-0.54l-0.47,-0.17l-0.28,0.1l-0.02,0.01l-0.33,0.14l-0.69,0.14l-0.97,-0.09l-0.32,-0.46l0.38,-0.88l0.03,-0.19l-0.03,-0.33l-0.06,-0.18l-0.32,-0.49l-0.15,-0.14l-0.84,-0.43l-0.26,-0.04l-0.5,0.1l-0.04,0.01l-0.55,0.16l-0.29,0.07l-0.56,0.08l-0.67,-0.5l-0.02,-0.04l-0.38,-0.71l0.02,-0.33l-0.36,-0.35l-0.01,-0.01l-0.6,-0.57l-0.72,-0.69l-0.9,-0.87l-0.75,-0.73l-0.05,-0.04l-0.55,-0.37l-0.97,-0.68l-0.8,-0.74l-0.41,-0.72l-0.07,-0.09l-0.75,-0.73l-0.11,-0.17l-0.27,-0.42l-0.02,-0.03l-0.76,-1.0l0.02,-0.64l0.0,-0.0l0.03,-0.74l0.22,-0.5l0.03,-0.14l0.07,-1.19l0.12,-0.59l0.01,-0.03l0.05,-0.41l0.25,-0.47l-0.14,-0.53l-0.46,-0.29l-0.13,-0.05l-0.83,-0.17l-0.04,-0.01l-0.85,-0.08l-0.05,-0.0l-0.9,0.02l-0.05,0.0l-0.71,0.11l-0.1,0.03l-0.57,0.26l-0.59,0.05l-0.01,0.0l-0.64,0.08l-0.03,0.01l-0.62,0.13l-0.04,0.01l-0.51,0.16l-0.62,0.16l-0.67,0.13l-0.35,-0.05l-0.67,-0.09l-0.67,-0.34l-0.47,-0.25l-0.86,-0.46l-0.02,-0.01l-0.79,-0.38l-0.09,-0.03l-1.02,-0.23l-0.12,-0.01l-0.39,0.03l-0.62,-0.32l-0.0,-0.0l-1.05,-0.54l-0.07,-0.03l-0.76,-0.22l-0.11,-0.02l-0.45,-0.01l-0.57,-0.52l-0.31,-0.34l-0.02,-0.02l-0.77,-0.73l-0.03,-0.03l-0.44,-0.34l-0.06,-0.04l-0.21,-0.11l-0.27,-0.04l-0.63,0.14l-0.17,0.02l-0.05,0.01l-0.28,-0.08l-0.78,-0.38l-0.64,-0.67l-0.59,-0.86l-0.25,-0.7l-0.09,-1.34l-0.03,-0.12l-0.55,-1.35l-0.0,-0.91l0.09,-0.76l0.41,-0.57l0.42,-0.48l0.51,-0.38l0.12,-0.15l0.5,-1.09l0.69,-0.8l0.84,-0.41l0.69,-0.32l0.16,-0.14l0.46,-0.67l0.07,-0.28l-0.12,-0.99l-0.08,-0.2l-0.68,-0.85l-0.21,-0.14l-1.19,-0.3l-0.02,-0.0l-0.5,-0.1l-0.1,-0.01l-0.62,0.04l-0.48,0.03l-0.05,0.01l-0.53,0.09l-0.65,0.08l-0.23,0.03l-0.79,0.07l-0.04,0.0l-0.51,0.09l-0.76,0.11l-0.07,0.02l-0.92,0.3l-0.01,0.0l-0.47,0.17l-0.04,0.02l-0.21,0.1l-0.01,0.0l-0.49,0.25l-1.03,0.52l-0.13,0.11l-0.25,0.32l-0.2,0.15Z", "name": "Kogi"}, "2028": {"path": "M179.89,444.87l0.06,0.1l0.28,0.88l0.13,0.56l0.13,0.21l0.32,0.28l0.14,0.08l0.93,0.31l0.08,0.02l0.83,0.1l0.19,-0.02l0.77,-0.28l0.02,-0.01l0.77,-0.33l0.04,-0.02l0.77,-0.45l0.84,-0.38l0.02,-0.01l0.38,-0.2l0.76,0.07l1.02,0.4l0.31,0.32l0.29,0.41l0.3,0.42l0.5,0.8l0.0,0.0l0.02,0.03l0.0,0.01l0.25,0.39l0.13,0.13l0.51,0.3l0.04,0.02l0.64,0.29l0.18,0.04l1.19,-0.05l0.03,-0.0l0.76,-0.09l0.02,-0.0l0.76,-0.12l0.49,0.19l0.95,0.37l0.09,0.02l1.23,0.16l0.12,-0.0l1.13,-0.21l0.09,-0.03l0.82,-0.36l0.3,-0.1l0.37,0.03l0.5,0.12l0.34,0.38l0.68,-0.14l0.37,-1.13l0.85,-1.41l0.02,-0.37l-0.28,-0.61l0.28,-0.62l0.29,-0.63l0.04,-0.17l-0.0,-0.68l0.22,-0.28l0.62,-0.31l0.02,-0.01l0.51,-0.3l1.18,-0.46l1.4,-0.3l0.99,-0.15l1.82,0.28l0.12,0.0l1.68,-0.25l1.0,-0.12l0.0,-0.0l0.36,-0.05l0.03,-0.01l0.31,-0.06l0.01,-0.0l0.07,-0.02l0.01,-0.0l-0.16,0.27l0.09,0.58l-0.12,1.1l-0.0,0.03l-0.05,1.27l-0.0,0.02l0.01,1.32l0.0,0.01l0.04,0.84l0.11,0.26l0.29,0.3l0.07,0.06l0.38,0.25l0.3,0.06l0.16,-0.03l0.17,-0.08l0.37,-0.29l0.07,-0.07l0.23,-0.29l0.95,-0.48l0.0,-0.0l0.48,-0.25l0.18,-0.09l0.44,-0.16l0.88,-0.28l0.73,-0.1l0.02,-0.0l0.5,-0.09l0.78,-0.07l0.01,-0.0l0.24,-0.03l0.66,-0.08l0.02,-0.0l0.51,-0.09l0.46,-0.02l0.01,-0.0l0.57,-0.04l0.44,0.08l1.05,0.26l0.52,0.65l0.09,0.73l-0.31,0.45l-0.6,0.27l-0.01,0.0l-0.92,0.45l-0.13,0.1l-0.78,0.91l-0.06,0.09l-0.48,1.05l-0.46,0.35l-0.06,0.06l-0.46,0.53l-0.02,0.03l-0.48,0.67l-0.07,0.19l-0.1,0.89l-0.0,0.05l0.0,1.01l0.03,0.15l0.56,1.36l0.09,1.33l0.02,0.1l0.28,0.8l0.05,0.09l0.64,0.93l0.04,0.05l0.71,0.74l0.11,0.08l0.88,0.43l0.07,0.03l0.4,0.11l0.17,0.01l0.13,-0.02l0.18,-0.03l0.03,-0.01l0.5,-0.11l0.05,0.02l0.4,0.3l0.74,0.7l0.31,0.34l0.03,0.03l0.7,0.64l0.26,0.1l0.55,0.01l0.67,0.2l1.01,0.52l0.72,0.38l0.22,0.04l0.44,-0.04l0.91,0.2l0.74,0.35l0.85,0.46l0.48,0.26l0.01,0.0l0.74,0.38l0.13,0.04l0.15,0.02l-0.28,0.4l-0.59,0.57l-0.11,0.19l-0.17,0.66l-0.33,0.47l-0.06,0.04l-0.53,0.17l-0.15,-0.17l-0.25,-0.47l-0.19,-0.18l-0.72,-0.34l-0.43,-0.24l-0.25,-0.05l-0.66,0.09l-0.36,-0.15l-0.58,0.3l-0.73,0.24l-0.25,0.24l-0.28,0.78l-0.37,0.81l-0.01,0.01l-0.33,0.81l-0.83,0.84l-0.58,0.38l-1.04,0.4l-0.16,0.11l-0.5,0.57l-0.28,0.32l-0.82,0.92l-0.47,0.51l-0.79,0.65l-0.06,0.06l-0.6,0.77l-0.05,0.09l-0.43,1.05l-0.34,0.77l-0.03,0.09l-0.23,1.18l-0.0,0.03l-0.15,1.17l-0.05,0.38l-0.47,1.29l-0.01,0.03l-0.18,0.62l-0.01,0.04l-0.09,0.52l-0.18,1.0l-0.0,0.01l-0.19,1.27l-0.0,0.01l-0.08,0.57l-0.04,0.26l-0.37,1.42l-0.56,1.34l-0.72,1.69l-0.76,1.67l-0.87,1.3l-0.02,0.03l-0.86,1.52l-1.22,1.59l-0.66,0.85l-0.22,0.18l-0.87,0.7l-1.83,1.31l-0.7,0.34l-0.05,0.03l-0.06,0.04l-0.96,0.65l-1.74,0.84l-1.35,-0.4l-0.03,-0.01l-1.03,-0.22l-0.0,-0.0l-0.0,-0.0l-0.03,-0.08l-0.01,-0.33l-0.04,-0.16l-0.6,-1.25l-0.53,-1.14l0.17,-0.91l-0.01,-0.18l-0.41,-1.45l-0.05,-0.11l-0.54,-0.83l-0.34,-0.82l0.09,-0.49l-0.04,-0.26l-0.52,-0.98l-0.05,-0.08l-0.73,-0.82l-0.06,-0.25l-0.06,-0.14l-0.32,-0.46l-0.24,-0.16l-1.01,-0.23l-0.78,-0.38l-0.07,-0.03l-0.42,-0.11l-0.29,0.03l-0.12,0.06l-0.78,0.06l-1.05,0.05l-0.04,0.0l-1.33,0.22l-1.33,0.06l-2.03,-0.05l-0.02,0.0l-1.13,0.03l-0.95,-0.02l-0.15,-0.02l-1.11,-0.17l-0.06,-0.0l-1.4,0.01l-1.71,-0.28l-0.12,-0.0l-0.67,0.08l-0.89,0.11l-2.32,-0.23l-0.12,0.01l-1.65,0.35l-0.07,0.02l-1.89,0.81l-1.21,0.43l-0.39,0.08l-0.01,-0.02l-0.83,-1.73l-0.37,-1.4l-0.26,-2.11l-0.02,-0.09l-0.36,-1.0l-0.02,-0.05l-0.78,-1.46l-0.48,-1.12l-0.57,-1.33l-0.61,-1.5l-0.01,-0.03l-0.96,-1.93l-0.49,-2.91l-0.32,-2.73l0.43,-1.38l0.44,-1.2l0.21,-0.57l0.02,-0.05l0.34,-1.59l-0.01,-0.19l-0.52,-1.9l-0.0,-0.01l-0.1,-0.33l-0.34,-1.1l0.14,-1.55l0.45,-0.96l0.13,-0.27l0.02,-0.06l0.56,-1.87l0.12,-0.23l0.44,-0.84l0.18,-0.28l0.32,-0.5l1.1,-0.97l0.02,-0.02l0.79,-0.78l1.34,-0.73l1.16,-0.35l0.12,-0.06l1.33,-0.95l0.04,-0.04l0.18,-0.17l0.91,-0.87l0.09,-0.13l0.49,-1.16l0.03,-0.09l0.26,-1.57l0.63,-2.11l0.44,-1.29Z", "name": "Ekiti"}, "2029": {"path": "M318.5,543.56l-0.06,-0.41l0.09,-0.67l0.0,-0.08l-0.07,-1.04l0.02,-1.03l-0.0,-0.02l-0.04,-0.83l-0.13,-0.27l-0.37,-0.34l0.03,-0.13l0.64,-0.63l0.08,-0.12l0.18,-0.41l0.01,-0.02l0.21,-0.54l0.71,-1.25l0.04,-0.09l0.23,-0.83l0.35,-0.94l0.19,-0.42l0.27,-0.15l0.36,0.06l0.38,0.15l0.12,0.24l0.06,0.09l0.0,0.01l0.04,0.36l-0.06,0.92l-0.0,0.0l-0.05,0.8l0.37,0.42l0.59,0.04l0.01,0.05l0.13,0.23l0.66,0.57l0.39,0.69l0.0,0.0l0.4,0.72l0.17,0.16l0.84,0.41l0.22,0.04l0.66,-0.08l0.1,-0.03l0.84,-0.33l0.13,-0.08l0.51,-0.49l0.4,-0.37l0.01,-0.01l0.35,-0.36l0.04,-0.04l0.39,-0.53l0.72,-0.73l0.01,-0.01l0.56,-0.63l0.02,-0.02l0.37,-0.48l0.03,-0.05l0.33,-0.59l0.48,-0.47l0.56,-0.41l0.04,-0.03l0.47,-0.44l0.44,-0.39l0.08,-0.09l0.24,-0.41l0.51,-0.36l0.02,-0.01l0.62,-0.48l0.67,-0.45l0.0,-0.0l0.8,-0.54l0.01,-0.01l0.86,-0.63l0.7,-0.39l0.09,-0.03l0.38,-0.14l0.53,-0.2l0.09,-0.05l1.89,-1.34l0.11,-0.12l0.48,-0.81l0.73,-0.56l0.06,-0.06l0.98,-1.19l0.7,-0.76l0.01,-0.01l0.8,-0.96l0.77,-0.73l0.04,-0.05l0.35,-0.46l0.05,-0.08l0.22,-0.5l0.0,-0.0l0.03,-0.07l0.06,-0.07l0.46,-0.53l0.02,-0.03l0.53,-0.74l0.01,-0.01l0.33,-0.49l0.32,-0.29l0.03,-0.03l0.39,-0.44l0.34,-0.13l0.55,-0.18l0.01,-0.0l0.52,-0.18l0.29,-0.1l0.48,-0.15l0.06,-0.02l0.26,-0.13l0.0,-0.0l0.05,-0.03l0.08,-0.04l0.27,-0.13l0.11,-0.08l0.61,-0.63l0.07,-0.07l0.45,-0.34l0.07,-0.07l0.19,-0.25l0.22,-0.15l0.04,-0.03l0.53,-0.49l0.05,-0.05l0.3,-0.4l1.27,-0.32l0.02,-0.0l0.42,-0.13l1.21,-0.25l0.78,-0.15l0.52,0.33l0.21,0.06l0.38,0.01l0.63,0.24l0.57,0.32l0.28,0.04l0.28,-0.06l0.9,1.11l0.05,0.05l0.2,0.17l-0.02,0.08l-0.16,0.65l0.04,0.29l1.27,2.28l0.86,2.94l0.02,0.05l1.15,2.61l0.05,0.09l0.13,0.16l0.03,0.04l0.0,0.0l1.44,1.79l0.02,0.02l1.9,2.08l0.05,0.05l2.9,2.24l1.43,1.12l0.06,0.04l1.48,0.77l0.59,0.31l1.46,0.77l0.32,0.02l2.54,-0.89l0.16,-0.11l1.42,-1.54l1.07,-0.88l3.12,0.39l1.71,1.3l1.65,2.48l0.28,1.21l0.55,2.35l0.22,3.07l-0.75,2.91l-0.67,1.82l-1.13,2.04l-0.04,0.12l-0.12,0.65l-0.6,0.17l-1.23,0.18l-1.28,-0.09l-1.17,-0.11l-0.06,-0.0l-1.12,0.06l-0.93,-0.21l-0.08,-0.01l-1.88,-0.03l-1.18,-0.27l-0.49,0.33l-0.12,0.78l0.01,0.18l0.34,1.13l0.03,0.07l0.05,0.1l0.0,0.0l0.24,0.45l0.13,0.76l0.02,0.06l0.31,0.91l0.06,0.11l0.3,0.41l0.41,1.15l0.1,1.03l0.0,0.01l0.15,1.27l0.2,1.65l0.16,0.28l0.25,0.18l0.38,0.97l-0.04,2.57l-0.0,0.0l-0.01,1.78l-0.02,1.19l0.0,0.02l0.06,1.36l-0.82,2.17l-0.89,2.05l-0.62,0.68l-0.08,0.13l-0.88,2.32l-0.03,0.14l-0.02,1.49l0.12,0.29l1.21,1.21l0.25,1.88l0.0,0.04l0.03,0.11l0.45,1.01l0.15,0.72l0.28,1.48l-0.04,1.59l0.0,0.04l0.1,1.39l0.03,0.13l0.51,1.17l0.15,1.37l-0.88,1.92l-0.7,0.59l-0.62,0.52l-0.04,0.04l-1.62,1.84l-0.02,0.02l-0.23,0.31l-0.08,0.24l0.01,1.63l0.0,0.04l0.03,0.25l0.15,1.33l0.03,0.12l0.63,1.41l0.35,1.49l-0.04,0.37l-0.64,1.42l-0.0,0.0l-0.01,0.0l-0.27,0.01l-0.14,-0.28l-0.12,-0.05l-1.02,-1.24l-0.02,-0.02l-1.33,-1.39l-0.25,-0.12l-0.74,-0.08l-0.52,-0.8l-0.12,-0.12l-0.91,-0.57l-0.0,-0.0l-0.87,-0.53l-0.23,-0.06l-0.66,0.04l-0.15,0.04l-0.98,0.46l-0.91,0.37l-1.24,0.14l-0.01,0.0l0.0,-0.04l-0.09,-0.27l-0.19,-0.23l-0.15,-0.76l-0.19,-0.27l-0.66,-0.39l-0.84,-0.58l-0.0,-0.0l-0.96,-0.64l-0.18,-0.07l-0.07,-0.01l-1.04,-0.12l-0.01,-0.0l-2.18,-0.21l-0.09,0.0l-1.49,0.2l-1.94,0.12l-0.09,0.02l-1.15,0.34l-0.64,0.12l-0.11,0.04l-0.14,0.07l-0.06,-0.24l-0.18,-0.25l-0.21,-0.12l-0.09,-0.04l-0.31,-0.09l-0.12,-0.04l-0.02,-0.01l-0.38,-0.09l-0.02,-0.0l-0.14,-0.03l0.0,-0.31l-0.14,-0.31l-0.34,-0.28l-0.32,-0.28l-0.09,-0.06l-0.69,-0.32l-0.14,-0.04l-1.31,-0.11l-0.25,0.06l-1.1,0.71l-0.74,0.36l-0.66,-0.15l-0.52,-0.4l-0.28,-0.22l-0.01,-0.01l-1.1,-0.79l-0.4,-0.49l-0.4,-0.54l-0.03,-0.82l-0.01,-0.06l-0.18,-0.9l-0.03,-0.09l-0.33,-0.72l-0.04,-0.07l-0.62,-0.81l-0.34,-0.7l-0.41,-1.03l-0.0,-0.01l-0.49,-1.17l0.0,-1.03l0.23,-0.64l0.01,-0.05l0.17,-0.73l-0.13,-0.4l-0.72,-0.6l-0.18,-0.09l-0.67,-0.13l-0.11,-0.32l-0.09,-0.02l0.0,-0.0l-0.18,-0.32l0.08,-0.57l-0.0,-0.12l-0.13,-0.82l-0.01,-0.05l-0.2,-0.68l-0.3,-0.28l-0.74,-0.15l-0.27,0.04l-0.58,0.32l-0.09,0.07l-0.55,0.57l-0.84,0.32l-0.23,-0.13l-0.27,-0.44l0.03,-0.58l0.4,-0.44l0.1,-0.23l0.06,-0.57l-0.06,-0.26l-0.31,-0.47l-0.15,-0.31l0.02,-0.44l0.07,-0.05l0.03,-0.02l0.59,-0.13l0.29,-0.26l0.01,-0.04l0.0,-0.0l0.12,-0.35l0.15,-0.23l0.06,-0.18l0.04,-0.45l-0.04,-0.22l-0.22,-0.44l-0.04,-0.06l-0.4,-0.53l-0.21,-0.47l-0.01,-0.01l-0.11,-0.14l-0.3,-0.25l-0.3,-0.35l-0.11,-0.66l-0.01,-0.03l-0.21,-0.84l-0.01,-0.03l-0.15,-0.44l-0.03,-0.06l-0.42,-0.79l-0.22,-0.68l-0.03,-0.07l-0.47,-0.86l-0.03,-0.04l-0.63,-0.86l-0.38,-0.65l-0.07,-0.09l-0.68,-0.64l-0.1,-0.07l-0.88,-0.43l-0.07,-0.03l-1.21,-0.33l-0.02,-0.01l-0.97,-0.21l-0.01,-0.0l-0.85,-0.17l-0.45,-0.17l-0.15,-0.05l-0.32,-0.44l0.04,-0.81l0.03,-0.07l0.41,-0.92l0.03,-0.16l0.01,-0.65l0.67,-0.91l0.04,-0.41l-0.22,-0.44l0.1,-0.33l-0.07,-0.21l0.77,-1.25l1.29,-1.48l1.14,-0.83l0.84,-0.52l0.12,-0.11l0.9,-1.3l0.05,-0.11l0.45,-1.48l0.57,-1.58l0.48,-1.09l-0.0,-0.33l-0.43,-0.96l-0.14,-0.17l-1.33,-0.91l-0.13,-0.06l-0.79,-0.19l-0.28,-0.15l-0.05,-0.02l-0.92,-0.34l-1.08,-0.43l-0.21,-0.02l-0.8,0.12l-0.98,-0.03l-0.46,-0.14l-0.62,-0.52l-0.04,-0.03l-1.18,-0.77l-0.08,-0.04l-1.08,-0.38l-0.09,-0.02l-1.0,-0.12l-0.03,-0.0l-0.93,-0.03l-0.16,0.03l-0.85,0.34l-0.82,0.15l-0.53,-0.12Z", "name": "Enugu"}}, "height": 727.3195534136593, "projection": {"type": "mill", "centralMeridian": 0.0}, "width": 900.0});
/**
* jsBezier-0.6
*
* Copyright (c) 2010 - 2013 Simon Porritt (simon.porritt@gmail.com)
*
* licensed under the MIT license.
* 
* a set of Bezier curve functions that deal with Beziers, used by jsPlumb, and perhaps useful for other people.  These functions work with Bezier
* curves of arbitrary degree.
*
* - functions are all in the 'jsBezier' namespace.  
* 
* - all input points should be in the format {x:.., y:..}. all output points are in this format too.
* 
* - all input curves should be in the format [ {x:.., y:..}, {x:.., y:..}, {x:.., y:..}, {x:.., y:..} ]
* 
* - 'location' as used as an input here refers to a decimal in the range 0-1 inclusive, which indicates a point some proportion along the length
* of the curve.  location as output has the same format and meaning.
* 
* 
* Function List:
* --------------
* 
* distanceFromCurve(point, curve)
* 
* 	Calculates the distance that the given point lies from the given Bezier.  Note that it is computed relative to the center of the Bezier,
* so if you have stroked the curve with a wide pen you may wish to take that into account!  The distance returned is relative to the values 
* of the curve and the point - it will most likely be pixels.
* 
* gradientAtPoint(curve, location)
* 
* 	Calculates the gradient to the curve at the given location, as a decimal between 0 and 1 inclusive.
*
* gradientAtPointAlongCurveFrom (curve, location)
*
*	Calculates the gradient at the point on the given curve that is 'distance' units from location. 
* 
* nearestPointOnCurve(point, curve) 
* 
*	Calculates the nearest point to the given point on the given curve.  The return value of this is a JS object literal, containing both the
*point's coordinates and also the 'location' of the point (see above), for example:  { point:{x:551,y:150}, location:0.263365 }.
* 
* pointOnCurve(curve, location)
* 
* 	Calculates the coordinates of the point on the given Bezier curve at the given location.  
* 		
* pointAlongCurveFrom(curve, location, distance)
* 
* 	Calculates the coordinates of the point on the given curve that is 'distance' units from location.  'distance' should be in the same coordinate
* space as that used to construct the Bezier curve.  For an HTML Canvas usage, for example, distance would be a measure of pixels.
*
* locationAlongCurveFrom(curve, location, distance)
* 
* 	Calculates the location on the given curve that is 'distance' units from location.  'distance' should be in the same coordinate
* space as that used to construct the Bezier curve.  For an HTML Canvas usage, for example, distance would be a measure of pixels.
* 
* perpendicularToCurveAt(curve, location, length, distance)
* 
* 	Calculates the perpendicular to the given curve at the given location.  length is the length of the line you wish for (it will be centered
* on the point at 'location'). distance is optional, and allows you to specify a point along the path from the given location as the center of
* the perpendicular returned.  The return value of this is an array of two points: [ {x:...,y:...}, {x:...,y:...} ].  
*  
* 
*/


(function() {
	
	if(typeof Math.sgn == "undefined") {
		Math.sgn = function(x) { return x == 0 ? 0 : x > 0 ? 1 :-1; };
	}
	
	var Vectors = {
			subtract 	: 	function(v1, v2) { return {x:v1.x - v2.x, y:v1.y - v2.y }; },
			dotProduct	: 	function(v1, v2) { return (v1.x * v2.x)  + (v1.y * v2.y); },
			square		:	function(v) { return Math.sqrt((v.x * v.x) + (v.y * v.y)); },
			scale		:	function(v, s) { return {x:v.x * s, y:v.y * s }; }
		},
		
		maxRecursion = 64, 
		flatnessTolerance = Math.pow(2.0,-maxRecursion-1);

	/**
	 * Calculates the distance that the point lies from the curve.
	 * 
	 * @param point a point in the form {x:567, y:3342}
	 * @param curve a Bezier curve in the form [{x:..., y:...}, {x:..., y:...}, {x:..., y:...}, {x:..., y:...}].  note that this is currently
	 * hardcoded to assume cubiz beziers, but would be better off supporting any degree. 
	 * @return a JS object literal containing location and distance, for example: {location:0.35, distance:10}.  Location is analogous to the location
	 * argument you pass to the pointOnPath function: it is a ratio of distance travelled along the curve.  Distance is the distance in pixels from
	 * the point to the curve. 
	 */
	var _distanceFromCurve = function(point, curve) {
		var candidates = [],     
	    	w = _convertToBezier(point, curve),
	    	degree = curve.length - 1, higherDegree = (2 * degree) - 1,
	    	numSolutions = _findRoots(w, higherDegree, candidates, 0),
			v = Vectors.subtract(point, curve[0]), dist = Vectors.square(v), t = 0.0;

	    for (var i = 0; i < numSolutions; i++) {
			v = Vectors.subtract(point, _bezier(curve, degree, candidates[i], null, null));
	    	var newDist = Vectors.square(v);
	    	if (newDist < dist) {
	            dist = newDist;
	        	t = candidates[i];
		    }
	    }
	    v = Vectors.subtract(point, curve[degree]);
		newDist = Vectors.square(v);
	    if (newDist < dist) {
	        dist = newDist;
	    	t = 1.0;
	    }
		return {location:t, distance:dist};
	};
	/**
	 * finds the nearest point on the curve to the given point.
	 */
	var _nearestPointOnCurve = function(point, curve) {    
		var td = _distanceFromCurve(point, curve);
	    return {point:_bezier(curve, curve.length - 1, td.location, null, null), location:td.location};
	};
	var _convertToBezier = function(point, curve) {
		var degree = curve.length - 1, higherDegree = (2 * degree) - 1,
	    	c = [], d = [], cdTable = [], w = [],
	    	z = [ [1.0, 0.6, 0.3, 0.1], [0.4, 0.6, 0.6, 0.4], [0.1, 0.3, 0.6, 1.0] ];	
	    	
	    for (var i = 0; i <= degree; i++) c[i] = Vectors.subtract(curve[i], point);
	    for (var i = 0; i <= degree - 1; i++) { 
			d[i] = Vectors.subtract(curve[i+1], curve[i]);
			d[i] = Vectors.scale(d[i], 3.0);
	    }
	    for (var row = 0; row <= degree - 1; row++) {
			for (var column = 0; column <= degree; column++) {
				if (!cdTable[row]) cdTable[row] = [];
		    	cdTable[row][column] = Vectors.dotProduct(d[row], c[column]);
			}
	    }
	    for (i = 0; i <= higherDegree; i++) {
			if (!w[i]) w[i] = [];
			w[i].y = 0.0;
			w[i].x = parseFloat(i) / higherDegree;
	    }
	    var n = degree, m = degree-1;
	    for (var k = 0; k <= n + m; k++) {
			var lb = Math.max(0, k - m),
				ub = Math.min(k, n);
			for (i = lb; i <= ub; i++) {
		    	j = k - i;
		    	w[i+j].y += cdTable[j][i] * z[j][i];
			}
	    }
	    return w;
	};
	/**
	 * counts how many roots there are.
	 */
	var _findRoots = function(w, degree, t, depth) {  
	    var left = [], right = [],	
	    	left_count, right_count,	
	    	left_t = [], right_t = [];
	    	
	    switch (_getCrossingCount(w, degree)) {
	       	case 0 : {	
	       		return 0;	
	       	}
	       	case 1 : {	
	       		if (depth >= maxRecursion) {
	       			t[0] = (w[0].x + w[degree].x) / 2.0;
	       			return 1;
	       		}
	       		if (_isFlatEnough(w, degree)) {
	       			t[0] = _computeXIntercept(w, degree);
	       			return 1;
	       		}
	       		break;
	       	}
	    }
	    _bezier(w, degree, 0.5, left, right);
	    left_count  = _findRoots(left,  degree, left_t, depth+1);
	    right_count = _findRoots(right, degree, right_t, depth+1);
	    for (var i = 0; i < left_count; i++) t[i] = left_t[i];
	    for (var i = 0; i < right_count; i++) t[i+left_count] = right_t[i];    
		return (left_count+right_count);
	};
	var _getCrossingCount = function(curve, degree) {
	    var n_crossings = 0, sign, old_sign;		    	
	    sign = old_sign = Math.sgn(curve[0].y);
	    for (var i = 1; i <= degree; i++) {
			sign = Math.sgn(curve[i].y);
			if (sign != old_sign) n_crossings++;
			old_sign = sign;
	    }
	    return n_crossings;
	};
	var _isFlatEnough = function(curve, degree) {
	    var  error,
	    	intercept_1, intercept_2, left_intercept, right_intercept,
	    	a, b, c, det, dInv, a1, b1, c1, a2, b2, c2;
	    a = curve[0].y - curve[degree].y;
	    b = curve[degree].x - curve[0].x;
	    c = curve[0].x * curve[degree].y - curve[degree].x * curve[0].y;
	
	    var max_distance_above = max_distance_below = 0.0;
	    
	    for (var i = 1; i < degree; i++) {
	        var value = a * curve[i].x + b * curve[i].y + c;       
	        if (value > max_distance_above)
	            max_distance_above = value;
	        else if (value < max_distance_below)
	        	max_distance_below = value;
	    }
	    
	    a1 = 0.0; b1 = 1.0; c1 = 0.0; a2 = a; b2 = b;
	    c2 = c - max_distance_above;
	    det = a1 * b2 - a2 * b1;
	    dInv = 1.0/det;
	    intercept_1 = (b1 * c2 - b2 * c1) * dInv;
	    a2 = a; b2 = b; c2 = c - max_distance_below;
	    det = a1 * b2 - a2 * b1;
	    dInv = 1.0/det;
	    intercept_2 = (b1 * c2 - b2 * c1) * dInv;
	    left_intercept = Math.min(intercept_1, intercept_2);
	    right_intercept = Math.max(intercept_1, intercept_2);
	    error = right_intercept - left_intercept;
	    return (error < flatnessTolerance)? 1 : 0;
	};
	var _computeXIntercept = function(curve, degree) {
	    var XLK = 1.0, YLK = 0.0,
	    	XNM = curve[degree].x - curve[0].x, YNM = curve[degree].y - curve[0].y,
	    	XMK = curve[0].x - 0.0, YMK = curve[0].y - 0.0,
	    	det = XNM*YLK - YNM*XLK, detInv = 1.0/det,
	    	S = (XNM*YMK - YNM*XMK) * detInv; 
	    return 0.0 + XLK * S;
	};
	var _bezier = function(curve, degree, t, left, right) {
	    var temp = [[]];
	    for (var j =0; j <= degree; j++) temp[0][j] = curve[j];
	    for (var i = 1; i <= degree; i++) {	
			for (var j =0 ; j <= degree - i; j++) {
				if (!temp[i]) temp[i] = [];
				if (!temp[i][j]) temp[i][j] = {};
		    	temp[i][j].x = (1.0 - t) * temp[i-1][j].x + t * temp[i-1][j+1].x;
		    	temp[i][j].y = (1.0 - t) * temp[i-1][j].y + t * temp[i-1][j+1].y;
			}
	    }    
	    if (left != null) 
	    	for (j = 0; j <= degree; j++) left[j]  = temp[j][0];
	    if (right != null)
			for (j = 0; j <= degree; j++) right[j] = temp[degree-j][j];
	    
	    return (temp[degree][0]);
	};
	
	var _curveFunctionCache = {};
	var _getCurveFunctions = function(order) {
		var fns = _curveFunctionCache[order];
		if (!fns) {
			fns = [];			
			var f_term = function() { return function(t) { return Math.pow(t, order); }; },
				l_term = function() { return function(t) { return Math.pow((1-t), order); }; },
				c_term = function(c) { return function(t) { return c; }; },
				t_term = function() { return function(t) { return t; }; },
				one_minus_t_term = function() { return function(t) { return 1-t; }; },
				_termFunc = function(terms) {
					return function(t) {
						var p = 1;
						for (var i = 0; i < terms.length; i++) p = p * terms[i](t);
						return p;
					};
				};
			
			fns.push(new f_term());  // first is t to the power of the curve order		
			for (var i = 1; i < order; i++) {
				var terms = [new c_term(order)];
				for (var j = 0 ; j < (order - i); j++) terms.push(new t_term());
				for (var j = 0 ; j < i; j++) terms.push(new one_minus_t_term());
				fns.push(new _termFunc(terms));
			}
			fns.push(new l_term());  // last is (1-t) to the power of the curve order
		
			_curveFunctionCache[order] = fns;
		}
			
		return fns;
	};
	
	
	/**
	 * calculates a point on the curve, for a Bezier of arbitrary order.
	 * @param curve an array of control points, eg [{x:10,y:20}, {x:50,y:50}, {x:100,y:100}, {x:120,y:100}].  For a cubic bezier this should have four points.
	 * @param location a decimal indicating the distance along the curve the point should be located at.  this is the distance along the curve as it travels, taking the way it bends into account.  should be a number from 0 to 1, inclusive.
	 */
	var _pointOnPath = function(curve, location) {		
		var cc = _getCurveFunctions(curve.length - 1),
			_x = 0, _y = 0;
		for (var i = 0; i < curve.length ; i++) {
			_x = _x + (curve[i].x * cc[i](location));
			_y = _y + (curve[i].y * cc[i](location));
		}
		
		return {x:_x, y:_y};
	};
	
	var _dist = function(p1,p2) {
		return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
	};

	var _isPoint = function(curve) {
		return curve[0].x == curve[1].x && curve[0].y == curve[1].y;
	};
	
	/**
	 * finds the point that is 'distance' along the path from 'location'.  this method returns both the x,y location of the point and also
	 * its 'location' (proportion of travel along the path); the method below - _pointAlongPathFrom - calls this method and just returns the
	 * point.
	 */
	var _pointAlongPath = function(curve, location, distance) {

		if (_isPoint(curve)) {
			return {
				point:curve[0],
				location:location
			};
		}

		var prev = _pointOnPath(curve, location), 
			tally = 0, 
			curLoc = location, 
			direction = distance > 0 ? 1 : -1, 
			cur = null;
			
		while (tally < Math.abs(distance)) {
			curLoc += (0.005 * direction);
			cur = _pointOnPath(curve, curLoc);
			tally += _dist(cur, prev);	
			prev = cur;
		}
		return {point:cur, location:curLoc};        	
	};
	
	var _length = function(curve) {
		if (_isPoint(curve)) return 0;

		var prev = _pointOnPath(curve, 0),
			tally = 0,
			curLoc = 0,
			direction = 1,
			cur = null;
			
		while (curLoc < 1) {
			curLoc += (0.005 * direction);
			cur = _pointOnPath(curve, curLoc);
			tally += _dist(cur, prev);	
			prev = cur;
		}
		return tally;
	};
	
	/**
	 * finds the point that is 'distance' along the path from 'location'.  
	 */
	var _pointAlongPathFrom = function(curve, location, distance) {
		return _pointAlongPath(curve, location, distance).point;
	};

	/**
	 * finds the location that is 'distance' along the path from 'location'.  
	 */
	var _locationAlongPathFrom = function(curve, location, distance) {
		return _pointAlongPath(curve, location, distance).location;
	};
	
	/**
	 * returns the gradient of the curve at the given location, which is a decimal between 0 and 1 inclusive.
	 * 
	 * thanks // http://bimixual.org/AnimationLibrary/beziertangents.html
	 */
	var _gradientAtPoint = function(curve, location) {
		var p1 = _pointOnPath(curve, location),	
			p2 = _pointOnPath(curve.slice(0, curve.length - 1), location),
			dy = p2.y - p1.y, dx = p2.x - p1.x;
		return dy == 0 ? Infinity : Math.atan(dy / dx);		
	};
	
	/**
	returns the gradient of the curve at the point which is 'distance' from the given location.
	if this point is greater than location 1, the gradient at location 1 is returned.
	if this point is less than location 0, the gradient at location 0 is returned.
	*/
	var _gradientAtPointAlongPathFrom = function(curve, location, distance) {
		var p = _pointAlongPath(curve, location, distance);
		if (p.location > 1) p.location = 1;
		if (p.location < 0) p.location = 0;		
		return _gradientAtPoint(curve, p.location);		
	};

	/**
	 * calculates a line that is 'length' pixels long, perpendicular to, and centered on, the path at 'distance' pixels from the given location.
	 * if distance is not supplied, the perpendicular for the given location is computed (ie. we set distance to zero).
	 */
	var _perpendicularToPathAt = function(curve, location, length, distance) {
		distance = distance == null ? 0 : distance;
		var p = _pointAlongPath(curve, location, distance),
			m = _gradientAtPoint(curve, p.location),
			_theta2 = Math.atan(-1 / m),
			y =  length / 2 * Math.sin(_theta2),
			x =  length / 2 * Math.cos(_theta2);
		return [{x:p.point.x + x, y:p.point.y + y}, {x:p.point.x - x, y:p.point.y - y}];
	};
	
	var jsBezier = window.jsBezier = {
		distanceFromCurve : _distanceFromCurve,
		gradientAtPoint : _gradientAtPoint,
		gradientAtPointAlongCurveFrom : _gradientAtPointAlongPathFrom,
		nearestPointOnCurve : _nearestPointOnCurve,
		pointOnCurve : _pointOnPath,		
		pointAlongCurveFrom : _pointAlongPathFrom,
		perpendicularToCurveAt : _perpendicularToPathAt,
		locationAlongCurveFrom:_locationAlongPathFrom,
		getLength:_length
	};
})();

/**
 * jsPlumbGeom v0.1
 *
 * Various geometry functions written as part of jsPlumb and perhaps useful for others.
 *
 * Copyright (c) 2013 Simon Porritt
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
;(function() {

	
	"use strict";

	// Establish the root object, `window` in the browser, or `global` on the server.
	var root = this;
	var jsPlumbGeom;
	if (typeof exports !== 'undefined') {
		jsPlumbGeom = exports;
	} else {
		jsPlumbGeom = root.jsPlumbGeom = {};
	}

	var _isa = function(a) { return Object.prototype.toString.call(a) === "[object Array]"; },
		_pointHelper = function(p1, p2, fn) {
		    p1 = _isa(p1) ? p1 : [p1.x, p1.y];
		    p2 = _isa(p2) ? p2 : [p2.x, p2.y];    
		    return fn(p1, p2);
		},
		/**
		* @name jsPlumbGeom.gradient
		* @function
		* @desc Calculates the gradient of a line between the two points.
		* @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.
		* @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.
		* @return {Float} The gradient of a line between the two points.
		*/
		_gradient = jsPlumbGeom.gradient = function(p1, p2) {
		    return _pointHelper(p1, p2, function(_p1, _p2) { 
		        if (_p2[0] == _p1[0])
		            return _p2[1] > _p1[1] ? Infinity : -Infinity;
		        else if (_p2[1] == _p1[1]) 
		            return _p2[0] > _p1[0] ? 0 : -0;
		        else 
		            return (_p2[1] - _p1[1]) / (_p2[0] - _p1[0]); 
		    });		
		},
		/**
		* @name jsPlumbGeom.normal
		* @function
		* @desc Calculates the gradient of a normal to a line between the two points.
		* @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.
		* @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.
		* @return {Float} The gradient of a normal to a line between the two points.
		*/
		_normal = jsPlumbGeom.normal = function(p1, p2) {
		    return -1 / _gradient(p1, p2);
		},
		/**
		* @name jsPlumbGeom.lineLength
		* @function
		* @desc Calculates the length of a line between the two points.
		* @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.
		* @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.
		* @return {Float} The length of a line between the two points.
		*/
		_lineLength = jsPlumbGeom.lineLength = function(p1, p2) {
		    return _pointHelper(p1, p2, function(_p1, _p2) {
		        return Math.sqrt(Math.pow(_p2[1] - _p1[1], 2) + Math.pow(_p2[0] - _p1[0], 2));			
		    });
		},
		/**
		* @name jsPlumbGeom.quadrant
		* @function
		* @desc Calculates the quadrant in which the angle between the two points lies. 
		* @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.
		* @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.
		* @return {Integer} The quadrant - 1 for upper right, 2 for lower right, 3 for lower left, 4 for upper left.
		*/
		_quadrant = jsPlumbGeom.quadrant = function(p1, p2) {
		    return _pointHelper(p1, p2, function(_p1, _p2) {
		        if (_p2[0] > _p1[0]) {
		            return (_p2[1] > _p1[1]) ? 2 : 1;
		        }
		        else if (_p2[0] == _p1[0]) {
		            return _p2[1] > _p1[1] ? 2 : 1;    
		        }
		        else {
		            return (_p2[1] > _p1[1]) ? 3 : 4;
		        }
		    });
		},
		/**
		* @name jsPlumbGeom.theta
		* @function
		* @desc Calculates the angle between the two points. 
		* @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.
		* @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.
		* @return {Float} The angle between the two points.
		*/
		_theta = jsPlumbGeom.theta = function(p1, p2) {
		    return _pointHelper(p1, p2, function(_p1, _p2) {
		        var m = _gradient(_p1, _p2),
		            t = Math.atan(m),
		            s = _quadrant(_p1, _p2);
		        if ((s == 4 || s== 3)) t += Math.PI;
		        if (t < 0) t += (2 * Math.PI);
		    
		        return t;
		    });
		},
		/**
		* @name jsPlumbGeom.intersects
		* @function
		* @desc Calculates whether or not the two rectangles intersect.
		* @param {Rectangle} r1 First rectangle, as a js object in the form `{x:.., y:.., w:.., h:..}`
		* @param {Rectangle} r2 Second rectangle, as a js object in the form `{x:.., y:.., w:.., h:..}`
		* @return {Boolean} True if the rectangles intersect, false otherwise.
		*/
		_intersects = jsPlumbGeom.intersects = function(r1, r2) {
		    var x1 = r1.x, x2 = r1.x + r1.w, y1 = r1.y, y2 = r1.y + r1.h,
		        a1 = r2.x, a2 = r2.x + r2.w, b1 = r2.y, b2 = r2.y + r2.h;
		
			return  ( (x1 <= a1 && a1 <= x2) && (y1 <= b1 && b1 <= y2) ) ||
			        ( (x1 <= a2 && a2 <= x2) && (y1 <= b1 && b1 <= y2) ) ||
			        ( (x1 <= a1 && a1 <= x2) && (y1 <= b2 && b2 <= y2) ) ||
			        ( (x1 <= a2 && a1 <= x2) && (y1 <= b2 && b2 <= y2) ) ||	
			        ( (a1 <= x1 && x1 <= a2) && (b1 <= y1 && y1 <= b2) ) ||
			        ( (a1 <= x2 && x2 <= a2) && (b1 <= y1 && y1 <= b2) ) ||
			        ( (a1 <= x1 && x1 <= a2) && (b1 <= y2 && y2 <= b2) ) ||
			        ( (a1 <= x2 && x1 <= a2) && (b1 <= y2 && y2 <= b2) );
		},
		_segmentMultipliers = [null, [1, -1], [1, 1], [-1, 1], [-1, -1] ],
		_inverseSegmentMultipliers = [null, [-1, -1], [-1, 1], [1, 1], [1, -1] ],
		/**
		* @name jsPlumbGeom.pointOnLine
		* @function
		* @desc Calculates a point on the line from `fromPoint` to `toPoint` that is `distance` units along the length of the line.
		* @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.
		* @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.
		* @return {Point} Point on the line, in the form `{ x:..., y:... }`.
		*/
		_pointOnLine = jsPlumbGeom.pointOnLine = function(fromPoint, toPoint, distance) {
		    var m = _gradient(fromPoint, toPoint),
		        s = _quadrant(fromPoint, toPoint),
		        segmentMultiplier = distance > 0 ? _segmentMultipliers[s] : _inverseSegmentMultipliers[s],
		        theta = Math.atan(m),
		        y = Math.abs(distance * Math.sin(theta)) * segmentMultiplier[1],
		        x =  Math.abs(distance * Math.cos(theta)) * segmentMultiplier[0];
		    return { x:fromPoint.x + x, y:fromPoint.y + y };
		},
		/**
		* @name jsPlumbGeom.perpendicularLineTo
		* @function
		* @desc Calculates a line of length `length` that is perpendicular to the line from `fromPoint` to `toPoint` and passes through `toPoint`.
		* @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.
		* @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.
		* @return {Line} Perpendicular line, in the form `[ { x:..., y:... }, { x:..., y:... } ]`.
		*/        
		_perpendicularLineTo = jsPlumbGeom.perpendicularLineTo = function(fromPoint, toPoint, length) {
		    var m = _gradient(fromPoint, toPoint),
		        theta2 = Math.atan(-1 / m),
		        y =  length / 2 * Math.sin(theta2),
		        x =  length / 2 * Math.cos(theta2);
		    return [{x:toPoint.x + x, y:toPoint.y + y}, {x:toPoint.x - x, y:toPoint.y - y}];
		};	
}).call(this);
/*
 * jsPlumb
 * 
 * Title:jsPlumb 1.5.5
 * 
 * Provides a way to visually connect elements on an HTML page, using either SVG or VML.  
 * 
 * This file contains the util functions
 *
 * Copyright (c) 2010 - 2013 Simon Porritt (http://jsplumb.org)
 * 
 * http://jsplumb.org
 * http://github.com/sporritt/jsplumb
 * http://code.google.com/p/jsplumb
 * 
 * Dual licensed under the MIT and GPL2 licenses.
 */

;(function() {

    var _isa = function(a) { return Object.prototype.toString.call(a) === "[object Array]"; },
        _isnum = function(n) { return Object.prototype.toString.call(n) === "[object Number]"; },
        _iss = function(s) { return typeof s === "string"; },
        _isb = function(s) { return typeof s === "boolean"; },
        _isnull = function(s) { return s == null; },  
        _iso = function(o) { return o == null ? false : Object.prototype.toString.call(o) === "[object Object]"; },
        _isd = function(o) { return Object.prototype.toString.call(o) === "[object Date]"; },
        _isf = function(o) { return Object.prototype.toString.call(o) === "[object Function]"; },
        _ise = function(o) {
            for (var i in o) { if (o.hasOwnProperty(i)) return false; }
            return true;
        },
        pointHelper = function(p1, p2, fn) {
            p1 = _isa(p1) ? p1 : [p1.x, p1.y];
            p2 = _isa(p2) ? p2 : [p2.x, p2.y];    
            return fn(p1, p2);
        };
    
    jsPlumbUtil = {        
        isArray : _isa,        
        isString : _iss,        
        isBoolean: _isb,        
        isNull : _isnull,        
        isObject : _iso,
        isDate : _isd,
        isFunction: _isf,
        isEmpty:_ise,
        isNumber:_isnum,
        clone : function(a) {
            if (_iss(a)) return "" + a;
            else if (_isb(a)) return !!a;
            else if (_isd(a)) return new Date(a.getTime());
            else if (_isf(a)) return a;
            else if (_isa(a)) {
                var b = [];
                for (var i = 0; i < a.length; i++)
                    b.push(this.clone(a[i]));
                return b;
            }
            else if (_iso(a)) {
                var c = {};
                for (var j in a)
                    c[j] = this.clone(a[j]);
                return c;		
            }
            else return a;
        },
        merge : function(a, b) {		
            var c = this.clone(a);		
            for (var i in b) {
                if (c[i] == null || _iss(b[i]) || _isb(b[i]))
                    c[i] = b[i];
                else {
                    if (_isa(b[i])/* && this.isArray(c[i])*/) {
                        var ar = [];
                        // if c's object is also an array we can keep its values.
                        if (_isa(c[i])) ar.push.apply(ar, c[i]);
                        ar.push.apply(ar, b[i]);
                        c[i] = ar;
                    }
                    else if(_iso(b[i])) {	
                        // overwite c's value with an object if it is not already one.
                        if (!_iso(c[i])) 
                            c[i] = {};
                        for (var j in b[i])
                            c[i][j] = b[i][j];
                    }
                }
            }
            return c;
        },
        copyValues:function(names, from, to) {
            for (var i = 0; i < names.length; i++)
                to[names[i]] = from[names[i]];
        },
        //
        // chain a list of functions, supplied by [ object, method name, args ], and return on the first
        // one that returns the failValue. if none return the failValue, return the successValue.
        //
        functionChain : function(successValue, failValue, fns) {        
            for (var i = 0; i < fns.length; i++) {
                var o = fns[i][0][fns[i][1]].apply(fns[i][0], fns[i][2]);
                if (o === failValue) {
                    return o;
                }
            }                
            return successValue;
        },
        // take the given model and expand out any parameters.
        populate : function(model, values) {		
            // for a string, see if it has parameter matches, and if so, try to make the substitutions.
            var getValue = function(fromString) {
                    var matches = fromString.match(/(\${.*?})/g);
                    if (matches != null) {
                        for (var i = 0; i < matches.length; i++) {
                            var val = values[matches[i].substring(2, matches[i].length - 1)];
                            if (val != null) {
                                fromString = fromString.replace(matches[i], val);
                            }
                        }							
                    }
                    return fromString;
                },		
                // process one entry.
                _one = function(d) {
                    if (d != null) {
                        if (_iss(d)) {
                            return getValue(d);
                        }
                        else if (_isa(d)) {
                            var r = [];	
                            for (var i = 0; i < d.length; i++)
                                r.push(_one(d[i]));
                            return r;
                        }
                        else if (_iso(d)) {
                            var s = {};
                            for (var j in d) {
                                s[j] = _one(d[j]);
                            }
                            return s;
                        }
                        else {
                            return d;
                        }
                    }
                };
            
            return _one(model);	
        },
        convertStyle : function(s, ignoreAlpha) {
            // TODO: jsPlumb should support a separate 'opacity' style member.
            if ("transparent" === s) return s;
            var o = s,
                pad = function(n) { return n.length == 1 ? "0" + n : n; },
                hex = function(k) { return pad(Number(k).toString(16)); },
                pattern = /(rgb[a]?\()(.*)(\))/;
            if (s.match(pattern)) {
                var parts = s.match(pattern)[2].split(",");
                o = "#" + hex(parts[0]) + hex(parts[1]) + hex(parts[2]);
                if (!ignoreAlpha && parts.length == 4) 
                    o = o + hex(parts[3]);
            }
            return o;
        },
        findWithFunction : function(a, f) {
            if (a)
                for (var i = 0; i < a.length; i++) if (f(a[i])) return i;
            return -1;
        },
        clampToGrid : function(x, y, grid, dontClampX, dontClampY) {
            var _gridClamp = function(n, g) { 
                var e = n % g, 
                    f = Math.floor(n / g), 
                    inc = e >= (g / 2) ? 1 : 0; 
                return (f + inc) * g; 
            };
            return [
                dontClampX || grid == null ? x : _gridClamp(x, grid[0]),
                dontClampY || grid == null ? y : _gridClamp(y, grid[1])
            ];		
        },
        indexOf : function(l, v) {
            return jsPlumbUtil.findWithFunction(l, function(_v) { return _v == v; });	
        },
        removeWithFunction : function(a, f) {
            var idx = jsPlumbUtil.findWithFunction(a, f);
            if (idx > -1) a.splice(idx, 1);
            return idx != -1;
        },
        remove : function(l, v) {
            var idx = jsPlumbUtil.indexOf(l, v);	
            if (idx > -1) l.splice(idx, 1);
            return idx != -1;
        },
        // TODO support insert index
        addWithFunction : function(list, item, hashFunction) {
            if (jsPlumbUtil.findWithFunction(list, hashFunction) == -1) list.push(item);
        },
        addToList : function(map, key, value, insertAtStart) {
            var l = map[key];
            if (l == null) {
                l = [];
                map[key] = l;
            }
            l[insertAtStart ? "unshift" : "push"](value);
            return l;
        },
        //
        // extends the given obj (which can be an array) with the given constructor function, prototype functions, and
        // class members, any of which may be null.
        //
        extend : function(child, parent, _protoFn, _protoAtts) {
            _protoFn = _protoFn || {};
            _protoAtts = _protoAtts || {};
            parent = _isa(parent) ? parent : [ parent ];            

            for (var i = 0; i < parent.length; i++) {
                for (var j in parent[i].prototype) {
                    if(parent[i].prototype.hasOwnProperty(j)) {
                        child.prototype[j] = parent[i].prototype[j];
                    }
                }
            }

            var _makeFn = function(name) {
                return function() {
                    for (var i = 0; i < parent.length; i++) {
                        if (parent[i].prototype[name])
                            parent[i].prototype[name].apply(this, arguments);
                    }                    
                    return _protoFn[name].apply(this, arguments);
                };
            };

            for (var k in _protoFn) {
                child.prototype[k] = _makeFn(k);
            }

            return child;
        },
        uuid : function() {
            return ('xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            }));
        },
        logEnabled : true,
        log : function() {
            if (jsPlumbUtil.logEnabled && typeof console != "undefined") {
                try {
                    var msg = arguments[arguments.length - 1];
                    console.log(msg);
                }
                catch (e) {} 
            }
        },
        group : function(g) { if (jsPlumbUtil.logEnabled && typeof console != "undefined") console.group(g); },
        groupEnd : function(g) { if (jsPlumbUtil.logEnabled && typeof console != "undefined") console.groupEnd(g); },
        time : function(t) { if (jsPlumbUtil.logEnabled && typeof console != "undefined") console.time(t); },
        timeEnd : function(t) { if (jsPlumbUtil.logEnabled && typeof console != "undefined") console.timeEnd(t); },
        
        /**
		 * helper to remove an element from the DOM.
		 */
		removeElement : function(element) {
			if (element != null && element.parentNode != null) {
				element.parentNode.removeChild(element);
			}
		},
        /**
		 * helper to remove a list of elements from the DOM.
		 */
		removeElements : function(elements) {
			for ( var i = 0; i < elements.length; i++)
				jsPlumbUtil.removeElement(elements[i]);
		},
        /*
         * Function: sizeElement 
         * Helper to size and position an element. You would typically use
         * this when writing your own Connector or Endpoint implementation.
         * 
         * Parameters: 
         *  x - [int] x position for the element origin 
         *  y - [int] y position for the element origin 
         *  w - [int] width of the element 
         *  h - [int] height of the element
         *  
         */
        sizeElement : function(el, x, y, w, h) {
            if (el) {
                el.style.height = h + "px";
                el.height = h;
                el.style.width = w + "px";
                el.width = w;
                el.style.left = x + "px";
                el.style.top = y + "px";
            }
        },
        /**
        * @name jsPlumbUtil.wrap
        * @desc Wraps one function with another, creating a placeholder for the
        * wrapped function if it was null. this is used to wrap the various
        * drag/drop event functions - to allow jsPlumb to be notified of
        * important lifecycle events without imposing itself on the user's
        * drag/drop functionality. 
        * @param {Function} wrappedFunction original function to wrap; may be null.
        * @param {Function} newFunction function to wrap the original with.
        * @param {Object} [returnOnThisValue] Optional. Indicates that the wrappedFunction should 
        * not be executed if the newFunction returns a value matching 'returnOnThisValue'.
        * note that this is a simple comparison and only works for primitives right now.
        */        
        wrap : function(wrappedFunction, newFunction, returnOnThisValue) {
            wrappedFunction = wrappedFunction || function() { };
            newFunction = newFunction || function() { };
            return function() {
                var r = null;
                try {
                    r = newFunction.apply(this, arguments);
                } catch (e) {
                    jsPlumbUtil.log("jsPlumb function failed : " + e);
                }
                if (returnOnThisValue == null || (r !== returnOnThisValue)) {
                    try {
                        r = wrappedFunction.apply(this, arguments);
                    } catch (e) {
                        jsPlumbUtil.log("wrapped function failed : " + e);
                    }
                }
                return r;
            };
        }
    };

    
    jsPlumbUtil.EventGenerator = function() {
        var _listeners = {}, eventsSuspended = false;
        
        // this is a list of events that should re-throw any errors that occur during their dispatch. as of 1.3.0 this is private to
        // jsPlumb, but it seems feasible that people might want to manipulate this list.  the thinking is that we don't want event
        // listeners to bring down jsPlumb - or do we.  i can't make up my mind about this, but i know i want to hear about it if the "ready"
        // event fails, because then my page has most likely not initialised.  so i have this halfway-house solution.  it will be interesting
        // to hear what other people think.
        var eventsToDieOn = [ "ready" ];
                                        
        this.bind = function(event, listener, insertAtStart) {
            jsPlumbUtil.addToList(_listeners, event, listener, insertAtStart);     
            return this;        
        };
                 
        this.fire = function(event, value, originalEvent) {
            if (!eventsSuspended && _listeners[event]) {
                // instead of looping through the array we get a counter and a length, because it is possible
                // that an event fired from here could cause the object to get cleaned up, which would throw
                // away the listeners. so after each cycle through the loop we check to ensure we haven't
                // been nuked.
                var l = _listeners[event].length, i = 0, _gone = false, ret = null;
                if (!this.shouldFireEvent || this.shouldFireEvent(event, value, originalEvent)) {
                    while (!_gone && i < l && ret !== false) {                    
                    
                        // doing it this way rather than catching and then possibly re-throwing means that an error propagated by this
                        // method will have the whole call stack available in the debugger.
                        if (jsPlumbUtil.findWithFunction(eventsToDieOn, function(e) { return e === event; }) != -1) 
                            _listeners[event][i](value, originalEvent);
                        else {
                            // for events we don't want to die on, catch and log.
                            try {                            
                                ret = _listeners[event][i](value, originalEvent);
                            } catch (e) {
                                jsPlumbUtil.log("jsPlumb: fire failed for event " + event + " : " + e);
                            }
                        }
                        i++;
                        if (_listeners == null || _listeners[event] == null) _gone = true;                    
                    }
                }
            }
            return this;
        };
        
        this.unbind = function(event) {
            if (event)
                delete _listeners[event];
            else {
                _listeners = {};
            }
            return this;
        };
        
        this.getListener = function(forEvent) {
            return _listeners[forEvent];
        };              
        this.setSuspendEvents = function(val) {
            eventsSuspended = val;    
        };        
        this.isSuspendEvents = function() {
            return eventsSuspended;
        };        
        this.cleanupListeners = function() {
            for (var i in _listeners) {
                _listeners[i].splice(0);
                delete _listeners[i];
            }
        };
    };


    jsPlumbUtil.EventGenerator.prototype = {
        cleanup:function() {
            this.cleanupListeners();
        }
    };


    // thanks MDC
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fbind
    if (!Function.prototype.bind) {
      Function.prototype.bind = function (oThis) {
        if (typeof this !== "function") {
          // closest thing possible to the ECMAScript 5 internal IsCallable function
          throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
        }

        var aArgs = Array.prototype.slice.call(arguments, 1), 
            fToBind = this, 
            fNOP = function () {},
            fBound = function () {
              return fToBind.apply(this instanceof fNOP && oThis ? this : oThis,
                                   aArgs.concat(Array.prototype.slice.call(arguments)));
            };

        fNOP.prototype = this.prototype;
        fBound.prototype = new fNOP();

        return fBound;
      };
    }

})();
/*
 * jsPlumb
 * 
 * Title:jsPlumb 1.5.5
 * 
 * Provides a way to visually connect elements on an HTML page, using either SVG, Canvas
 * elements, or VML.  
 * 
 * This file contains the base functionality for DOM type adapters. 
 *
 * Copyright (c) 2010 - 2013 Simon Porritt (http://jsplumb.org)
 * 
 * http://jsplumb.org
 * http://github.com/sporritt/jsplumb
 * http://code.google.com/p/jsplumb
 * 
 * Dual licensed under the MIT and GPL2 licenses.
 */
;(function() {
    
		var canvasAvailable = !!document.createElement('canvas').getContext,
		svgAvailable = !!window.SVGAngle || document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1"),
		// http://stackoverflow.com/questions/654112/how-do-you-detect-support-for-vml-or-svg-in-a-browser
		vmlAvailable = function() {		    
            if (vmlAvailable.vml === undefined) { 
                var a = document.body.appendChild(document.createElement('div'));
            	a.innerHTML = '<v:shape id="vml_flag1" adj="1" />';
            	var b = a.firstChild;
            	if (b != null && b.style != null) {
	            	b.style.behavior = "url(#default#VML)";
	            	vmlAvailable.vml = b ? typeof b.adj == "object": true;
	            }
	            else
	            	vmlAvailable.vml = false;
            	a.parentNode.removeChild(a);
            }
            return vmlAvailable.vml;
		};
        
    /**
		Manages dragging for some instance of jsPlumb.
	*/
	var DragManager = function(_currentInstance) {		
		var _draggables = {}, _dlist = [], _delements = {}, _elementsWithEndpoints = {},			
			// elementids mapped to the draggable to which they belong.
			_draggablesForElements = {};			

        /**
            register some element as draggable.  right now the drag init stuff is done elsewhere, and it is
            possible that will continue to be the case.
        */
		this.register = function(el) {
            var jpcl = jsPlumb.CurrentLibrary,
            	_el = jpcl.getElementObject(el),
            	id = _currentInstance.getId(el),                
                parentOffset = jpcl.getOffset(_el);
                    
            if (!_draggables[id]) {
                _draggables[id] = el;
                _dlist.push(el);
                _delements[id] = {};
            }
				
			// look for child elements that have endpoints and register them against this draggable.
			var _oneLevel = function(p, startOffset) {
                if (p) {											
                    for (var i = 0; i < p.childNodes.length; i++) {
                        if (p.childNodes[i].nodeType != 3 && p.childNodes[i].nodeType != 8) {
                            var cEl = jpcl.getElementObject(p.childNodes[i]),
                                cid = _currentInstance.getId(p.childNodes[i], null, true);
                            if (cid && _elementsWithEndpoints[cid] && _elementsWithEndpoints[cid] > 0) {
                                var cOff = jpcl.getOffset(cEl);
                                _delements[id][cid] = {
                                    id:cid,
                                    offset:{
                                        left:cOff.left - parentOffset.left,
                                        top:cOff.top - parentOffset.top
                                    }
                                };
                                _draggablesForElements[cid] = id;
                            }
                            _oneLevel(p.childNodes[i]);
                        }	
                    }
                }
			};

			_oneLevel(el);
		};
		
		// refresh the offsets for child elements of this element. 
		this.updateOffsets = function(elId) {
			var jpcl = jsPlumb.CurrentLibrary,
				el = jpcl.getElementObject(elId),
				domEl = jpcl.getDOMElement(el),
				id = _currentInstance.getId(domEl),
				children = _delements[id],
				parentOffset = jpcl.getOffset(el);
				
			if (children) {
				for (var i in children) {
					var cel = jpcl.getElementObject(i),
						cOff = jpcl.getOffset(cel);
						
					_delements[id][i] = {
						id:i,
						offset:{
							left:cOff.left - parentOffset.left,
							top:cOff.top - parentOffset.top
						}
					};
					_draggablesForElements[i] = id;
				}
			}
		};

		/**
			notification that an endpoint was added to the given el.  we go up from that el's parent
			node, looking for a parent that has been registered as a draggable. if we find one, we add this
			el to that parent's list of elements to update on drag (if it is not there already)
		*/
		this.endpointAdded = function(el) {
			var jpcl = jsPlumb.CurrentLibrary, b = document.body, id = _currentInstance.getId(el), 
				c = jpcl.getElementObject(el), 
				cLoc = jsPlumb.CurrentLibrary.getOffset(c),
				p = el.parentNode, done = p == b;

			_elementsWithEndpoints[id] = _elementsWithEndpoints[id] ? _elementsWithEndpoints[id] + 1 : 1;

			while (p != null && p != b) {
				var pid = _currentInstance.getId(p, null, true);
				if (pid && _draggables[pid]) {
					var idx = -1, pEl = jpcl.getElementObject(p), pLoc = jpcl.getOffset(pEl);
					
					if (_delements[pid][id] == null) {						
						_delements[pid][id] = {
							id:id,
							offset:{
								left:cLoc.left - pLoc.left,
								top:cLoc.top - pLoc.top
							}
						};
						_draggablesForElements[id] = pid;
					}
					break;
				}
				p = p.parentNode;
			}	
		};

		this.endpointDeleted = function(endpoint) {
			if (_elementsWithEndpoints[endpoint.elementId]) {
				_elementsWithEndpoints[endpoint.elementId]--;
				if (_elementsWithEndpoints[endpoint.elementId] <= 0) {
					for (var i in _delements) {
						if (_delements[i]) {
                            delete _delements[i][endpoint.elementId];
                            delete _draggablesForElements[endpoint.elementId];
                        }
					}
				}
			}		
		};	
		
		this.changeId = function(oldId, newId) {				
			_delements[newId] = _delements[oldId];			
			_delements[oldId] = {};
			_draggablesForElements[newId] = _draggablesForElements[oldId];
			_draggablesForElements[oldId] = null;			
		};

		this.getElementsForDraggable = function(id) {
			return _delements[id];	
		};

		this.elementRemoved = function(elementId) {
			var elId = _draggablesForElements[elementId];
			if (elId) {
				delete _delements[elId][elementId];
				delete _draggablesForElements[elementId];
			}
		};

		this.reset = function() {
			_draggables = {};
			_dlist = [];
			_delements = {};
			_elementsWithEndpoints = {};
		};

		//
		// notification drag ended. from 1.5.5 we check automatically if need to update some
		// ancestor's offsets.
		//
		this.dragEnded = function(el) {			
			var id = _currentInstance.getId(el),
				ancestor = _draggablesForElements[id];

			if (ancestor) this.updateOffsets(ancestor);
		};

		this.setParent = function(el, elId, p, pId) {
			var current = _draggablesForElements[elId];
			if (current) {
				if (!_delements[pId])
					_delements[pId] = {};
				_delements[pId][elId] = _delements[current][elId];
				delete _delements[current][elId];
				var pLoc = jsPlumb.CurrentLibrary.getOffset(p),
					cLoc = jsPlumb.CurrentLibrary.getOffset(el);
				_delements[pId][elId].offset = {
					left:cLoc.left - pLoc.left,
					top:cLoc.top - pLoc.top
				};				
				_draggablesForElements[elId] = pId;
			}			
		};
		
	};
        
    // for those browsers that dont have it.  they still don't have it! but at least they won't crash.
	if (!window.console)
		window.console = { time:function(){}, timeEnd:function(){}, group:function(){}, groupEnd:function(){}, log:function(){} };
            
    window.jsPlumbAdapter = {
        
        headless:false,

        getAttribute:function(el, attName) {
        	return el.getAttribute(attName);
        },

        setAttribute:function(el, a, v) {
        	el.setAttribute(a, v);
        },
        
        appendToRoot : function(node) {
            document.body.appendChild(node);
        },
        getRenderModes : function() {
            return [ "canvas", "svg", "vml" ];
        },
        isRenderModeAvailable : function(m) {
            return {
                "canvas":canvasAvailable,
                "svg":svgAvailable,
                "vml":vmlAvailable()
            }[m];
        },
        getDragManager : function(_jsPlumb) {
            return new DragManager(_jsPlumb);
        },
        setRenderMode : function(mode) {
            var renderMode;
            
            if (mode) {
				mode = mode.toLowerCase();            
			            
                var canvasAvailable = this.isRenderModeAvailable("canvas"),
                    svgAvailable = this.isRenderModeAvailable("svg"),
                    vmlAvailable = this.isRenderModeAvailable("vml");
                
                // now test we actually have the capability to do this.						
                if (mode === "svg") {
                    if (svgAvailable) renderMode = "svg";
                    else if (canvasAvailable) renderMode = "canvas";
                    else if (vmlAvailable) renderMode = "vml";
                }
                else if (mode === "canvas" && canvasAvailable) renderMode = "canvas";
                else if (vmlAvailable) renderMode = "vml";
            }

			return renderMode;
        }
    };
    

    /*

    addClass:

    add: function( elem, classNames ) {
    jQuery.each((classNames || "").split(/\s+/), function(i, className){
        if ( elem.nodeType == 1 && !jQuery.className.has( elem.className, className ) )
            elem.className += (elem.className ? " " : "") + className;
        });
    },
    */

    /*

	removeClass:

    elem.className = classNames !== undefined ?
    	jQuery.grep(elem.className.split(/\s+/), function(className){
    		return !jQuery.className.has( classNames, className );
    	}).join(" ") :

*/

})();
/**
 * @module jsPlumb
 * @description Provides a way to visually connect elements on an HTML page, using either SVG, Canvas
 * elements, or VML.   
 * 
 * - [Demo Site](http://jsplumb.org)
 * - [GitHub](http://github.com/sporritt/jsplumb)
 * 
 * Dual licensed under the MIT and GPL2 licenses.
 *
 * Copyright (c) 2010 - 2013 Simon Porritt (simon.porritt@gmail.com)
 */
;(function() {
			
    var _ju = jsPlumbUtil,
    	_addClass = function(el, clazz) { jsPlumb.CurrentLibrary.addClass(_gel(el), clazz); },
		_hasClass = function(el, clazz) { return jsPlumb.CurrentLibrary.hasClass(_gel(el), clazz); },
		_removeClass = function(el, clazz) { jsPlumb.CurrentLibrary.removeClass(_gel(el), clazz); },
		_gel = function(el) { return jsPlumb.CurrentLibrary.getElementObject(el); },
		_dom = function(el) { return jsPlumb.CurrentLibrary.getDOMElement(el); },		
		_getOffset = function(el, _instance) {
            var o = jsPlumb.CurrentLibrary.getOffset(_gel(el));
			if (_instance != null) {
                var z = _instance.getZoom();
                return {left:o.left / z, top:o.top / z };    
            }
            else
                return o;
        },		
		_getSize = function(el) {
            return jsPlumb.CurrentLibrary.getSize(_gel(el));
        },
		
		/**
		 * creates a timestamp, using milliseconds since 1970, but as a string.
		 */
		_timestamp = function() { return "" + (new Date()).getTime(); },

		// helper method to update the hover style whenever it, or paintStyle, changes.
		// we use paintStyle as the foundation and merge hoverPaintStyle over the
		// top.
		_updateHoverStyle = function(component) {
			if (component._jsPlumb.paintStyle && component._jsPlumb.hoverPaintStyle) {
				var mergedHoverStyle = {};
				jsPlumb.extend(mergedHoverStyle, component._jsPlumb.paintStyle);
				jsPlumb.extend(mergedHoverStyle, component._jsPlumb.hoverPaintStyle);
				delete component._jsPlumb.hoverPaintStyle;
				// we want the fillStyle of paintStyle to override a gradient, if possible.
				if (mergedHoverStyle.gradient && component._jsPlumb.paintStyle.fillStyle)
					delete mergedHoverStyle.gradient;
				component._jsPlumb.hoverPaintStyle = mergedHoverStyle;
			}
		},		
		events = [ "click", "dblclick", "mouseenter", "mouseout", "mousemove", "mousedown", "mouseup", "contextmenu" ],
		eventFilters = { "mouseout":"mouseexit" },
		_updateAttachedElements = function(component, state, timestamp, sourceElement) {
			var affectedElements = component.getAttachedElements();
			if (affectedElements) {
				for (var i = 0, j = affectedElements.length; i < j; i++) {
					if (!sourceElement || sourceElement != affectedElements[i])
						affectedElements[i].setHover(state, true, timestamp);			// tell the attached elements not to inform their own attached elements.
				}
			}
		},
		_splitType = function(t) { return t == null ? null : t.split(" "); },		
		_applyTypes = function(component, params, doNotRepaint) {
			if (component.getDefaultType) {
				var td = component.getTypeDescriptor();
					
				var o = _ju.merge({}, component.getDefaultType());
				for (var i = 0, j = component._jsPlumb.types.length; i < j; i++)
					o = _ju.merge(o, component._jsPlumb.instance.getType(component._jsPlumb.types[i], td));						
					
				if (params) {
					o = _ju.populate(o, params);
				}
			
				component.applyType(o, doNotRepaint);					
				if (!doNotRepaint) component.repaint();
			}
		},		

// ------------------------------ BEGIN jsPlumbUIComponent --------------------------------------------

		jsPlumbUIComponent = window.jsPlumbUIComponent = function(params) {

			jsPlumbUtil.EventGenerator.apply(this, arguments);

			var self = this, 
				a = arguments, 				 				
				idPrefix = self.idPrefix,
				id = idPrefix + (new Date()).getTime(),
				jpcl = jsPlumb.CurrentLibrary;

			this._jsPlumb = { 
				instance: params._jsPlumb,
				parameters:params.parameters || {},
				paintStyle:null,
				hoverPaintStyle:null,
				paintStyleInUse:null,
				hover:false,
				beforeDetach:params.beforeDetach,
				beforeDrop:params.beforeDrop,
				overlayPlacements : [],
				hoverClass: params.hoverClass || params._jsPlumb.Defaults.HoverClass || jsPlumb.Defaults.HoverClass,
				types:[]
			};

			this.getId = function() { return id; };	
			
			// all components can generate events
			
			if (params.events) {
				for (var i in params.events)
					self.bind(i, params.events[i]);
			}

			// all components get this clone function.
			// TODO issue 116 showed a problem with this - it seems 'a' that is in
			// the clone function's scope is shared by all invocations of it, the classic
			// JS closure problem.  for now, jsPlumb does a version of this inline where 
			// it used to call clone.  but it would be nice to find some time to look
			// further at this.
			this.clone = function() {
				var o = {};//new Object();
				this.constructor.apply(o, a);
				return o;
			}.bind(this);				
						
			// user can supply a beforeDetach callback, which will be executed before a detach
			// is performed; returning false prevents the detach.			
			this.isDetachAllowed = function(connection) {
				var r = true;
				if (this._jsPlumb.beforeDetach) {
					try { 
						r = this._jsPlumb.beforeDetach(connection); 
					}
					catch (e) { _ju.log("jsPlumb: beforeDetach callback failed", e); }
				}
				return r;
			};
			
			// user can supply a beforeDrop callback, which will be executed before a dropped
			// connection is confirmed. user can return false to reject connection.			
			this.isDropAllowed = function(sourceId, targetId, scope, connection, dropEndpoint) {
				var r = this._jsPlumb.instance.checkCondition("beforeDrop", { 
					sourceId:sourceId, 
					targetId:targetId, 
					scope:scope,
					connection:connection,
					dropEndpoint:dropEndpoint 
				});
				if (this._jsPlumb.beforeDrop) {
					try { 
						r = this._jsPlumb.beforeDrop({ 
							sourceId:sourceId, 
							targetId:targetId, 
							scope:scope, 
							connection:connection,
							dropEndpoint:dropEndpoint
						}); 
					}
					catch (e) { _ju.log("jsPlumb: beforeDrop callback failed", e); }
				}
				return r;
			};													

		    var boundListeners = [],
		    	bindAListener = function(obj, type, fn) {
			    	boundListeners.push([obj, type, fn]);
			    	obj.bind(type, fn);
			    },
		    	domListeners = [],
            	bindOne = function(o, c, evt) {
					var filteredEvent = eventFilters[evt] || evt,
						fn = function(ee) {
							c.fire(filteredEvent, c, ee);
						};
					domListeners.push([o, evt, fn]);
					jpcl.bind(o, evt, fn);
				},
				unbindOne = function(o, evt, fn) {
					var filteredEvent = eventFilters[evt] || evt;
					jpcl.unbind(o, evt, fn);
				};

            this.bindListeners = function(obj, _self, _hoverFunction) {
                bindAListener(obj, "click", function(ep, e) { _self.fire("click", _self, e); });             
             	bindAListener(obj, "dblclick", function(ep, e) { _self.fire("dblclick", _self, e); });
                bindAListener(obj, "contextmenu", function(ep, e) { _self.fire("contextmenu", _self, e); });
                bindAListener(obj, "mouseenter", function(ep, e) {
                    if (!_self.isHover()) {
                        _hoverFunction(true);
                        _self.fire("mouseenter", _self, e);
                    }
                });
                bindAListener(obj, "mouseexit", function(ep, e) {
                    if (_self.isHover()) {
                        _hoverFunction(false);
                        _self.fire("mouseexit", _self, e);
                    }
                });	  
                bindAListener(obj, "mousedown", function(ep, e) { _self.fire("mousedown", _self, e); });
                bindAListener(obj, "mouseup", function(ep, e) { _self.fire("mouseup", _self, e); });
            };

            this.unbindListeners = function() {
            	for (var i = 0; i < boundListeners.length; i++) {
            		var o = boundListeners[i];
            		o[0].unbind(o[1], o[2]);
            	}            	
            	boundListeners = null;
            };            
		    
		    this.attachListeners = function(o, c) {
				for (var i = 0, j = events.length; i < j; i++) {
					bindOne(o, c, events[i]); 			
				}
			};	
			this.detachListeners = function() {
				for (var i = 0; i < domListeners.length; i++) {
					unbindOne(domListeners[i][0], domListeners[i][1], domListeners[i][2]);
				}
				domListeners = null;
			};	   		    
		    
		    this.reattachListenersForElement = function(o) {
			    if (arguments.length > 1) {
		    		for (var i = 0, j = events.length; i < j; i++)
		    			unbindOne(o, events[i]);
			    	for (i = 1, j = arguments.length; i < j; i++)
		    			this.attachListeners(o, arguments[i]);
		    	}
		    };		    	    			                      
		};

		jsPlumbUtil.extend(jsPlumbUIComponent, jsPlumbUtil.EventGenerator, {
			
			getParameter : function(name) { 
				return this._jsPlumb.parameters[name]; 
			},
			
			setParameter : function(name, value) { 
				this._jsPlumb.parameters[name] = value; 
			},
			
			getParameters : function() { 
				return this._jsPlumb.parameters; 
			},			
			
			setParameters : function(p) { 
				this._jsPlumb.parameters = p; 
			},			
			
			addClass : function(clazz) {
			    if (this.canvas != null)
			        _addClass(this.canvas, clazz);
			},
						
			removeClass : function(clazz) {
			    if (this.canvas != null)
			        _removeClass(this.canvas, clazz);
			},
			
			setType : function(typeId, params, doNotRepaint) {				
				this._jsPlumb.types = _splitType(typeId) || [];
				_applyTypes(this, params, doNotRepaint);									
			},
			
			getType : function() {
				return this._jsPlumb.types;
			},
			
			reapplyTypes : function(params, doNotRepaint) {
				_applyTypes(this, params, doNotRepaint);
			},
			
			hasType : function(typeId) {
				return jsPlumbUtil.indexOf(this._jsPlumb.types, typeId) != -1;
			},
			
			addType : function(typeId, params, doNotRepaint) {
				var t = _splitType(typeId), _cont = false;
				if (t != null) {
					for (var i = 0, j = t.length; i < j; i++) {
						if (!this.hasType(t[i])) {
							this._jsPlumb.types.push(t[i]);
							_cont = true;						
						}
					}
					if (_cont) _applyTypes(this, params, doNotRepaint);
				}
			},
			
			removeType : function(typeId, doNotRepaint) {
				var t = _splitType(typeId), _cont = false, _one = function(tt) {
						var idx = _ju.indexOf(this._jsPlumb.types, tt);
						if (idx != -1) {
							this._jsPlumb.types.splice(idx, 1);
							return true;
						}
						return false;
					}.bind(this);
				
				if (t != null) {
					for (var i = 0,j = t.length; i < j; i++) {
						_cont = _one(t[i]) || _cont;
					}
					if (_cont) _applyTypes(this, null, doNotRepaint);
				}
			},
			
			toggleType : function(typeId, params, doNotRepaint) {
				var t = _splitType(typeId);
				if (t != null) {
					for (var i = 0, j = t.length; i < j; i++) {
						var idx = jsPlumbUtil.indexOf(this._jsPlumb.types, t[i]);
						if (idx != -1)
							this._jsPlumb.types.splice(idx, 1);
						else
							this._jsPlumb.types.push(t[i]);
					}
						
					_applyTypes(this, params, doNotRepaint);
				}
			},
			applyType : function(t, doNotRepaint) {
				this.setPaintStyle(t.paintStyle, doNotRepaint);				
				this.setHoverPaintStyle(t.hoverPaintStyle, doNotRepaint);
				if (t.parameters){
					for (var i in t.parameters)
						this.setParameter(i, t.parameters[i]);
				}
			},
			setPaintStyle : function(style, doNotRepaint) {
//		    	this._jsPlumb.paintStyle = jsPlumb.extend({}, style);
// TODO figure out if we want components to clone paintStyle so as not to share it.
				this._jsPlumb.paintStyle = style;
		    	this._jsPlumb.paintStyleInUse = this._jsPlumb.paintStyle;
		    	_updateHoverStyle(this);
		    	if (!doNotRepaint) this.repaint();
		    },
		    getPaintStyle : function() {
		    	return this._jsPlumb.paintStyle;
		    },
		    setHoverPaintStyle : function(style, doNotRepaint) {		    	
		    	//this._jsPlumb.hoverPaintStyle = jsPlumb.extend({}, style);
// TODO figure out if we want components to clone paintStyle so as not to share it.		    	
		    	this._jsPlumb.hoverPaintStyle = style;
		    	_updateHoverStyle(this);
		    	if (!doNotRepaint) this.repaint();
		    },
		    getHoverPaintStyle : function() {
		    	return this._jsPlumb.hoverPaintStyle;
		    },
			cleanup:function() {		
				this.unbindListeners();
				this.detachListeners();
			},
			destroy:function() {
				this.cleanupListeners();
				this.clone = null;				
				this._jsPlumb = null;
			},
			
			isHover : function() { return this._jsPlumb.hover; },
			
			setHover : function(hover, ignoreAttachedElements, timestamp) {
				var jpcl = jsPlumb.CurrentLibrary;
		    	// while dragging, we ignore these events.  this keeps the UI from flashing and
		    	// swishing and whatevering.
				if (this._jsPlumb && !this._jsPlumb.instance.currentlyDragging && !this._jsPlumb.instance.isHoverSuspended()) {
		    
			    	this._jsPlumb.hover = hover;
                        
                    if (this.canvas != null) {
                        if (this._jsPlumb.instance.hoverClass != null) {                            
                            jpcl[hover ? "addClass" : "removeClass"](this.canvas, this._jsPlumb.instance.hoverClass);						                            
                        }                                              
                    }
		   		 	if (this._jsPlumb.hoverPaintStyle != null) {
						this._jsPlumb.paintStyleInUse = hover ? this._jsPlumb.hoverPaintStyle : this._jsPlumb.paintStyle;
						if (!this._jsPlumb.instance.isSuspendDrawing()) {
							timestamp = timestamp || _timestamp();
							this.repaint({timestamp:timestamp, recalc:false});
						}
					}
					// get the list of other affected elements, if supported by this component.
					// for a connection, its the endpoints.  for an endpoint, its the connections! surprise.
					if (this.getAttachedElements && !ignoreAttachedElements)
						_updateAttachedElements(this, hover, _timestamp(), this);
				}
		    }
		});

// ------------------------------ END jsPlumbUIComponent --------------------------------------------

// ------------------------------ BEGIN OverlayCapablejsPlumbUIComponent --------------------------------------------

		var _internalLabelOverlayId = "__label",
			// helper to get the index of some overlay
			_getOverlayIndex = function(component, id) {
				var idx = -1;
				for (var i = 0, j = component._jsPlumb.overlays.length; i < j; i++) {
					if (id === component._jsPlumb.overlays[i].id) {
						idx = i;
						break;
					}
				}
				return idx;
			},
			// this is a shortcut helper method to let people add a label as
			// overlay.						
			_makeLabelOverlay = function(component, params) {

				var _params = {
					cssClass:params.cssClass,
					labelStyle : component.labelStyle,					
					id:_internalLabelOverlayId,
					component:component,
					_jsPlumb:component._jsPlumb.instance  // TODO not necessary, since the instance can be accessed through the component.
				},
				mergedParams = jsPlumb.extend(_params, params);

				return new jsPlumb.Overlays[component._jsPlumb.instance.getRenderMode()].Label( mergedParams );
			},
			_processOverlay = function(component, o) {
				var _newOverlay = null;
				if (_ju.isArray(o)) {	// this is for the shorthand ["Arrow", { width:50 }] syntax
					// there's also a three arg version:
					// ["Arrow", { width:50 }, {location:0.7}] 
					// which merges the 3rd arg into the 2nd.
					var type = o[0],
						// make a copy of the object so as not to mess up anyone else's reference...
						p = jsPlumb.extend({component:component, _jsPlumb:component._jsPlumb.instance}, o[1]);
					if (o.length == 3) jsPlumb.extend(p, o[2]);
					_newOverlay = new jsPlumb.Overlays[component._jsPlumb.instance.getRenderMode()][type](p);					
				} else if (o.constructor == String) {
					_newOverlay = new jsPlumb.Overlays[component._jsPlumb.instance.getRenderMode()][o]({component:component, _jsPlumb:component._jsPlumb.instance});
				} else {
					_newOverlay = o;
				}										
					
				component._jsPlumb.overlays.push(_newOverlay);
			},
			_calculateOverlaysToAdd = function(component, params) {
				var defaultKeys = component.defaultOverlayKeys || [], o = params.overlays,
					checkKey = function(k) {
						return component._jsPlumb.instance.Defaults[k] || jsPlumb.Defaults[k] || [];
					};
				
				if (!o) o = [];

				for (var i = 0, j = defaultKeys.length; i < j; i++)
					o.unshift.apply(o, checkKey(defaultKeys[i]));
				
				return o;
			},		
			OverlayCapableJsPlumbUIComponent = window.OverlayCapableJsPlumbUIComponent = function(params) {

				jsPlumbUIComponent.apply(this, arguments);
				this._jsPlumb.overlays = [];			

				var _overlays = _calculateOverlaysToAdd(this, params);
				if (_overlays) {
					for (var i = 0, j = _overlays.length; i < j; i++) {
						_processOverlay(this, _overlays[i]);
					}
				}
				
				if (params.label) {
					var loc = params.labelLocation || this.defaultLabelLocation || 0.5,
						labelStyle = params.labelStyle || this._jsPlumb.instance.Defaults.LabelStyle || jsPlumb.Defaults.LabelStyle;

					this._jsPlumb.overlays.push(_makeLabelOverlay(this, {
						label:params.label,
						location:loc,
						labelStyle:labelStyle
					}));
				}			                                  
			};

		jsPlumbUtil.extend(OverlayCapableJsPlumbUIComponent, jsPlumbUIComponent, {
			applyType : function(t, doNotRepaint) {			
				this.removeAllOverlays(doNotRepaint);
				if (t.overlays) {
					for (var i = 0, j = t.overlays.length; i < j; i++)
						this.addOverlay(t.overlays[i], true);
				}
			},
			setHover : function(hover, ignoreAttachedElements, timestamp) {            
				if (this._jsPlumb && !this._jsPlumb.instance.isConnectionBeingDragged()) {
	                for (var i = 0, j = this._jsPlumb.overlays.length; i < j; i++) {
						this._jsPlumb.overlays[i][hover ? "addClass":"removeClass"](this._jsPlumb.instance.hoverClass);
					}
				}
            },
            addOverlay : function(overlay, doNotRepaint) { 
				_processOverlay(this, overlay); 
				if (!doNotRepaint) this.repaint();
			},
			getOverlay : function(id) {
				var idx = _getOverlayIndex(this, id);
				return idx >= 0 ? this._jsPlumb.overlays[idx] : null;
			},			
			getOverlays : function() {
				return this._jsPlumb.overlays;
			},			
			hideOverlay : function(id) {
				var o = this.getOverlay(id);
				if (o) o.hide();
			},
			hideOverlays : function() {
				for (var i = 0, j = this._jsPlumb.overlays.length; i < j; i++)
					this._jsPlumb.overlays[i].hide();
			},
			showOverlay : function(id) {
				var o = this.getOverlay(id);
				if (o) o.show();
			},
			showOverlays : function() {
				for (var i = 0, j = this._jsPlumb.overlays.length; i < j; i++)
					this._jsPlumb.overlays[i].show();
			},
			removeAllOverlays : function(doNotRepaint) {
				for (var i = 0, j = this._jsPlumb.overlays.length; i < j; i++) {
					if (this._jsPlumb.overlays[i].cleanup) this._jsPlumb.overlays[i].cleanup();
				}

				this._jsPlumb.overlays.splice(0, this._jsPlumb.overlays.length);
				this._jsPlumb.overlayPositions = null;
				if (!doNotRepaint)
					this.repaint();
			},
			removeOverlay : function(overlayId) {
				var idx = _getOverlayIndex(this, overlayId);
				if (idx != -1) {
					var o = this._jsPlumb.overlays[idx];
					if (o.cleanup) o.cleanup();
					this._jsPlumb.overlays.splice(idx, 1);
					this._jsPlumb.overlayPositions && delete this._jsPlumb.overlayPositions[overlayId];
				}
			},
			removeOverlays : function() {
				for (var i = 0, j = arguments.length; i < j; i++)
					this.removeOverlay(arguments[i]);
			},
			getLabel : function() {
				var lo = this.getOverlay(_internalLabelOverlayId);
				return lo != null ? lo.getLabel() : null;
			},		
			getLabelOverlay : function() {
				return this.getOverlay(_internalLabelOverlayId);
			},
			setLabel : function(l) {
				var lo = this.getOverlay(_internalLabelOverlayId);
				if (!lo) {
					var params = l.constructor == String || l.constructor == Function ? { label:l } : l;
					lo = _makeLabelOverlay(this, params);	
					this._jsPlumb.overlays.push(lo);
				}
				else {
					if (l.constructor == String || l.constructor == Function) lo.setLabel(l);
					else {
						if (l.label) lo.setLabel(l.label);
						if (l.location) lo.setLocation(l.location);
					}
				}
				
				if (!this._jsPlumb.instance.isSuspendDrawing()) 
					this.repaint();
			},
			cleanup:function() {
				for (var i = 0; i < this._jsPlumb.overlays.length; i++) {
					this._jsPlumb.overlays[i].cleanup();
					this._jsPlumb.overlays[i].destroy();
				}
				this._jsPlumb.overlays.splice(0);
				this._jsPlumb.overlayPositions = null;
			},
			setVisible:function(v) {
				this[v ? "showOverlays" : "hideOverlays"]();
			},
			setAbsoluteOverlayPosition:function(overlay, xy) {
				this._jsPlumb.overlayPositions = this._jsPlumb.overlayPositions || {};
				this._jsPlumb.overlayPositions[overlay.id] = xy;
			},
			getAbsoluteOverlayPosition:function(overlay) {
				return this._jsPlumb.overlayPositions ? this._jsPlumb.overlayPositions[overlay.id] : null;
			}
		});		

// ------------------------------ END OverlayCapablejsPlumbUIComponent --------------------------------------------
		
		var _jsPlumbInstanceIndex = 0,
			getInstanceIndex = function() {
				var i = _jsPlumbInstanceIndex + 1;
				_jsPlumbInstanceIndex++;
				return i;
			};

		var jsPlumbInstance = window.jsPlumbInstance = function(_defaults) {
				
			this.Defaults = {
				Anchor : "BottomCenter",
				Anchors : [ null, null ],
	            ConnectionsDetachable : true,
	            ConnectionOverlays : [ ],
	            Connector : "Bezier",
				Container : null,
				DoNotThrowErrors:false,
				DragOptions : { },
				DropOptions : { },
				Endpoint : "Dot",
				EndpointOverlays : [ ],
				Endpoints : [ null, null ],
				EndpointStyle : { fillStyle : "#456" },
				EndpointStyles : [ null, null ],
				EndpointHoverStyle : null,
				EndpointHoverStyles : [ null, null ],
				HoverPaintStyle : null,
				LabelStyle : { color : "black" },
				LogEnabled : false,
				Overlays : [ ],
				MaxConnections : 1, 
				PaintStyle : { lineWidth : 8, strokeStyle : "#456" },            
				ReattachConnections:false,
				RenderMode : "svg",
				Scope : "jsPlumb_DefaultScope"
			};
			if (_defaults) jsPlumb.extend(this.Defaults, _defaults);
		
			this.logEnabled = this.Defaults.LogEnabled;
			this._connectionTypes = {};
			this._endpointTypes = {};		

			jsPlumbUtil.EventGenerator.apply(this);

			var _currentInstance = this,
				_instanceIndex = getInstanceIndex(),
				_bb = _currentInstance.bind,
				_initialDefaults = {},
	            _zoom = 1,
	            _info = function(el) {
	            	var _el = _dom(el);	
	            	return { el:_el, id:(jsPlumbUtil.isString(el) && _el == null) ? el : _getId(_el) };
	            };
            
	        this.getInstanceIndex = function() { return _instanceIndex; };

        	this.setZoom = function(z, repaintEverything) {
            	_zoom = z;
            	if (repaintEverything) _currentInstance.repaintEverything();
        	};
        	this.getZoom = function() { return _zoom; };
                        
			for (var i in this.Defaults)
				_initialDefaults[i] = this.Defaults[i];
			
			this.bind = function(event, fn) {		
				if ("ready" === event && initialized) fn();
				else _bb.apply(_currentInstance,[event, fn]);
			};

			_currentInstance.importDefaults = function(d) {
				for (var i in d) {
					_currentInstance.Defaults[i] = d[i];
				}	
				return _currentInstance;
			};		
			
			_currentInstance.restoreDefaults = function() {
				_currentInstance.Defaults = jsPlumb.extend({}, _initialDefaults);
				return _currentInstance;
			};
		
		    var log = null,
		        resizeTimer = null,
		        initialized = false,
		        // TODO remove from window scope       
		        connections = [],
		        // map of element id -> endpoint lists. an element can have an arbitrary
		        // number of endpoints on it, and not all of them have to be connected
		        // to anything.         
		        endpointsByElement = {},
		        endpointsByUUID = {},
		        offsets = {},
		        offsetTimestamps = {},
		        floatingConnections = {},
		        draggableStates = {},		
		        connectionBeingDragged = false,
		        sizes = [],
		        _suspendDrawing = false,
		        _suspendedAt = null,
		        DEFAULT_SCOPE = this.Defaults.Scope,
		        renderMode = null,  // will be set in init()		
		        _curIdStamp = 1,
		        _idstamp = function() { return "" + _curIdStamp++; },							
		
				//
				// appends an element to some other element, which is calculated as follows:
				// 
				// 1. if _currentInstance.Defaults.Container exists, use that element.
				// 2. if the 'parent' parameter exists, use that.
				// 3. otherwise just use the root element (for DOM usage, the document body).
				// 
				//
				_appendElement = function(el, parent) {
					if (_currentInstance.Defaults.Container)
						jsPlumb.CurrentLibrary.appendElement(el, _currentInstance.Defaults.Container);
					else if (!parent)
						jsPlumbAdapter.appendToRoot(el);
					else
						jsPlumb.CurrentLibrary.appendElement(el, parent);
				},		
				
				//
				// YUI, for some reason, put the result of a Y.all call into an object that contains
				// a '_nodes' array, instead of handing back an array-like object like the other
				// libraries do.
				//
				_convertYUICollection = function(c) {
					return c._nodes ? c._nodes : c;
				},                

			//
			// Draws an endpoint and its connections. this is the main entry point into drawing connections as well
			// as endpoints, since jsPlumb is endpoint-centric under the hood.
			// 
			// @param element element to draw (of type library specific element object)
			// @param ui UI object from current library's event system. optional.
			// @param timestamp timestamp for this paint cycle. used to speed things up a little by cutting down the amount of offset calculations we do.
			// @param clearEdits defaults to false; indicates that mouse edits for connectors should be cleared
			///
			_draw = function(element, ui, timestamp, clearEdits) {

				// TODO is it correct to filter by headless at this top level? how would a headless adapter ever repaint?
	            if (!jsPlumbAdapter.headless && !_suspendDrawing) {
				    var id = _getId(element),
				    	repaintEls = _currentInstance.dragManager.getElementsForDraggable(id);			    

				    if (timestamp == null) timestamp = _timestamp();

				    // update the offset of everything _before_ we try to draw anything.
				    var o = _updateOffset( { elId : id, offset : ui, recalc : false, timestamp : timestamp });

			        if (repaintEls) {
			    	    for (var i in repaintEls) {									 							
			    	    	// TODO this seems to cause a lag, but we provide the offset, so in theory it 
			    	    	// should not.  is the timestamp failing?
				    		_updateOffset( { 
				    			elId : repaintEls[i].id, 
				    			offset : {
									left:o.o.left + repaintEls[i].offset.left,
					    			top:o.o.top + repaintEls[i].offset.top
					    		}, 
				    			recalc : false, 
				    			timestamp : timestamp 
				    		});
				    	}
				    }	
				    		          

				    _currentInstance.anchorManager.redraw(id, ui, timestamp, null, clearEdits);
				    
				    if (repaintEls) {
					    for (var j in repaintEls) {
							_currentInstance.anchorManager.redraw(repaintEls[j].id, ui, timestamp, repaintEls[j].offset, clearEdits, true);			    	
					    }
					}		
	            }
			},

			//
			// executes the given function against the given element if the first
			// argument is an object, or the list of elements, if the first argument
			// is a list. the function passed in takes (element, elementId) as
			// arguments.
			//
			_elementProxy = function(element, fn) {
				var retVal = null, el, id;
				if (_ju.isArray(element)) {
					retVal = [];
					for ( var i = 0, j = element.length; i < j; i++) {
						el = _gel(element[i]);
						id = _currentInstance.getAttribute(el, "id");
						retVal.push(fn(el, id)); // append return values to what we will return
					}
				} else {
					el = _gel(element);
					id = _currentInstance.getAttribute(el, "id");
					retVal = fn(el, id);
				}
				return retVal;
			},				

			//
			// gets an Endpoint by uuid.
			//
			_getEndpoint = function(uuid) { return endpointsByUUID[uuid]; },

		/**
		 * inits a draggable if it's not already initialised.
		 * TODO: somehow abstract this to the adapter, because the concept of "draggable" has no
		 * place on the server.
		 */
		_initDraggableIfNecessary = function(element, isDraggable, dragOptions) {
			// TODO move to DragManager?
			if (!jsPlumbAdapter.headless) {
				var _draggable = isDraggable == null ? false : isDraggable, jpcl = jsPlumb.CurrentLibrary;
				if (_draggable) {
					if (jpcl.isDragSupported(element) && !jpcl.isAlreadyDraggable(element)) {
						var options = dragOptions || _currentInstance.Defaults.DragOptions || jsPlumb.Defaults.DragOptions;
						options = jsPlumb.extend( {}, options); // make a copy.
						var dragEvent = jpcl.dragEvents.drag,
							stopEvent = jpcl.dragEvents.stop,
							startEvent = jpcl.dragEvents.start;
	
						options[startEvent] = _ju.wrap(options[startEvent], function() {
							_currentInstance.setHoverSuspended(true);							
							_currentInstance.select({source:element}).addClass(_currentInstance.elementDraggingClass + " " + _currentInstance.sourceElementDraggingClass, true);
							_currentInstance.select({target:element}).addClass(_currentInstance.elementDraggingClass + " " + _currentInstance.targetElementDraggingClass, true);
							_currentInstance.setConnectionBeingDragged(true);
						});
	
						options[dragEvent] = _ju.wrap(options[dragEvent], function() {                            
							var ui = jpcl.getUIPosition(arguments, _currentInstance.getZoom());
							_draw(element, ui, null, true);
							_addClass(element, "jsPlumb_dragged");
						});
						options[stopEvent] = _ju.wrap(options[stopEvent], function() {
							var ui = jpcl.getUIPosition(arguments, _currentInstance.getZoom());
							_draw(element, ui);
							_removeClass(element, "jsPlumb_dragged");
							_currentInstance.setHoverSuspended(false);							
							_currentInstance.select({source:element}).removeClass(_currentInstance.elementDraggingClass + " " + _currentInstance.sourceElementDraggingClass, true);
							_currentInstance.select({target:element}).removeClass(_currentInstance.elementDraggingClass + " " + _currentInstance.targetElementDraggingClass, true);
							_currentInstance.setConnectionBeingDragged(false);
							_currentInstance.dragManager.dragEnded(element);
						});
						var elId = _getId(element); // need ID
						draggableStates[elId] = true;  
						var draggable = draggableStates[elId];
						options.disabled = draggable == null ? false : !draggable;
						jpcl.initDraggable(element, options, false, _currentInstance);
						_currentInstance.dragManager.register(element);
					}
				}
			}
		},
		
		/*
		* prepares a final params object that can be passed to _newConnection, taking into account defaults, events, etc.
		*/
		_prepareConnectionParams = function(params, referenceParams) {
			var _p = jsPlumb.extend( { }, params);
			if (referenceParams) jsPlumb.extend(_p, referenceParams);
			
			// hotwire endpoints passed as source or target to sourceEndpoint/targetEndpoint, respectively.
			if (_p.source) {
				if (_p.source.endpoint) 
					_p.sourceEndpoint = _p.source;
				else
					_p.source = _dom(_p.source);
			}
			if (_p.target) {
				if (_p.target.endpoint) 
					_p.targetEndpoint = _p.target;
				else
					_p.target = _dom(_p.target);
			}
			
			// test for endpoint uuids to connect
			if (params.uuids) {
				_p.sourceEndpoint = _getEndpoint(params.uuids[0]);
				_p.targetEndpoint = _getEndpoint(params.uuids[1]);
			}						

			// now ensure that if we do have Endpoints already, they're not full.
			// source:
			if (_p.sourceEndpoint && _p.sourceEndpoint.isFull()) {
				_ju.log(_currentInstance, "could not add connection; source endpoint is full");
				return;
			}

			// target:
			if (_p.targetEndpoint && _p.targetEndpoint.isFull()) {
				_ju.log(_currentInstance, "could not add connection; target endpoint is full");
				return;
			}
			
			// if source endpoint mandates connection type and nothing specified in our params, use it.
			if (!_p.type && _p.sourceEndpoint)
				_p.type = _p.sourceEndpoint.connectionType;
			
			// copy in any connectorOverlays that were specified on the source endpoint.
			// it doesnt copy target endpoint overlays.  i'm not sure if we want it to or not.
			if (_p.sourceEndpoint && _p.sourceEndpoint.connectorOverlays) {
				_p.overlays = _p.overlays || [];
				for (var i = 0, j = _p.sourceEndpoint.connectorOverlays.length; i < j; i++) {
					_p.overlays.push(_p.sourceEndpoint.connectorOverlays[i]);
				}
			}		
            
            // pointer events
            if (!_p["pointer-events"] && _p.sourceEndpoint && _p.sourceEndpoint.connectorPointerEvents)
                _p["pointer-events"] = _p.sourceEndpoint.connectorPointerEvents;
									
			// if there's a target specified (which of course there should be), and there is no
			// target endpoint specified, and 'newConnection' was not set to true, then we check to
			// see if a prior call to makeTarget has provided us with the specs for the target endpoint, and
			// we use those if so.  additionally, if the makeTarget call was specified with 'uniqueEndpoint' set
			// to true, then if that target endpoint has already been created, we re-use it.

			var tid, tep, existingUniqueEndpoint, newEndpoint;

			// TODO: this code can be refactored to be a little dry.
			if (_p.target && !_p.target.endpoint && !_p.targetEndpoint && !_p.newConnection) {
				tid = _getId(_p.target);
				tep =_targetEndpointDefinitions[tid];
				existingUniqueEndpoint = _targetEndpoints[tid];			

				if (tep) {			
					// if target not enabled, return.
					if (!_targetsEnabled[tid]) return;

					// TODO this is dubious. i think it is there so that the endpoint can subsequently
					// be dragged (ie it kicks off the draggable registration). but it is dubious.
					tep.isTarget = true;

					// check for max connections??						
					newEndpoint = existingUniqueEndpoint != null ? existingUniqueEndpoint : _currentInstance.addEndpoint(_p.target, tep);
					if (_targetEndpointsUnique[tid]) _targetEndpoints[tid] = newEndpoint;
					 _p.targetEndpoint = newEndpoint;
					 // TODO test options to makeTarget to see if we should do this?
					 newEndpoint._doNotDeleteOnDetach = false; // reset.
					 newEndpoint._deleteOnDetach = true;					 
				}
			}

			// same thing, but for source.
			if (_p.source && !_p.source.endpoint && !_p.sourceEndpoint && !_p.newConnection) {
				tid = _getId(_p.source);
				tep = _sourceEndpointDefinitions[tid];
				existingUniqueEndpoint = _sourceEndpoints[tid];				

				if (tep) {
					// if source not enabled, return.					
					if (!_sourcesEnabled[tid]) return;

					// TODO this is dubious. i think it is there so that the endpoint can subsequently
					// be dragged (ie it kicks off the draggable registration). but it is dubious.
					//tep.isSource = true;
				
					newEndpoint = existingUniqueEndpoint != null ? existingUniqueEndpoint : _currentInstance.addEndpoint(_p.source, tep);
					if (_sourceEndpointsUnique[tid]) _sourceEndpoints[tid] = newEndpoint;
					 _p.sourceEndpoint = newEndpoint;
					 // TODO test options to makeSource to see if we should do this?
					 newEndpoint._doNotDeleteOnDetach = false; // reset.
					 newEndpoint._deleteOnDetach = true;
				}
			}
			
			return _p;
		},
		
		_newConnection = function(params) {
			var connectionFunc = _currentInstance.Defaults.ConnectionType || _currentInstance.getDefaultConnectionType(),
			    endpointFunc = _currentInstance.Defaults.EndpointType || jsPlumb.Endpoint,
			    parent = jsPlumb.CurrentLibrary.getParent;
			
			if (params.container)
				params.parent = params.container;
			else {
				if (params.sourceEndpoint)
					params.parent = params.sourceEndpoint.parent;
				else if (params.source.constructor == endpointFunc)
					params.parent = params.source.parent;
				else params.parent = parent(params.source);
			}
			
			params._jsPlumb = _currentInstance;
            params.newConnection = _newConnection;
            params.newEndpoint = _newEndpoint;
            params.endpointsByUUID = endpointsByUUID;             
            params.endpointsByElement = endpointsByElement;  
            params.finaliseConnection = _finaliseConnection;
			var con = new connectionFunc(params);
			con.id = "con_" + _idstamp();
			_eventFireProxy("click", "click", con);
			_eventFireProxy("dblclick", "dblclick", con);
            _eventFireProxy("contextmenu", "contextmenu", con);

            // if the connection is draggable, then maybe we need to tell the target endpoint to init the
            // dragging code. it won't run again if it already configured to be draggable.
            if (con.isDetachable()) {
            	con.endpoints[0].initDraggable();
            	con.endpoints[1].initDraggable();
            }

			return con;
		},
		
		//
		// adds the connection to the backing model, fires an event if necessary and then redraws
		//
		_finaliseConnection = function(jpc, params, originalEvent, doInformAnchorManager) {
            params = params || {};
			// add to list of connections (by scope).
            if (!jpc.suspendedEndpoint)
			    connections.push(jpc);
			
            // always inform the anchor manager
            // except that if jpc has a suspended endpoint it's not true to say the
            // connection is new; it has just (possibly) moved. the question is whether
            // to make that call here or in the anchor manager.  i think perhaps here.
            if (jpc.suspendedEndpoint == null || doInformAnchorManager)
            	_currentInstance.anchorManager.newConnection(jpc);

			// force a paint
			_draw(jpc.source);
			
			// fire an event
			if (!params.doNotFireConnectionEvent && params.fireEvent !== false) {
			
				var eventArgs = {
					connection:jpc,
					source : jpc.source, target : jpc.target,
					sourceId : jpc.sourceId, targetId : jpc.targetId,
					sourceEndpoint : jpc.endpoints[0], targetEndpoint : jpc.endpoints[1]
				};
			
				_currentInstance.fire("connection", eventArgs, originalEvent);
			}
		},
		
		_eventFireProxy = function(event, proxyEvent, obj) {
			obj.bind(event, function(originalObject, originalEvent) {
				_currentInstance.fire(proxyEvent, obj, originalEvent);
			});
		},
		
		/*
		 * for the given endpoint params, returns an appropriate parent element for the UI elements that will be added.
		 * this function is used by _newEndpoint (directly below), and also in the makeSource function in jsPlumb.
		 * 
		 *   the logic is to first look for a "container" member of params, and pass that back if found.  otherwise we
		 *   handoff to the 'getParent' function in the current library.
		 */
		_getParentFromParams = function(params) {
			if (params.container)
				return params.container;
			else {
                var tag = jsPlumb.CurrentLibrary.getTagName(params.source),
                    p = jsPlumb.CurrentLibrary.getParent(params.source);
                if (tag && tag.toLowerCase() === "td")
                    return jsPlumb.CurrentLibrary.getParent(p);
                else return p;
            }
		},
		
		/*
			factory method to prepare a new endpoint.  this should always be used instead of creating Endpoints
			manually, since this method attaches event listeners and an id.
		*/
		_newEndpoint = function(params) {
				var endpointFunc = _currentInstance.Defaults.EndpointType || jsPlumb.Endpoint;
				var _p = jsPlumb.extend({}, params);				
				_p.parent = _getParentFromParams(_p);
				_p._jsPlumb = _currentInstance;
                _p.newConnection = _newConnection;
                _p.newEndpoint = _newEndpoint;                
                _p.endpointsByUUID = endpointsByUUID;             
                _p.endpointsByElement = endpointsByElement;  
                _p.finaliseConnection = _finaliseConnection;
                _p.fireDetachEvent = fireDetachEvent;
                _p.fireMoveEvent = fireMoveEvent;
                _p.floatingConnections = floatingConnections;
                _p.getParentFromParams = _getParentFromParams;
                _p.elementId = _getId(_p.source);                
				var ep = new endpointFunc(_p);			
				ep.id = "ep_" + _idstamp();
				_eventFireProxy("click", "endpointClick", ep);
				_eventFireProxy("dblclick", "endpointDblClick", ep);
				_eventFireProxy("contextmenu", "contextmenu", ep);
				if (!jsPlumbAdapter.headless)
					_currentInstance.dragManager.endpointAdded(_p.source);
			return ep;
		},
		
		/*
		 * performs the given function operation on all the connections found
		 * for the given element id; this means we find all the endpoints for
		 * the given element, and then for each endpoint find the connectors
		 * connected to it. then we pass each connection in to the given
		 * function.		 
		 */
		_operation = function(elId, func, endpointFunc) {
			var endpoints = endpointsByElement[elId];
			if (endpoints && endpoints.length) {
				for ( var i = 0, ii = endpoints.length; i < ii; i++) {
					for ( var j = 0, jj = endpoints[i].connections.length; j < jj; j++) {
						var retVal = func(endpoints[i].connections[j]);
						// if the function passed in returns true, we exit.
						// most functions return false.
						if (retVal) return;
					}
					if (endpointFunc) endpointFunc(endpoints[i]);
				}
			}
		},	
		
		_setDraggable = function(element, draggable) {
			return _elementProxy(element, function(el, id) {
				draggableStates[id] = draggable;
				if (jsPlumb.CurrentLibrary.isDragSupported(el)) {
					jsPlumb.CurrentLibrary.setDraggable(el, draggable);
				}
			});
		},
		/*
		 * private method to do the business of hiding/showing.
		 * 
		 * @param el
		 *            either Id of the element in question or a library specific
		 *            object for the element.
		 * @param state
		 *            String specifying a value for the css 'display' property
		 *            ('block' or 'none').
		 */
		_setVisible = function(el, state, alsoChangeEndpoints) {
			state = state === "block";
			var endpointFunc = null;
			if (alsoChangeEndpoints) {
				if (state) endpointFunc = function(ep) {
					ep.setVisible(true, true, true);
				};
				else endpointFunc = function(ep) {
					ep.setVisible(false, true, true);
				};
			}
			var info = _info(el);
			_operation(info.id, function(jpc) {
				if (state && alsoChangeEndpoints) {		
					// this test is necessary because this functionality is new, and i wanted to maintain backwards compatibility.
					// this block will only set a connection to be visible if the other endpoint in the connection is also visible.
					var oidx = jpc.sourceId === info.id ? 1 : 0;
					if (jpc.endpoints[oidx].isVisible()) jpc.setVisible(true);
				}
				else  // the default behaviour for show, and what always happens for hide, is to just set the visibility without getting clever.
					jpc.setVisible(state);
			}, endpointFunc);
		},
		/*
		 * toggles the draggable state of the given element(s).
		 * el is either an id, or an element object, or a list of ids/element objects.
		 */
		_toggleDraggable = function(el) {
			return _elementProxy(el, function(el, elId) {
				var state = draggableStates[elId] == null ? false : draggableStates[elId];
				state = !state;
				draggableStates[elId] = state;
				jsPlumb.CurrentLibrary.setDraggable(el, state);
				return state;
			});
		},
		/**
		 * private method to do the business of toggling hiding/showing.
		 */
		_toggleVisible = function(elId, changeEndpoints) {
			var endpointFunc = null;
			if (changeEndpoints) {
				endpointFunc = function(ep) {
					var state = ep.isVisible();
					ep.setVisible(!state);
				};
			}
			_operation(elId, function(jpc) {
				var state = jpc.isVisible();
				jpc.setVisible(!state);				
			}, endpointFunc);
			// todo this should call _elementProxy, and pass in the
			// _operation(elId, f) call as a function. cos _toggleDraggable does
			// that.
		},
		/**
		 * updates the offset and size for a given element, and stores the
		 * values. if 'offset' is not null we use that (it would have been
		 * passed in from a drag call) because it's faster; but if it is null,
		 * or if 'recalc' is true in order to force a recalculation, we get the current values.
		 */
		_updateOffset = function(params) {
			var timestamp = params.timestamp, recalc = params.recalc, offset = params.offset, elId = params.elId, s;
			if (_suspendDrawing && !timestamp) timestamp = _suspendedAt;
			if (!recalc) {
				if (timestamp && timestamp === offsetTimestamps[elId]) {			
					return {o:params.offset || offsets[elId], s:sizes[elId]};
				}
			}			
			if (recalc || !offset) { // if forced repaint or no offset available, we recalculate.
				// get the current size and offset, and store them
				s = _gel(elId);
				if (s != null) {						
					sizes[elId] = _getSize(s);
					offsets[elId] = _getOffset(s, _currentInstance);
					offsetTimestamps[elId] = timestamp;
				}
			} else {
				offsets[elId] = offset;
                if (sizes[elId] == null) {
                    s = _gel(elId);
                    if (s != null) sizes[elId] = _getSize(s);
                }
                offsetTimestamps[elId] = timestamp;
            }
			
			if(offsets[elId] && !offsets[elId].right) {
				offsets[elId].right = offsets[elId].left + sizes[elId][0];
				offsets[elId].bottom = offsets[elId].top + sizes[elId][1];	
				offsets[elId].width = sizes[elId][0];
				offsets[elId].height = sizes[elId][1];	
				offsets[elId].centerx = offsets[elId].left + (offsets[elId].width / 2);
				offsets[elId].centery = offsets[elId].top + (offsets[elId].height / 2);				
			}
			return {o:offsets[elId], s:sizes[elId]};
		},

		// TODO comparison performance
		_getCachedData = function(elId) {
			var o = offsets[elId];
			if (!o) 
                return _updateOffset({elId:elId});
			else
                return {o:o, s:sizes[elId]};
		},

		/**
		 * gets an id for the given element, creating and setting one if
		 * necessary.  the id is of the form
		 *
		 *	jsPlumb_<instance index>_<index in instance>
		 *
		 * where "index in instance" is a monotonically increasing integer that starts at 0,
		 * for each instance.  this method is used not only to assign ids to elements that do not
		 * have them but also to connections and endpoints.
		 */
		_getId = function(element, uuid, doNotCreateIfNotFound) {
			if (jsPlumbUtil.isString(element)) return element;			
			if (element == null) return null;			
			var id = jsPlumbAdapter.getAttribute(element, "id");
			if (!id || id === "undefined") {
				// check if fixed uuid parameter is given
				if (arguments.length == 2 && arguments[1] !== undefined)
					id = uuid;
				else if (arguments.length == 1 || (arguments.length == 3 && !arguments[2]))
					id = "jsPlumb_" + _instanceIndex + "_" + _idstamp();
				
                if (!doNotCreateIfNotFound) jsPlumbAdapter.setAttribute(element, "id", id);
			}
			return id;
		};

		this.setConnectionBeingDragged = function(v) {
			connectionBeingDragged = v;
		};
		this.isConnectionBeingDragged = function() {
			return connectionBeingDragged;
		};
    
		this.connectorClass = "_jsPlumb_connector";            		
		this.hoverClass = "_jsPlumb_hover";            		
		this.endpointClass = "_jsPlumb_endpoint";		
		this.endpointConnectedClass = "_jsPlumb_endpoint_connected";		
		this.endpointFullClass = "_jsPlumb_endpoint_full";		
		this.endpointDropAllowedClass = "_jsPlumb_endpoint_drop_allowed";		
		this.endpointDropForbiddenClass = "_jsPlumb_endpoint_drop_forbidden";		
		this.overlayClass = "_jsPlumb_overlay";				
		this.draggingClass = "_jsPlumb_dragging";		
		this.elementDraggingClass = "_jsPlumb_element_dragging";			
		this.sourceElementDraggingClass = "_jsPlumb_source_element_dragging";
		this.targetElementDraggingClass = "_jsPlumb_target_element_dragging";
		this.endpointAnchorClassPrefix = "_jsPlumb_endpoint_anchor";
		this.hoverSourceClass = "_jsPlumb_source_hover";	
		this.hoverTargetClass = "_jsPlumb_target_hover";
		this.dragSelectClass = "_jsPlumb_drag_select";

		this.Anchors = {};		
		this.Connectors = {  "canvas":{}, "svg":{}, "vml":{} };				
		this.Endpoints = { "canvas":{}, "svg":{}, "vml":{} };
		this.Overlays = { "canvas":{}, "svg":{}, "vml":{}};		
		this.ConnectorRenderers = {};				
		this.SVG = "svg";
		this.CANVAS = "canvas";		
		this.VML = "vml";
				

// --------------------------- jsPLumbInstance public API ---------------------------------------------------------
					
		
		this.addEndpoint = function(el, params, referenceParams) {
			referenceParams = referenceParams || {};
			var p = jsPlumb.extend({}, referenceParams);
			jsPlumb.extend(p, params);
			p.endpoint = p.endpoint || _currentInstance.Defaults.Endpoint || jsPlumb.Defaults.Endpoint;
			p.paintStyle = p.paintStyle || _currentInstance.Defaults.EndpointStyle || jsPlumb.Defaults.EndpointStyle;
            // YUI wrapper
			el = _convertYUICollection(el);							

			var results = [], 
				inputs = (_ju.isArray(el) || (el.length != null && !_ju.isString(el))) ? el : [ el ];
						
			for (var i = 0, j = inputs.length; i < j; i++) {
				var _el = _dom(inputs[i]), id = _getId(_el);
				p.source = _el;

                _updateOffset({ elId : id, timestamp:_suspendedAt });
				var e = _newEndpoint(p);
				if (p.parentAnchor) e.parentAnchor = p.parentAnchor;
				_ju.addToList(endpointsByElement, id, e);
				var myOffset = offsets[id], 
					myWH = sizes[id],
					anchorLoc = e.anchor.compute( { xy : [ myOffset.left, myOffset.top ], wh : myWH, element : e, timestamp:_suspendedAt }),
					endpointPaintParams = { anchorLoc : anchorLoc, timestamp:_suspendedAt };
				
				if (_suspendDrawing) endpointPaintParams.recalc = false;
				if (!_suspendDrawing) e.paint(endpointPaintParams);
				
				results.push(e);
				e._doNotDeleteOnDetach = true; // mark this as being added via addEndpoint.				
			}
			
			return results.length == 1 ? results[0] : results;
		};
		
		
		this.addEndpoints = function(el, endpoints, referenceParams) {
			var results = [];
			for ( var i = 0, j = endpoints.length; i < j; i++) {
				var e = _currentInstance.addEndpoint(el, endpoints[i], referenceParams);
				if (_ju.isArray(e))
					Array.prototype.push.apply(results, e);
				else results.push(e);
			}
			return results;
		};
		
		this.animate = function(el, properties, options) {
			options = options || {};
			var ele = _gel(el), 
				id = _getId(el),
				stepFunction = jsPlumb.CurrentLibrary.dragEvents.step,
				completeFunction = jsPlumb.CurrentLibrary.dragEvents.complete;

			options[stepFunction] = _ju.wrap(options[stepFunction], function() {
				_currentInstance.repaint(id);
			});

			// onComplete repaints, just to make sure everything looks good at the end of the animation.
			options[completeFunction] = _ju.wrap(options[completeFunction], function() {
				_currentInstance.repaint(id);
			});

			jsPlumb.CurrentLibrary.animate(ele, properties, options);
		};		
		
		/**
		* checks for a listener for the given condition, executing it if found, passing in the given value.
		* condition listeners would have been attached using "bind" (which is, you could argue, now overloaded, since
		* firing click events etc is a bit different to what this does).  i thought about adding a "bindCondition"
		* or something, but decided against it, for the sake of simplicity. jsPlumb will never fire one of these
		* condition events anyway.
		*/
		this.checkCondition = function(conditionName, value) {
			var l = _currentInstance.getListener(conditionName),
				r = true;
				
			if (l && l.length > 0) {
				try {
					for (var i = 0, j = l.length; i < j; i++) {
						r = r && l[i](value); 
					}
				}
				catch (e) { 
					_ju.log(_currentInstance, "cannot check condition [" + conditionName + "]" + e); 
				}
			}
			return r;
		};
		
		/**
		 * checks a condition asynchronously: fires the event handler and passes the handler
		 * a 'proceed' function and a 'stop' function. The handler MUST execute one or other
		 * of these once it has made up its mind.
		 *
		 * Note that although this reads the listener list for the given condition, it
		 * does not loop through and hit each listener, because that, with asynchronous
		 * callbacks, would be messy. so it uses only the first listener registered.
		 */ 
		this.checkASyncCondition = function(conditionName, value, proceed, stop) {
			var l = _currentInstance.getListener(conditionName);
				
			if (l && l.length > 0) {
				try {
					l[0](value, proceed, stop); 					
				}
				catch (e) { 
					_ju.log(_currentInstance, "cannot asynchronously check condition [" + conditionName + "]" + e); 
				}
			}	
		};

		
		this.connect = function(params, referenceParams) {
			// prepare a final set of parameters to create connection with
			var _p = _prepareConnectionParams(params, referenceParams), jpc;
			// TODO probably a nicer return value if the connection was not made.  _prepareConnectionParams
			// will return null (and log something) if either endpoint was full.  what would be nicer is to 
			// create a dedicated 'error' object.
			if (_p) {
				// create the connection.  it is not yet registered 
				jpc = _newConnection(_p);
				// now add it the model, fire an event, and redraw
				_finaliseConnection(jpc, _p);										
			}
			return jpc;
		};		
		
		this.deleteEndpoint = function(object, doNotRepaintAfterwards) {
			var _is = _currentInstance.setSuspendDrawing(true);
			var endpoint = (typeof object == "string") ? endpointsByUUID[object] : object;			
			if (endpoint) {		
				_currentInstance.deleteObject({
					endpoint:endpoint
				});
			}
			if(!_is) _currentInstance.setSuspendDrawing(false, doNotRepaintAfterwards);
			return _currentInstance;									
		};		
		
		this.deleteEveryEndpoint = function() {
			var _is = _currentInstance.setSuspendDrawing(true);
			for ( var id in endpointsByElement) {
				var endpoints = endpointsByElement[id];
				if (endpoints && endpoints.length) {
					for ( var i = 0, j = endpoints.length; i < j; i++) {
						_currentInstance.deleteEndpoint(endpoints[i], true);
					}
				}
			}			
			endpointsByElement = {};			
			endpointsByUUID = {};
			_currentInstance.anchorManager.reset();
			_currentInstance.dragManager.reset();							
			if(!_is) _currentInstance.setSuspendDrawing(false);
			return _currentInstance;
		};

		var fireDetachEvent = function(jpc, doFireEvent, originalEvent) {
            // may have been given a connection, or in special cases, an object
            var connType =  _currentInstance.Defaults.ConnectionType || _currentInstance.getDefaultConnectionType(),
                argIsConnection = jpc.constructor == connType,
                params = argIsConnection ? {
                    connection:jpc,
				    source : jpc.source, target : jpc.target,
				    sourceId : jpc.sourceId, targetId : jpc.targetId,
				    sourceEndpoint : jpc.endpoints[0], targetEndpoint : jpc.endpoints[1]
                } : jpc;

			if (doFireEvent)
				_currentInstance.fire("connectionDetached", params, originalEvent);
			
            _currentInstance.anchorManager.connectionDetached(params);
		};	

		var fireMoveEvent = function(params, evt) {
			_currentInstance.fire("connectionMoved", params, evt);
		};

		this.unregisterEndpoint = function(endpoint) {
			if (endpoint._jsPlumb.uuid) endpointsByUUID[endpoint._jsPlumb.uuid] = null;				
			_currentInstance.anchorManager.deleteEndpoint(endpoint);			
			// TODO at least replace this with a removeWithFunction call.			
			for (var e in endpointsByElement) {
				var endpoints = endpointsByElement[e];
				if (endpoints) {
					var newEndpoints = [];
					for (var i = 0, j = endpoints.length; i < j; i++)
						if (endpoints[i] != endpoint) newEndpoints.push(endpoints[i]);
					
					endpointsByElement[e] = newEndpoints;
				}
				if(endpointsByElement[e].length <1){
					delete endpointsByElement[e];
				}
			}
		};
				
		this.detach = function() {

            if (arguments.length === 0) return;
            var connType =  _currentInstance.Defaults.ConnectionType || _currentInstance.getDefaultConnectionType(),
                firstArgIsConnection = arguments[0].constructor == connType,
                params = arguments.length == 2 ? firstArgIsConnection ? (arguments[1] || {}) : arguments[0] : arguments[0],
                fireEvent = (params.fireEvent !== false),
                forceDetach = params.forceDetach,
                conn = firstArgIsConnection ? arguments[0] : params.connection;
                                                    
				if (conn) {             
                    if (forceDetach || jsPlumbUtil.functionChain(true, false, [
                            [ conn.endpoints[0], "isDetachAllowed", [ conn ] ],    
                            [ conn.endpoints[1], "isDetachAllowed", [ conn ] ],
                            [ conn, "isDetachAllowed", [ conn ] ],
                            [ _currentInstance, "checkCondition", [ "beforeDetach", conn ] ] ])) {
                        
                        conn.endpoints[0].detach(conn, false, true, fireEvent); 
                    }
                }
                else {
					var _p = jsPlumb.extend( {}, params); // a backwards compatibility hack: source should be thought of as 'params' in this case.
					// test for endpoint uuids to detach
					if (_p.uuids) {
						_getEndpoint(_p.uuids[0]).detachFrom(_getEndpoint(_p.uuids[1]), fireEvent);
					} else if (_p.sourceEndpoint && _p.targetEndpoint) {
						_p.sourceEndpoint.detachFrom(_p.targetEndpoint);
					} else {
						var sourceId = _getId(_dom(_p.source)),
						    targetId = _getId(_dom(_p.target));
						_operation(sourceId, function(jpc) {
						    if ((jpc.sourceId == sourceId && jpc.targetId == targetId) || (jpc.targetId == sourceId && jpc.sourceId == targetId)) {
							    if (_currentInstance.checkCondition("beforeDetach", jpc)) {
                                    jpc.endpoints[0].detach(jpc, false, true, fireEvent);
								}
							}
						});
					}
				}
		};

		this.detachAllConnections = function(el, params) {
            params = params || {};
            el = _dom(el);
			var id = _getId(el),
                endpoints = endpointsByElement[id];
			if (endpoints && endpoints.length) {
				for ( var i = 0, j = endpoints.length; i < j; i++) {
					endpoints[i].detachAll(params.fireEvent !== false);
				}
			}
			return _currentInstance;
		};

		this.detachEveryConnection = function(params) {
            params = params || {};
            _currentInstance.doWhileSuspended(function() {
				for ( var id in endpointsByElement) {
					var endpoints = endpointsByElement[id];
					if (endpoints && endpoints.length) {
						for ( var i = 0, j = endpoints.length; i < j; i++) {
							endpoints[i].detachAll(params.fireEvent !== false);
						}
					}
				}
				connections.splice(0);
			});
			return _currentInstance;
		};

		/// not public.  but of course its exposed. how to change this.
		this.deleteObject = function(params) {
			var result = {
					endpoints : {}, 
					connections : {},
					endpointCount:0,
					connectionCount:0
				},
				fireEvent = params.fireEvent !== false,
				deleteAttachedObjects = params.deleteAttachedObjects !== false;

			var unravelConnection = function(connection) {
				if(connection != null && result.connections[connection.id] == null) {
					if (connection._jsPlumb != null) connection.setHover(false);
					result.connections[connection.id] = connection;
					result.connectionCount++;
					if (deleteAttachedObjects) {
						for (var j = 0; j < connection.endpoints.length; j++) {
							if (connection.endpoints[j]._deleteOnDetach)
								unravelEndpoint(connection.endpoints[j]);
						}
					}					
				}
			};
			var unravelEndpoint = function(endpoint) {
				if(endpoint != null && result.endpoints[endpoint.id] == null) {
					if (endpoint._jsPlumb != null) endpoint.setHover(false);
					result.endpoints[endpoint.id] = endpoint;
					result.endpointCount++;

					if (deleteAttachedObjects) {
						for (var i = 0; i < endpoint.connections.length; i++) {
							var c = endpoint.connections[i];
							unravelConnection(c);						
						}
					}
				}
			};

			if (params.connection) 
				unravelConnection(params.connection);
			else unravelEndpoint(params.endpoint);

			// loop through connections
			for (var i in result.connections) {
				var c = result.connections[i];
				c.endpoints[0].detachFromConnection(c);
				c.endpoints[1].detachFromConnection(c);
				//_currentInstance.unregisterConnection(c);
				jsPlumbUtil.removeWithFunction(connections, function(_c) {
				    return c.id == _c.id;
				});
				fireDetachEvent(c, fireEvent, params.originalEvent);
				c.cleanup();
				c.destroy();
			}

			// loop through endpoints
			for (var j in result.endpoints) {
				var e = result.endpoints[j];	
				_currentInstance.unregisterEndpoint(e);
				// FIRE some endpoint deleted event?
				e.cleanup();
				e.destroy();
			}	

			return result;
		};
 
		this.draggable = function(el, options) {
			var i,j,ele;
			// allows for array or jquery/mootools selector
			if (typeof el == 'object' && el.length) {
				for (i = 0, j = el.length; i < j; i++) {
					ele = _dom(el[i]);
					if (ele) _initDraggableIfNecessary(ele, true, options);
				}
			} 
			// allows for YUI selector
			else if (el._nodes) { 	// TODO this is YUI specific; really the logic should be forced
				// into the library adapters (for jquery and mootools aswell)
				for (i = 0, j = el._nodes.length; i < j; i++) {
					ele = _dom(el._nodes[i]);
					if (ele) _initDraggableIfNecessary(ele, true, options);
				}
			}
			else {				
				ele = _dom(el);
				if (ele) _initDraggableIfNecessary(ele, true, options);
			}
			return _currentInstance;
		};


		// just a library-agnostic wrapper.
		this.extend = function(o1, o2) {
			return jsPlumb.CurrentLibrary.extend(o1, o2);
		};

		// helpers for select/selectEndpoints
		var _setOperation = function(list, func, args, selector) {
				for (var i = 0, j = list.length; i < j; i++) {
					list[i][func].apply(list[i], args);
				}	
				return selector(list);
			},
			_getOperation = function(list, func, args) {
				var out = [];
				for (var i = 0, j = list.length; i < j; i++) {					
					out.push([ list[i][func].apply(list[i], args), list[i] ]);
				}	
				return out;
			},
			setter = function(list, func, selector) {
				return function() {
					return _setOperation(list, func, arguments, selector);
				};
			},
			getter = function(list, func) {
				return function() {
					return _getOperation(list, func, arguments);
				};	
			},
			prepareList = function(input, doNotGetIds) {
				var r = [];
				if (input) {
					if (typeof input == 'string') {
						if (input === "*") return input;
						r.push(input);
					}
					else {
						input = _gel(input);
						if (doNotGetIds) r = input;
						else { 
							for (var i = 0, j = input.length; i < j; i++) 
								r.push(_info(input[i]).id);
						}	
					}
				}
				return r;
			},
			filterList = function(list, value, missingIsFalse) {
				if (list === "*") return true;
				return list.length > 0 ? jsPlumbUtil.indexOf(list, value) != -1 : !missingIsFalse;
			};

		// get some connections, specifying source/target/scope
		this.getConnections = function(options, flat) {
			if (!options) {
				options = {};
			} else if (options.constructor == String) {
				options = { "scope": options };
			}
			var scope = options.scope || _currentInstance.getDefaultScope(),
				scopes = prepareList(scope, true),
				sources = prepareList(options.source),
				targets = prepareList(options.target),			
				results = (!flat && scopes.length > 1) ? {} : [],
				_addOne = function(scope, obj) {
					if (!flat && scopes.length > 1) {
						var ss = results[scope];
						if (ss == null) {
							ss = results[scope] = [];
						}
						ss.push(obj);
					} else results.push(obj);
				};
			
			for ( var j = 0, jj = connections.length; j < jj; j++) {
				var c = connections[j];
				if (filterList(scopes, c.scope) && filterList(sources, c.sourceId) && filterList(targets, c.targetId))
					_addOne(c.scope, c);
			}
			
			return results;
		};
		
		var _curryEach = function(list, executor) {
				return function(f) {
					for (var i = 0, ii = list.length; i < ii; i++) {
						f(list[i]);
					}
					return executor(list);
				};		
			},
			_curryGet = function(list) {
				return function(idx) {
					return list[idx];
				};
			};
			
		var _makeCommonSelectHandler = function(list, executor) {
            var out = {
                    length:list.length,
				    each:_curryEach(list, executor),
				    get:_curryGet(list)
                },
                setters = ["setHover", "removeAllOverlays", "setLabel", "addClass", "addOverlay", "removeOverlay", 
                           "removeOverlays", "showOverlay", "hideOverlay", "showOverlays", "hideOverlays", "setPaintStyle",
                           "setHoverPaintStyle", "setSuspendEvents", "setParameter", "setParameters", "setVisible", 
                           "repaint", "addType", "toggleType", "removeType", "removeClass", "setType", "bind", "unbind" ],
                
                getters = ["getLabel", "getOverlay", "isHover", "getParameter", "getParameters", "getPaintStyle",
                           "getHoverPaintStyle", "isVisible", "hasType", "getType", "isSuspendEvents" ],
                i, ii;
            
            for (i = 0, ii = setters.length; i < ii; i++)
                out[setters[i]] = setter(list, setters[i], executor);
            
            for (i = 0, ii = getters.length; i < ii; i++)
                out[getters[i]] = getter(list, getters[i]);       
            
            return out;
		};
		
		var	_makeConnectionSelectHandler = function(list) {
			var common = _makeCommonSelectHandler(list, _makeConnectionSelectHandler);
			return jsPlumb.CurrentLibrary.extend(common, {
				// setters									
				setDetachable:setter(list, "setDetachable", _makeConnectionSelectHandler),
				setReattach:setter(list, "setReattach", _makeConnectionSelectHandler),
				setConnector:setter(list, "setConnector", _makeConnectionSelectHandler),			
				detach:function() {
					for (var i = 0, ii = list.length; i < ii; i++)
						_currentInstance.detach(list[i]);
				},				
				// getters
				isDetachable:getter(list, "isDetachable"),
				isReattach:getter(list, "isReattach")
			});
		};
		
		var	_makeEndpointSelectHandler = function(list) {
			var common = _makeCommonSelectHandler(list, _makeEndpointSelectHandler);
			return jsPlumb.CurrentLibrary.extend(common, {
				setEnabled:setter(list, "setEnabled", _makeEndpointSelectHandler),				
				setAnchor:setter(list, "setAnchor", _makeEndpointSelectHandler),
				isEnabled:getter(list, "isEnabled"),
				detachAll:function() {
					for (var i = 0, ii = list.length; i < ii; i++)
						list[i].detachAll();
				},
				"remove":function() {
					for (var i = 0, ii = list.length; i < ii; i++)
						_currentInstance.deleteObject({endpoint:list[i]});
				}
			});
		};
			

		this.select = function(params) {
			params = params || {};
			params.scope = params.scope || "*";
			return _makeConnectionSelectHandler(params.connections || _currentInstance.getConnections(params, true));							
		};		

		this.selectEndpoints = function(params) {
			params = params || {};
			params.scope = params.scope || "*";
			var noElementFilters = !params.element && !params.source && !params.target,			
				elements = noElementFilters ? "*" : prepareList(params.element),
				sources = noElementFilters ? "*" : prepareList(params.source),
				targets = noElementFilters ? "*" : prepareList(params.target),
				scopes = prepareList(params.scope, true);
			
			var ep = [];
			
			for (var el in endpointsByElement) {
				var either = filterList(elements, el, true),
					source = filterList(sources, el, true),
					sourceMatchExact = sources != "*",
					target = filterList(targets, el, true),
					targetMatchExact = targets != "*"; 
					
				// if they requested 'either' then just match scope. otherwise if they requested 'source' (not as a wildcard) then we have to match only endpoints that have isSource set to to true, and the same thing with isTarget.  
				if ( either || source  || target ) {
					inner:
					for (var i = 0, ii = endpointsByElement[el].length; i < ii; i++) {
						var _ep = endpointsByElement[el][i];
						if (filterList(scopes, _ep.scope, true)) {
						
							var noMatchSource = (sourceMatchExact && sources.length > 0 && !_ep.isSource),
								noMatchTarget = (targetMatchExact && targets.length > 0 && !_ep.isTarget);
						
							if (noMatchSource || noMatchTarget)								  
								  continue inner; 
							 							
							ep.push(_ep);		
						}
					}
				}					
			}
			
			return _makeEndpointSelectHandler(ep);
		};

		// get all connections managed by the instance of jsplumb.
		this.getAllConnections = function() { return connections; };
		this.getDefaultScope = function() { return DEFAULT_SCOPE; };
		// get an endpoint by uuid.
		this.getEndpoint = _getEndpoint;				
		// get endpoints for some element.
		this.getEndpoints = function(el) { return endpointsByElement[_info(el).id]; };		
		// gets the default endpoint type. used when subclassing. see wiki.
		this.getDefaultEndpointType = function() { return jsPlumb.Endpoint; };		
		// gets the default connection type. used when subclassing.  see wiki.
		this.getDefaultConnectionType = function() { return jsPlumb.Connection; };
		/*
		 * Gets an element's id, creating one if necessary. really only exposed
		 * for the lib-specific functionality to access; would be better to pass
		 * the current instance into the lib-specific code (even though this is
		 * a static call. i just don't want to expose it to the public API).
		 */
		this.getId = _getId;
		this.getOffset = function(id) { 
			var o = offsets[id]; 
			return _updateOffset({elId:id});
		};

		this.getSelector = function() {
			return jsPlumb.CurrentLibrary.getSelector.apply(null, arguments);
		};
		
		// get the size of the element with the given id, perhaps from cache.
		this.getSize = function(id) { 
			var s = sizes[id]; 
			if (!s) _updateOffset({elId:id});
			return sizes[id];
		};		
		
		this.appendElement = _appendElement;
		
		var _hoverSuspended = false;
		this.isHoverSuspended = function() { return _hoverSuspended; };
		this.setHoverSuspended = function(s) { _hoverSuspended = s; };

		var _isAvailable = function(m) {
			return function() {
				return jsPlumbAdapter.isRenderModeAvailable(m);
			};
		};
		this.isCanvasAvailable = _isAvailable("canvas");
		this.isSVGAvailable = _isAvailable("svg");
		this.isVMLAvailable = _isAvailable("vml");

		// set an element's connections to be hidden
		this.hide = function(el, changeEndpoints) {
			_setVisible(el, "none", changeEndpoints);
			return _currentInstance;
		};
		
		// exposed for other objects to use to get a unique id.
		this.idstamp = _idstamp;

		this.connectorsInitialized = false;
		var connectorTypes = [], rendererTypes = ["canvas", "svg", "vml"];
		this.registerConnectorType = function(connector, name) {
			connectorTypes.push([connector, name]);
		};
		
		/**
		 * callback from the current library to tell us to prepare ourselves (attach
		 * mouse listeners etc; can't do that until the library has provided a bind method)		 
		 */
		this.init = function() {
			var _oneType = function(renderer, name, fn) {
				jsPlumb.Connectors[renderer][name] = function() {
					fn.apply(this, arguments);
					jsPlumb.ConnectorRenderers[renderer].apply(this, arguments);		
				};
				jsPlumbUtil.extend(jsPlumb.Connectors[renderer][name], [ fn, jsPlumb.ConnectorRenderers[renderer]]);
			};

			if (!jsPlumb.connectorsInitialized) {
				for (var i = 0; i < connectorTypes.length; i++) {
					for (var j = 0; j < rendererTypes.length; j++) {
						_oneType(rendererTypes[j], connectorTypes[i][1], connectorTypes[i][0]);												
					}

				}
				jsPlumb.connectorsInitialized = true;
			}
			
			if (!initialized) {                
                _currentInstance.anchorManager = new jsPlumb.AnchorManager({jsPlumbInstance:_currentInstance});                
				_currentInstance.setRenderMode(_currentInstance.Defaults.RenderMode);  // calling the method forces the capability logic to be run.														
				initialized = true;
				_currentInstance.fire("ready", _currentInstance);
			}
		}.bind(this);		
		
		this.log = log;
		this.jsPlumbUIComponent = jsPlumbUIComponent;		

		/*
		 * Creates an anchor with the given params.
		 * 
		 * 
		 * Returns: The newly created Anchor.
		 * Throws: an error if a named anchor was not found.
		 */
		this.makeAnchor = function() {
			var pp, _a = function(t, p) {
				if (jsPlumb.Anchors[t]) return new jsPlumb.Anchors[t](p);
				if (!_currentInstance.Defaults.DoNotThrowErrors)
					throw { msg:"jsPlumb: unknown anchor type '" + t + "'" };
			};
			if (arguments.length === 0) return null;
			var specimen = arguments[0], elementId = arguments[1], jsPlumbInstance = arguments[2], newAnchor = null;			
			// if it appears to be an anchor already...
			if (specimen.compute && specimen.getOrientation) return specimen;  //TODO hazy here about whether it should be added or is already added somehow.
			// is it the name of an anchor type?
			else if (typeof specimen == "string") {
				newAnchor = _a(arguments[0], {elementId:elementId, jsPlumbInstance:_currentInstance});
			}
			// is it an array? it will be one of:
			// 		an array of [spec, params] - this defines a single anchor, which may be dynamic, but has parameters.
			//		an array of arrays - this defines some dynamic anchors
			//		an array of numbers - this defines a single anchor.				
			else if (_ju.isArray(specimen)) {
				if (_ju.isArray(specimen[0]) || _ju.isString(specimen[0])) {
					// if [spec, params] format
					if (specimen.length == 2 && _ju.isObject(specimen[1])) {
						// if first arg is a string, its a named anchor with params
						if (_ju.isString(specimen[0])) {
							pp = jsPlumb.extend({elementId:elementId, jsPlumbInstance:_currentInstance}, specimen[1]);
							newAnchor = _a(specimen[0], pp);
						}
						// otherwise first arg is array, second is params. we treat as a dynamic anchor, which is fine
						// even if the first arg has only one entry. you could argue all anchors should be implicitly dynamic in fact.
						else {
							pp = jsPlumb.extend({elementId:elementId, jsPlumbInstance:_currentInstance, anchors:specimen[0]}, specimen[1]);
							newAnchor = new jsPlumb.DynamicAnchor(pp);
						}
					}
					else
						newAnchor = new jsPlumb.DynamicAnchor({anchors:specimen, selector:null, elementId:elementId, jsPlumbInstance:jsPlumbInstance});

				}
				else {
					var anchorParams = {
						x:specimen[0], y:specimen[1],
						orientation : (specimen.length >= 4) ? [ specimen[2], specimen[3] ] : [0,0],
						offsets : (specimen.length >= 6) ? [ specimen[4], specimen[5] ] : [ 0, 0 ],
						elementId:elementId,
                        jsPlumbInstance:jsPlumbInstance,
                        cssClass:specimen.length == 7 ? specimen[6] : null
					};						
					newAnchor = new jsPlumb.Anchor(anchorParams);
					newAnchor.clone = function() { return new jsPlumb.Anchor(anchorParams); };						 					
				}
			}
			
			if (!newAnchor.id) newAnchor.id = "anchor_" + _idstamp();
			return newAnchor;
		};

		/**
		 * makes a list of anchors from the given list of types or coords, eg
		 * ["TopCenter", "RightMiddle", "BottomCenter", [0, 1, -1, -1] ]
		 */
		this.makeAnchors = function(types, elementId, jsPlumbInstance) {
			var r = [];
			for ( var i = 0, ii = types.length; i < ii; i++) {
				if (typeof types[i] == "string")
					r.push(jsPlumb.Anchors[types[i]]({elementId:elementId, jsPlumbInstance:jsPlumbInstance}));
				else if (_ju.isArray(types[i]))
					r.push(_currentInstance.makeAnchor(types[i], elementId, jsPlumbInstance));
			}
			return r;
		};

		/**
		 * Makes a dynamic anchor from the given list of anchors (which may be in shorthand notation as strings or dimension arrays, or Anchor
		 * objects themselves) and the given, optional, anchorSelector function (jsPlumb uses a default if this is not provided; most people will
		 * not need to provide this - i think). 
		 */
		this.makeDynamicAnchor = function(anchors, anchorSelector) {
			return new jsPlumb.DynamicAnchor({anchors:anchors, selector:anchorSelector, elementId:null, jsPlumbInstance:_currentInstance});
		};
		
// --------------------- makeSource/makeTarget ---------------------------------------------- 
		
		var _targetEndpointDefinitions = {},
			_targetEndpoints = {},
			_targetEndpointsUnique = {},
			_targetMaxConnections = {},
			_setEndpointPaintStylesAndAnchor = function(ep, epIndex) {
				ep.paintStyle = ep.paintStyle ||
				 				_currentInstance.Defaults.EndpointStyles[epIndex] ||
	                            _currentInstance.Defaults.EndpointStyle ||
	                            jsPlumb.Defaults.EndpointStyles[epIndex] ||
	                            jsPlumb.Defaults.EndpointStyle;
				ep.hoverPaintStyle = ep.hoverPaintStyle ||
	                           _currentInstance.Defaults.EndpointHoverStyles[epIndex] ||
	                           _currentInstance.Defaults.EndpointHoverStyle ||
	                           jsPlumb.Defaults.EndpointHoverStyles[epIndex] ||
	                           jsPlumb.Defaults.EndpointHoverStyle;                            

				ep.anchor = ep.anchor ||
	                      	_currentInstance.Defaults.Anchors[epIndex] ||
	                      	_currentInstance.Defaults.Anchor ||
	                      	jsPlumb.Defaults.Anchors[epIndex] ||
	                      	jsPlumb.Defaults.Anchor;                           
					
				ep.endpoint = ep.endpoint ||
							  _currentInstance.Defaults.Endpoints[epIndex] ||
							  _currentInstance.Defaults.Endpoint ||
							  jsPlumb.Defaults.Endpoints[epIndex] ||
							  jsPlumb.Defaults.Endpoint;
			},
			// TODO put all the source stuff inside one parent, keyed by id.
			_sourceEndpointDefinitions = {},
			_sourceEndpoints = {},
			_sourceEndpointsUnique = {},
			_sourcesEnabled = {},
			_sourceTriggers = {},
			_sourceMaxConnections = {},
			_targetsEnabled = {},
			selectorFilter = function(evt, _el, selector) {	            
                var t = evt.target || evt.srcElement, ok = false, 
                    sel = _currentInstance.getSelector(_el, selector);
                for (var j = 0; j < sel.length; j++) {
                    if (sel[j] == t) {
                        ok = true;
                        break;
                    }
                }
                return ok;	            
	        };

		// see API docs
		this.makeTarget = function(el, params, referenceParams) {						
			
			// put jsplumb ref into params without altering the params passed in
			var p = jsPlumb.extend({_jsPlumb:_currentInstance}, referenceParams);
			jsPlumb.extend(p, params);

			// calculate appropriate paint styles and anchor from the params given			
			_setEndpointPaintStylesAndAnchor(p, 1);                               

			var jpcl = jsPlumb.CurrentLibrary,
			    targetScope = p.scope || _currentInstance.Defaults.Scope,
			    deleteEndpointsOnDetach = !(p.deleteEndpointsOnDetach === false),
			    maxConnections = p.maxConnections || -1,
				onMaxConnections = p.onMaxConnections,

				_doOne = function(el) {
					
					// get the element's id and store the endpoint definition for it.  jsPlumb.connect calls will look for one of these,
					// and use the endpoint definition if found.
					// decode the info for this element (id and element)
					var elInfo = _info(el), 
						elid = elInfo.id,
						proxyComponent = new jsPlumbUIComponent(p),
						dropOptions = jsPlumb.extend({}, p.dropOptions || {});

					// store the definitions keyed against the element id.
					_targetEndpointDefinitions[elid] = p;
					_targetEndpointsUnique[elid] = p.uniqueEndpoint;
					_targetMaxConnections[elid] = maxConnections;
					_targetsEnabled[elid] = true;				

					var _drop = function() {
						_currentInstance.currentlyDragging = false;
						var originalEvent = jsPlumb.CurrentLibrary.getDropEvent(arguments),
							targetCount = _currentInstance.select({target:elid}).length,
							draggable = _gel(jpcl.getDragObject(arguments)),
							id = _currentInstance.getAttribute(draggable, "dragId"),										
							scope = _currentInstance.getAttribute(draggable, "originalScope"),
							jpc = floatingConnections[id],
							idx = jpc.endpoints[0].isFloating() ? 0 : 1,
							// this is not necessarily correct. if the source is being dragged,
							// then the source endpoint is actually the currently suspended endpoint.
							source = jpc.endpoints[0],
							_endpoint = p.endpoint ? jsPlumb.extend({}, p.endpoint) : {};					
							
						if (!_targetsEnabled[elid] || _targetMaxConnections[elid] > 0 && targetCount >= _targetMaxConnections[elid]){
							if (onMaxConnections) {
								// TODO here we still have the id of the floating element, not the
								// actual target.
								onMaxConnections({
									element:elInfo.el,
									connection:jpc
								}, originalEvent);
							}
							return false;
						}

						// unlock the source anchor to allow it to refresh its position if necessary
						source.anchor.locked = false;					
											
						// restore the original scope if necessary (issue 57)
						if (scope) jpcl.setDragScope(draggable, scope);		

						// if no suspendedEndpoint and not pending, it is likely there was a drop on two 
						// elements that are on top of each other. abort.
						if (jpc.suspendedEndpoint == null && !jpc.pending)
							return false;		
						
						// check if drop is allowed here.					
						// if the source is being dragged then in fact
						// the source and target ids to pass into the drop interceptor are
						// source - elid
						// target - jpc's targetId
						// 
						// otherwise the ids are
						// source - jpc.sourceId
						// target - elid
						//
						var _continue = proxyComponent.isDropAllowed(idx === 0 ? elid : jpc.sourceId, idx === 0 ? jpc.targetId : elid, jpc.scope, jpc, null);							

						// reinstate any suspended endpoint; this just puts the connection back into
						// a state in which it will report sensible values if someone asks it about
						// its target.  we're going to throw this connection away shortly so it doesnt matter
						// if we manipulate it a bit.
						if (jpc.suspendedEndpoint) {
							jpc[idx ? "targetId" : "sourceId"] = jpc.suspendedEndpoint.elementId;
							jpc[idx ? "target" : "source"] = jpc.suspendedEndpoint.element;
							jpc.endpoints[idx] = jpc.suspendedEndpoint;
						}																										
						
						if (_continue) {
																	
							// make a new Endpoint for the target, or get it from the cache if uniqueEndpoint
                            // is set.
							var _el = jpcl.getElementObject(elInfo.el),
								newEndpoint = _targetEndpoints[elid];

                            // if no cached endpoint, or there was one but it has been cleaned up
                            // (ie. detached), then create a new one.
                            if (newEndpoint == null || newEndpoint._jsPlumb == null)
                                newEndpoint = _currentInstance.addEndpoint(_el, p);

							if (p.uniqueEndpoint) _targetEndpoints[elid] = newEndpoint;  // may of course just store what it just pulled out. that's ok.
							// TODO test options to makeTarget to see if we should do this?
							newEndpoint._doNotDeleteOnDetach = false; // reset.
							newEndpoint._deleteOnDetach = true;
																	
							// if the anchor has a 'positionFinder' set, then delegate to that function to find
							// out where to locate the anchor.
							if (newEndpoint.anchor.positionFinder != null) {
								var dropPosition = jpcl.getUIPosition(arguments, _currentInstance.getZoom()),
								elPosition = _getOffset(_el, _currentInstance),
								elSize = _getSize(_el),
								ap = newEndpoint.anchor.positionFinder(dropPosition, elPosition, elSize, newEndpoint.anchor.constructorParams);
								newEndpoint.anchor.x = ap[0];
								newEndpoint.anchor.y = ap[1];
								// now figure an orientation for it..kind of hard to know what to do actually. probably the best thing i can do is to
								// support specifying an orientation in the anchor's spec. if one is not supplied then i will make the orientation 
								// be what will cause the most natural link to the source: it will be pointing at the source, but it needs to be
								// specified in one axis only, and so how to make that choice? i think i will use whichever axis is the one in which
								// the target is furthest away from the source.
							}
							
							// change the target endpoint and target element information. really this should be 
							// done on a method on connection
							jpc[idx ? "target" : "source"] = newEndpoint.element;
							jpc[idx ? "targetId" : "sourceId"] = newEndpoint.elementId;
							jpc.endpoints[idx].detachFromConnection(jpc);
							if (jpc.endpoints[idx]._deleteOnDetach)
								jpc.endpoints[idx].deleteAfterDragStop = true; // tell this endpoint to delet itself after drag stop.
							// set new endpoint, and configure the settings for endpoints to delete on detach
							newEndpoint.addConnection(jpc);
							jpc.endpoints[idx] = newEndpoint;
							jpc.deleteEndpointsOnDetach = deleteEndpointsOnDetach;						

							// inform the anchor manager to update its target endpoint for this connection.
							// TODO refactor to make this a single method.
							if (idx == 1)
								_currentInstance.anchorManager.updateOtherEndpoint(jpc.sourceId, jpc.suspendedElementId, jpc.targetId, jpc);
							else
								_currentInstance.anchorManager.sourceChanged(jpc.suspendedEndpoint.elementId, jpc.sourceId, jpc);

							_finaliseConnection(jpc, null, originalEvent);
							jpc.pending = false;

						}				
						// if not allowed to drop...
						else {
							// TODO this code is identical (pretty much) to what happens when a connection
							// dragged from a normal endpoint is in this situation. refactor.
							// is this an existing connection, and will we reattach?
							// TODO also this assumes the source needs to detach - is that always valid?
							if (jpc.suspendedEndpoint) {							
								if (jpc.isReattach()) {
									jpc.setHover(false);
									jpc.floatingAnchorIndex = null;
									jpc.suspendedEndpoint.addConnection(jpc);
									_currentInstance.repaint(source.elementId);
								}
								else
									source.detach(jpc, false, true, true, originalEvent);  // otherwise, detach the connection and tell everyone about it.
							}
							
						}														
					};
					
					// wrap drop events as needed and initialise droppable
					var dropEvent = jpcl.dragEvents.drop;
					dropOptions.scope = dropOptions.scope || targetScope;
					dropOptions[dropEvent] = _ju.wrap(dropOptions[dropEvent], _drop);				
					jpcl.initDroppable(_gel(elInfo.el), dropOptions, true);
				};
			
			// YUI collection fix
			el = _convertYUICollection(el);			
			// make an array if only given one element
			var inputs = el.length && el.constructor != String ? el : [ el ];
						
			// register each one in the list.
			for (var i = 0, ii = inputs.length; i < ii; i++) {							
				_doOne(inputs[i]);
			}

			return _currentInstance;
		};

		// see api docs
		this.unmakeTarget = function(el, doNotClearArrays) {
			var info = _info(el);

			jsPlumb.CurrentLibrary.destroyDroppable(info.el);
			// TODO this is not an exhaustive unmake of a target, since it does not remove the droppable stuff from
			// the element.  the effect will be to prevent it from behaving as a target, but it's not completely purged.
			if (!doNotClearArrays) {
				delete _targetEndpointDefinitions[info.id];
				delete _targetEndpointsUnique[info.id];
				delete _targetMaxConnections[info.id];
				delete _targetsEnabled[info.id];                
			}

			return _currentInstance;
		};						

	    // see api docs
		this.makeSource = function(el, params, referenceParams) {
			var p = jsPlumb.extend({}, referenceParams);
			jsPlumb.extend(p, params);
			_setEndpointPaintStylesAndAnchor(p, 0);   
			var jpcl = jsPlumb.CurrentLibrary,
				maxConnections = p.maxConnections || -1,
				onMaxConnections = p.onMaxConnections,
				_doOne = function(elInfo) {
					// get the element's id and store the endpoint definition for it.  jsPlumb.connect calls will look for one of these,
					// and use the endpoint definition if found.
					var elid = elInfo.id,
						_el = _gel(elInfo.el),
						parentElement = function() {
							return p.parent == null ? null : p.parent === "parent" ? elInfo.el.parentNode : _dom(p.parent);
						},
						idToRegisterAgainst = p.parent != null ? _currentInstance.getId(parentElement()) : elid;
					
					_sourceEndpointDefinitions[idToRegisterAgainst] = p;
					_sourceEndpointsUnique[idToRegisterAgainst] = p.uniqueEndpoint;
					_sourcesEnabled[idToRegisterAgainst] = true;

					var stopEvent = jpcl.dragEvents.stop,
						dragEvent = jpcl.dragEvents.drag,
						dragOptions = jsPlumb.extend({ }, p.dragOptions || {}),
						existingDrag = dragOptions.drag,
						existingStop = dragOptions.stop,
						ep = null,
						endpointAddedButNoDragYet = false;
				
					_sourceMaxConnections[idToRegisterAgainst] = maxConnections;	

					// set scope if its not set in dragOptions but was passed in in params
					dragOptions.scope = dragOptions.scope || p.scope;

					dragOptions[dragEvent] = _ju.wrap(dragOptions[dragEvent], function() {
						if (existingDrag) existingDrag.apply(this, arguments);
						endpointAddedButNoDragYet = false;
					});
					
					dragOptions[stopEvent] = _ju.wrap(dragOptions[stopEvent], function() { 

						if (existingStop) existingStop.apply(this, arguments);								
	                    _currentInstance.currentlyDragging = false;						
						if (ep._jsPlumb != null) { // if not cleaned up...

							jpcl.unbind(ep.canvas, "mousedown"); 
									
							// reset the anchor to the anchor that was initially provided. the one we were using to drag
							// the connection was just a placeholder that was located at the place the user pressed the
							// mouse button to initiate the drag.
							var anchorDef = p.anchor || _currentInstance.Defaults.Anchor,
								oldAnchor = ep.anchor,
								oldConnection = ep.connections[0],
								newAnchor = _currentInstance.makeAnchor(anchorDef, elid, _currentInstance),
								_el = ep.element;

							// if the anchor has a 'positionFinder' set, then delegate to that function to find
							// out where to locate the anchor. issue 117.
							if (newAnchor.positionFinder != null) {
								var elPosition = _getOffset(_el, _currentInstance),
									elSize = _getSize(_el),
									dropPosition = { left:elPosition.left + (oldAnchor.x * elSize[0]), top:elPosition.top + (oldAnchor.y * elSize[1]) },
									ap = newAnchor.positionFinder(dropPosition, elPosition, elSize, newAnchor.constructorParams);

								newAnchor.x = ap[0];
								newAnchor.y = ap[1];
							}

							ep.setAnchor(newAnchor, true);																							
							
							if (p.parent) {						
								var parent = parentElement();
								if (parent) {	
									var potentialParent = p.container || _currentInstance.Defaults.Container || jsPlumb.Defaults.Container;
									ep.setElement(parent, potentialParent);
								}
							}						
							
							ep.repaint();			
							_currentInstance.repaint(ep.elementId);																		
							_currentInstance.repaint(oldConnection.targetId);
						}				
					});
					// when the user presses the mouse, add an Endpoint, if we are enabled.
					var mouseDownListener = function(e) {

						// if disabled, return.
						if (!_sourcesEnabled[idToRegisterAgainst]) return;
	                    
	                    // if a filter was given, run it, and return if it says no.
						if (p.filter) {
							var evt = jpcl.getOriginalEvent(e),
								r = jsPlumbUtil.isString(p.filter) ? selectorFilter(evt, _el, p.filter) : p.filter(evt, _el);
							
							if (r === false) return;
						}
						
						// if maxConnections reached
						var sourceCount = _currentInstance.select({source:idToRegisterAgainst}).length;
						if (_sourceMaxConnections[idToRegisterAgainst] >= 0 && sourceCount >= _sourceMaxConnections[idToRegisterAgainst]) {
							if (onMaxConnections) {
								onMaxConnections({
									element:_el,
									maxConnections:maxConnections
								}, e);
							}
							return false;
						}					

						// make sure we have the latest offset for this div 
						var myOffsetInfo = _updateOffset({elId:elid}).o,
							z = _currentInstance.getZoom(),		
							x = ( ((e.pageX || e.page.x) / z) - myOffsetInfo.left) / myOffsetInfo.width, 
						    y = ( ((e.pageY || e.page.y) / z) - myOffsetInfo.top) / myOffsetInfo.height,
						    parentX = x, 
						    parentY = y;					
								
						// if there is a parent, the endpoint will actually be added to it now, rather than the div
						// that was the source.  in that case, we have to adjust the anchor position so it refers to
						// the parent.
						if (p.parent) {
							var pEl = parentElement(), pId = _getId(pEl);
							myOffsetInfo = _updateOffset({elId:pId}).o;
							parentX = ((e.pageX || e.page.x) - myOffsetInfo.left) / myOffsetInfo.width; 
						    parentY = ((e.pageY || e.page.y) - myOffsetInfo.top) / myOffsetInfo.height;
						}											
						
						// we need to override the anchor in here, and force 'isSource', but we don't want to mess with
						// the params passed in, because after a connection is established we're going to reset the endpoint
						// to have the anchor we were given.
						var tempEndpointParams = {};
						jsPlumb.extend(tempEndpointParams, p);
						tempEndpointParams.isSource = true;
						tempEndpointParams.anchor = [x,y,0,0];
						tempEndpointParams.parentAnchor = [ parentX, parentY, 0, 0 ];
						tempEndpointParams.dragOptions = dragOptions;
						// if a parent was given we need to turn that into a "container" argument.  this is, by default,
						// the parent of the element we will move to, so parent of p.parent in this case.  however, if
						// the user has specified a 'container' on the endpoint definition or on 
						// the defaults, we should use that.
						if (p.parent) {
							var potentialParent = tempEndpointParams.container || _currentInstance.Defaults.Container || jsPlumb.Defaults.Container;
							if (potentialParent)
								tempEndpointParams.container = potentialParent;
							else
								tempEndpointParams.container = jsPlumb.CurrentLibrary.getParent(parentElement());
						}
						
						ep = _currentInstance.addEndpoint(elid, tempEndpointParams);

						endpointAddedButNoDragYet = true;
						// we set this to prevent connections from firing attach events before this function has had a chance
						// to move the endpoint.
						ep.endpointWillMoveAfterConnection = p.parent != null;
						ep.endpointWillMoveTo = p.parent ? parentElement() : null;

						// TODO test options to makeSource to see if we should do this?
						ep._doNotDeleteOnDetach = false; // reset.
						ep._deleteOnDetach = true;

	                    var _delTempEndpoint = function() {
							// this mouseup event is fired only if no dragging occurred, by jquery and yui, but for mootools
							// it is fired even if dragging has occurred, in which case we would blow away a perfectly
							// legitimate endpoint, were it not for this check.  the flag is set after adding an
							// endpoint and cleared in a drag listener we set in the dragOptions above.
							if(endpointAddedButNoDragYet) {
								 endpointAddedButNoDragYet = false;
								_currentInstance.deleteEndpoint(ep);
	                        }
						};

						_currentInstance.registerListener(ep.canvas, "mouseup", _delTempEndpoint);
	                    _currentInstance.registerListener(_el, "mouseup", _delTempEndpoint);
						
						// and then trigger its mousedown event, which will kick off a drag, which will start dragging
						// a new connection from this endpoint.
						jpcl.trigger(ep.canvas, "mousedown", e);
						
					};
	               
	                // register this on jsPlumb so that it can be cleared by a reset.
	                _currentInstance.registerListener(_el, "mousedown", mouseDownListener);
	                _sourceTriggers[elid] = mouseDownListener;

	                // lastly, if a filter was provided, set it as a dragFilter on the element,
	                // to prevent the element drag function from kicking in when we want to
	                // drag a new connection
	                if (p.filter && jsPlumbUtil.isString(p.filter)) {
	                	jpcl.setDragFilter(_el, p.filter);
	                }
				};
			
			el = _convertYUICollection(el);			
			
			var inputs = el.length && el.constructor != String ? el : [ el ];
						
			for (var i = 0, ii = inputs.length; i < ii; i++) {			
				_doOne(_info(inputs[i]));
			}

			return _currentInstance;
		};
	
		// see api docs		
		this.unmakeSource = function(el, doNotClearArrays) {
			var info = _info(el),
				mouseDownListener = _sourceTriggers[info.id];
			
			if (mouseDownListener) 
				_currentInstance.unregisterListener(info.el, "mousedown", mouseDownListener);

			if (!doNotClearArrays) {
				delete _sourceEndpointDefinitions[info.id];
				delete _sourceEndpointsUnique[info.id];
				delete _sourcesEnabled[info.id];
				delete _sourceTriggers[info.id];
				delete _sourceMaxConnections[info.id];
			}

			return _currentInstance;
		};

		// see api docs
		this.unmakeEverySource = function() {
			for (var i in _sourcesEnabled)
				_currentInstance.unmakeSource(i, true);

			_sourceEndpointDefinitions = {};
			_sourceEndpointsUnique = {};
			_sourcesEnabled = {};
			_sourceTriggers = {};
		};
		
		// see api docs
		this.unmakeEveryTarget = function() {
			for (var i in _targetsEnabled)
				_currentInstance.unmakeTarget(i, true);
			
			_targetEndpointDefinitions = {};
			_targetEndpointsUnique = {};
			_targetMaxConnections = {};
			_targetsEnabled = {};

			return _currentInstance;
		};			

		// does the work of setting a source enabled or disabled.
		var _setEnabled = function(type, el, state, toggle) {
			var a = type == "source" ? _sourcesEnabled : _targetsEnabled;									
			el = _convertYUICollection(el);

			if (_ju.isString(el)) a[el] = toggle ? !a[el] : state;
			else if (el.length) {				
				for (var i = 0, ii = el.length; i < ii; i++) {
					var info = _info(el[i]);
					a[info.id] = toggle ? !a[info.id] : state;
				}
			}	
			return _currentInstance;
		};

		this.toggleSourceEnabled = function(el) {
			_setEnabled("source", el, null, true);	
			return _currentInstance.isSourceEnabled(el);
		};

		this.setSourceEnabled = function(el, state) { return _setEnabled("source", el, state); };
		this.isSource = function(el) { return _sourcesEnabled[_info(el).id] != null; };		
		this.isSourceEnabled = function(el) { return _sourcesEnabled[_info(el).id] === true; };

		this.toggleTargetEnabled = function(el) {
			_setEnabled("target", el, null, true);	
			return _currentInstance.isTargetEnabled(el);
		};
		
		this.isTarget = function(el) { return _targetsEnabled[_info(el).id] != null; };		
		this.isTargetEnabled = function(el) { return _targetsEnabled[_info(el).id] === true; };
		this.setTargetEnabled = function(el, state) { return _setEnabled("target", el, state); };

// --------------------- end makeSource/makeTarget ---------------------------------------------- 				
				
		this.ready = function(fn) {
			_currentInstance.bind("ready", fn);
		};

		// repaint some element's endpoints and connections
		this.repaint = function(el, ui, timestamp) {
			// support both lists...
			if (typeof el == 'object' && el.length)
				for ( var i = 0, ii = el.length; i < ii; i++) {			
					_draw(el[i], ui, timestamp);
				}
			else // ...and single strings.								
				_draw(el, ui, timestamp);
				
			return _currentInstance;
		};

		// repaint every endpoint and connection.
		this.repaintEverything = function(clearEdits) {	
			// TODO this timestamp causes continuous anchors to not repaint properly.
			// fix this. do not just take out the timestamp. it runs a lot faster with 
			// the timestamp included.
			//var timestamp = null;
			var timestamp = _timestamp();
			for ( var elId in endpointsByElement) {
				_draw(elId, null, timestamp, clearEdits);				
			}
			return _currentInstance;
		};

		
		this.removeAllEndpoints = function(el, recurse) {
            var _one = function(_el) {                            	
                var info = _info(_el),
                    ebe = endpointsByElement[info.id],
                    i, ii;

                if (ebe) {
                    for ( i = 0, ii = ebe.length; i < ii; i++) 
                        _currentInstance.deleteEndpoint(ebe[i]);
                }
                delete endpointsByElement[info.id];
                
                if (recurse) {
                    if (info.el && info.el.nodeType != 3 && info.el.nodeType != 8 ) {
                        for ( i = 0, ii = info.el.childNodes.length; i < ii; i++) {
                            _one(info.el.childNodes[i]);
                        }
                    }
                }
                
            };
            _one(el);
			return _currentInstance;
		};
                    
        /**
        * Remove the given element, including cleaning up all endpoints registered for it.
        * This is exposed in the public API but also used internally by jsPlumb when removing the
        * element associated with a connection drag.
        */
        this.remove = function(el, doNotRepaint) {
        	var info = _info(el);        	
            _currentInstance.doWhileSuspended(function() {
            	_currentInstance.removeAllEndpoints(info.id, true);
            	_currentInstance.dragManager.elementRemoved(info.id);
            	delete floatingConnections[info.id];     
            	_currentInstance.anchorManager.clearFor(info.id);						
            	_currentInstance.anchorManager.removeFloatingConnection(info.id);
            }, doNotRepaint === false);
            if(info.el) jsPlumb.CurrentLibrary.removeElement(info.el);
        };

		var _registeredListeners = {},
			_unbindRegisteredListeners = function() {
				for (var i in _registeredListeners) {
					for (var j = 0, jj = _registeredListeners[i].length; j < jj; j++) {
						var info = _registeredListeners[i][j];
						jsPlumb.CurrentLibrary.unbind(info.el, info.event, info.listener);
					}
				}
				_registeredListeners = {};
			};

        // internal register listener method.  gives us a hook to clean things up
        // with if the user calls jsPlumb.reset.
        this.registerListener = function(el, type, listener) {
            jsPlumb.CurrentLibrary.bind(el, type, listener);
            jsPlumbUtil.addToList(_registeredListeners, type, {el:el, event:type, listener:listener});
        };

        this.unregisterListener = function(el, type, listener) {
        	jsPlumb.CurrentLibrary.unbind(el, type, listener);
        	jsPlumbUtil.removeWithFunction(_registeredListeners, function(rl) {
        		return rl.type == type && rl.listener == listener;
        	});
        };
		
		this.reset = function() {			
			_currentInstance.deleteEveryEndpoint();
			_currentInstance.unbind();
			_targetEndpointDefinitions = {};
			_targetEndpoints = {};
			_targetEndpointsUnique = {};
			_targetMaxConnections = {};
			_sourceEndpointDefinitions = {};
			_sourceEndpoints = {};
			_sourceEndpointsUnique = {};
			_sourceMaxConnections = {};
			connections.splice(0);
			_unbindRegisteredListeners();
			_currentInstance.anchorManager.reset();
			if (!jsPlumbAdapter.headless)
				_currentInstance.dragManager.reset();
		};
		

		this.setDefaultScope = function(scope) {
			DEFAULT_SCOPE = scope;
			return _currentInstance;
		};

		// sets whether or not some element should be currently draggable.
		this.setDraggable = _setDraggable;

		// sets the id of some element, changing whatever we need to to keep track.
		this.setId = function(el, newId, doNotSetAttribute) {
			// 
			var id;

			if (jsPlumbUtil.isString(el)) {
				id = el;				
			}
			else {
				el = _dom(el);
				id = _currentInstance.getId(el);
			}

			var sConns = _currentInstance.getConnections({source:id, scope:'*'}, true),
				tConns = _currentInstance.getConnections({target:id, scope:'*'}, true);

			newId = "" + newId;

			if (!doNotSetAttribute) {
				el = _dom(id);
				jsPlumbAdapter.setAttribute(el, "id", newId);
			}
			else
				el = _dom(newId);

			endpointsByElement[newId] = endpointsByElement[id] || [];
			for (var i = 0, ii = endpointsByElement[newId].length; i < ii; i++) {
				endpointsByElement[newId][i].setElementId(newId);
				endpointsByElement[newId][i].setReferenceElement(el);
			}
			delete endpointsByElement[id];

			_currentInstance.anchorManager.changeId(id, newId);
			if (!jsPlumbAdapter.headless)		
				_currentInstance.dragManager.changeId(id, newId);

			var _conns = function(list, epIdx, type) {
				for (var i = 0, ii = list.length; i < ii; i++) {
					list[i].endpoints[epIdx].setElementId(newId);
					list[i].endpoints[epIdx].setReferenceElement(el);
					list[i][type + "Id"] = newId;
					list[i][type] = el;
				}
			};
			_conns(sConns, 0, "source");
			_conns(tConns, 1, "target");

			_currentInstance.repaint(newId);
		};		

		this.setDebugLog = function(debugLog) {
			log = debugLog;
		};
			          	
		this.setSuspendDrawing = function(val, repaintAfterwards) {
			var curVal = _suspendDrawing;
		    _suspendDrawing = val;
				if (val) _suspendedAt = new Date().getTime(); else _suspendedAt = null;
		    if (repaintAfterwards) _currentInstance.repaintEverything();
		    return curVal;
		};
        	
        // returns whether or not drawing is currently suspended.		
		this.isSuspendDrawing = function() {
			return _suspendDrawing;
		};
            
        // return timestamp for when drawing was suspended.
        this.getSuspendedAt = function() { return _suspendedAt; };

        /**
        * @doc function
        * @name jsPlumb.class:doWhileSuspended
        * @param {function} fn Function to run while suspended.
        * @param {boolean} doNotRepaintAfterwards If true, jsPlumb won't run a full repaint. Otherwise it will.
        * @description Suspends drawing, runs the given function, then re-enables drawing (and repaints, unless you tell it not to)
        */
        this.doWhileSuspended = function(fn, doNotRepaintAfterwards) {     
        	var _wasSuspended = _currentInstance.isSuspendDrawing();        	
        	if (!_wasSuspended)
				_currentInstance.setSuspendDrawing(true);
			try {
				fn();
			}
			catch (e) {
				_ju.log("Function run while suspended failed", e);
			}			
			if (!_wasSuspended)
				_currentInstance.setSuspendDrawing(false, !doNotRepaintAfterwards);
        };
            
        this.updateOffset = _updateOffset;
        this.getOffset = function(elId) { return offsets[elId]; };
        this.getSize = function(elId) { return sizes[elId]; };            
        this.getCachedData = _getCachedData;
        this.timestamp = _timestamp;
		
		
		
		/**
		 * @doc function
		 * @name jsPlumb.class:setRenderMode
		 * @param {string} mode One of `jsPlumb.SVG, `jsPlumb.VML` or `jsPlumb.CANVAS`.
		 * @description Sets render mode.  jsPlumb will fall back to VML if it determines that
		 * what you asked for is not supported (and that VML is).  If you asked for VML but the browser does
		 * not support it, jsPlumb uses SVG.
		 * @return {string} The render mode that jsPlumb set, which of course may be different from that requested.
		 */
		this.setRenderMode = function(mode) {			
			renderMode = jsPlumbAdapter.setRenderMode(mode);
			var i, ii;
			// only add this if the renderer is canvas; we dont want these listeners registered on te
			// entire document otherwise.
			if (renderMode == jsPlumb.CANVAS) {
				var bindOne = function(event) {
	                jsPlumb.CurrentLibrary.bind(document, event, function(e) {
	                    if (!_currentInstance.currentlyDragging && renderMode == jsPlumb.CANVAS) {
	                        // try connections first
	                        for (i = 0, ii = connections.length; i < ii; i++ ) {
                                var t = connections[i].getConnector()[event](e);
                                if (t) return;	
                            }
	                        for (var el in endpointsByElement) {
	                            var ee = endpointsByElement[el];
	                            for ( i = 0, ii = ee.length; i < ii; i++ ) {
	                                if (ee[i].endpoint[event] && ee[i].endpoint[event](e)) return;
	                            }
	                        }
	                    }
	                });					
				};
				bindOne("click");bindOne("dblclick");bindOne("mousemove");bindOne("mousedown");bindOne("mouseup");bindOne("contextmenu");				
			}

			return renderMode;
		};
		
		/**
		 * @doc function
		 * @name jsPlumb.class:getRenderMode
		 * @description Gets the current render mode for this instance of jsPlumb.
		 * @return {string} The current render mode - "canvas", "svg" or "vml".
		 */
		this.getRenderMode = function() { return renderMode; };
		
		this.show = function(el, changeEndpoints) {
			_setVisible(el, "block", changeEndpoints);
			return _currentInstance;
		};		

		/**
		 * gets some test hooks. nothing writable.
		 */
		this.getTestHarness = function() {
			return {
				endpointsByElement : endpointsByElement,  
				endpointCount : function(elId) {
					var e = endpointsByElement[elId];
					return e ? e.length : 0;
				},
				connectionCount : function(scope) {
					scope = scope || DEFAULT_SCOPE;
					var c = _currentInstance.getConnections({scope:scope});
					return c ? c.length : 0;
				},
				getId : _getId,
				makeAnchor:self.makeAnchor,
				makeDynamicAnchor:self.makeDynamicAnchor
			};
		};
		
		
		// TODO: update this method to return the current state.
		this.toggleVisible = _toggleVisible;
		this.toggleDraggable = _toggleDraggable;						
		this.addListener = this.bind;
		
        /*
            helper method to take an xy location and adjust it for the parent's offset and scroll.
        */
		this.adjustForParentOffsetAndScroll = function(xy, el) {

			var offsetParent = null, result = xy;
			if (el.tagName.toLowerCase() === "svg" && el.parentNode) {
				offsetParent = el.parentNode;
			}
			else if (el.offsetParent) {
				offsetParent = el.offsetParent;					
			}
			if (offsetParent != null) {
				var po = offsetParent.tagName.toLowerCase() === "body" ? {left:0,top:0} : _getOffset(offsetParent, _currentInstance),
					so = offsetParent.tagName.toLowerCase() === "body" ? {left:0,top:0} : {left:offsetParent.scrollLeft, top:offsetParent.scrollTop};					

				// i thought it might be cool to do this:
				//	lastReturnValue[0] = lastReturnValue[0] - offsetParent.offsetLeft + offsetParent.scrollLeft;
				//	lastReturnValue[1] = lastReturnValue[1] - offsetParent.offsetTop + offsetParent.scrollTop;					
				// but i think it ignores margins.  my reasoning was that it's quicker to not hand off to some underlying					
				// library.
				
				result[0] = xy[0] - po.left + so.left;
				result[1] = xy[1] - po.top + so.top;
			}
		
			return result;
			
		};

		if (!jsPlumbAdapter.headless) {
			_currentInstance.dragManager = jsPlumbAdapter.getDragManager(_currentInstance);
			_currentInstance.recalculateOffsets = _currentInstance.dragManager.updateOffsets;
	    }	    
				    
    };

    jsPlumbUtil.extend(jsPlumbInstance, jsPlumbUtil.EventGenerator, {
    	setAttribute : function(el, a, v) {
    		jsPlumbAdapter.setAttribute(el, a, v);
    	},
    	getAttribute : function(el, a) {
    		return jsPlumbAdapter.getAttribute(jsPlumb.CurrentLibrary.getDOMElement(el), a);
    	},    	
    	registerConnectionType : function(id, type) {
    		this._connectionTypes[id] = jsPlumb.extend({}, type);
    	},    	
    	registerConnectionTypes : function(types) {
    		for (var i in types)
    			this._connectionTypes[i] = jsPlumb.extend({}, types[i]);
    	},    	    	
    	registerEndpointType : function(id, type) {
    		this._endpointTypes[id] = jsPlumb.extend({}, type);
    	},    	
    	registerEndpointTypes : function(types) {
    		for (var i in types)
    			this._endpointTypes[i] = jsPlumb.extend({}, types[i]);
    	},    	
    	getType : function(id, typeDescriptor) {
    		return typeDescriptor ===  "connection" ? this._connectionTypes[id] : this._endpointTypes[id];
    	},
    	setIdChanged : function(oldId, newId) {
    		this.setId(oldId, newId, true);
    	},
    	// set parent: change the parent for some node and update all the registrations we need to.
    	setParent : function(el, newParent) {
    		var jpcl = jsPlumb.CurrentLibrary,
    			_el = jpcl.getElementObject(el),
    			_dom = jpcl.getDOMElement(_el),
    			_id = this.getId(_dom),
    			_pel = jpcl.getElementObject(newParent),
    			_pdom = jpcl.getDOMElement(_pel),
    			_pid = this.getId(_pdom);

    		_dom.parentNode.removeChild(_dom);
    		_pdom.appendChild(_dom);
    		this.dragManager.setParent(_el, _id, _pel, _pid);
    	}
    });

// --------------------- static instance + AMD registration -------------------------------------------	
	
// create static instance and assign to window if window exists.	
	var jsPlumb = new jsPlumbInstance();
	// register on window if defined (lets us run on server)
	if (typeof window != 'undefined') window.jsPlumb = jsPlumb;	
	// add 'getInstance' method to static instance
	/**
	* @name jsPlumb.getInstance
	* @param {object} [_defaults] Optional default settings for the new instance.
	* @desc Gets a new instance of jsPlumb.
	*/
	jsPlumb.getInstance = function(_defaults) {
		var j = new jsPlumbInstance(_defaults);
		j.init();
		return j;
	};
// maybe register static instance as an AMD module, and getInstance method too.
	if ( typeof define === "function") {
		define( "jsplumb", [], function () { return jsPlumb; } );
		define( "jsplumbinstance", [], function () { return jsPlumb.getInstance(); } );
	}
 // CommonJS 
	if (typeof exports !== 'undefined') {
      exports.jsPlumb = jsPlumb;
  	}
	
	
// --------------------- end static instance + AMD registration -------------------------------------------		
	
})();


;(function() {
        
    // create the drag handler for a connection
    var _makeConnectionDragHandler = function(placeholder, _jsPlumb) {
        var stopped = false;
        return {
            drag : function() {
                if (stopped) {
                    stopped = false;
                    return true;
                }
                var _ui = jsPlumb.CurrentLibrary.getUIPosition(arguments, _jsPlumb.getZoom());
        
                if (placeholder.element) {
                    jsPlumb.CurrentLibrary.setOffset(placeholder.element, _ui);                    
                    _jsPlumb.repaint(placeholder.element, _ui);
                }
            },
            stopDrag : function() {
                stopped = true;
            }
        };
    };
        
    // creates a placeholder div for dragging purposes, adds it to the DOM, and pre-computes its offset.    
    var _makeDraggablePlaceholder = function(placeholder, parent, _jsPlumb) {
        var n = document.createElement("div");
        n.style.position = "absolute";
        var placeholderDragElement = jsPlumb.CurrentLibrary.getElementObject(n);
        jsPlumb.CurrentLibrary.appendElement(n, parent);
        var id = _jsPlumb.getId(n);
        _jsPlumb.updateOffset( { elId : id });
        // create and assign an id, and initialize the offset.
        placeholder.id = id;
        placeholder.element = n;
    };
    
    // create a floating endpoint (for drag connections)
    var _makeFloatingEndpoint = function(paintStyle, referenceAnchor, endpoint, referenceCanvas, sourceElement, _jsPlumb, _newEndpoint) {			
        var floatingAnchor = new jsPlumb.FloatingAnchor( { reference : referenceAnchor, referenceCanvas : referenceCanvas, jsPlumbInstance:_jsPlumb });
        //setting the scope here should not be the way to fix that mootools issue.  it should be fixed by not
        // adding the floating endpoint as a droppable.  that makes more sense anyway!
        return _newEndpoint({ paintStyle : paintStyle, endpoint : endpoint, anchor : floatingAnchor, source : sourceElement, scope:"__floating" });
    };

    var typeParameters = [ "connectorStyle", "connectorHoverStyle", "connectorOverlays",
                "connector", "connectionType", "connectorClass", "connectorHoverClass" ];

    // a helper function that tries to find a connection to the given element, and returns it if so. if elementWithPrecedence is null,
    // or no connection to it is found, we return the first connection in our list.
    var findConnectionToUseForDynamicAnchor = function(ep, elementWithPrecedence) {
        var idx = 0;
        if (elementWithPrecedence != null) {
            for (var i = 0; i < ep.connections.length; i++) {
                if (ep.connections[i].sourceId == elementWithPrecedence || ep.connections[i].targetId == elementWithPrecedence) {
                    idx = i;
                    break;
                }
            }
        }
        
        return ep.connections[idx];
    };

    var findConnectionIndex = function(conn, ep) {
        return jsPlumbUtil.findWithFunction(ep.connections, function(c) { return c.id == conn.id; });
    };

    jsPlumb.Endpoint = function(params) {
        var _jsPlumb = params._jsPlumb,
            jpcl = jsPlumb.CurrentLibrary,
            _att = jsPlumbAdapter.getAttribute,
            _gel = jpcl.getElementObject,
            _dom = jpcl.getDOMElement,
            _ju = jsPlumbUtil,            
            _newConnection = params.newConnection,
            _newEndpoint = params.newEndpoint,
            _finaliseConnection = params.finaliseConnection,
            _fireDetachEvent = params.fireDetachEvent,
            _fireMoveEvent = params.fireMoveEvent,
            floatingConnections = params.floatingConnections;
        
        this.idPrefix = "_jsplumb_e_";			
        this.defaultLabelLocation = [ 0.5, 0.5 ];
        this.defaultOverlayKeys = ["Overlays", "EndpointOverlays"];
        this.parent = params.parent;
        OverlayCapableJsPlumbUIComponent.apply(this, arguments);        
        
// TYPE		
                
        this.getDefaultType = function() {								
            return {
                parameters:{},
                scope:null,
                maxConnections:this._jsPlumb.instance.Defaults.MaxConnections,
                paintStyle:this._jsPlumb.instance.Defaults.EndpointStyle || jsPlumb.Defaults.EndpointStyle,
                endpoint:this._jsPlumb.instance.Defaults.Endpoint || jsPlumb.Defaults.Endpoint,
                hoverPaintStyle:this._jsPlumb.instance.Defaults.EndpointHoverStyle || jsPlumb.Defaults.EndpointHoverStyle,				
                overlays:this._jsPlumb.instance.Defaults.EndpointOverlays || jsPlumb.Defaults.EndpointOverlays,
                connectorStyle:params.connectorStyle,				
                connectorHoverStyle:params.connectorHoverStyle,
                connectorClass:params.connectorClass,
                connectorHoverClass:params.connectorHoverClass,
                connectorOverlays:params.connectorOverlays,
                connector:params.connector,
                connectorTooltip:params.connectorTooltip
            };
        };
        			
// END TYPE
            
        this._jsPlumb.enabled = !(params.enabled === false);
        this._jsPlumb.visible = true;        
        this.element = _dom(params.source);  
        this._jsPlumb.uuid = params.uuid;
        this._jsPlumb.floatingEndpoint = null;  
        var inPlaceCopy = null;
        if (this._jsPlumb.uuid) params.endpointsByUUID[this._jsPlumb.uuid] = this;
        this.elementId = params.elementId;
        
        this._jsPlumb.connectionCost = params.connectionCost;
        this._jsPlumb.connectionsDirected = params.connectionsDirected;        
        this._jsPlumb.currentAnchorClass = "";
        this._jsPlumb.events = {};
            
        var  _updateAnchorClass = function() {
            jpcl.removeClass(this.element, _jsPlumb.endpointAnchorClassPrefix + "_" + this._jsPlumb.currentAnchorClass);
            this.removeClass(_jsPlumb.endpointAnchorClassPrefix + "_" + this._jsPlumb.currentAnchorClass);
            this._jsPlumb.currentAnchorClass = this.anchor.getCssClass();
            this.addClass(_jsPlumb.endpointAnchorClassPrefix + "_" + this._jsPlumb.currentAnchorClass);
            jpcl.addClass(this.element, _jsPlumb.endpointAnchorClassPrefix + "_" + this._jsPlumb.currentAnchorClass);
        }.bind(this);
        
        this.setAnchor = function(anchorParams, doNotRepaint) {
            this._jsPlumb.instance.continuousAnchorFactory.clear(this.elementId);
            this.anchor = this._jsPlumb.instance.makeAnchor(anchorParams, this.elementId, _jsPlumb);
            _updateAnchorClass();
            this.anchor.bind("anchorChanged", function(currentAnchor) {
                this.fire("anchorChanged", {endpoint:this, anchor:currentAnchor});
                _updateAnchorClass();
            }.bind(this));
            if (!doNotRepaint)
                this._jsPlumb.instance.repaint(this.elementId);
            return this;
        };

        var anchorParamsToUse = params.anchor ? params.anchor : params.anchors ? params.anchors : (_jsPlumb.Defaults.Anchor || "Top");
        this.setAnchor(anchorParamsToUse, true);

        // endpoint delegates to first connection for hover, if there is one.
        var internalHover = function(state) {
          if (this.connections.length > 0)
            this.connections[0].setHover(state, false);
          else
            this.setHover(state);
        }.bind(this);
            
        // ANCHOR MANAGER
        if (!params._transient) // in place copies, for example, are transient.  they will never need to be retrieved during a paint cycle, because they dont move, and then they are deleted.
            this._jsPlumb.instance.anchorManager.add(this, this.elementId);
        
        this.setEndpoint = function(ep) {

            if (this.endpoint != null) {
                this.endpoint.cleanup();
                this.endpoint.destroy();
            }

            var _e = function(t, p) {
                var rm = _jsPlumb.getRenderMode();
                if (jsPlumb.Endpoints[rm][t]) return new jsPlumb.Endpoints[rm][t](p);
                if (!_jsPlumb.Defaults.DoNotThrowErrors)
                    throw { msg:"jsPlumb: unknown endpoint type '" + t + "'" };
            };            

            var endpointArgs = {
                _jsPlumb:this._jsPlumb.instance,
                cssClass:params.cssClass,
                parent:params.parent,
                container:params.container,
                tooltip:params.tooltip,
                connectorTooltip:params.connectorTooltip,
                endpoint:this
            };
            if (_ju.isString(ep)) 
                this.endpoint = _e(ep, endpointArgs);
            else if (_ju.isArray(ep)) {
                endpointArgs = _ju.merge(ep[1], endpointArgs);
                this.endpoint = _e(ep[0], endpointArgs);
            }
            else {
                this.endpoint = ep.clone();
            }

            // assign a clone function using a copy of endpointArgs. this is used when a drag starts: the endpoint that was dragged is cloned,
            // and the clone is left in its place while the original one goes off on a magical journey. 
            // the copy is to get around a closure problem, in which endpointArgs ends up getting shared by
            // the whole world.
            var argsForClone = jsPlumb.extend({}, endpointArgs);						
            this.endpoint.clone = function() {
                // TODO this, and the code above, can be refactored to be more dry.
                if (_ju.isString(ep)) 
                    return _e(ep, endpointArgs);
                else if (_ju.isArray(ep)) {
                    endpointArgs = _ju.merge(ep[1], endpointArgs);
                    return _e(ep[0], endpointArgs);
                }
            }.bind(this);

            this.type = this.endpoint.type;
            // bind listeners from endpoint to self, with the internal hover function defined above.
            this.bindListeners(this.endpoint, this, internalHover);
        };
         
        this.setEndpoint(params.endpoint || _jsPlumb.Defaults.Endpoint || jsPlumb.Defaults.Endpoint || "Dot");							                    
        this.setPaintStyle(params.paintStyle || params.style || _jsPlumb.Defaults.EndpointStyle || jsPlumb.Defaults.EndpointStyle, true);
        this.setHoverPaintStyle(params.hoverPaintStyle || _jsPlumb.Defaults.EndpointHoverStyle || jsPlumb.Defaults.EndpointHoverStyle, true);
        this._jsPlumb.paintStyleInUse = this.getPaintStyle();

        _ju.copyValues(typeParameters, params, this);        

        this.isSource = params.isSource || false;
        this.isTarget = params.isTarget || false;        
        this._jsPlumb.maxConnections = params.maxConnections || _jsPlumb.Defaults.MaxConnections; // maximum number of connections this endpoint can be the source of.                
        this.canvas = this.endpoint.canvas;		
        // add anchor class (need to do this on construction because we set anchor first)
        this.addClass(_jsPlumb.endpointAnchorClassPrefix + "_" + this._jsPlumb.currentAnchorClass);	
        jpcl.addClass(this.element, _jsPlumb.endpointAnchorClassPrefix + "_" + this._jsPlumb.currentAnchorClass);
        this.connections = params.connections || [];
        this.connectorPointerEvents = params["connector-pointer-events"];
        
        this.scope = params.scope || _jsPlumb.getDefaultScope();        
        this.timestamp = null;
        this.reattachConnections = params.reattach || _jsPlumb.Defaults.ReattachConnections;
        this.connectionsDetachable = _jsPlumb.Defaults.ConnectionsDetachable;
        if (params.connectionsDetachable === false || params.detachable === false)
            this.connectionsDetachable = false;
        this.dragAllowedWhenFull = params.dragAllowedWhenFull || true;
        
        if (params.onMaxConnections)
            this.bind("maxConnections", params.onMaxConnections);        
        
        //
        // add a connection. not part of public API.
        //
        this.addConnection = function(connection) {
            this.connections.push(connection);                  
            this[(this.connections.length > 0 ? "add" : "remove") + "Class"](_jsPlumb.endpointConnectedClass);       
            this[(this.isFull() ? "add" : "remove") + "Class"](_jsPlumb.endpointFullClass); 
        };	
        
        this.detachFromConnection = function(connection, idx) {
            idx = idx == null ? findConnectionIndex(connection, this) : idx;
            if (idx >= 0) {
                this.connections.splice(idx, 1);
                this[(this.connections.length > 0 ? "add" : "remove") + "Class"](_jsPlumb.endpointConnectedClass);       
                this[(this.isFull() ? "add" : "remove") + "Class"](_jsPlumb.endpointFullClass);                 
            }
        };

        this.detach = function(connection, ignoreTarget, forceDetach, fireEvent, originalEvent, endpointBeingDeleted, connectionIndex) {

            var idx = connectionIndex == null ? findConnectionIndex(connection, this) : connectionIndex,
                actuallyDetached = false;
                fireEvent = (fireEvent !== false);

            if (idx >= 0) {		                
                if (forceDetach || connection._forceDetach || (connection.isDetachable() && connection.isDetachAllowed(connection) && this.isDetachAllowed(connection) )) {

                    //connection.setHover(false);

                    _jsPlumb.deleteObject({
                        connection:connection, 
                        fireEvent:(!ignoreTarget && fireEvent), 
                        originalEvent:originalEvent
                    });
                    actuallyDetached = true;                       
                }
            }
            return actuallyDetached;
        };	

        this.detachAll = function(fireEvent, originalEvent) {
            while (this.connections.length > 0) {
                // TODO this could pass the index in to the detach method to save some time (index will always be zero in this while loop)
                // TODO now it defaults to fireEvent true.  will that mess with things?
                this.detach(this.connections[0], false, true, fireEvent !== false, originalEvent, this, 0);
            }
            return this;
        };                
        this.detachFrom = function(targetEndpoint, fireEvent, originalEvent) {
            var c = [];
            for ( var i = 0; i < this.connections.length; i++) {
                if (this.connections[i].endpoints[1] == targetEndpoint || this.connections[i].endpoints[0] == targetEndpoint) {
                    c.push(this.connections[i]);
                }
            }
            for ( var j = 0; j < c.length; j++) {
                this.detach(c[j], false, true, fireEvent, originalEvent);				
            }
            return this;
        };	        
        
        this.getElement = function() {
            return this.element;
        };		
                 
        // container not supported in 1.5.5; you cannot change the container once it is set.
        // it might come back int a future release.
        this.setElement = function(el/*, container*/) {
            var parentId = this._jsPlumb.instance.getId(el),
                curId = this.elementId;
            // remove the endpoint from the list for the current endpoint's element
            _ju.removeWithFunction(params.endpointsByElement[this.elementId], function(e) {
                return e.id == this.id;
            }.bind(this));
            this.element = _dom(el);
            this.elementId = _jsPlumb.getId(this.element);                         
            _jsPlumb.anchorManager.rehomeEndpoint(this, curId, this.element);
            _jsPlumb.dragManager.endpointAdded(this.element);            
            _ju.addToList(params.endpointsByElement, parentId, this);            
            return this;
        };
                
        /**
         * private but must be exposed.
         */
        this.makeInPlaceCopy = function() {
            var loc = this.anchor.getCurrentLocation({element:this}),
                o = this.anchor.getOrientation(this),
                acc = this.anchor.getCssClass(),
                inPlaceAnchor = {
                    bind:function() { },
                    compute:function() { return [ loc[0], loc[1] ]; },
                    getCurrentLocation : function() { return [ loc[0], loc[1] ]; },
                    getOrientation:function() { return o; },
                    getCssClass:function() { return acc; }
                };

            return _newEndpoint( { 
                anchor : inPlaceAnchor, 
                source : this.element, 
                paintStyle : this.getPaintStyle(), 
                endpoint : params.hideOnDrag ? "Blank" : this.endpoint,
                _transient:true,
                scope:this.scope
            });
        };
                

        /**
         * private but needs to be exposed.
         */
        this.isFloating = function() {
            return this.anchor != null && this.anchor.isFloating;
        };
        
        /**
         * returns a connection from the pool; used when dragging starts.  just gets the head of the array if it can.
         */
        this.connectorSelector = function() {
            var candidate = this.connections[0];
            if (this.isTarget && candidate) return candidate;
            else {
                return (this.connections.length < this._jsPlumb.maxConnections) || this._jsPlumb.maxConnections == -1 ? null : candidate;
            }
        };        
        
        this.setStyle = this.setPaintStyle;        
        
        this.paint = function(params) {
            params = params || {};
            var timestamp = params.timestamp, recalc = !(params.recalc === false);								
            if (!timestamp || this.timestamp !== timestamp) {						
                
                // TODO check: is this is a safe performance enhancement?
                var info = _jsPlumb.updateOffset({ elId:this.elementId, timestamp:timestamp/*, recalc:recalc*/ });                

                var xy = params.offset ? params.offset.o : info.o;
                if(xy != null) {
                    var ap = params.anchorPoint,connectorPaintStyle = params.connectorPaintStyle;
                    if (ap == null) {
                        var wh = params.dimensions || info.s,                       
                            anchorParams = { xy : [ xy.left, xy.top ], wh : wh, element : this, timestamp : timestamp };
                        if (recalc && this.anchor.isDynamic && this.connections.length > 0) {
                            var c = findConnectionToUseForDynamicAnchor(this, params.elementWithPrecedence),
                                oIdx = c.endpoints[0] == this ? 1 : 0,
                                oId = oIdx === 0 ? c.sourceId : c.targetId,
                                oInfo = _jsPlumb.getCachedData(oId),
                                oOffset = oInfo.o, oWH = oInfo.s;
                            anchorParams.txy = [ oOffset.left, oOffset.top ];
                            anchorParams.twh = oWH;
                            anchorParams.tElement = c.endpoints[oIdx];
                        }
                        ap = this.anchor.compute(anchorParams);
                    }
                                        
                    this.endpoint.compute(ap, this.anchor.getOrientation(this), this._jsPlumb.paintStyleInUse, connectorPaintStyle || this.paintStyleInUse);
                    this.endpoint.paint(this._jsPlumb.paintStyleInUse, this.anchor);					
                    this.timestamp = timestamp;

                    // paint overlays
                    for ( var i = 0; i < this._jsPlumb.overlays.length; i++) {
                        var o = this._jsPlumb.overlays[i];
                        if (o.isVisible()) { 
                            this._jsPlumb.overlayPlacements[i] = o.draw(this.endpoint, this._jsPlumb.paintStyleInUse);
                            o.paint(this._jsPlumb.overlayPlacements[i]);    
                        }
                    }
                }
            }
        };

        this.repaint = this.paint; 

        var draggingInitialised = false;
        this.initDraggable = function() {
            // is this a connection source? we make it draggable and have the
            // drag listener maintain a connection with a floating endpoint.
            if (!draggingInitialised && jpcl.isDragSupported(this.element)) {
                var placeholderInfo = { id:null, element:null },
                    jpc = null,
                    existingJpc = false,
                    existingJpcParams = null,
                    _dragHandler = _makeConnectionDragHandler(placeholderInfo, _jsPlumb);

                var start = function() {    
                // drag might have started on an endpoint that is not actually a source, but which has
                // one or more connections.
                    jpc = this.connectorSelector();
                    var _continue = true;
                    // if not enabled, return
                    if (!this.isEnabled()) _continue = false;
                    // if no connection and we're not a source, return.
                    if (jpc == null && !this.isSource) _continue = false;
                    // otherwise if we're full and not allowed to drag, also return false.
                    if (this.isSource && this.isFull() && !this.dragAllowedWhenFull) _continue = false;
                    // if the connection was setup as not detachable or one of its endpoints
                    // was setup as connectionsDetachable = false, or Defaults.ConnectionsDetachable
                    // is set to false...
                    if (jpc != null && !jpc.isDetachable()) _continue = false;

                    if (_continue === false) {
                        // this is for mootools and yui. returning false from this causes jquery to stop drag.
                        // the events are wrapped in both mootools and yui anyway, but i don't think returning
                        // false from the start callback would stop a drag.
                        if (jpcl.stopDrag) jpcl.stopDrag();
                        _dragHandler.stopDrag();
                        return false;
                    }

                    // clear hover for all connections for this endpoint before continuing.
                    for (var i = 0; i < this.connections.length; i++)
                        this.connections[i].setHover(false);

                    this.addClass("endpointDrag");
                    _jsPlumb.setConnectionBeingDragged(true);

                    // if we're not full but there was a connection, make it null. we'll create a new one.
                    if (jpc && !this.isFull() && this.isSource) jpc = null;

                    _jsPlumb.updateOffset( { elId : this.elementId });
                    inPlaceCopy = this.makeInPlaceCopy();
                    inPlaceCopy.referenceEndpoint = this;
                    inPlaceCopy.paint();                                                                
                    
                    _makeDraggablePlaceholder(placeholderInfo, this.parent, _jsPlumb);
                    
                    // set the offset of this div to be where 'inPlaceCopy' is, to start with.
                    // TODO merge this code with the code in both Anchor and FloatingAnchor, because it
                    // does the same stuff.
                    var ipcoel = _gel(inPlaceCopy.canvas),
                        ipco = jsPlumb.CurrentLibrary.getOffset(ipcoel, _jsPlumb),
                        po = _jsPlumb.adjustForParentOffsetAndScroll([ipco.left, ipco.top], inPlaceCopy.canvas),
                        canvasElement = _gel(this.canvas);                               
                        
                    jpcl.setOffset(placeholderInfo.element, {left:po[0], top:po[1]});                                                           
                    
                    // when using makeSource and a parent, we first draw the source anchor on the source element, then
                    // move it to the parent.  note that this happens after drawing the placeholder for the
                    // first time.
                    if (this.parentAnchor) this.anchor = _jsPlumb.makeAnchor(this.parentAnchor, this.elementId, _jsPlumb);
                    
                    // store the id of the dragging div and the source element. the drop function will pick these up.                   
                    _jsPlumb.setAttribute(this.canvas, "dragId", placeholderInfo.id);
                    _jsPlumb.setAttribute(this.canvas, "elId", this.elementId);

                    this._jsPlumb.floatingEndpoint = _makeFloatingEndpoint(this.getPaintStyle(), this.anchor, this.endpoint, this.canvas, placeholderInfo.element, _jsPlumb, _newEndpoint);
                    // TODO we should not know about DOM here. make the library adapter do this (or the 
                        // dom adapter)
                    this.canvas.style.visibility = "hidden";            
                    
                    if (jpc == null) {                                                                                                                                                         
                        this.anchor.locked = true;
                        this.setHover(false, false);                        
                        // create a connection. one end is this endpoint, the other is a floating endpoint.                    
                        jpc = _newConnection({
                            sourceEndpoint : this,
                            targetEndpoint : this._jsPlumb.floatingEndpoint,
                            source : this.endpointWillMoveTo || this.element,  // for makeSource with parent option.  ensure source element is represented correctly.
                            target : placeholderInfo.element,
                            anchors : [ this.anchor, this._jsPlumb.floatingEndpoint.anchor ],
                            paintStyle : params.connectorStyle, // this can be null. Connection will use the default.
                            hoverPaintStyle:params.connectorHoverStyle,
                            connector : params.connector, // this can also be null. Connection will use the default.
                            overlays : params.connectorOverlays,
                            type:this.connectionType,
                            cssClass:this.connectorClass,
                            hoverClass:this.connectorHoverClass
                        });
                        jpc.pending = true; // mark this connection as not having been established.
                        jpc.addClass(_jsPlumb.draggingClass);
                        this._jsPlumb.floatingEndpoint.addClass(_jsPlumb.draggingClass);
                        // fire an event that informs that a connection is being dragged                        
                        _jsPlumb.fire("connectionDrag", jpc);

                    } else {
                        existingJpc = true;
                        jpc.setHover(false);                        
                        // if existing connection, allow to be dropped back on the source endpoint (issue 51).
                        _initDropTarget(ipcoel, false, true);
                        // new anchor idx
                        var anchorIdx = jpc.endpoints[0].id == this.id ? 0 : 1;
                        jpc.floatingAnchorIndex = anchorIdx;                    // save our anchor index as the connection's floating index.                        
                        this.detachFromConnection(jpc);                         // detach from the connection while dragging is occurring.
                        
                        // store the original scope (issue 57)
                        var dragScope = jsPlumb.CurrentLibrary.getDragScope(canvasElement);
                        _jsPlumb.setAttribute(this.canvas, "originalScope", dragScope);
                        // now we want to get this endpoint's DROP scope, and set it for now: we can only be dropped on drop zones
                        // that have our drop scope (issue 57).
                        var dropScope = jpcl.getDropScope(canvasElement);
                        jpcl.setDragScope(canvasElement, dropScope);

                        // fire an event that informs that a connection is being dragged. we do this before
                        // replacing the original target with the floating element info.
                        _jsPlumb.fire("connectionDrag", jpc);
                
                        // now we replace ourselves with the temporary div we created above:
                        if (anchorIdx === 0) {
                            existingJpcParams = [ jpc.source, jpc.sourceId, canvasElement, dragScope ];
                            jpc.source = placeholderInfo.element;
                            jpc.sourceId = placeholderInfo.id;
                        } else {
                            existingJpcParams = [ jpc.target, jpc.targetId, canvasElement, dragScope ];
                            jpc.target = placeholderInfo.element;
                            jpc.targetId = placeholderInfo.id;
                        }

                        // lock the other endpoint; if it is dynamic it will not move while the drag is occurring.
                        jpc.endpoints[anchorIdx === 0 ? 1 : 0].anchor.locked = true;
                        // store the original endpoint and assign the new floating endpoint for the drag.
                        jpc.suspendedEndpoint = jpc.endpoints[anchorIdx];
                        
                        // PROVIDE THE SUSPENDED ELEMENT, BE IT A SOURCE OR TARGET (ISSUE 39)
                        jpc.suspendedElement = jpc.endpoints[anchorIdx].getElement();
                        jpc.suspendedElementId = jpc.endpoints[anchorIdx].elementId;
                        jpc.suspendedElementType = anchorIdx === 0 ? "source" : "target";
                        
                        jpc.suspendedEndpoint.setHover(false);
                        this._jsPlumb.floatingEndpoint.referenceEndpoint = jpc.suspendedEndpoint;
                        jpc.endpoints[anchorIdx] = this._jsPlumb.floatingEndpoint;

                        jpc.addClass(_jsPlumb.draggingClass);
                        this._jsPlumb.floatingEndpoint.addClass(_jsPlumb.draggingClass);                    

                    }
                    // register it and register connection on it.
                    floatingConnections[placeholderInfo.id] = jpc;
                    _jsPlumb.anchorManager.addFloatingConnection(placeholderInfo.id, jpc);               
                    // only register for the target endpoint; we will not be dragging the source at any time
                    // before this connection is either discarded or made into a permanent connection.
                    _ju.addToList(params.endpointsByElement, placeholderInfo.id, this._jsPlumb.floatingEndpoint);
                    // tell jsplumb about it
                    _jsPlumb.currentlyDragging = true;
                }.bind(this);

                var dragOptions = params.dragOptions || {},
                    defaultOpts = jsPlumb.extend( {}, jpcl.defaultDragOptions),
                    startEvent = jpcl.dragEvents.start,
                    stopEvent = jpcl.dragEvents.stop,
                    dragEvent = jpcl.dragEvents.drag;
                
                dragOptions = jsPlumb.extend(defaultOpts, dragOptions);
                dragOptions.scope = dragOptions.scope || this.scope;
                dragOptions[startEvent] = _ju.wrap(dragOptions[startEvent], start, false);
                // extracted drag handler function so can be used by makeSource
                dragOptions[dragEvent] = _ju.wrap(dragOptions[dragEvent], _dragHandler.drag);
                dragOptions[stopEvent] = _ju.wrap(dragOptions[stopEvent],
                    function() {        

                        _jsPlumb.setConnectionBeingDragged(false);  
                        // if no endpoints, jpc already cleaned up.
                        if (jpc.endpoints != null) {          
                            // get the actual drop event (decode from library args to stop function)
                            var originalEvent = jpcl.getDropEvent(arguments);                                       
                            // unlock the other endpoint (if it is dynamic, it would have been locked at drag start)
                            var idx = jpc.floatingAnchorIndex == null ? 1 : jpc.floatingAnchorIndex;
                            jpc.endpoints[idx === 0 ? 1 : 0].anchor.locked = false;
                            // WHY does this need to happen?  i suppose because the connection might not get 
                            // deleted.  TODO: i dont want to know about css classes inside jsplumb, ideally.
                            jpc.removeClass(_jsPlumb.draggingClass);   
                        
                            // if we have the floating endpoint then the connection has not been dropped
                            // on another endpoint.  If it is a new connection we throw it away. If it is an 
                            // existing connection we check to see if we should reattach it, throwing it away 
                            // if not.
                            if (jpc.endpoints[idx] == this._jsPlumb.floatingEndpoint) {
                                // 6a. if the connection was an existing one...
                                if (existingJpc && jpc.suspendedEndpoint) {
                                    // fix for issue35, thanks Sylvain Gizard: when firing the detach event make sure the
                                    // floating endpoint has been replaced.
                                    if (idx === 0) {
                                        jpc.source = existingJpcParams[0];
                                        jpc.sourceId = existingJpcParams[1];
                                    } else {
                                        jpc.target = existingJpcParams[0];
                                        jpc.targetId = existingJpcParams[1];
                                    }
                                    
                                    // restore the original scope (issue 57)
                                    jpcl.setDragScope(existingJpcParams[2], existingJpcParams[3]);
                                    jpc.endpoints[idx] = jpc.suspendedEndpoint;
                                    // IF the connection should be reattached, or the other endpoint refuses detach, then
                                    // reset the connection to its original state
                                    if (jpc.isReattach() || jpc._forceReattach || jpc._forceDetach || !jpc.endpoints[idx === 0 ? 1 : 0].detach(jpc, false, false, true, originalEvent)) {                                   
                                        jpc.setHover(false);
                                        jpc.floatingAnchorIndex = null;
                                        jpc._forceDetach = null;
                                        jpc._forceReattach = null;
                                        this._jsPlumb.floatingEndpoint.detachFromConnection(jpc);
                                        jpc.suspendedEndpoint.addConnection(jpc);
                                        _jsPlumb.repaint(existingJpcParams[1]);
                                    }
                                }                                                               
                            }
                        }

                        // remove the element associated with the floating endpoint 
                        // (and its associated floating endpoint and visual artefacts)                                        
                        _jsPlumb.remove(placeholderInfo.element, false);
                        // remove the inplace copy
                        _jsPlumb.remove(inPlaceCopy.canvas, false);

                        // makeTargets sets this flag, to tell us we have been replaced and should delete ourself.
                        if (this.deleteAfterDragStop) {                        
                            _jsPlumb.deleteObject({endpoint:this});
                        }
                        else {
                            if (this._jsPlumb) {
                                this._jsPlumb.floatingEndpoint = null;
                                // repaint this endpoint.
                                // make our canvas visible (TODO: hand off to library; we should not know about DOM)
                                this.canvas.style.visibility = "visible";
                                // unlock our anchor
                                this.anchor.locked = false;
                                this.paint({recalc:false});                        
                            }
                        }                                                    

                        // although the connection is no longer valid, there are use cases where this is useful.
                        _jsPlumb.fire("connectionDragStop", jpc, originalEvent);

                        // tell jsplumb that dragging is finished.
                        _jsPlumb.currentlyDragging = false;

                        jpc = null;

                    }.bind(this));
                
                var i = _gel(this.canvas);              
                jpcl.initDraggable(i, dragOptions, true, _jsPlumb);

                draggingInitialised = true;
            }
        };

        // if marked as source or target at create time, init the dragging.
        if (this.isSource || this.isTarget)
            this.initDraggable();        

        // pulled this out into a function so we can reuse it for the inPlaceCopy canvas; you can now drop detached connections
        // back onto the endpoint you detached it from.
        var _initDropTarget = function(canvas, forceInit, isTransient, endpoint) {
            if ((this.isTarget || forceInit) && jpcl.isDropSupported(this.element)) {
                var dropOptions = params.dropOptions || _jsPlumb.Defaults.DropOptions || jsPlumb.Defaults.DropOptions;
                dropOptions = jsPlumb.extend( {}, dropOptions);
                dropOptions.scope = dropOptions.scope || this.scope;
                var dropEvent = jpcl.dragEvents.drop,
                    overEvent = jpcl.dragEvents.over,
                    outEvent = jpcl.dragEvents.out,
                    drop = function() {                        

                        this.removeClass(_jsPlumb.endpointDropAllowedClass);
                        this.removeClass(_jsPlumb.endpointDropForbiddenClass);
                                                    
                        var originalEvent = jpcl.getDropEvent(arguments),
                            draggable = _gel(jpcl.getDragObject(arguments)),
                            id = _jsPlumb.getAttribute(draggable, "dragId"),
                            elId = _jsPlumb.getAttribute(draggable, "elId"),						
                            scope = _jsPlumb.getAttribute(draggable, "originalScope"),
                            jpc = floatingConnections[id];
                            
                        // if this is a drop back where the connection came from, mark it force rettach and
                        // return; the stop handler will reattach. without firing an event.
                        var redrop = jpc.suspendedEndpoint && (jpc.suspendedEndpoint.id == this.id ||
                                        this.referenceEndpoint && jpc.suspendedEndpoint.id == this.referenceEndpoint.id) ;							
                        if (redrop) {								
                            jpc._forceReattach = true;
                            return;
                        }

                        if (jpc != null) {
                            var idx = jpc.floatingAnchorIndex == null ? 1 : jpc.floatingAnchorIndex, oidx = idx === 0 ? 1 : 0;
                            
                            // restore the original scope if necessary (issue 57)						
                            if (scope) jsPlumb.CurrentLibrary.setDragScope(draggable, scope);							
                            
                            var endpointEnabled = endpoint != null ? endpoint.isEnabled() : true;
                            
                            if (this.isFull()) {
                                this.fire("maxConnections", { 
                                    endpoint:this, 
                                    connection:jpc, 
                                    maxConnections:this._jsPlumb.maxConnections 
                                }, originalEvent);
                            }
                                                            
                            if (!this.isFull() && !(idx === 0 && !this.isSource) && !(idx == 1 && !this.isTarget) && endpointEnabled) {
                                var _doContinue = true;

                                // the second check here is for the case that the user is dropping it back
                                // where it came from.
                                if (jpc.suspendedEndpoint && jpc.suspendedEndpoint.id != this.id) {
                                    if (idx === 0) {
                                        jpc.source = jpc.suspendedEndpoint.element;
                                        jpc.sourceId = jpc.suspendedEndpoint.elementId;
                                    } else {
                                        jpc.target = jpc.suspendedEndpoint.element;
                                        jpc.targetId = jpc.suspendedEndpoint.elementId;
                                    }

                                    if (!jpc.isDetachAllowed(jpc) || !jpc.endpoints[idx].isDetachAllowed(jpc) || !jpc.suspendedEndpoint.isDetachAllowed(jpc) || !_jsPlumb.checkCondition("beforeDetach", jpc))
                                        _doContinue = false;								
                                }
            
                                // these have to be set before testing for beforeDrop.
                                if (idx === 0) {
                                    jpc.source = this.element;
                                    jpc.sourceId = this.elementId;
                                } else {
                                    jpc.target = this.element;
                                    jpc.targetId = this.elementId;
                                }
                                                            
// ------------ wrap the execution path in a function so we can support asynchronous beforeDrop																
                                    
                                // we want to execute this regardless.
                                var commonFunction = function() {
                                    jpc.floatingAnchorIndex = null;
                                };	
                                                                                                
                                var continueFunction = function() {
                                    jpc.pending = false;

                                    // remove this jpc from the current endpoint
                                    jpc.endpoints[idx].detachFromConnection(jpc);
                                    if (jpc.suspendedEndpoint) jpc.suspendedEndpoint.detachFromConnection(jpc);
                                    jpc.endpoints[idx] = this;
                                    this.addConnection(jpc);
                                    
                                    // copy our parameters in to the connection:
                                    var params = this.getParameters();
                                    for (var aParam in params)
                                        jpc.setParameter(aParam, params[aParam]);

                                    if (!jpc.suspendedEndpoint) {  
                                        // if not an existing connection and
                                        if (params.draggable)
                                            jsPlumb.CurrentLibrary.initDraggable(this.element, dragOptions, true, _jsPlumb);
                                    }
                                    else {
                                        var suspendedElement = jpc.suspendedEndpoint.getElement(), suspendedElementId = jpc.suspendedEndpoint.elementId;
                                        _fireMoveEvent({
                                            index:idx,
                                            originalSourceId:idx === 0 ? suspendedElementId : jpc.sourceId,
                                            newSourceId:idx === 0 ? this.elementId : jpc.sourceId,
                                            originalTargetId:idx == 1 ? suspendedElementId : jpc.targetId,
                                            newTargetId:idx == 1 ? this.elementId : jpc.targetId,
                                            originalSourceEndpoint:idx === 0 ? jpc.suspendedEndpoint : jpc.endpoints[0],
                                            newSourceEndpoint:idx === 0 ? this : jpc.endpoints[0],
                                            originalTargetEndpoint:idx == 1 ? jpc.suspendedEndpoint : jpc.endpoints[1],
                                            newTargetEndpoint:idx == 1 ? this : jpc.endpoints[1],
                                            connection:jpc
                                        }, originalEvent);
                                       /* var suspendedElement = jpc.suspendedEndpoint.getElement(), suspendedElementId = jpc.suspendedEndpoint.elementId;
                                        // fire a detach event
                                        _fireDetachEvent({
                                            source : idx === 0 ? suspendedElement : jpc.source, 
                                            target : idx == 1 ? suspendedElement : jpc.target,
                                            sourceId : idx === 0 ? suspendedElementId : jpc.sourceId, 
                                            targetId : idx == 1 ? suspendedElementId : jpc.targetId,
                                            sourceEndpoint : idx === 0 ? jpc.suspendedEndpoint : jpc.endpoints[0], 
                                            targetEndpoint : idx == 1 ? jpc.suspendedEndpoint : jpc.endpoints[1],
                                            connection : jpc
                                        }, true, originalEvent);*/
                                    }

                                    // TODO this is like the makeTarget drop code.
                                    if (idx == 1)
                                        _jsPlumb.anchorManager.updateOtherEndpoint(jpc.sourceId, jpc.suspendedElementId, jpc.targetId, jpc);
                                    else                                    
                                        _jsPlumb.anchorManager.sourceChanged(jpc.suspendedEndpoint.elementId, jpc.sourceId, jpc);                                   

                                    // finalise will inform the anchor manager and also add to
                                    // connectionsByScope if necessary.
                                    // TODO if this is not set to true, then dragging a connection's target to a new
                                    // target causes the connection to be forgotten. however if it IS set to true, then
                                    // the opposite happens: dragging by source causes the connection to get forgotten
                                    // about and then if you delete it jsplumb breaks.
                                    _finaliseConnection(jpc, null, originalEvent/*, true*/);
                                    
                                    commonFunction();
                                }.bind(this);
                                
                                var dontContinueFunction = function() {
                                    // otherwise just put it back on the endpoint it was on before the drag.
                                    if (jpc.suspendedEndpoint) {									
                                        jpc.endpoints[idx] = jpc.suspendedEndpoint;
                                        jpc.setHover(false);
                                        jpc._forceDetach = true;
                                        if (idx === 0) {
                                            jpc.source = jpc.suspendedEndpoint.element;
                                            jpc.sourceId = jpc.suspendedEndpoint.elementId;
                                        } else {
                                            jpc.target = jpc.suspendedEndpoint.element;
                                            jpc.targetId = jpc.suspendedEndpoint.elementId;
                                        }
                                        jpc.suspendedEndpoint.addConnection(jpc);

                                        jpc.endpoints[0].repaint();
                                        jpc.repaint();
                                        _jsPlumb.repaint(jpc.sourceId);
                                        jpc._forceDetach = false;
                                    }
                                    
                                    commonFunction();
                                };
                                
// --------------------------------------
                                // now check beforeDrop.  this will be available only on Endpoints that are setup to
                                // have a beforeDrop condition (although, secretly, under the hood all Endpoints and 
                                // the Connection have them, because they are on jsPlumbUIComponent.  shhh!), because
                                // it only makes sense to have it on a target endpoint.
                                _doContinue = _doContinue && this.isDropAllowed(jpc.sourceId, jpc.targetId, jpc.scope, jpc, this);
                                                                                                                    
                                if (_doContinue) {
                                    continueFunction();
                                }
                                else {
                                    dontContinueFunction();
                                }
                            }
                            _jsPlumb.currentlyDragging = false;
                        }
                    }.bind(this);
                
                dropOptions[dropEvent] = _ju.wrap(dropOptions[dropEvent], drop);
                dropOptions[overEvent] = _ju.wrap(dropOptions[overEvent], function() {					
                    var draggable = jpcl.getDragObject(arguments),
                        id = _jsPlumb.getAttribute(draggable, "dragId"),
                        _jpc = floatingConnections[id];
                        
                    if (_jpc != null) {								
                        var idx = _jpc.floatingAnchorIndex == null ? 1 : _jpc.floatingAnchorIndex;
                        // here we should fire the 'over' event if we are a target and this is a new connection,
                        // or we are the same as the floating endpoint.								
                        var _cont = (this.isTarget && _jpc.floatingAnchorIndex !== 0) || (_jpc.suspendedEndpoint && this.referenceEndpoint && this.referenceEndpoint.id == _jpc.suspendedEndpoint.id);
                        if (_cont) {
                            var bb = _jsPlumb.checkCondition("checkDropAllowed", { 
                                sourceEndpoint:_jpc.endpoints[idx], 
                                targetEndpoint:this,
                                connection:_jpc
                            }); 
                            this[(bb ? "add" : "remove") + "Class"](_jsPlumb.endpointDropAllowedClass);
                            this[(bb ? "remove" : "add") + "Class"](_jsPlumb.endpointDropForbiddenClass);
                            _jpc.endpoints[idx].anchor.over(this.anchor, this);
                        }
                    }						
                }.bind(this));	

                dropOptions[outEvent] = _ju.wrap(dropOptions[outEvent], function() {					
                    var draggable = jpcl.getDragObject(arguments),
                        id = _jsPlumb.getAttribute( draggable, "dragId"),
                        _jpc = floatingConnections[id];
                        
                    if (_jpc != null) {
                        var idx = _jpc.floatingAnchorIndex == null ? 1 : _jpc.floatingAnchorIndex;
                        var _cont = (this.isTarget && _jpc.floatingAnchorIndex !== 0) || (_jpc.suspendedEndpoint && this.referenceEndpoint && this.referenceEndpoint.id == _jpc.suspendedEndpoint.id);
                        if (_cont) {
                            this.removeClass(_jsPlumb.endpointDropAllowedClass);
                            this.removeClass(_jsPlumb.endpointDropForbiddenClass);
                            _jpc.endpoints[idx].anchor.out();
                        }
                    }
                }.bind(this));
                jpcl.initDroppable(canvas, dropOptions, true, isTransient);
            }
        }.bind(this);
        
        // initialise the endpoint's canvas as a drop target.  this will be ignored if the endpoint is not a target or drag is not supported.
        _initDropTarget(_gel(this.canvas), true, !(params._transient || this.anchor.isFloating), this);
        
         // finally, set type if it was provided
         if (params.type)
            this.addType(params.type, params.data, _jsPlumb.isSuspendDrawing());

        return this;        					
    };

    jsPlumbUtil.extend(jsPlumb.Endpoint, OverlayCapableJsPlumbUIComponent, {
        getTypeDescriptor : function() { return "endpoint"; },        
        isVisible : function() { return this._jsPlumb.visible; },
        setVisible : function(v, doNotChangeConnections, doNotNotifyOtherEndpoint) {
            this._jsPlumb.visible = v;
            if (this.canvas) this.canvas.style.display = v ? "block" : "none";
            this[v ? "showOverlays" : "hideOverlays"]();
            if (!doNotChangeConnections) {
                for (var i = 0; i < this.connections.length; i++) {
                    this.connections[i].setVisible(v);
                    if (!doNotNotifyOtherEndpoint) {
                        var oIdx = this === this.connections[i].endpoints[0] ? 1 : 0;
                        // only change the other endpoint if this is its only connection.
                        if (this.connections[i].endpoints[oIdx].connections.length == 1) this.connections[i].endpoints[oIdx].setVisible(v, true, true);
                    }
                }
            }
        },
        getAttachedElements : function() {
            return this.connections;
        },
        applyType : function(t, doNotRepaint) {         
            if (t.maxConnections != null) this._jsPlumb.maxConnections = t.maxConnections;
            if (t.scope) this.scope = t.scope;
            jsPlumbUtil.copyValues(typeParameters, t, this);
            if (t.anchor) {
                this.anchor = this._jsPlumb.instance.makeAnchor(t.anchor);
            }
        },
        isEnabled : function() { return this._jsPlumb.enabled; },
        setEnabled : function(e) { this._jsPlumb.enabled = e; },
        cleanup : function() {            
            jsPlumb.CurrentLibrary.removeClass(this.element, this._jsPlumb.instance.endpointAnchorClassPrefix + "_" + this._jsPlumb.currentAnchorClass);            
            this.anchor = null;
            this.endpoint.cleanup();
            this.endpoint.destroy();
            this.endpoint = null;
            // drag/drop
            var i = jsPlumb.CurrentLibrary.getElementObject(this.canvas);              
            jsPlumb.CurrentLibrary.destroyDraggable(i);
            jsPlumb.CurrentLibrary.destroyDroppable(i);
        },
        setHover : function(h) {
            if (this.endpoint && this._jsPlumb && !this._jsPlumb.instance.isConnectionBeingDragged())
                this.endpoint.setHover(h);            
        },
        isFull : function() {
            return !(this.isFloating() || this._jsPlumb.maxConnections < 1 || this.connections.length < this._jsPlumb.maxConnections);              
        },
        getConnectionCost : function() { return this._jsPlumb.connectionCost; },
        setConnectionCost : function(c) {
            this._jsPlumb.connectionCost = c; 
        },
        areConnectionsDirected : function() { return this._jsPlumb.connectionsDirected; },
        setConnectionsDirected : function(b) { this._jsPlumb.connectionsDirected = b; },
        setElementId : function(_elId) {
            this.elementId = _elId;
            this.anchor.elementId = _elId;
        },        
        setReferenceElement : function(_el) {
            this.element = jsPlumb.CurrentLibrary.getDOMElement(_el);
        },
        setDragAllowedWhenFull : function(allowed) {
            this.dragAllowedWhenFull = allowed;
        },
        equals : function(endpoint) {
            return this.anchor.equals(endpoint.anchor);
        },
        getUuid : function() {
            return this._jsPlumb.uuid;
        },
        computeAnchor : function(params) {
            return this.anchor.compute(params);
        }
    });
})();
;(function() {

    var makeConnector = function(_jsPlumb, renderMode, connectorName, connectorArgs) {
            if (!_jsPlumb.Defaults.DoNotThrowErrors && jsPlumb.Connectors[renderMode][connectorName] == null)
                    throw { msg:"jsPlumb: unknown connector type '" + connectorName + "'" };

            return new jsPlumb.Connectors[renderMode][connectorName](connectorArgs);  
        },
        _makeAnchor = function(anchorParams, elementId, _jsPlumb) {
            return (anchorParams) ? _jsPlumb.makeAnchor(anchorParams, elementId, _jsPlumb) : null;
        },
        prepareEndpoint = function(_jsPlumb, _newEndpoint, conn, existing, index, params, element, elementId, connectorPaintStyle, connectorHoverPaintStyle) {
            var e;
            if (existing) {
                conn.endpoints[index] = existing;
                existing.addConnection(conn);                   
            } else {
                if (!params.endpoints) params.endpoints = [ null, null ];
                var ep = params.endpoints[index]  || params.endpoint || _jsPlumb.Defaults.Endpoints[index] || jsPlumb.Defaults.Endpoints[index] || _jsPlumb.Defaults.Endpoint || jsPlumb.Defaults.Endpoint;
                if (!params.endpointStyles) params.endpointStyles = [ null, null ];
                if (!params.endpointHoverStyles) params.endpointHoverStyles = [ null, null ];
                var es = params.endpointStyles[index] || params.endpointStyle || _jsPlumb.Defaults.EndpointStyles[index] || jsPlumb.Defaults.EndpointStyles[index] || _jsPlumb.Defaults.EndpointStyle || jsPlumb.Defaults.EndpointStyle;
                // Endpoints derive their fillStyle from the connector's strokeStyle, if no fillStyle was specified.
                if (es.fillStyle == null && connectorPaintStyle != null)
                    es.fillStyle = connectorPaintStyle.strokeStyle;
                
                // TODO: decide if the endpoint should derive the connection's outline width and color.  currently it does:
                //*
                if (es.outlineColor == null && connectorPaintStyle != null) 
                    es.outlineColor = connectorPaintStyle.outlineColor;
                if (es.outlineWidth == null && connectorPaintStyle != null) 
                    es.outlineWidth = connectorPaintStyle.outlineWidth;
                //*/
                
                var ehs = params.endpointHoverStyles[index] || params.endpointHoverStyle || _jsPlumb.Defaults.EndpointHoverStyles[index] || jsPlumb.Defaults.EndpointHoverStyles[index] || _jsPlumb.Defaults.EndpointHoverStyle || jsPlumb.Defaults.EndpointHoverStyle;
                // endpoint hover fill style is derived from connector's hover stroke style.  TODO: do we want to do this by default? for sure?
                if (connectorHoverPaintStyle != null) {
                    if (ehs == null) ehs = {};
                    if (ehs.fillStyle == null) {
                        ehs.fillStyle = connectorHoverPaintStyle.strokeStyle;
                    }
                }
                var a = params.anchors ? params.anchors[index] : 
                        params.anchor ? params.anchor :
                        _makeAnchor(_jsPlumb.Defaults.Anchors[index], elementId, _jsPlumb) || 
                        _makeAnchor(jsPlumb.Defaults.Anchors[index], elementId,_jsPlumb) || 
                        _makeAnchor(_jsPlumb.Defaults.Anchor, elementId,_jsPlumb) || 
                        _makeAnchor(jsPlumb.Defaults.Anchor, elementId, _jsPlumb),                  
                    u = params.uuids ? params.uuids[index] : null;
                    e = _newEndpoint({ 
                        paintStyle : es,  hoverPaintStyle:ehs,  endpoint : ep,  connections : [ conn ], 
                        uuid : u,  anchor : a,  source : element, scope  : params.scope, container:params.container,
                        reattach:params.reattach || _jsPlumb.Defaults.ReattachConnections,
                        detachable:params.detachable || _jsPlumb.Defaults.ConnectionsDetachable
                    });
                conn.endpoints[index] = e;
                
                if (params.drawEndpoints === false) e.setVisible(false, true, true);
                                    
            }
            return e;
        };
    
    jsPlumb.Connection = function(params) {
        var _newConnection = params.newConnection,
            _newEndpoint = params.newEndpoint,
            jpcl = jsPlumb.CurrentLibrary,
            _att = jpcl.getAttribute,
            _gel = jpcl.getElementObject,
            _dom = jpcl.getDOMElement,
            _ju = jsPlumbUtil,
            _getOffset = jpcl.getOffset;

        this.connector = null;                        
        this.idPrefix = "_jsplumb_c_";
        this.defaultLabelLocation = 0.5;
        this.defaultOverlayKeys = ["Overlays", "ConnectionOverlays"];
        this.parent = params.parent;
        // if a new connection is the result of moving some existing connection, params.previousConnection
        // will have that Connection in it. listeners for the jsPlumbConnection event can look for that
        // member and take action if they need to.
        this.previousConnection = params.previousConnection;
        this.source = _dom(params.source);
        this.target = _dom(params.target);
        // sourceEndpoint and targetEndpoint override source/target, if they are present. but 
        // source is not overridden if the Endpoint has declared it is not the final target of a connection;
        // instead we use the source that the Endpoint declares will be the final source element.
        if (params.sourceEndpoint) this.source = params.sourceEndpoint.endpointWillMoveTo || params.sourceEndpoint.getElement();            
        if (params.targetEndpoint) this.target = params.targetEndpoint.getElement();        

        OverlayCapableJsPlumbUIComponent.apply(this, arguments);

        this.sourceId = this._jsPlumb.instance.getId(this.source);
        this.targetId = this._jsPlumb.instance.getId(this.target);
        this.scope = params.scope; // scope may have been passed in to the connect call. if it wasn't, we will pull it from the source endpoint, after having initialised the endpoints.            
        this.endpoints = [];
        this.endpointStyles = [];
            
        var _jsPlumb = this._jsPlumb.instance;    
        this._jsPlumb.visible = true;
        this._jsPlumb.editable = params.editable === true;    
        this._jsPlumb.params = {
            parent:params.parent,
            cssClass:params.cssClass,
            container:params.container,
            "pointer-events":params["pointer-events"],
            editorParams:params.editorParams
        };   
        this._jsPlumb.lastPaintedAt = null;              
        this.getDefaultType = function() {
            return {
                parameters:{},
                scope:null,
                detachable:this._jsPlumb.instance.Defaults.ConnectionsDetachable,
                rettach:this._jsPlumb.instance.Defaults.ReattachConnections,
                paintStyle:this._jsPlumb.instance.Defaults.PaintStyle || jsPlumb.Defaults.PaintStyle,
                connector:this._jsPlumb.instance.Defaults.Connector || jsPlumb.Defaults.Connector,
                hoverPaintStyle:this._jsPlumb.instance.Defaults.HoverPaintStyle || jsPlumb.Defaults.HoverPaintStyle,				
                overlays:this._jsPlumb.instance.Defaults.ConnectorOverlays || jsPlumb.Defaults.ConnectorOverlays
            };
        };
        
// INITIALISATION CODE			
                            
        // wrapped the main function to return null if no input given. this lets us cascade defaults properly.
        
        var eS = prepareEndpoint(_jsPlumb, _newEndpoint, this, params.sourceEndpoint, 0, params, this.source, this.sourceId, params.paintStyle, params.hoverPaintStyle);			
        if (eS) _ju.addToList(params.endpointsByElement, this.sourceId, eS);						
        var eT = prepareEndpoint(_jsPlumb, _newEndpoint, this, params.targetEndpoint, 1, params, this.target, this.targetId, params.paintStyle, params.hoverPaintStyle);
        if (eT) _ju.addToList(params.endpointsByElement, this.targetId, eT);
        // if scope not set, set it to be the scope for the source endpoint.
        if (!this.scope) this.scope = this.endpoints[0].scope;		
                
        // if explicitly told to (or not to) delete endpoints on detach, override endpoint's preferences
        if (params.deleteEndpointsOnDetach != null) {
            this.endpoints[0]._deleteOnDetach = params.deleteEndpointsOnDetach;
            this.endpoints[1]._deleteOnDetach = params.deleteEndpointsOnDetach;
        }
        else {
            // otherwise, unless the endpoints say otherwise, mark them for deletion.
            if (!this.endpoints[0]._doNotDeleteOnDetach) this.endpoints[0]._deleteOnDetach = true;
            if (!this.endpoints[1]._doNotDeleteOnDetach) this.endpoints[1]._deleteOnDetach = true;
        }   
                    
        // TODO these could surely be refactored into some method that tries them one at a time until something exists
        this.setConnector(this.endpoints[0].connector || 
                          this.endpoints[1].connector || 
                          params.connector || 
                          _jsPlumb.Defaults.Connector || 
                          jsPlumb.Defaults.Connector, true);

        if (params.path)
            this.connector.setPath(params.path);
        
        this.setPaintStyle(this.endpoints[0].connectorStyle || 
                           this.endpoints[1].connectorStyle || 
                           params.paintStyle || 
                           _jsPlumb.Defaults.PaintStyle || 
                           jsPlumb.Defaults.PaintStyle, true);
                    
        this.setHoverPaintStyle(this.endpoints[0].connectorHoverStyle || 
                                this.endpoints[1].connectorHoverStyle || 
                                params.hoverPaintStyle || 
                                _jsPlumb.Defaults.HoverPaintStyle || 
                                jsPlumb.Defaults.HoverPaintStyle, true);
        
        this._jsPlumb.paintStyleInUse = this.getPaintStyle();
        
        var _suspendedAt = _jsPlumb.getSuspendedAt();
        _jsPlumb.updateOffset( { elId : this.sourceId, timestamp:_suspendedAt });
        _jsPlumb.updateOffset( { elId : this.targetId, timestamp:_suspendedAt });

//*
        if(!_jsPlumb.isSuspendDrawing()) {                    
            // paint the endpoints
            var myInfo = _jsPlumb.getCachedData(this.sourceId),
                myOffset = myInfo.o, myWH = myInfo.s,
                otherInfo = _jsPlumb.getCachedData(this.targetId),
                otherOffset = otherInfo.o,
                otherWH = otherInfo.s,
                initialTimestamp = _suspendedAt || _jsPlumb.timestamp(),
                anchorLoc = this.endpoints[0].anchor.compute( {
                    xy : [ myOffset.left, myOffset.top ], wh : myWH, element : this.endpoints[0],
                    elementId:this.endpoints[0].elementId,
                    txy : [ otherOffset.left, otherOffset.top ], twh : otherWH, tElement : this.endpoints[1],
                    timestamp:initialTimestamp
                });

            this.endpoints[0].paint( { anchorLoc : anchorLoc, timestamp:initialTimestamp });

            anchorLoc = this.endpoints[1].anchor.compute( {
                xy : [ otherOffset.left, otherOffset.top ], wh : otherWH, element : this.endpoints[1],
                elementId:this.endpoints[1].elementId,				
                txy : [ myOffset.left, myOffset.top ], twh : myWH, tElement : this.endpoints[0],
                timestamp:initialTimestamp				
            });
            this.endpoints[1].paint({ anchorLoc : anchorLoc, timestamp:initialTimestamp });
        }
        //*/
                                
// END INITIALISATION CODE			
        
// DETACHABLE 				
        this._jsPlumb.detachable = _jsPlumb.Defaults.ConnectionsDetachable;
        if (params.detachable === false) this._jsPlumb.detachable = false;
        if(this.endpoints[0].connectionsDetachable === false) this._jsPlumb.detachable = false;
        if(this.endpoints[1].connectionsDetachable === false) this._jsPlumb.detachable = false;                
// REATTACH
        this._jsPlumb.reattach = params.reattach || this.endpoints[0].reattachConnections || this.endpoints[1].reattachConnections || _jsPlumb.Defaults.ReattachConnections;
// COST + DIRECTIONALITY
        // if cost not supplied, try to inherit from source endpoint
        this._jsPlumb.cost = params.cost || this.endpoints[0].getConnectionCost();			        
        this._jsPlumb.directed = params.directed;
        // inherit directed flag if set no source endpoint
        if (params.directed == null) this._jsPlumb.directed = this.endpoints[0].areConnectionsDirected();        
// END COST + DIRECTIONALITY
                    
// PARAMETERS						
        // merge all the parameters objects into the connection.  parameters set
        // on the connection take precedence; then source endpoint params, then
        // finally target endpoint params.
        // TODO jsPlumb.extend could be made to take more than two args, and it would
        // apply the second through nth args in order.
        var _p = jsPlumb.extend({}, this.endpoints[1].getParameters());
        jsPlumb.extend(_p, this.endpoints[0].getParameters());
        jsPlumb.extend(_p, this.getParameters());
        this.setParameters(_p);
// END PARAMETERS

// PAINTING
                  
        // the very last thing we do is apply types, if there are any.
        var _types = [params.type, this.endpoints[0].connectionType, this.endpoints[1].connectionType ].join(" ");
        if (/[a-zA-Z]/.test(_types))
            this.addType(_types, params.data, true);        

        
// END PAINTING    
    };

    jsPlumbUtil.extend(jsPlumb.Connection, OverlayCapableJsPlumbUIComponent, {
        applyType : function(t, doNotRepaint) {            
            if (t.detachable != null) this.setDetachable(t.detachable);
            if (t.reattach != null) this.setReattach(t.reattach);
            if (t.scope) this.scope = t.scope;
            //editable = t.editable;  // TODO
            this.setConnector(t.connector, doNotRepaint);
        },
        getTypeDescriptor : function() { return "connection"; },
        getAttachedElements : function() {
            return this.endpoints;
        },
        addClass : function(c, informEndpoints) {        
            if (informEndpoints) {
                this.endpoints[0].addClass(c);
                this.endpoints[1].addClass(c); 
                if (this.suspendedEndpoint) this.suspendedEndpoint.addClass(c);                   
            }
            if (this.connector) {
                this.connector.addClass(c);
            }
        },
        removeClass : function(c, informEndpoints) {            
            if (informEndpoints) {
                this.endpoints[0].removeClass(c);
                this.endpoints[1].removeClass(c);                    
                if (this.suspendedEndpoint) this.suspendedEndpoint.removeClass(c);
            }
            if (this.connector) {
                this.connector.removeClass(c);
            }
        },
        isVisible : function() { return this._jsPlumb.visible; },
        setVisible : function(v) {
            this._jsPlumb.visible = v;
            //this[v ? "showOverlays" : "hideOverlays"]();
            if (this.connector) 
                this.connector.setVisible(v);
            this.repaint();
        },

        /* TODO move to connecto editors; it should put these on the prototype.

        setEditable : function(e) {
            if (this.connector && this.connector.isEditable())
                this._jsPlumb.editable = e;
            
            return this._jsPlumb.editable;
        },
        isEditable : function() { return this._jsPlumb.editable; },
        editStarted : function() {  
            this.setSuspendEvents(true);
            this.fire("editStarted", {
                path:this.connector.getPath()
            });            
            this._jsPlumb.instance.setHoverSuspended(true);
        },
        editCompleted : function() {            
            this.fire("editCompleted", {
                path:this.connector.getPath()
            });       
            this.setSuspendEvents(false);
            this.setHover(false);     
            this._jsPlumb.instance.setHoverSuspended(false);
        },
        editCanceled : function() {
            this.fire("editCanceled", {
                path:this.connector.getPath()
            });
            this.setHover(false);
            this._jsPlumb.instance.setHoverSuspended(false);
        },

*/

        cleanup:function() {
            //this.endpointsToDeleteOnDetach = null;
            this.endpoints = null;
            this.source = null;
            this.target = null;                    
            if (this.connector != null) {
                this.connector.cleanup();            
                this.connector.destroy();
            }
            this.connector = null;
        },
        isDetachable : function() {
            return this._jsPlumb.detachable === true;
        },
        setDetachable : function(detachable) {
          this._jsPlumb.detachable = detachable === true;
        },
        isReattach : function() {
            return this._jsPlumb.reattach === true;
        },        
        setReattach : function(reattach) {
          this._jsPlumb.reattach = reattach === true;
        },
        setHover : function(state) {
            if (this.connector && this._jsPlumb && !this._jsPlumb.instance.isConnectionBeingDragged()) {
                this.connector.setHover(state);
                jsPlumb.CurrentLibrary[state ? "addClass" : "removeClass"](this.source, this._jsPlumb.instance.hoverSourceClass);
                jsPlumb.CurrentLibrary[state ? "addClass" : "removeClass"](this.target, this._jsPlumb.instance.hoverTargetClass);
            }
        },
        getCost : function() { return this._jsPlumb.cost; },
        setCost : function(c) { this._jsPlumb.cost = c; },
        isDirected : function() { return this._jsPlumb.directed === true; },
        //
        // changes the parent element of this connection to newParent.  not exposed for the public API.
        //
        // TODO ensure moveParent method still works (the overlay stuff in particular)
        moveParent : function(newParent) {
            var jpcl = jsPlumb.CurrentLibrary, curParent = jpcl.getParent(this.connector.canvas);               
            if (this.connector.bgCanvas) {
                jpcl.removeElement(this.connector.bgCanvas);
                jpcl.appendElement(this.connector.bgCanvas, newParent);
            }
            jpcl.removeElement(this.connector.canvas);
            jpcl.appendElement(this.connector.canvas, newParent);                
            // this only applies for DOMOverlays
            for (var i = 0; i < this._jsPlumb.overlays.length; i++) {
                if (this._jsPlumb.overlays[i].isAppendedAtTopLevel) {
                    jpcl.removeElement(this._jsPlumb.overlays[i].canvas);
                    jpcl.appendElement(this._jsPlumb.overlays[i].canvas, newParent);
                    if (this._jsPlumb.overlays[i].reattachListeners) 
                        this._jsPlumb.overlays[i].reattachListeners(this.connector);
                }
            }
            if (this.connector.reattachListeners)       // this is for SVG/VML; change an element's parent and you have to reinit its listeners.
                this.connector.reattachListeners();     // the Canvas implementation doesn't have to care about this
        },
        getConnector : function() { return this.connector; },
        setConnector : function(connectorSpec, doNotRepaint) {
            var _ju = jsPlumbUtil;
            if (this.connector != null) {
                this.connector.cleanup();
                this.connector.destroy();
            }

            var connectorArgs = { 
                    _jsPlumb:this._jsPlumb.instance, 
                    parent:this._jsPlumb.params.parent, 
                    cssClass:this._jsPlumb.params.cssClass, 
                    container:this._jsPlumb.params.container,                 
                    "pointer-events":this._jsPlumb.params["pointer-events"]
                },
                renderMode = this._jsPlumb.instance.getRenderMode();
            
            if (_ju.isString(connectorSpec)) 
                this.connector = makeConnector(this._jsPlumb.instance, renderMode, connectorSpec, connectorArgs); // lets you use a string as shorthand.
            else if (_ju.isArray(connectorSpec)) {
                if (connectorSpec.length == 1)
                    this.connector = makeConnector(this._jsPlumb.instance, renderMode, connectorSpec[0], connectorArgs);
                else
                    this.connector = makeConnector(this._jsPlumb.instance, renderMode, connectorSpec[0], _ju.merge(connectorSpec[1], connectorArgs));
            }
            // binds mouse listeners to the current connector.
            this.bindListeners(this.connector, this, function(state) {                
                this.setHover(state, false);                
            }.bind(this));
            
            this.canvas = this.connector.canvas;

            if (this._jsPlumb.editable && jsPlumb.ConnectorEditors != null && jsPlumb.ConnectorEditors[this.connector.type] && this.connector.isEditable()) {
                new jsPlumb.ConnectorEditors[this.connector.type]({
                    connector:this.connector,
                    connection:this,
                    params:this._jsPlumb.params.editorParams || { }
                });
            }
            else {                    
                this._jsPlumb.editable = false;
            }                
                
            if (!doNotRepaint) this.repaint();
        },
        paint : function(params) {
                    
            if (!this._jsPlumb.instance.isSuspendDrawing() && this._jsPlumb.visible) {
                    
                params = params || {};
                var elId = params.elId, ui = params.ui, recalc = params.recalc, timestamp = params.timestamp,
                    // if the moving object is not the source we must transpose the two references.
                    swap = false,
                    tId = swap ? this.sourceId : this.targetId, sId = swap ? this.targetId : this.sourceId,                    
                    tIdx = swap ? 0 : 1, sIdx = swap ? 1 : 0;

                if (timestamp == null || timestamp != this._jsPlumb.lastPaintedAt) {                        
                    var sourceInfo = this._jsPlumb.instance.updateOffset( { elId : sId, offset : ui, recalc : recalc, timestamp : timestamp }).o,
                        targetInfo = this._jsPlumb.instance.updateOffset( { elId : tId, timestamp : timestamp }).o, // update the target if this is a forced repaint. otherwise, only the source has been moved.
                        sE = this.endpoints[sIdx], tE = this.endpoints[tIdx];

                    if (params.clearEdits) {
                        this._jsPlumb.overlayPositions = null;
                        sE.anchor.clearUserDefinedLocation();
                        tE.anchor.clearUserDefinedLocation();
                        this.connector.setEdited(false);
                    }
                    
                    var sAnchorP = sE.anchor.getCurrentLocation({xy:[sourceInfo.left,sourceInfo.top], wh:[sourceInfo.width, sourceInfo.height], element:sE, timestamp:timestamp}),              
                        tAnchorP = tE.anchor.getCurrentLocation({xy:[targetInfo.left,targetInfo.top], wh:[targetInfo.width, targetInfo.height], element:tE, timestamp:timestamp});                                                 
                        
                    this.connector.resetBounds();

                    this.connector.compute({
                        sourcePos:sAnchorP,
                        targetPos:tAnchorP, 
                        sourceEndpoint:this.endpoints[sIdx],
                        targetEndpoint:this.endpoints[tIdx],
                        lineWidth:this._jsPlumb.paintStyleInUse.lineWidth,                                          
                        sourceInfo:sourceInfo,
                        targetInfo:targetInfo,
                        clearEdits:params.clearEdits === true
                    });                                                                                        

                    var overlayExtents = { minX:Infinity, minY:Infinity, maxX:-Infinity, maxY:-Infinity };
                                        
                    // compute overlays. we do this first so we can get their placements, and adjust the
                    // container if needs be (if an overlay would be clipped)
                    for ( var i = 0; i < this._jsPlumb.overlays.length; i++) {
                        var o = this._jsPlumb.overlays[i];
                        if (o.isVisible()) {                            
                            this._jsPlumb.overlayPlacements[i] = o.draw(this.connector, this._jsPlumb.paintStyleInUse, this.getAbsoluteOverlayPosition(o));
                            overlayExtents.minX = Math.min(overlayExtents.minX, this._jsPlumb.overlayPlacements[i].minX);
                            overlayExtents.maxX = Math.max(overlayExtents.maxX, this._jsPlumb.overlayPlacements[i].maxX);
                            overlayExtents.minY = Math.min(overlayExtents.minY, this._jsPlumb.overlayPlacements[i].minY);
                            overlayExtents.maxY = Math.max(overlayExtents.maxY, this._jsPlumb.overlayPlacements[i].maxY);
                        }
                    }

                    var lineWidth = parseFloat(this._jsPlumb.paintStyleInUse.lineWidth || 1) / 2,
                        outlineWidth = parseFloat(this._jsPlumb.paintStyleInUse.lineWidth || 0),
                        extents = {
                            xmin : Math.min(this.connector.bounds.minX - (lineWidth + outlineWidth), overlayExtents.minX),
                            ymin : Math.min(this.connector.bounds.minY - (lineWidth + outlineWidth), overlayExtents.minY),
                            xmax : Math.max(this.connector.bounds.maxX + (lineWidth + outlineWidth), overlayExtents.maxX),
                            ymax : Math.max(this.connector.bounds.maxY + (lineWidth + outlineWidth), overlayExtents.maxY)
                        };

                    // paint the connector.
                    this.connector.paint(this._jsPlumb.paintStyleInUse, null, extents);  
                    // and then the overlays
                    for ( var j = 0; j < this._jsPlumb.overlays.length; j++) {
                        var p = this._jsPlumb.overlays[j];
                        if (p.isVisible()) {
                            p.paint(this._jsPlumb.overlayPlacements[j], extents);    
                        }
                    }                                                                          
                }
                this._jsPlumb.lastPaintedAt = timestamp;                        
            }       
        },
        /*
         * Function: repaint
         * Repaints the Connection. No parameters exposed to public API.
         */
        repaint : function(params) {
            params = params || {};            
            this.paint({ elId : this.sourceId, recalc : !(params.recalc === false), timestamp:params.timestamp, clearEdits:params.clearEdits });
        }
        
    }); // END Connection class            
})();
/*
 * jsPlumb
 * 
 * Title:jsPlumb 1.5.5
 * 
 * Provides a way to visually connect elements on an HTML page, using either SVG, Canvas
 * elements, or VML.  
 * 
 * This file contains the code for creating and manipulating anchors.
 *
 * Copyright (c) 2010 - 2013 Simon Porritt (simon.porritt@gmail.com)
 * 
 * http://jsplumb.org
 * http://github.com/sporritt/jsplumb
 * http://code.google.com/p/jsplumb
 * 
 * Dual licensed under the MIT and GPL2 licenses.
 */
;(function() {	
    
    //
	// manages anchors for all elements.
	//
	jsPlumb.AnchorManager = function(params) {
		var _amEndpoints = {},
            continuousAnchors = {},
            continuousAnchorLocations = {},
            userDefinedContinuousAnchorLocations = {},        
            continuousAnchorOrientations = {},
            Orientation = { HORIZONTAL : "horizontal", VERTICAL : "vertical", DIAGONAL : "diagonal", IDENTITY:"identity" },
			connectionsByElementId = {},
			self = this,
            anchorLists = {},
            jsPlumbInstance = params.jsPlumbInstance,
            jpcl = jsPlumb.CurrentLibrary,
            floatingConnections = {},
            // TODO this functions uses a crude method of determining orientation between two elements.
            // 'diagonal' should be chosen when the angle of the line between the two centers is around
            // one of 45, 135, 225 and 315 degrees. maybe +- 15 degrees.
            // used by AnchorManager.redraw
            calculateOrientation = function(sourceId, targetId, sd, td, sourceAnchor, targetAnchor) {
        
                if (sourceId === targetId) return {
                    orientation:Orientation.IDENTITY,
                    a:["top", "top"]
                };
        
                var theta = Math.atan2((td.centery - sd.centery) , (td.centerx - sd.centerx)),
                    theta2 = Math.atan2((sd.centery - td.centery) , (sd.centerx - td.centerx)),
                    h = ((sd.left <= td.left && sd.right >= td.left) || (sd.left <= td.right && sd.right >= td.right) ||
                        (sd.left <= td.left && sd.right >= td.right) || (td.left <= sd.left && td.right >= sd.right)),
                    v = ((sd.top <= td.top && sd.bottom >= td.top) || (sd.top <= td.bottom && sd.bottom >= td.bottom) ||
                        (sd.top <= td.top && sd.bottom >= td.bottom) || (td.top <= sd.top && td.bottom >= sd.bottom)),
                    possiblyTranslateEdges = function(edges) {
                        // this function checks to see if either anchor is Continuous, and if so, runs the suggested edge
                        // through the anchor: Continuous anchors can say which faces they support, and they get to choose 
                        // whether a certain face is honoured, or, if not, which face to replace it with. the behaviour when
                        // choosing an alternate face is to try for the opposite face first, then the next one clockwise, and then
                        // the opposite of that one.
                        return [
                            sourceAnchor.isContinuous ? sourceAnchor.verifyEdge(edges[0]) : edges[0],    
                            targetAnchor.isContinuous ? targetAnchor.verifyEdge(edges[1]) : edges[1]
                        ];
                    },
                    out = {
                        orientation:Orientation.DIAGONAL,
                        theta:theta,
                        theta2:theta2
                    };                        
                
                if (! (h || v)) {                    
                    if (td.left > sd.left && td.top > sd.top)
                        out.a = ["right", "top"];
                    else if (td.left > sd.left && sd.top > td.top)
                        out.a = [ "top", "left"];
                    else if (td.left < sd.left && td.top < sd.top)
                        out.a = [ "top", "right"];
                    else if (td.left < sd.left && td.top > sd.top)
                        out.a = ["left", "top" ];                            
                }
                else if (h) {
                    out.orientation = Orientation.HORIZONTAL;
                    out.a = sd.top < td.top ? ["bottom", "top"] : ["top", "bottom"];                    
                }
                else {
                    out.orientation = Orientation.VERTICAL;
                    out.a = sd.left < td.left ? ["right", "left"] : ["left", "right"];
                }
                
                out.a = possiblyTranslateEdges(out.a);
                return out;
            },
                // used by placeAnchors function
            placeAnchorsOnLine = function(desc, elementDimensions, elementPosition,
                            connections, horizontal, otherMultiplier, reverse) {
                var a = [], step = elementDimensions[horizontal ? 0 : 1] / (connections.length + 1);
        
                for (var i = 0; i < connections.length; i++) {
                    var val = (i + 1) * step, other = otherMultiplier * elementDimensions[horizontal ? 1 : 0];
                    if (reverse)
                      val = elementDimensions[horizontal ? 0 : 1] - val;
        
                    var dx = (horizontal ? val : other), x = elementPosition[0] + dx,  xp = dx / elementDimensions[0],
                        dy = (horizontal ? other : val), y = elementPosition[1] + dy, yp = dy / elementDimensions[1];
        
                    a.push([ x, y, xp, yp, connections[i][1], connections[i][2] ]);
                }
        
                return a;
            },
            // used by edgeSortFunctions        
            currySort = function(reverseAngles) {
                return function(a,b) {
                    var r = true;
                    if (reverseAngles) {
                        /*if (a[0][0] < b[0][0])
                            r = true;
                        else
                            r = a[0][1] > b[0][1];*/
                        r = a[0][0] < b[0][0];
                    }
                    else {
                        /*if (a[0][0] > b[0][0])
                            r= true;
                        else
                            r =a[0][1] > b[0][1];
                        */
                        r = a[0][0] > b[0][0];
                    }
                    return r === false ? -1 : 1;
                };
            },
                // used by edgeSortFunctions
            leftSort = function(a,b) {
                // first get adjusted values
                var p1 = a[0][0] < 0 ? -Math.PI - a[0][0] : Math.PI - a[0][0],
                p2 = b[0][0] < 0 ? -Math.PI - b[0][0] : Math.PI - b[0][0];
                if (p1 > p2) return 1;
                else return a[0][1] > b[0][1] ? 1 : -1;
            },
                // used by placeAnchors
            edgeSortFunctions = {
                "top":function(a, b) { return a[0] > b[0] ? 1 : -1; },
                "right":currySort(true),
                "bottom":currySort(true),
                "left":leftSort
            },
                // used by placeAnchors
            _sortHelper = function(_array, _fn) { return _array.sort(_fn); },
                // used by AnchorManager.redraw
            placeAnchors = function(elementId, _anchorLists) {		
                var cd = jsPlumbInstance.getCachedData(elementId), sS = cd.s, sO = cd.o,
                placeSomeAnchors = function(desc, elementDimensions, elementPosition, unsortedConnections, isHorizontal, otherMultiplier, orientation) {
                    if (unsortedConnections.length > 0) {
                        var sc = _sortHelper(unsortedConnections, edgeSortFunctions[desc]), // puts them in order based on the target element's pos on screen
                            reverse = desc === "right" || desc === "top",
                            anchors = placeAnchorsOnLine(desc, elementDimensions,
                                                     elementPosition, sc,
                                                     isHorizontal, otherMultiplier, reverse );
        
                        // takes a computed anchor position and adjusts it for parent offset and scroll, then stores it.
                        var _setAnchorLocation = function(endpoint, anchorPos) {
                            var a = jsPlumbInstance.adjustForParentOffsetAndScroll([anchorPos[0], anchorPos[1]], endpoint.canvas);
                            continuousAnchorLocations[endpoint.id] = [ a[0], a[1], anchorPos[2], anchorPos[3] ];
                            continuousAnchorOrientations[endpoint.id] = orientation;
                        };
        
                        for (var i = 0; i < anchors.length; i++) {
                            var c = anchors[i][4], weAreSource = c.endpoints[0].elementId === elementId, weAreTarget = c.endpoints[1].elementId === elementId;
                            if (weAreSource)
                                _setAnchorLocation(c.endpoints[0], anchors[i]);
                            else if (weAreTarget)
                                _setAnchorLocation(c.endpoints[1], anchors[i]);
                        }
                    }
                };
        
                placeSomeAnchors("bottom", sS, [sO.left,sO.top], _anchorLists.bottom, true, 1, [0,1]);
                placeSomeAnchors("top", sS, [sO.left,sO.top], _anchorLists.top, true, 0, [0,-1]);
                placeSomeAnchors("left", sS, [sO.left,sO.top], _anchorLists.left, false, 0, [-1,0]);
                placeSomeAnchors("right", sS, [sO.left,sO.top], _anchorLists.right, false, 1, [1,0]);
            };

        this.reset = function() {
            _amEndpoints = {};
            connectionsByElementId = {};
            anchorLists = {};
        };			
        this.addFloatingConnection = function(key, conn) {
            floatingConnections[key] = conn;
        };
        this.removeFloatingConnection = function(key) {
            delete floatingConnections[key];
        };                                                 
        this.newConnection = function(conn) {
			var sourceId = conn.sourceId, targetId = conn.targetId,
				ep = conn.endpoints,
                doRegisterTarget = true,
                registerConnection = function(otherIndex, otherEndpoint, otherAnchor, elId, c) {
					if ((sourceId == targetId) && otherAnchor.isContinuous){
                       // remove the target endpoint's canvas.  we dont need it.
                        jpcl.removeElement(ep[1].canvas);
                        doRegisterTarget = false;
                    }
					jsPlumbUtil.addToList(connectionsByElementId, elId, [c, otherEndpoint, otherAnchor.constructor == jsPlumb.DynamicAnchor]);
			    };

			registerConnection(0, ep[0], ep[0].anchor, targetId, conn);
            if (doRegisterTarget)
            	registerConnection(1, ep[1], ep[1].anchor, sourceId, conn);
		};
        var removeEndpointFromAnchorLists = function(endpoint) {
            (function(list, eId) {
                if (list) {  // transient anchors dont get entries in this list.
                    var f = function(e) { return e[4] == eId; };
                    jsPlumbUtil.removeWithFunction(list.top, f);
                    jsPlumbUtil.removeWithFunction(list.left, f);
                    jsPlumbUtil.removeWithFunction(list.bottom, f);
                    jsPlumbUtil.removeWithFunction(list.right, f);
                }
            })(anchorLists[endpoint.elementId], endpoint.id);
        };
		this.connectionDetached = function(connInfo) {
            var connection = connInfo.connection || connInfo,
			    sourceId = connInfo.sourceId,
                targetId = connInfo.targetId,
				ep = connection.endpoints,
				removeConnection = function(otherIndex, otherEndpoint, otherAnchor, elId, c) {
					if (otherAnchor != null && otherAnchor.constructor == jsPlumb.FloatingAnchor) {
						// no-op
					}
					else {
						jsPlumbUtil.removeWithFunction(connectionsByElementId[elId], function(_c) {
							return _c[0].id == c.id;
						});
					}
				};
				
			removeConnection(1, ep[1], ep[1].anchor, sourceId, connection);
			removeConnection(0, ep[0], ep[0].anchor, targetId, connection);

            // remove from anchorLists            
            removeEndpointFromAnchorLists(connection.endpoints[0]);
            removeEndpointFromAnchorLists(connection.endpoints[1]);

            self.redraw(connection.sourceId);
            self.redraw(connection.targetId);
		};
		this.add = function(endpoint, elementId) {
			jsPlumbUtil.addToList(_amEndpoints, elementId, endpoint);
		};
		this.changeId = function(oldId, newId) {
			connectionsByElementId[newId] = connectionsByElementId[oldId];
			_amEndpoints[newId] = _amEndpoints[oldId];
			delete connectionsByElementId[oldId];
			delete _amEndpoints[oldId];	
		};
		this.getConnectionsFor = function(elementId) {
			return connectionsByElementId[elementId] || [];
		};
		this.getEndpointsFor = function(elementId) {
			return _amEndpoints[elementId] || [];
		};
		this.deleteEndpoint = function(endpoint) {
			jsPlumbUtil.removeWithFunction(_amEndpoints[endpoint.elementId], function(e) {
				return e.id == endpoint.id;
			});
            removeEndpointFromAnchorLists(endpoint);
		};
		this.clearFor = function(elementId) {
			delete _amEndpoints[elementId];
			_amEndpoints[elementId] = [];
		};
        // updates the given anchor list by either updating an existing anchor's info, or adding it. this function
        // also removes the anchor from its previous list, if the edge it is on has changed.
        // all connections found along the way (those that are connected to one of the faces this function
        // operates on) are added to the connsToPaint list, as are their endpoints. in this way we know to repaint
        // them wthout having to calculate anything else about them.
        var _updateAnchorList = function(lists, theta, order, conn, aBoolean, otherElId, idx, reverse, edgeId, elId, connsToPaint, endpointsToPaint) {        
            // first try to find the exact match, but keep track of the first index of a matching element id along the way.s
            var exactIdx = -1,
                firstMatchingElIdx = -1,
                endpoint = conn.endpoints[idx],
                endpointId = endpoint.id,
                oIdx = [1,0][idx],
                values = [ [ theta, order ], conn, aBoolean, otherElId, endpointId ],
                listToAddTo = lists[edgeId],
                listToRemoveFrom = endpoint._continuousAnchorEdge ? lists[endpoint._continuousAnchorEdge] : null;

            if (listToRemoveFrom) {
                var rIdx = jsPlumbUtil.findWithFunction(listToRemoveFrom, function(e) { return e[4] == endpointId; });
                if (rIdx != -1) {
                    listToRemoveFrom.splice(rIdx, 1);
                    // get all connections from this list
                    for (var i = 0; i < listToRemoveFrom.length; i++) {
                        jsPlumbUtil.addWithFunction(connsToPaint, listToRemoveFrom[i][1], function(c) { return c.id == listToRemoveFrom[i][1].id; });
                        jsPlumbUtil.addWithFunction(endpointsToPaint, listToRemoveFrom[i][1].endpoints[idx], function(e) { return e.id == listToRemoveFrom[i][1].endpoints[idx].id; });
                        jsPlumbUtil.addWithFunction(endpointsToPaint, listToRemoveFrom[i][1].endpoints[oIdx], function(e) { return e.id == listToRemoveFrom[i][1].endpoints[oIdx].id; });
                    }
                }
            }

            for (i = 0; i < listToAddTo.length; i++) {
                if (params.idx == 1 && listToAddTo[i][3] === otherElId && firstMatchingElIdx == -1)
                    firstMatchingElIdx = i;
                jsPlumbUtil.addWithFunction(connsToPaint, listToAddTo[i][1], function(c) { return c.id == listToAddTo[i][1].id; });                
                jsPlumbUtil.addWithFunction(endpointsToPaint, listToAddTo[i][1].endpoints[idx], function(e) { return e.id == listToAddTo[i][1].endpoints[idx].id; });
                jsPlumbUtil.addWithFunction(endpointsToPaint, listToAddTo[i][1].endpoints[oIdx], function(e) { return e.id == listToAddTo[i][1].endpoints[oIdx].id; });
            }
            if (exactIdx != -1) {
                listToAddTo[exactIdx] = values;
            }
            else {
                var insertIdx = reverse ? firstMatchingElIdx != -1 ? firstMatchingElIdx : 0 : listToAddTo.length; // of course we will get this from having looked through the array shortly.
                listToAddTo.splice(insertIdx, 0, values);
            }

            // store this for next time.
            endpoint._continuousAnchorEdge = edgeId;
        };

        //
        // find the entry in an endpoint's list for this connection and update its target endpoint
        // with the current target in the connection.
        // 
        //
        this.updateOtherEndpoint = function(elId, oldTargetId, newTargetId, connection) {
            var sIndex = jsPlumbUtil.findWithFunction(connectionsByElementId[elId], function(i) {
                    return i[0].id === connection.id;
                }),
                tIndex = jsPlumbUtil.findWithFunction(connectionsByElementId[oldTargetId], function(i) {
                    return i[0].id === connection.id;
                });

            // update or add data for source
            if (sIndex != -1) {
                connectionsByElementId[elId][sIndex][0] = connection;
                connectionsByElementId[elId][sIndex][1] = connection.endpoints[1];
                connectionsByElementId[elId][sIndex][2] = connection.endpoints[1].anchor.constructor == jsPlumb.DynamicAnchor;
            }

            // remove entry for previous target (if there)
            if (tIndex > -1) {

                connectionsByElementId[oldTargetId].splice(tIndex, 1);
                // add entry for new target
                jsPlumbUtil.addToList(connectionsByElementId, newTargetId, [connection, connection.endpoints[0], connection.endpoints[0].anchor.constructor == jsPlumb.DynamicAnchor]);         
            }
        };       
        
        //
        // notification that the connection given has changed source from the originalId to the newId.
        // This involves:
        // 1. removing the connection from the list of connections stored for the originalId
        // 2. updating the source information for the target of the connection
        // 3. re-registering the connection in connectionsByElementId with the newId
        //
        this.sourceChanged = function(originalId, newId, connection) {            
            // remove the entry that points from the old source to the target
            jsPlumbUtil.removeWithFunction(connectionsByElementId[originalId], function(info) {
                return info[0].id === connection.id;
            });
            // find entry for target and update it
            var tIdx = jsPlumbUtil.findWithFunction(connectionsByElementId[connection.targetId], function(i) {
                return i[0].id === connection.id;
            });
            if (tIdx > -1) {
                connectionsByElementId[connection.targetId][tIdx][0] = connection;
                connectionsByElementId[connection.targetId][tIdx][1] = connection.endpoints[0];
                connectionsByElementId[connection.targetId][tIdx][2] = connection.endpoints[0].anchor.constructor == jsPlumb.DynamicAnchor;
            }
            // add entry for new source
            jsPlumbUtil.addToList(connectionsByElementId, newId, [connection, connection.endpoints[1], connection.endpoints[1].anchor.constructor == jsPlumb.DynamicAnchor]);         
        };

        //
        // moves the given endpoint from `currentId` to `element`.
        // This involves:
        //
        // 1. changing the key in _amEndpoints under which the endpoint is stored
        // 2. changing the source or target values in all of the endpoint's connections
        // 3. changing the array in connectionsByElementId in which the endpoint's connections
        //    are stored (done by either sourceChanged or updateOtherEndpoint)
        //
        this.rehomeEndpoint = function(ep, currentId, element) {
            var eps = _amEndpoints[currentId] || [], 
                elementId = jsPlumbInstance.getId(element);
                
            if (elementId !== currentId) {
                var idx = jsPlumbUtil.indexOf(eps, ep);
                if (idx > -1) {
                    var _ep = eps.splice(idx, 1)[0];
                    self.add(_ep, elementId);
                }
            }

            for (var i = 0; i < ep.connections.length; i++) {                
                if (ep.connections[i].sourceId == currentId) {
                    ep.connections[i].sourceId = ep.elementId;
                    ep.connections[i].source = ep.element;                  
                    self.sourceChanged(currentId, ep.elementId, ep.connections[i]);
                }
                else if(ep.connections[i].targetId == currentId) {
                    ep.connections[i].targetId = ep.elementId;
                    ep.connections[i].target = ep.element;   
                    self.updateOtherEndpoint(ep.connections[i].sourceId, currentId, ep.elementId, ep.connections[i]);               
                }
            }   
        };

		this.redraw = function(elementId, ui, timestamp, offsetToUI, clearEdits, doNotRecalcEndpoint) {
		
			if (!jsPlumbInstance.isSuspendDrawing()) {
				// get all the endpoints for this element
				var ep = _amEndpoints[elementId] || [],
					endpointConnections = connectionsByElementId[elementId] || [],
					connectionsToPaint = [],
					endpointsToPaint = [],
	                anchorsToUpdate = [];
	            
				timestamp = timestamp || jsPlumbInstance.timestamp();
				// offsetToUI are values that would have been calculated in the dragManager when registering
				// an endpoint for an element that had a parent (somewhere in the hierarchy) that had been
				// registered as draggable.
				offsetToUI = offsetToUI || {left:0, top:0};
				if (ui) {
					ui = {
						left:ui.left + offsetToUI.left,
						top:ui.top + offsetToUI.top
					};
				}
									
				// valid for one paint cycle.
				var myOffset = jsPlumbInstance.updateOffset( { elId : elementId, offset : ui, recalc : false, timestamp : timestamp }),
	                orientationCache = {};
				
				// actually, first we should compute the orientation of this element to all other elements to which
				// this element is connected with a continuous anchor (whether both ends of the connection have
				// a continuous anchor or just one)
	                        
	            for (var i = 0; i < endpointConnections.length; i++) {
	                var conn = endpointConnections[i][0],
						sourceId = conn.sourceId,
	                    targetId = conn.targetId,
	                    sourceContinuous = conn.endpoints[0].anchor.isContinuous,
	                    targetContinuous = conn.endpoints[1].anchor.isContinuous;
	
	                if (sourceContinuous || targetContinuous) {
		                var oKey = sourceId + "_" + targetId,
		                    oKey2 = targetId + "_" + sourceId,
		                    o = orientationCache[oKey],
		                    oIdx = conn.sourceId == elementId ? 1 : 0;
	
		                if (sourceContinuous && !anchorLists[sourceId]) anchorLists[sourceId] = { top:[], right:[], bottom:[], left:[] };
		                if (targetContinuous && !anchorLists[targetId]) anchorLists[targetId] = { top:[], right:[], bottom:[], left:[] };
	
		                if (elementId != targetId) jsPlumbInstance.updateOffset( { elId : targetId, timestamp : timestamp }); 
		                if (elementId != sourceId) jsPlumbInstance.updateOffset( { elId : sourceId, timestamp : timestamp }); 
	
		                var td = jsPlumbInstance.getCachedData(targetId),
							sd = jsPlumbInstance.getCachedData(sourceId);
	
		                if (targetId == sourceId && (sourceContinuous || targetContinuous)) {
		                    // here we may want to improve this by somehow determining the face we'd like
						    // to put the connector on.  ideally, when drawing, the face should be calculated
						    // by determining which face is closest to the point at which the mouse button
							// was released.  for now, we're putting it on the top face.                            
		                    _updateAnchorList(
                                anchorLists[sourceId], 
                                -Math.PI / 2, 
                                0, 
                                conn, 
                                false, 
                                targetId, 
                                0, false, "top", sourceId, connectionsToPaint, endpointsToPaint);
						}
		                else {
		                    if (!o) {
		                        o = calculateOrientation(sourceId, targetId, sd.o, td.o, conn.endpoints[0].anchor, conn.endpoints[1].anchor);
		                        orientationCache[oKey] = o;
		                        // this would be a performance enhancement, but the computed angles need to be clamped to
		                        //the (-PI/2 -> PI/2) range in order for the sorting to work properly.
		                    /*  orientationCache[oKey2] = {
		                            orientation:o.orientation,
		                            a:[o.a[1], o.a[0]],
		                            theta:o.theta + Math.PI,
		                            theta2:o.theta2 + Math.PI
		                        };*/
		                    }
		                    if (sourceContinuous) _updateAnchorList(anchorLists[sourceId], o.theta, 0, conn, false, targetId, 0, false, o.a[0], sourceId, connectionsToPaint, endpointsToPaint);
		                    if (targetContinuous) _updateAnchorList(anchorLists[targetId], o.theta2, -1, conn, true, sourceId, 1, true, o.a[1], targetId, connectionsToPaint, endpointsToPaint);
		                }
	
		                if (sourceContinuous) jsPlumbUtil.addWithFunction(anchorsToUpdate, sourceId, function(a) { return a === sourceId; });
		                if (targetContinuous) jsPlumbUtil.addWithFunction(anchorsToUpdate, targetId, function(a) { return a === targetId; });
		                jsPlumbUtil.addWithFunction(connectionsToPaint, conn, function(c) { return c.id == conn.id; });
		                if ((sourceContinuous && oIdx === 0) || (targetContinuous && oIdx === 1))
		                	jsPlumbUtil.addWithFunction(endpointsToPaint, conn.endpoints[oIdx], function(e) { return e.id == conn.endpoints[oIdx].id; });
		            }
	            }				
				// place Endpoints whose anchors are continuous but have no Connections
				for (i = 0; i < ep.length; i++) {
					if (ep[i].connections.length === 0 && ep[i].anchor.isContinuous) {
						if (!anchorLists[elementId]) anchorLists[elementId] = { top:[], right:[], bottom:[], left:[] };
						_updateAnchorList(anchorLists[elementId], -Math.PI / 2, 0, {endpoints:[ep[i], ep[i]], paint:function(){}}, false, elementId, 0, false, "top", elementId, connectionsToPaint, endpointsToPaint);
						jsPlumbUtil.addWithFunction(anchorsToUpdate, elementId, function(a) { return a === elementId; });
					}
				}
	            // now place all the continuous anchors we need to;
	            for (i = 0; i < anchorsToUpdate.length; i++) {
					placeAnchors(anchorsToUpdate[i], anchorLists[anchorsToUpdate[i]]);
				}

				// now that continuous anchors have been placed, paint all the endpoints for this element
	            // TODO performance: add the endpoint ids to a temp array, and then when iterating in the next
	            // loop, check that we didn't just paint that endpoint. we can probably shave off a few more milliseconds this way.
				for (i = 0; i < ep.length; i++) {				
                    ep[i].paint( { timestamp : timestamp, offset : myOffset, dimensions : myOffset.s, recalc:doNotRecalcEndpoint !== true });
				}
	            // ... and any other endpoints we came across as a result of the continuous anchors.
	            for (i = 0; i < endpointsToPaint.length; i++) {
                    var cd = jsPlumbInstance.getCachedData(endpointsToPaint[i].elementId);
                    // dont use timestamp for this endpoint, as it is not for the current element and we may 
                    // have needed to recalculate anchor position due to the element for the endpoint moving.
                    //endpointsToPaint[i].paint( { timestamp : null, offset : cd, dimensions : cd.s });

                    endpointsToPaint[i].paint( { timestamp : timestamp, offset : cd, dimensions : cd.s });
				}

				// paint all the standard and "dynamic connections", which are connections whose other anchor is
				// static and therefore does need to be recomputed; we make sure that happens only one time.
	
				// TODO we could have compiled a list of these in the first pass through connections; might save some time.
				for (i = 0; i < endpointConnections.length; i++) {
					var otherEndpoint = endpointConnections[i][1];
					if (otherEndpoint.anchor.constructor == jsPlumb.DynamicAnchor) {			 							
						otherEndpoint.paint({ elementWithPrecedence:elementId, timestamp:timestamp });								
	                    jsPlumbUtil.addWithFunction(connectionsToPaint, endpointConnections[i][0], function(c) { return c.id == endpointConnections[i][0].id; });
						// all the connections for the other endpoint now need to be repainted
						for (var k = 0; k < otherEndpoint.connections.length; k++) {
							if (otherEndpoint.connections[k] !== endpointConnections[i][0])							
	                            jsPlumbUtil.addWithFunction(connectionsToPaint, otherEndpoint.connections[k], function(c) { return c.id == otherEndpoint.connections[k].id; });
						}
					} else if (otherEndpoint.anchor.constructor == jsPlumb.Anchor) {					
	                    jsPlumbUtil.addWithFunction(connectionsToPaint, endpointConnections[i][0], function(c) { return c.id == endpointConnections[i][0].id; });
					}
				}
				// paint current floating connection for this element, if there is one.
				var fc = floatingConnections[elementId];
				if (fc) 
					fc.paint({timestamp:timestamp, recalc:false, elId:elementId});
				                
				// paint all the connections
				for (i = 0; i < connectionsToPaint.length; i++) {
					// if not a connection between the two elements in question dont use the timestamp.
                    var ts  =timestamp;// ((connectionsToPaint[i].sourceId == sourceId && connectionsToPaint[i].targetId == targetId) ||
                               //(connectionsToPaint[i].sourceId == targetId && connectionsToPaint[i].targetId == sourceId)) ? timestamp : null;
                    connectionsToPaint[i].paint({elId:elementId, timestamp:ts, recalc:false, clearEdits:clearEdits});
				}
			}
		};        
        
        var ContinuousAnchor = function(anchorParams) {
            jsPlumbUtil.EventGenerator.apply(this);
            this.type = "Continuous";
            this.isDynamic = true;
            this.isContinuous = true;
            var faces = anchorParams.faces || ["top", "right", "bottom", "left"],
                clockwise = !(anchorParams.clockwise === false),
                availableFaces = { },
                opposites = { "top":"bottom", "right":"left","left":"right","bottom":"top" },
                clockwiseOptions = { "top":"right", "right":"bottom","left":"top","bottom":"left" },
                antiClockwiseOptions = { "top":"left", "right":"top","left":"bottom","bottom":"right" },
                secondBest = clockwise ? clockwiseOptions : antiClockwiseOptions,
                lastChoice = clockwise ? antiClockwiseOptions : clockwiseOptions,
                cssClass = anchorParams.cssClass || "";
            
            for (var i = 0; i < faces.length; i++) { availableFaces[faces[i]] = true; }
          
            // if the given edge is supported, returns it. otherwise looks for a substitute that _is_
            // supported. if none supported we also return the request edge.
            this.verifyEdge = function(edge) {
                if (availableFaces[edge]) return edge;
                else if (availableFaces[opposites[edge]]) return opposites[edge];
                else if (availableFaces[secondBest[edge]]) return secondBest[edge];
                else if (availableFaces[lastChoice[edge]]) return lastChoice[edge];
                return edge; // we have to give them something.
            };
            
            this.compute = function(params) {
                return userDefinedContinuousAnchorLocations[params.element.id] || continuousAnchorLocations[params.element.id] || [0,0];
            };
            this.getCurrentLocation = function(params) {
                return userDefinedContinuousAnchorLocations[params.element.id] || continuousAnchorLocations[params.element.id] || [0,0];
            };
            this.getOrientation = function(endpoint) {
                return continuousAnchorOrientations[endpoint.id] || [0,0];
            };
            this.clearUserDefinedLocation = function() { 
                delete userDefinedContinuousAnchorLocations[anchorParams.elementId]; 
            };
            this.setUserDefinedLocation = function(loc) { 
                userDefinedContinuousAnchorLocations[anchorParams.elementId] = loc; 
            };            
            this.getCssClass = function() { return cssClass; };
            this.setCssClass = function(c) { cssClass = c; };
        };        
        
        // continuous anchors
        jsPlumbInstance.continuousAnchorFactory = {
            get:function(params) {
                var existing = continuousAnchors[params.elementId];
                if (!existing) {
                    existing = new ContinuousAnchor(params);                    
                    continuousAnchors[params.elementId] = existing;
                }
                return existing;
            },
            clear:function(elementId) {
                delete continuousAnchors[elementId];
            }
        };
	};
    
    /**
     * Anchors model a position on some element at which an Endpoint may be located.  They began as a first class citizen of jsPlumb, ie. a user
     * was required to create these themselves, but over time this has been replaced by the concept of referring to them either by name (eg. "TopMiddle"),
     * or by an array describing their coordinates (eg. [ 0, 0.5, 0, -1 ], which is the same as "TopMiddle").  jsPlumb now handles all of the
     * creation of Anchors without user intervention.
     */
    jsPlumb.Anchor = function(params) {       
        this.x = params.x || 0;
        this.y = params.y || 0;
        this.elementId = params.elementId;  
        this.cssClass = params.cssClass || "";      
        this.userDefinedLocation = null;
        this.orientation = params.orientation || [ 0, 0 ];

        jsPlumbUtil.EventGenerator.apply(this);
        
        var jsPlumbInstance = params.jsPlumbInstance;//,
            //lastTimestamp = null;//, lastReturnValue = null;
        
        this.lastReturnValue = null;
        this.offsets = params.offsets || [ 0, 0 ];
        this.timestamp = null;        
        this.compute = function(params) {
            
            var xy = params.xy, wh = params.wh, element = params.element, timestamp = params.timestamp; 

            if(params.clearUserDefinedLocation)
                this.userDefinedLocation = null;
            
            if (timestamp && timestamp === self.timestamp)
                return this.lastReturnValue;        
            
            if (this.userDefinedLocation != null) {
                this.lastReturnValue = this.userDefinedLocation;
            }
            else {                
                
                this.lastReturnValue = [ xy[0] + (this.x * wh[0]) + this.offsets[0], xy[1] + (this.y * wh[1]) + this.offsets[1] ];                    
                // adjust loc if there is an offsetParent
                this.lastReturnValue = jsPlumbInstance.adjustForParentOffsetAndScroll(this.lastReturnValue, element.canvas);
            }
            
            this.timestamp = timestamp;
            return this.lastReturnValue;
        };

        this.getCurrentLocation = function(params) { 
            return (this.lastReturnValue == null || (params.timestamp != null && this.timestamp != params.timestamp)) ? this.compute(params) : this.lastReturnValue; 
        };
    };
    jsPlumbUtil.extend(jsPlumb.Anchor, jsPlumbUtil.EventGenerator, {
        equals : function(anchor) {
            if (!anchor) return false;
            var ao = anchor.getOrientation(),
                o = this.getOrientation();
            return this.x == anchor.x && this.y == anchor.y && this.offsets[0] == anchor.offsets[0] && this.offsets[1] == anchor.offsets[1] && o[0] == ao[0] && o[1] == ao[1];
        },
        getUserDefinedLocation : function() { 
            return this.userDefinedLocation;
        },        
        setUserDefinedLocation : function(l) {
            this.userDefinedLocation = l;
        },
        clearUserDefinedLocation : function() {
            this.userDefinedLocation = null;
        },
        getOrientation : function(_endpoint) { return this.orientation; },
        getCssClass : function() { return this.cssClass; }
    });

    /**
     * An Anchor that floats. its orientation is computed dynamically from
     * its position relative to the anchor it is floating relative to.  It is used when creating 
     * a connection through drag and drop.
     * 
     * TODO FloatingAnchor could totally be refactored to extend Anchor just slightly.
     */
    jsPlumb.FloatingAnchor = function(params) {
        
        jsPlumb.Anchor.apply(this, arguments);

        // this is the anchor that this floating anchor is referenced to for
        // purposes of calculating the orientation.
        var ref = params.reference,
            jpcl = jsPlumb.CurrentLibrary,
            jsPlumbInstance = params.jsPlumbInstance,
            // the canvas this refers to.
            refCanvas = params.referenceCanvas,
            size = jpcl.getSize(jpcl.getElementObject(refCanvas)),
            // these are used to store the current relative position of our
            // anchor wrt the reference anchor. they only indicate
            // direction, so have a value of 1 or -1 (or, very rarely, 0). these
            // values are written by the compute method, and read
            // by the getOrientation method.
            xDir = 0, yDir = 0,
            // temporary member used to store an orientation when the floating
            // anchor is hovering over another anchor.
            orientation = null,
            _lastResult = null;

        // clear from parent. we want floating anchor orientation to always be computed.
        this.orientation = null;

        // set these to 0 each; they are used by certain types of connectors in the loopback case,
        // when the connector is trying to clear the element it is on. but for floating anchor it's not
        // very important.
        this.x = 0; this.y = 0;

        this.isFloating = true;

        this.compute = function(params) {
            var xy = params.xy, element = params.element,
            result = [ xy[0] + (size[0] / 2), xy[1] + (size[1] / 2) ]; // return origin of the element. we may wish to improve this so that any object can be the drag proxy.
                        
            // adjust loc if there is an offsetParent
            result = jsPlumbInstance.adjustForParentOffsetAndScroll(result, element.canvas);
            
            _lastResult = result;
            return result;
        };

        this.getOrientation = function(_endpoint) {
            if (orientation) return orientation;
            else {
                var o = ref.getOrientation(_endpoint);
                // here we take into account the orientation of the other
                // anchor: if it declares zero for some direction, we declare zero too. this might not be the most awesome. perhaps we can come
                // up with a better way. it's just so that the line we draw looks like it makes sense. maybe this wont make sense.
                return [ Math.abs(o[0]) * xDir * -1,
                        Math.abs(o[1]) * yDir * -1 ];
            }
        };

        /**
         * notification the endpoint associated with this anchor is hovering
         * over another anchor; we want to assume that anchor's orientation
         * for the duration of the hover.
         */
        this.over = function(anchor, endpoint) { 
            orientation = anchor.getOrientation(endpoint); 
        };

        /**
         * notification the endpoint associated with this anchor is no
         * longer hovering over another anchor; we should resume calculating
         * orientation as we normally do.
         */
        this.out = function() { orientation = null; };

        this.getCurrentLocation = function(params) { return _lastResult == null ? this.compute(params) : _lastResult; };
    };
    jsPlumbUtil.extend(jsPlumb.FloatingAnchor, jsPlumb.Anchor);

    var _convertAnchor = function(anchor, jsPlumbInstance, elementId) { 
        return anchor.constructor == jsPlumb.Anchor ? anchor: jsPlumbInstance.makeAnchor(anchor, elementId, jsPlumbInstance); 
    };

    /* 
     * A DynamicAnchor is an Anchor that contains a list of other Anchors, which it cycles
     * through at compute time to find the one that is located closest to
     * the center of the target element, and returns that Anchor's compute
     * method result. this causes endpoints to follow each other with
     * respect to the orientation of their target elements, which is a useful
     * feature for some applications.
     * 
     */
    jsPlumb.DynamicAnchor = function(params) {
        jsPlumb.Anchor.apply(this, arguments);
        
        this.isSelective = true;
        this.isDynamic = true;			
        this.anchors = [];
        this.elementId = params.elementId;
        this.jsPlumbInstance = params.jsPlumbInstance;

        for (var i = 0; i < params.anchors.length; i++) 
            this.anchors[i] = _convertAnchor(params.anchors[i], this.jsPlumbInstance, this.elementId);			
        this.addAnchor = function(anchor) { this.anchors.push(_convertAnchor(anchor, this.jsPlumbInstance, this.elementId)); };
        this.getAnchors = function() { return this.anchors; };
        this.locked = false;
        var _curAnchor = this.anchors.length > 0 ? this.anchors[0] : null,
            _curIndex = this.anchors.length > 0 ? 0 : -1,
            _lastAnchor = _curAnchor,
            self = this,
        
            // helper method to calculate the distance between the centers of the two elements.
            _distance = function(anchor, cx, cy, xy, wh) {
                var ax = xy[0] + (anchor.x * wh[0]), ay = xy[1] + (anchor.y * wh[1]),				
                    acx = xy[0] + (wh[0] / 2), acy = xy[1] + (wh[1] / 2);
                return (Math.sqrt(Math.pow(cx - ax, 2) + Math.pow(cy - ay, 2)) +
                        Math.sqrt(Math.pow(acx - ax, 2) + Math.pow(acy - ay, 2)));
            },        
            // default method uses distance between element centers.  you can provide your own method in the dynamic anchor
            // constructor (and also to jsPlumb.makeDynamicAnchor). the arguments to it are four arrays: 
            // xy - xy loc of the anchor's element
            // wh - anchor's element's dimensions
            // txy - xy loc of the element of the other anchor in the connection
            // twh - dimensions of the element of the other anchor in the connection.
            // anchors - the list of selectable anchors
            _anchorSelector = params.selector || function(xy, wh, txy, twh, anchors) {
                var cx = txy[0] + (twh[0] / 2), cy = txy[1] + (twh[1] / 2);
                var minIdx = -1, minDist = Infinity;
                for ( var i = 0; i < anchors.length; i++) {
                    var d = _distance(anchors[i], cx, cy, xy, wh);
                    if (d < minDist) {
                        minIdx = i + 0;
                        minDist = d;
                    }
                }
                return anchors[minIdx];
            };
        
        this.compute = function(params) {				
            var xy = params.xy, wh = params.wh, timestamp = params.timestamp, txy = params.txy, twh = params.twh;				
            
            if(params.clearUserDefinedLocation)
                userDefinedLocation = null;

            this.timestamp = timestamp;            
            
            var udl = self.getUserDefinedLocation();
            if (udl != null) {
                return udl;
            }
            
            // if anchor is locked or an opposite element was not given, we
            // maintain our state. anchor will be locked
            // if it is the source of a drag and drop.
            if (this.locked || txy == null || twh == null)
                return _curAnchor.compute(params);				
            else
                params.timestamp = null; // otherwise clear this, i think. we want the anchor to compute.
            
            _curAnchor = _anchorSelector(xy, wh, txy, twh, this.anchors);
            this.x = _curAnchor.x;
            this.y = _curAnchor.y;        

            if (_curAnchor != _lastAnchor)
                this.fire("anchorChanged", _curAnchor);

            _lastAnchor = _curAnchor;
            
            return _curAnchor.compute(params);
        };

        this.getCurrentLocation = function(params) {
            return this.getUserDefinedLocation() || (_curAnchor != null ? _curAnchor.getCurrentLocation(params) : null);
        };

        this.getOrientation = function(_endpoint) { return _curAnchor != null ? _curAnchor.getOrientation(_endpoint) : [ 0, 0 ]; };
        this.over = function(anchor, endpoint) { if (_curAnchor != null) _curAnchor.over(anchor, endpoint); };
        this.out = function() { if (_curAnchor != null) _curAnchor.out(); };

        this.getCssClass = function() { return (_curAnchor && _curAnchor.getCssClass()) || ""; };
    };    
    jsPlumbUtil.extend(jsPlumb.DynamicAnchor, jsPlumb.Anchor);        
    
// -------- basic anchors ------------------    
    var _curryAnchor = function(x, y, ox, oy, type, fnInit) {
        jsPlumb.Anchors[type] = function(params) {
            var a = params.jsPlumbInstance.makeAnchor([ x, y, ox, oy, 0, 0 ], params.elementId, params.jsPlumbInstance);
            a.type = type;
            if (fnInit) fnInit(a, params);
            return a;
        };
    };
    	
	_curryAnchor(0.5, 0, 0,-1, "TopCenter");
    _curryAnchor(0.5, 1, 0, 1, "BottomCenter");
    _curryAnchor(0, 0.5, -1, 0, "LeftMiddle");
    _curryAnchor(1, 0.5, 1, 0, "RightMiddle");
    // from 1.4.2: Top, Right, Bottom, Left
    _curryAnchor(0.5, 0, 0,-1, "Top");
    _curryAnchor(0.5, 1, 0, 1, "Bottom");
    _curryAnchor(0, 0.5, -1, 0, "Left");
    _curryAnchor(1, 0.5, 1, 0, "Right");
    _curryAnchor(0.5, 0.5, 0, 0, "Center");
    _curryAnchor(1, 0, 0,-1, "TopRight");
    _curryAnchor(1, 1, 0, 1, "BottomRight");
    _curryAnchor(0, 0, 0, -1, "TopLeft");
    _curryAnchor(0, 1, 0, 1, "BottomLeft");
    
// ------- dynamic anchors -------------------    
			
    // default dynamic anchors chooses from Top, Right, Bottom, Left
	jsPlumb.Defaults.DynamicAnchors = function(params) {
		return params.jsPlumbInstance.makeAnchors(["TopCenter", "RightMiddle", "BottomCenter", "LeftMiddle"], params.elementId, params.jsPlumbInstance);
	};
    
    // default dynamic anchors bound to name 'AutoDefault'
	jsPlumb.Anchors.AutoDefault  = function(params) { 
		var a = params.jsPlumbInstance.makeDynamicAnchor(jsPlumb.Defaults.DynamicAnchors(params));
		a.type = "AutoDefault";
		return a;
	};	
    
// ------- continuous anchors -------------------    
    
    var _curryContinuousAnchor = function(type, faces) {
        jsPlumb.Anchors[type] = function(params) {
            var a = params.jsPlumbInstance.makeAnchor(["Continuous", { faces:faces }], params.elementId, params.jsPlumbInstance);
            a.type = type;
            return a;
        };
    };
    
    jsPlumb.Anchors.Continuous = function(params) {
		return params.jsPlumbInstance.continuousAnchorFactory.get(params);
	};
                
    _curryContinuousAnchor("ContinuousLeft", ["left"]);    
    _curryContinuousAnchor("ContinuousTop", ["top"]);                 
    _curryContinuousAnchor("ContinuousBottom", ["bottom"]);                 
    _curryContinuousAnchor("ContinuousRight", ["right"]); 
    
// ------- position assign anchors -------------------    
    
    // this anchor type lets you assign the position at connection time.
	_curryAnchor(0, 0, 0, 0, "Assign", function(anchor, params) {
		// find what to use as the "position finder". the user may have supplied a String which represents
		// the id of a position finder in jsPlumb.AnchorPositionFinders, or the user may have supplied the
		// position finder as a function.  we find out what to use and then set it on the anchor.
		var pf = params.position || "Fixed";
		anchor.positionFinder = pf.constructor == String ? params.jsPlumbInstance.AnchorPositionFinders[pf] : pf;
		// always set the constructor params; the position finder might need them later (the Grid one does,
		// for example)
		anchor.constructorParams = params;
	});	

    // these are the default anchor positions finders, which are used by the makeTarget function.  supplying
    // a position finder argument to that function allows you to specify where the resulting anchor will
    // be located
	jsPlumbInstance.prototype.AnchorPositionFinders = {
		"Fixed": function(dp, ep, es, params) {
			return [ (dp.left - ep.left) / es[0], (dp.top - ep.top) / es[1] ];	
		},
		"Grid":function(dp, ep, es, params) {
			var dx = dp.left - ep.left, dy = dp.top - ep.top,
				gx = es[0] / (params.grid[0]), gy = es[1] / (params.grid[1]),
				mx = Math.floor(dx / gx), my = Math.floor(dy / gy);
			return [ ((mx * gx) + (gx / 2)) / es[0], ((my * gy) + (gy / 2)) / es[1] ];
		}
	};
    
// ------- perimeter anchors -------------------    
		
	jsPlumb.Anchors.Perimeter = function(params) {
		params = params || {};
		var anchorCount = params.anchorCount || 60,
			shape = params.shape;
		
		if (!shape) throw new Error("no shape supplied to Perimeter Anchor type");		
		
		var _circle = function() {
                var r = 0.5, step = Math.PI * 2 / anchorCount, current = 0, a = [];
                for (var i = 0; i < anchorCount; i++) {
                    var x = r + (r * Math.sin(current)),
                        y = r + (r * Math.cos(current));                                
                    a.push( [ x, y, 0, 0 ] );
                    current += step;
                }
                return a;	
            },
            _path = function(segments) {
                var anchorsPerFace = anchorCount / segments.length, a = [],
                    _computeFace = function(x1, y1, x2, y2, fractionalLength) {
                        anchorsPerFace = anchorCount * fractionalLength;
                        var dx = (x2 - x1) / anchorsPerFace, dy = (y2 - y1) / anchorsPerFace;
                        for (var i = 0; i < anchorsPerFace; i++) {
                            a.push( [
                                x1 + (dx * i),
                                y1 + (dy * i),
                                0,
                                0
                            ]);
                        }
                    };
								
                for (var i = 0; i < segments.length; i++)
                    _computeFace.apply(null, segments[i]);
														
                return a;					
            },
			_shape = function(faces) {												
                var s = [];
                for (var i = 0; i < faces.length; i++) {
                    s.push([faces[i][0], faces[i][1], faces[i][2], faces[i][3], 1 / faces.length]);
                }
                return _path(s);
			},
			_rectangle = function() {
				return _shape([
					[ 0, 0, 1, 0 ], [ 1, 0, 1, 1 ], [ 1, 1, 0, 1 ], [ 0, 1, 0, 0 ]
				]);		
			};
		
		var _shapes = {
			"Circle":_circle,
			"Ellipse":_circle,
			"Diamond":function() {
				return _shape([
						[ 0.5, 0, 1, 0.5 ], [ 1, 0.5, 0.5, 1 ], [ 0.5, 1, 0, 0.5 ], [ 0, 0.5, 0.5, 0 ]
				]);
			},
			"Rectangle":_rectangle,
			"Square":_rectangle,
			"Triangle":function() {
				return _shape([
						[ 0.5, 0, 1, 1 ], [ 1, 1, 0, 1 ], [ 0, 1, 0.5, 0]
				]);	
			},
			"Path":function(params) {
                var points = params.points, p = [], tl = 0;
				for (var i = 0; i < points.length - 1; i++) {
                    var l = Math.sqrt(Math.pow(points[i][2] - points[i][0]) + Math.pow(points[i][3] - points[i][1]));
                    tl += l;
					p.push([points[i][0], points[i][1], points[i+1][0], points[i+1][1], l]);						
				}
                for (var j = 0; j < p.length; j++) {
                    p[j][4] = p[j][4] / tl;
                }
				return _path(p);
			}
		},
        _rotate = function(points, amountInDegrees) {
            var o = [], theta = amountInDegrees / 180 * Math.PI ;
            for (var i = 0; i < points.length; i++) {
                var _x = points[i][0] - 0.5,
                    _y = points[i][1] - 0.5;
                    
                o.push([
                    0.5 + ((_x * Math.cos(theta)) - (_y * Math.sin(theta))),
                    0.5 + ((_x * Math.sin(theta)) + (_y * Math.cos(theta))),
                    points[i][2],
                    points[i][3]
                ]);
            }
            return o;
        };
		
		if (!_shapes[shape]) throw new Error("Shape [" + shape + "] is unknown by Perimeter Anchor type");
		
		var da = _shapes[shape](params);
        if (params.rotation) da = _rotate(da, params.rotation);
        var a = params.jsPlumbInstance.makeDynamicAnchor(da);
		a.type = "Perimeter";
		return a;
	};
})();
/*
 * jsPlumb
 * 
 * Title:jsPlumb 1.5.5
 * 
 * Provides a way to visually connect elements on an HTML page, using either SVG, Canvas
 * elements, or VML.  
 * 
 * This file contains the default Connectors, Endpoint and Overlay definitions.
 *
 * Copyright (c) 2010 - 2013 Simon Porritt (http://jsplumb.org)
 * 
 * http://jsplumb.org
 * http://github.com/sporritt/jsplumb
 * http://code.google.com/p/jsplumb
 * 
 * Dual licensed under the MIT and GPL2 licenses.
 */

;(function() {	
				
	/**
	 * 
	 * Helper class to consume unused mouse events by components that are DOM elements and
	 * are used by all of the different rendering modes.
	 * 
	 */
	jsPlumb.DOMElementComponent = jsPlumbUtil.extend(jsPlumb.jsPlumbUIComponent, function(params) {		
		// when render mode is canvas, these functions may be called by the canvas mouse handler.  
		// this component is safe to pipe this stuff to /dev/null.
		this.mousemove = 
		this.dblclick  = 
		this.click = 
		this.mousedown = 
		this.mouseup = function(e) { };					
	});
	
	jsPlumb.Segments = {
        	
        /*
         * Class: AbstractSegment
         * A Connector is made up of 1..N Segments, each of which has a Type, such as 'Straight', 'Arc',
         * 'Bezier'. This is new from 1.4.2, and gives us a lot more flexibility when drawing connections: things such
         * as rounded corners for flowchart connectors, for example, or a straight line stub for Bezier connections, are
         * much easier to do now.
         *
         * A Segment is responsible for providing coordinates for painting it, and also must be able to report its length.
         * 
         */ 
        AbstractSegment : function(params) { 
            this.params = params;
            
            /**
            * Function: findClosestPointOnPath
            * Finds the closest point on this segment to the given [x, y], 
            * returning both the x and y of the point plus its distance from
            * the supplied point, and its location along the length of the
            * path inscribed by the segment.  This implementation returns
            * Infinity for distance and null values for everything else;
            * subclasses are expected to override.
            */
            this.findClosestPointOnPath = function(x, y) {
                return {
                    d:Infinity,
                    x:null,
                    y:null,
                    l:null
                };
            };

            this.getBounds = function() {
                return {
                    minX:Math.min(params.x1, params.x2),
                    minY:Math.min(params.y1, params.y2),
                    maxX:Math.max(params.x1, params.x2),
                    maxY:Math.max(params.y1, params.y2)
                };
            };
        },
        Straight : function(params) {
            var _super = jsPlumb.Segments.AbstractSegment.apply(this, arguments),
                length, m, m2, x1, x2, y1, y2,
                _recalc = function() {
                    length = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
                    m = jsPlumbGeom.gradient({x:x1, y:y1}, {x:x2, y:y2});
                    m2 = -1 / m;                
                };
                
            this.type = "Straight";
            
            this.getLength = function() { return length; };
            this.getGradient = function() { return m; };
                
            this.getCoordinates = function() {
                return { x1:x1,y1:y1,x2:x2,y2:y2 };
            };
            this.setCoordinates = function(coords) {
                x1 = coords.x1; y1 = coords.y1; x2 = coords.x2; y2 = coords.y2;
                _recalc();
            };
            this.setCoordinates({x1:params.x1, y1:params.y1, x2:params.x2, y2:params.y2});

            this.getBounds = function() {
                return {
                    minX:Math.min(x1, x2),
                    minY:Math.min(y1, y2),
                    maxX:Math.max(x1, x2),
                    maxY:Math.max(y1, y2)
                };
            };
            
            /**
             * returns the point on the segment's path that is 'location' along the length of the path, where 'location' is a decimal from
             * 0 to 1 inclusive. for the straight line segment this is simple maths.
             */
             this.pointOnPath = function(location, absolute) {
                if (location === 0 && !absolute)
                    return { x:x1, y:y1 };
                else if (location == 1 && !absolute)
                    return { x:x2, y:y2 };
                else {
                    var l = absolute ? location > 0 ? location : length + location : location * length;
                    return jsPlumbGeom.pointOnLine({x:x1, y:y1}, {x:x2, y:y2}, l);
                }
            };
            
            /**
             * returns the gradient of the segment at the given point - which for us is constant.
             */
            this.gradientAtPoint = function(_) {
                return m;
            };
            
            /**
             * returns the point on the segment's path that is 'distance' along the length of the path from 'location', where 
             * 'location' is a decimal from 0 to 1 inclusive, and 'distance' is a number of pixels.
             * this hands off to jsPlumbUtil to do the maths, supplying two points and the distance.
             */            
            this.pointAlongPathFrom = function(location, distance, absolute) {            
                var p = this.pointOnPath(location, absolute),
                    farAwayPoint = distance <= 0 ? {x:x1, y:y1} : {x:x2, y:y2 };

                /*
                location == 1 ? {
                                        x:x1 + ((x2 - x1) * 10),
                                        y:y1 + ((y1 - y2) * 10)
                                    } : 
                */
    
                if (distance <= 0 && Math.abs(distance) > 1) distance *= -1;
    
                return jsPlumbGeom.pointOnLine(p, farAwayPoint, distance);
            };
            
            // is c between a and b?
            var within = function(a,b,c) {
                return c >= Math.min(a,b) && c <= Math.max(a,b); 
            };
            // find which of a and b is closest to c
            var closest = function(a,b,c) {
                return Math.abs(c - a) < Math.abs(c - b) ? a : b;
            };
            
            /**
                Function: findClosestPointOnPath
                Finds the closest point on this segment to [x,y]. See
                notes on this method in AbstractSegment.
            */
            this.findClosestPointOnPath = function(x, y) {
                var out = {
                    d:Infinity,
                    x:null,
                    y:null,
                    l:null,
                    x1:x1,
                    x2:x2,
                    y1:y1,
                    y2:y2
                };

                if (m === 0) {                  
                    out.y = y1;
                    out.x = within(x1, x2, x) ? x : closest(x1, x2, x);
                }
                else if (m == Infinity || m == -Infinity) {
                    out.x = x1;                
                    out.y = within(y1, y2, y) ? y : closest(y1, y2, y);
                }
                else {
                    // closest point lies on normal from given point to this line.  
                    var b = y1 - (m * x1),
                        b2 = y - (m2 * x),                    
                    // y1 = m.x1 + b and y1 = m2.x1 + b2
                    // so m.x1 + b = m2.x1 + b2
                    // x1(m - m2) = b2 - b
                    // x1 = (b2 - b) / (m - m2)
                        _x1 = (b2 -b) / (m - m2),
                        _y1 = (m * _x1) + b;
                                        
                    out.x = within(x1,x2,_x1) ? _x1 : closest(x1,x2,_x1);//_x1;
                    out.y = within(y1,y2,_y1) ? _y1 : closest(y1,y2,_y1);//_y1;                    
                }

                var fractionInSegment = jsPlumbGeom.lineLength([ out.x, out.y ], [ x1, y1 ]);
                out.d = jsPlumbGeom.lineLength([x,y], [out.x, out.y]);
                out.l = fractionInSegment / length;            
                return out;
            };        
        },
	
        /*
            Arc Segment. You need to supply:
    
            r   -   radius
            cx  -   center x for the arc
            cy  -   center y for the arc
            ac  -   whether the arc is anticlockwise or not. default is clockwise.
    
            and then either:
    
            startAngle  -   startAngle for the arc.
            endAngle    -   endAngle for the arc.
    
            or:
    
            x1          -   x for start point
            y1          -   y for start point
            x2          -   x for end point
            y2          -   y for end point
    
        */
        Arc : function(params) {
            var _super = jsPlumb.Segments.AbstractSegment.apply(this, arguments),
                _calcAngle = function(_x, _y) {
                    return jsPlumbGeom.theta([params.cx, params.cy], [_x, _y]);    
                },
                _calcAngleForLocation = function(segment, location) {
                    if (segment.anticlockwise) {
                        var sa = segment.startAngle < segment.endAngle ? segment.startAngle + TWO_PI : segment.startAngle,
                            s = Math.abs(sa - segment.endAngle);
                        return sa - (s * location);                    
                    }
                    else {
                        var ea = segment.endAngle < segment.startAngle ? segment.endAngle + TWO_PI : segment.endAngle,
                            ss = Math.abs (ea - segment.startAngle);
                    
                        return segment.startAngle + (ss * location);
                    }
                },
                TWO_PI = 2 * Math.PI;
            
            this.radius = params.r;
            this.anticlockwise = params.ac;			
            this.type = "Arc";
                
            if (params.startAngle && params.endAngle) {
                this.startAngle = params.startAngle;
                this.endAngle = params.endAngle;            
                this.x1 = params.cx + (this.radius * Math.cos(params.startAngle));     
                this.y1 = params.cy + (this.radius * Math.sin(params.startAngle));            
                this.x2 = params.cx + (this.radius * Math.cos(params.endAngle));     
                this.y2 = params.cy + (this.radius * Math.sin(params.endAngle));                        
            }
            else {
                this.startAngle = _calcAngle(params.x1, params.y1);
                this.endAngle = _calcAngle(params.x2, params.y2);            
                this.x1 = params.x1;
                this.y1 = params.y1;
                this.x2 = params.x2;
                this.y2 = params.y2;            
            }
            
            if (this.endAngle < 0) this.endAngle += TWO_PI;
            if (this.startAngle < 0) this.startAngle += TWO_PI;   

            // segment is used by vml     
            this.segment = jsPlumbGeom.quadrant([this.x1, this.y1], [this.x2, this.y2]);
            
            // we now have startAngle and endAngle as positive numbers, meaning the
            // absolute difference (|d|) between them is the sweep (s) of this arc, unless the
            // arc is 'anticlockwise' in which case 's' is given by 2PI - |d|.
            
            var ea = this.endAngle < this.startAngle ? this.endAngle + TWO_PI : this.endAngle;
            this.sweep = Math.abs (ea - this.startAngle);
            if (this.anticlockwise) this.sweep = TWO_PI - this.sweep;
            var circumference = 2 * Math.PI * this.radius,
                frac = this.sweep / TWO_PI,
                length = circumference * frac;
            
            this.getLength = function() {
                return length;
            };

            this.getBounds = function() {
                return {
                    minX:params.cx - params.r,
                    maxX:params.cx + params.r,
                    minY:params.cy - params.r,
                    maxY:params.cy + params.r
                };
            };
            
            var VERY_SMALL_VALUE = 0.0000000001,
                gentleRound = function(n) {
                    var f = Math.floor(n), r = Math.ceil(n);
                    if (n - f < VERY_SMALL_VALUE) 
                        return f;    
                    else if (r - n < VERY_SMALL_VALUE)
                        return r;
                    return n;
                };
            
            /**
             * returns the point on the segment's path that is 'location' along the length of the path, where 'location' is a decimal from
             * 0 to 1 inclusive. 
             */
            this.pointOnPath = function(location, absolute) {            
                
                if (location === 0) {
                    return { x:this.x1, y:this.y1, theta:this.startAngle };    
                }
                else if (location == 1) {
                    return { x:this.x2, y:this.y2, theta:this.endAngle };                    
                }
                
                if (absolute) {
                    location = location / length;
                }
    
                var angle = _calcAngleForLocation(this, location),
                    _x = params.cx + (params.r * Math.cos(angle)),
                    _y  = params.cy + (params.r * Math.sin(angle));					
    
                return { x:gentleRound(_x), y:gentleRound(_y), theta:angle };
            };
            
            /**
             * returns the gradient of the segment at the given point.
             */
            this.gradientAtPoint = function(location, absolute) {
                var p = this.pointOnPath(location, absolute);
                var m = jsPlumbGeom.normal( [ params.cx, params.cy ], [p.x, p.y ] );
                if (!this.anticlockwise && (m == Infinity || m == -Infinity)) m *= -1;
                return m;
            };	              
                    
            this.pointAlongPathFrom = function(location, distance, absolute) {
                var p = this.pointOnPath(location, absolute),
                    arcSpan = distance / circumference * 2 * Math.PI,
                    dir = this.anticlockwise ? -1 : 1,
                    startAngle = p.theta + (dir * arcSpan),				
                    startX = params.cx + (this.radius * Math.cos(startAngle)),
                    startY = params.cy + (this.radius * Math.sin(startAngle));	
    
                return {x:startX, y:startY};
            };	            
        },
	
        Bezier : function(params) {
            var _super = jsPlumb.Segments.AbstractSegment.apply(this, arguments),
                curve = [	
                    { x:params.x1, y:params.y1},
                    { x:params.cp1x, y:params.cp1y },
                    { x:params.cp2x, y:params.cp2y },
                    { x:params.x2, y:params.y2 }
                ],
                // although this is not a strictly rigorous determination of bounds
                // of a bezier curve, it works for the types of curves that this segment
                // type produces.
                bounds = {
                    minX:Math.min(params.x1, params.x2, params.cp1x, params.cp2x),
                    minY:Math.min(params.y1, params.y2, params.cp1y, params.cp2y),
                    maxX:Math.max(params.x1, params.x2, params.cp1x, params.cp2x),
                    maxY:Math.max(params.y1, params.y2, params.cp1y, params.cp2y)
                };
                
            this.type = "Bezier";            
            
            var _translateLocation = function(_curve, location, absolute) {
                if (absolute)
                    location = jsBezier.locationAlongCurveFrom(_curve, location > 0 ? 0 : 1, location);
    
                return location;
            };		
            
            /**
             * returns the point on the segment's path that is 'location' along the length of the path, where 'location' is a decimal from
             * 0 to 1 inclusive. 
             */
            this.pointOnPath = function(location, absolute) {
                location = _translateLocation(curve, location, absolute);                
                return jsBezier.pointOnCurve(curve, location);
            };
            
            /**
             * returns the gradient of the segment at the given point.
             */
            this.gradientAtPoint = function(location, absolute) {
                location = _translateLocation(curve, location, absolute);
                return jsBezier.gradientAtPoint(curve, location);        	
            };	              
            
            this.pointAlongPathFrom = function(location, distance, absolute) {
                location = _translateLocation(curve, location, absolute);
                return jsBezier.pointAlongCurveFrom(curve, location, distance);
            };
            
            this.getLength = function() {
                return jsBezier.getLength(curve);				
            };

            this.getBounds = function() {
                return bounds;
            };
        }
    };

    /*
        Class: AbstractComponent
        Superclass for AbstractConnector and AbstractEndpoint.
    */
    var AbstractComponent = function() {        
        this.resetBounds = function() {
            this.bounds = { minX:Infinity, minY:Infinity, maxX:-Infinity, maxY:-Infinity };
        };
        this.resetBounds();        
    };
	
	/*
	 * Class: AbstractConnector
	 * Superclass for all Connectors; here is where Segments are managed.  This is exposed on jsPlumb just so it
	 * can be accessed from other files. You should not try to instantiate one of these directly.
	 *
	 * When this class is asked for a pointOnPath, or gradient etc, it must first figure out which segment to dispatch
	 * that request to. This is done by keeping track of the total connector length as segments are added, and also
	 * their cumulative ratios to the total length.  Then when the right segment is found it is a simple case of dispatching
	 * the request to it (and adjusting 'location' so that it is relative to the beginning of that segment.)
	 */ 
	jsPlumb.Connectors.AbstractConnector = function(params) {
		
        AbstractComponent.apply(this, arguments);        

		var //self = this, 
            segments = [],
            editing = false,
			totalLength = 0,
			segmentProportions = [],
			segmentProportionalLengths = [],        
            stub = params.stub || 0, 
            sourceStub = jsPlumbUtil.isArray(stub) ? stub[0] : stub,
            targetStub = jsPlumbUtil.isArray(stub) ? stub[1] : stub,
            gap = params.gap || 0,
            sourceGap = jsPlumbUtil.isArray(gap) ? gap[0] : gap,
            targetGap = jsPlumbUtil.isArray(gap) ? gap[1] : gap,
            userProvidedSegments = null,
            edited = false,
            paintInfo = null;            
        
        // subclasses should override.
        this.isEditable = function() { return false; };                        
        this.setEdited = function(ed) { edited = ed; };

        // to be overridden by subclasses.
        this.getPath = function() { };
        this.setPath = function(path) { };
        
        /**
        * Function: findSegmentForPoint
        * Returns the segment that is closest to the given [x,y],
        * null if nothing found.  This function returns a JS 
        * object with:
        *
        *   d   -   distance from segment
        *   l   -   proportional location in segment
        *   x   -   x point on the segment
        *   y   -   y point on the segment
        *   s   -   the segment itself.
        */ 
        this.findSegmentForPoint = function(x, y) {
            var out = { d:Infinity, s:null, x:null, y:null, l:null };
            for (var i = 0; i < segments.length; i++) {
                var _s = segments[i].findClosestPointOnPath(x, y);
                if (_s.d < out.d) {
                    out.d = _s.d; 
                    out.l = _s.l; 
                    out.x = _s.x;
                    out.y = _s.y; 
                    out.s = segments[i];
                    out.x1 = _s.x1;
                    out.x2 = _s.x2;
                    out.y1 = _s.y1;
                    out.y2 = _s.y2;
                    out.index = i;
                }
            }
            
            return out;                
        };
			
		var _updateSegmentProportions = function() {
                var curLoc = 0;
                for (var i = 0; i < segments.length; i++) {
                    var sl = segments[i].getLength();
                    segmentProportionalLengths[i] = sl / totalLength;
                    segmentProportions[i] = [curLoc, (curLoc += (sl / totalLength)) ];
                }
            },
		
            /**
             * returns [segment, proportion of travel in segment, segment index] for the segment 
             * that contains the point which is 'location' distance along the entire path, where 
             * 'location' is a decimal between 0 and 1 inclusive. in this connector type, paths 
             * are made up of a list of segments, each of which contributes some fraction to
             * the total length. 
             * From 1.3.10 this also supports the 'absolute' property, which lets us specify a location
             * as the absolute distance in pixels, rather than a proportion of the total path. 
             */
            _findSegmentForLocation = function(location, absolute) {
                if (absolute) {
                    location = location > 0 ? location / totalLength : (totalLength + location) / totalLength;
                }
    
                var idx = segmentProportions.length - 1, inSegmentProportion = 1;
                //if (location < 1) {
                    for (var i = 0; i < segmentProportions.length; i++) {
                        if (segmentProportions[i][1] >= location) {
                            idx = i;
                            // todo is this correct for all connector path types?
                            inSegmentProportion = location == 1 ? 1 : location === 0 ? 0 : (location - segmentProportions[i][0]) / segmentProportionalLengths[i];                    
                            break;
                        }
                    }
                //}
                return { segment:segments[idx], proportion:inSegmentProportion, index:idx };
            },		
            _addSegment = function(conn, type, params) {
                if (params.x1 == params.x2 && params.y1 == params.y2) return;
                var s = new jsPlumb.Segments[type](params);
                segments.push(s);
                totalLength += s.getLength();	
                conn.updateBounds(s);	                                
            },					
            _clearSegments = function() {
                totalLength = 0;
                segments.splice(0, segments.length);
                segmentProportions.splice(0, segmentProportions.length);
                segmentProportionalLengths.splice(0, segmentProportionalLengths.length);
            };
        
        this.setSegments = function(_segs) {
            userProvidedSegments = [];
            totalLength = 0;
            for (var i = 0; i < _segs.length; i++) {      
                userProvidedSegments.push(_segs[i]);
                totalLength += _segs[i].getLength();			            
            }            
        };  
        
        var _prepareCompute = function(params) {
            this.lineWidth = params.lineWidth;
            var segment = jsPlumbGeom.quadrant(params.sourcePos, params.targetPos),
                swapX = params.targetPos[0] < params.sourcePos[0],
                swapY = params.targetPos[1] < params.sourcePos[1],
                lw = params.lineWidth || 1,       
                so = params.sourceEndpoint.anchor.getOrientation(params.sourceEndpoint), 
                to = params.targetEndpoint.anchor.getOrientation(params.targetEndpoint),
                x = swapX ? params.targetPos[0] : params.sourcePos[0], 
                y = swapY ? params.targetPos[1] : params.sourcePos[1],
                w = Math.abs(params.targetPos[0] - params.sourcePos[0]),
                h = Math.abs(params.targetPos[1] - params.sourcePos[1]);
            
            // if either anchor does not have an orientation set, we derive one from their relative
            // positions.  we fix the axis to be the one in which the two elements are further apart, and
            // point each anchor at the other element.  this is also used when dragging a new connection.
            if (so[0] === 0 && so[1] === 0 || to[0] === 0 && to[1] === 0) {
                var index = w > h ? 0 : 1, oIndex = [1,0][index];
                so = []; to = [];
                so[index] = params.sourcePos[index] > params.targetPos[index] ? -1 : 1;
                to[index] = params.sourcePos[index] > params.targetPos[index] ? 1 : -1;
                so[oIndex] = 0; to[oIndex] = 0;
            }                    
            
            var sx = swapX ? w + (sourceGap * so[0])  : sourceGap * so[0], 
                sy = swapY ? h + (sourceGap * so[1])  : sourceGap * so[1], 
                tx = swapX ? targetGap * to[0] : w + (targetGap * to[0]),
                ty = swapY ? targetGap * to[1] : h + (targetGap * to[1]),
                oProduct = ((so[0] * to[0]) + (so[1] * to[1]));        
            
            var result = {
                sx:sx, sy:sy, tx:tx, ty:ty, lw:lw, 
                xSpan:Math.abs(tx - sx),
                ySpan:Math.abs(ty - sy),                
                mx:(sx + tx) / 2,
                my:(sy + ty) / 2,                
                so:so, to:to, x:x, y:y, w:w, h:h,
                segment : segment,
                startStubX : sx + (so[0] * sourceStub), 
                startStubY : sy + (so[1] * sourceStub),
                endStubX : tx + (to[0] * targetStub), 
                endStubY : ty + (to[1] * targetStub),
                isXGreaterThanStubTimes2 : Math.abs(sx - tx) > (sourceStub + targetStub),
                isYGreaterThanStubTimes2 : Math.abs(sy - ty) > (sourceStub + targetStub),
                opposite:oProduct == -1,
                perpendicular:oProduct === 0,
                orthogonal:oProduct == 1,
                sourceAxis : so[0] === 0 ? "y" : "x",
                points:[x, y, w, h, sx, sy, tx, ty ]
            };
            result.anchorOrientation = result.opposite ? "opposite" : result.orthogonal ? "orthogonal" : "perpendicular";
            return result;
        };
		
		this.getSegments = function() { return segments; };

        this.updateBounds = function(segment) {
            var segBounds = segment.getBounds();
            this.bounds.minX = Math.min(this.bounds.minX, segBounds.minX);
            this.bounds.maxX = Math.max(this.bounds.maxX, segBounds.maxX);
            this.bounds.minY = Math.min(this.bounds.minY, segBounds.minY);
            this.bounds.maxY = Math.max(this.bounds.maxY, segBounds.maxY);              
        };
        
        var dumpSegmentsToConsole = function() {
            console.log("SEGMENTS:");
            for (var i = 0; i < segments.length; i++) {
                console.log(segments[i].type, segments[i].getLength(), segmentProportions[i]);
            }
        };
		
		this.pointOnPath = function(location, absolute) {
            var seg = _findSegmentForLocation(location, absolute);      
            return seg.segment && seg.segment.pointOnPath(seg.proportion, absolute) || [0,0];
        };
        
        this.gradientAtPoint = function(location) {
            var seg = _findSegmentForLocation(location, absolute);          
            return seg.segment && seg.segment.gradientAtPoint(seg.proportion, absolute) || 0;
        };
        
        this.pointAlongPathFrom = function(location, distance, absolute) {
            var seg = _findSegmentForLocation(location, absolute);
            // TODO what happens if this crosses to the next segment?
            return seg.segment && seg.segment.pointAlongPathFrom(seg.proportion, distance, false) || [0,0];
        };
		
		this.compute = function(params)  {
            if (!edited)
                paintInfo = _prepareCompute.call(this, params);
            
            _clearSegments();
            this._compute(paintInfo, params);
            this.x = paintInfo.points[0];
            this.y = paintInfo.points[1];
            this.w = paintInfo.points[2];
            this.h = paintInfo.points[3];               
            this.segment = paintInfo.segment;         
            _updateSegmentProportions();            
		};
		
		return {
			addSegment:_addSegment,
            prepareCompute:_prepareCompute,
            sourceStub:sourceStub,
            targetStub:targetStub,
            maxStub:Math.max(sourceStub, targetStub),            
            sourceGap:sourceGap,
            targetGap:targetGap,
            maxGap:Math.max(sourceGap, targetGap)
		};		
	};
    jsPlumbUtil.extend(jsPlumb.Connectors.AbstractConnector, AbstractComponent);
	
    /**
     * Class: Connectors.Straight
     * The Straight connector draws a simple straight line between the two anchor points.  It does not have any constructor parameters.
     */
    var Straight = jsPlumb.Connectors.Straight = function() {
    	this.type = "Straight";
		var _super =  jsPlumb.Connectors.AbstractConnector.apply(this, arguments);		

        this._compute = function(paintInfo, _) {                        
            _super.addSegment(this, "Straight", {x1:paintInfo.sx, y1:paintInfo.sy, x2:paintInfo.startStubX, y2:paintInfo.startStubY});                                                
            _super.addSegment(this, "Straight", {x1:paintInfo.startStubX, y1:paintInfo.startStubY, x2:paintInfo.endStubX, y2:paintInfo.endStubY});                        
            _super.addSegment(this, "Straight", {x1:paintInfo.endStubX, y1:paintInfo.endStubY, x2:paintInfo.tx, y2:paintInfo.ty});                                    
        };                    
    };
    jsPlumbUtil.extend(jsPlumb.Connectors.Straight, jsPlumb.Connectors.AbstractConnector);
    jsPlumb.registerConnectorType(Straight, "Straight");
                    
    /**
     * Class:Connectors.Bezier
     * This Connector draws a Bezier curve with two control points.  You can provide a 'curviness' value which gets applied to jsPlumb's
     * internal voodoo machine and ends up generating locations for the two control points.  See the constructor documentation below.
     */
    /**
     * Function:Constructor
     * 
     * Parameters:
     * 	curviness - How 'curvy' you want the curve to be! This is a directive for the placement of control points, not endpoints of the curve, so your curve does not 
     * actually touch the given point, but it has the tendency to lean towards it.  The larger this value, the greater the curve is pulled from a straight line.
     * Optional; defaults to 150.
     * stub - optional value for a distance to travel from the connector's endpoint before beginning the Bezier curve. defaults to 0.
     * 
     */
    var Bezier = function(params) {
        params = params || {};

    	var _super =  jsPlumb.Connectors.AbstractConnector.apply(this, arguments),
            stub = params.stub || 50,
            majorAnchor = params.curviness || 150,
            minorAnchor = 10;            

        this.type = "Bezier";	
        this.getCurviness = function() { return majorAnchor; };	
        
        this._findControlPoint = function(point, sourceAnchorPosition, targetAnchorPosition, sourceEndpoint, targetEndpoint) {
        	// determine if the two anchors are perpendicular to each other in their orientation.  we swap the control 
        	// points around if so (code could be tightened up)
        	var soo = sourceEndpoint.anchor.getOrientation(sourceEndpoint), 
        		too = targetEndpoint.anchor.getOrientation(targetEndpoint),
        		perpendicular = soo[0] != too[0] || soo[1] == too[1],
            	p = [];                
            	
            if (!perpendicular) {
                if (soo[0] === 0) // X
                    p.push(sourceAnchorPosition[0] < targetAnchorPosition[0] ? point[0] + minorAnchor : point[0] - minorAnchor);
                else p.push(point[0] - (majorAnchor * soo[0]));
                                 
                if (soo[1] === 0) // Y
                	p.push(sourceAnchorPosition[1] < targetAnchorPosition[1] ? point[1] + minorAnchor : point[1] - minorAnchor);
                else p.push(point[1] + (majorAnchor * too[1]));
            }
             else {
                if (too[0] === 0) // X
                	p.push(targetAnchorPosition[0] < sourceAnchorPosition[0] ? point[0] + minorAnchor : point[0] - minorAnchor);
                else p.push(point[0] + (majorAnchor * too[0]));
                
                if (too[1] === 0) // Y
                	p.push(targetAnchorPosition[1] < sourceAnchorPosition[1] ? point[1] + minorAnchor : point[1] - minorAnchor);
                else p.push(point[1] + (majorAnchor * soo[1]));
             }

            return p;                
        };        

        this._compute = function(paintInfo, p) {                                
			var sp = p.sourcePos,
				tp = p.targetPos,				
                _w = Math.abs(sp[0] - tp[0]),
                _h = Math.abs(sp[1] - tp[1]),            
                _sx = sp[0] < tp[0] ? _w : 0,
                _sy = sp[1] < tp[1] ? _h : 0,
                _tx = sp[0] < tp[0] ? 0 : _w,
                _ty = sp[1] < tp[1] ? 0 : _h,
                _CP = this._findControlPoint([_sx, _sy], sp, tp, p.sourceEndpoint, p.targetEndpoint),
                _CP2 = this._findControlPoint([_tx, _ty], tp, sp, p.targetEndpoint, p.sourceEndpoint);

			_super.addSegment(this, "Bezier", {
				x1:_sx, y1:_sy, x2:_tx, y2:_ty,
				cp1x:_CP[0], cp1y:_CP[1], cp2x:_CP2[0], cp2y:_CP2[1]
			});                    
        };               
    };    
    jsPlumbUtil.extend(Bezier, jsPlumb.Connectors.AbstractConnector);
    jsPlumb.registerConnectorType(Bezier, "Bezier");
    
 // ********************************* END OF CONNECTOR TYPES *******************************************************************
    
 // ********************************* ENDPOINT TYPES *******************************************************************
    
    jsPlumb.Endpoints.AbstractEndpoint = function(params) {
        AbstractComponent.apply(this, arguments);
        var compute = this.compute = function(anchorPoint, orientation, endpointStyle, connectorPaintStyle) {    
            var out = this._compute.apply(this, arguments);
            this.x = out[0];
            this.y = out[1];
            this.w = out[2];
            this.h = out[3];
            this.bounds.minX = this.x;
            this.bounds.minY = this.y;
            this.bounds.maxX = this.x + this.w;
            this.bounds.maxY = this.y + this.h;
            return out;
        };
        return {
            compute:compute,
            cssClass:params.cssClass
        };
    };
    jsPlumbUtil.extend(jsPlumb.Endpoints.AbstractEndpoint, AbstractComponent);
    
    /**
     * Class: Endpoints.Dot
     * A round endpoint, with default radius 10 pixels.
     */    	
    	
	/**
	 * Function: Constructor
	 * 
	 * Parameters:
	 * 
	 * 	radius	-	radius of the endpoint.  defaults to 10 pixels.
	 */
	jsPlumb.Endpoints.Dot = function(params) {        
		this.type = "Dot";
		var _super = jsPlumb.Endpoints.AbstractEndpoint.apply(this, arguments);
		params = params || {};				
		this.radius = params.radius || 10;
		this.defaultOffset = 0.5 * this.radius;
		this.defaultInnerRadius = this.radius / 3;			
		
		this._compute = function(anchorPoint, orientation, endpointStyle, connectorPaintStyle) {
			this.radius = endpointStyle.radius || this.radius;
			var	x = anchorPoint[0] - this.radius,
				y = anchorPoint[1] - this.radius,
                w = this.radius * 2,
                h = this.radius * 2;

            if (endpointStyle.strokeStyle) {
                var lw = endpointStyle.lineWidth || 1;
                x -= lw;
                y -= lw;
                w += (lw * 2);
                h += (lw * 2);
            }
			return [ x, y, w, h, this.radius ];
		};
	};
    jsPlumbUtil.extend(jsPlumb.Endpoints.Dot, jsPlumb.Endpoints.AbstractEndpoint);
	
	/**
	 * Class: Endpoints.Rectangle
	 * A Rectangular Endpoint, with default size 20x20.
	 */
	/**
	 * Function: Constructor
	 * 
	 * Parameters:
	 * 
	 * 	width	- width of the endpoint. defaults to 20 pixels.
	 * 	height	- height of the endpoint. defaults to 20 pixels.	
	 */
	jsPlumb.Endpoints.Rectangle = function(params) {
		this.type = "Rectangle";
		var _super = jsPlumb.Endpoints.AbstractEndpoint.apply(this, arguments);
		params = params || {};
		this.width = params.width || 20;
		this.height = params.height || 20;
		
		this._compute = function(anchorPoint, orientation, endpointStyle, connectorPaintStyle) {
			var width = endpointStyle.width || this.width,
				height = endpointStyle.height || this.height,
				x = anchorPoint[0] - (width/2),
				y = anchorPoint[1] - (height/2);
                
			return [ x, y, width, height];
		};
	};
    jsPlumbUtil.extend(jsPlumb.Endpoints.Rectangle, jsPlumb.Endpoints.AbstractEndpoint);
	

    var DOMElementEndpoint = function(params) {
        jsPlumb.DOMElementComponent.apply(this, arguments);        
        this._jsPlumb.displayElements = [  ];                
    };
    jsPlumbUtil.extend(DOMElementEndpoint, jsPlumb.DOMElementComponent, {
       // jsPlumb.Endpoints.AbstractEndpoint
        getDisplayElements : function() { 
            return this._jsPlumb.displayElements; 
        },        
        appendDisplayElement : function(el) {
            this._jsPlumb.displayElements.push(el);
        }
    });

	/**
	 * Class: Endpoints.Image
	 * Draws an image as the Endpoint.
	 */
	/**
	 * Function: Constructor
	 * 
	 * Parameters:
	 * 
	 * 	src	-	location of the image to use.

    TODO: multiple references to self. not sure quite how to get rid of them entirely. perhaps self = null in the cleanup
    function will suffice

    TODO this class still leaks memory.

	 */
	jsPlumb.Endpoints.Image = function(params) {
				
		this.type = "Image";
		DOMElementEndpoint.apply(this, arguments);
        jsPlumb.Endpoints.AbstractEndpoint.apply(this, arguments);
		
		var _onload = params.onload, 
            src = params.src || params.url,
            parent = params.parent,
            clazz = params.cssClass ? " " + params.cssClass : "";

        this._jsPlumb.img = new Image();		
        this._jsPlumb.ready = false;
        this._jsPlumb.initialized = false;
        this._jsPlumb.deleted = false;
        this._jsPlumb.widthToUse = params.width;
        this._jsPlumb.heightToUse = params.height;
        this._jsPlumb.endpoint = params.endpoint;

		this._jsPlumb.img.onload = function() {
            // check we weren't actually discarded before use (in fact mostly happens in tests)
            if (this._jsPlumb != null) {
    			this._jsPlumb.ready = true;            
    			this._jsPlumb.widthToUse = this._jsPlumb.widthToUse || this._jsPlumb.img.width;
    			this._jsPlumb.heightToUse = this._jsPlumb.heightToUse || this._jsPlumb.img.height;
                if (_onload) {
                    _onload(this);
                }
            }
		}.bind(this);        

        /*
            Function: setImage
            Sets the Image to use in this Endpoint.  

            Parameters:
            img         -   may be a URL or an Image object
            onload      -   optional; a callback to execute once the image has loaded.
        */
        this._jsPlumb.endpoint.setImage = function(_img, onload) {
            var s = _img.constructor == String ? _img : _img.src;
            _onload = onload; 
            this._jsPlumb.img.src = s;

            if (this.canvas != null)
                this.canvas.setAttribute("src", this._jsPlumb.img.src);
        }.bind(this);

        this._jsPlumb.endpoint.setImage(src, _onload);
        /*        
            var s = src.constructor == String ? src : src.src;
            //_onload = onload; 
            this._jsPlumb.img.src = src;

            if (this.canvas != null)
                this.canvas.setAttribute("src", this._jsPlumb.img.src);
       // }.bind(this);

        //this._jsPlumb.endpoint.setImage(src, _onload);*/

		this._compute = function(anchorPoint, orientation, endpointStyle, connectorPaintStyle) {
			this.anchorPoint = anchorPoint;
			if (this._jsPlumb.ready) return [anchorPoint[0] - this._jsPlumb.widthToUse / 2, anchorPoint[1] - this._jsPlumb.heightToUse / 2, 
									this._jsPlumb.widthToUse, this._jsPlumb.heightToUse];
			else return [0,0,0,0];
		};
		
		this.canvas = document.createElement("img");
		this.canvas.style.margin = 0;
		this.canvas.style.padding = 0;
		this.canvas.style.outline = 0;
		this.canvas.style.position = "absolute";		
		this.canvas.className = this._jsPlumb.instance.endpointClass + clazz;
		if (this._jsPlumb.widthToUse) this.canvas.setAttribute("width", this._jsPlumb.widthToUse);
		if (this._jsPlumb.heightToUse) this.canvas.setAttribute("height", this._jsPlumb.heightToUse);		
		this._jsPlumb.instance.appendElement(this.canvas, parent);
		this.attachListeners(this.canvas, this);		
		
		this.actuallyPaint = function(d, style, anchor) {
			if (!this._jsPlumb.deleted) {
				if (!this._jsPlumb.initialized) {
					this.canvas.setAttribute("src", this._jsPlumb.img.src);
					this.appendDisplayElement(this.canvas);
					this._jsPlumb.initialized = true;
				}
				var x = this.anchorPoint[0] - (this._jsPlumb.widthToUse / 2),
					y = this.anchorPoint[1] - (this._jsPlumb.heightToUse / 2);
				jsPlumbUtil.sizeElement(this.canvas, x, y, this._jsPlumb.widthToUse, this._jsPlumb.heightToUse);
			}
		};
		
		this.paint = function(style, anchor) {
            if (this._jsPlumb != null) {  // may have been deleted
    			if (this._jsPlumb.ready) {
        			this.actuallyPaint(style, anchor);
    			}
    			else { 
    				window.setTimeout(function() {    					
    					this.paint(style, anchor);
    				}.bind(this), 200);
    			}
            }
		};				
	};
    jsPlumbUtil.extend(jsPlumb.Endpoints.Image, [ DOMElementEndpoint, jsPlumb.Endpoints.AbstractEndpoint ], {
        cleanup : function() {            
            this._jsPlumb.deleted = true;
            jsPlumbUtil.removeElement(this.canvas);
            this.canvas = null;
        } 
    });
	
	/*
	 * Class: Endpoints.Blank
	 * An Endpoint that paints nothing (visible) on the screen.  Supports cssClass and hoverClass parameters like all Endpoints.
	 */
	jsPlumb.Endpoints.Blank = function(params) {
		var _super = jsPlumb.Endpoints.AbstractEndpoint.apply(this, arguments);
		this.type = "Blank";
		DOMElementEndpoint.apply(this, arguments);		
		this._compute = function(anchorPoint, orientation, endpointStyle, connectorPaintStyle) {
			return [anchorPoint[0], anchorPoint[1],10,0];
		};
		
		this.canvas = document.createElement("div");
		this.canvas.style.display = "block";
		this.canvas.style.width = "1px";
		this.canvas.style.height = "1px";
		this.canvas.style.background = "transparent";
		this.canvas.style.position = "absolute";
		this.canvas.className = this._jsPlumb.endpointClass;
		jsPlumb.appendElement(this.canvas, params.parent);
		
		this.paint = function(style, anchor) {
			jsPlumbUtil.sizeElement(this.canvas, this.x, this.y, this.w, this.h);	
		};
	};
    jsPlumbUtil.extend(jsPlumb.Endpoints.Blank, [jsPlumb.Endpoints.AbstractEndpoint, DOMElementEndpoint], {
        cleanup:function() {
            if (this.canvas && this.canvas.parentNode) {
                this.canvas.parentNode.removeChild(this.canvas);
            }
        }
    });
	
	/*
	 * Class: Endpoints.Triangle
	 * A triangular Endpoint.  
	 */
	/*
	 * Function: Constructor
	 * 
	 * Parameters:
	 * 
	 * 	width	-	width of the triangle's base.  defaults to 55 pixels.
	 * 	height	-	height of the triangle from base to apex.  defaults to 55 pixels.
	 */
	jsPlumb.Endpoints.Triangle = function(params) {        
		this.type = "Triangle";
        var _super = jsPlumb.Endpoints.AbstractEndpoint.apply(this, arguments);
		params = params || {  };
		params.width = params.width || 55;
		params.height = params.height || 55;
		this.width = params.width;
		this.height = params.height;
		this._compute = function(anchorPoint, orientation, endpointStyle, connectorPaintStyle) {
			var width = endpointStyle.width || self.width,
			height = endpointStyle.height || self.height,
			x = anchorPoint[0] - (width/2),
			y = anchorPoint[1] - (height/2);
			return [ x, y, width, height ];
		};
	};
// ********************************* END OF ENDPOINT TYPES *******************************************************************
	

// ********************************* OVERLAY DEFINITIONS ***********************************************************************    

	var AbstractOverlay = jsPlumb.Overlays.AbstractOverlay = function(params) {
		this.visible = true;
        this.isAppendedAtTopLevel = true;
		this.component = params.component;
		this.loc = params.location == null ? 0.5 : params.location;
        this.endpointLoc = params.endpointLocation == null ? [ 0.5, 0.5] : params.endpointLocation;		
	};
    AbstractOverlay.prototype = {
        cleanup:function() {  
           this.component = null;
           this.canvas = null;
           this.endpointLoc = null;
        },
        setVisible : function(val) { 
            this.visible = val;
            // TODO this is only actually necessary for canvas. so, the Canvas overlay should
            // override setVisible and call this.
            //this.component.repaint();
        },
        isVisible : function() { return this.visible; },
        hide : function() { this.setVisible(false); },
        show : function() { this.setVisible(true); },        
        incrementLocation : function(amount) {
            this.loc += amount;
            this.component.repaint();
        },
        setLocation : function(l) {
            this.loc = l;
            this.component.repaint();
        },
        getLocation : function() {
            return this.loc;
        }
    };
	
	
	/*
	 * Class: Overlays.Arrow
	 * 
	 * An arrow overlay, defined by four points: the head, the two sides of the tail, and a 'foldback' point at some distance along the length
	 * of the arrow that lines from each tail point converge into.  The foldback point is defined using a decimal that indicates some fraction
	 * of the length of the arrow and has a default value of 0.623.  A foldback point value of 1 would mean that the arrow had a straight line
	 * across the tail.  
	 */
	/*
	 * Function: Constructor
	 * 
	 * Parameters:
	 * 
	 * 	length - distance in pixels from head to tail baseline. default 20.
	 * 	width - width in pixels of the tail baseline. default 20.
	 * 	fillStyle - style to use when filling the arrow.  defaults to "black".
	 * 	strokeStyle - style to use when stroking the arrow. defaults to null, which means the arrow is not stroked.
	 * 	lineWidth - line width to use when stroking the arrow. defaults to 1, but only used if strokeStyle is not null.
	 * 	foldback - distance (as a decimal from 0 to 1 inclusive) along the length of the arrow marking the point the tail points should fold back to.  defaults to 0.623.
	 * 	location - distance (as a decimal from 0 to 1 inclusive) marking where the arrow should sit on the connector. defaults to 0.5.
	 * 	direction - indicates the direction the arrow points in. valid values are -1 and 1; 1 is default.
	 */
	jsPlumb.Overlays.Arrow = function(params) {
		this.type = "Arrow";
		AbstractOverlay.apply(this, arguments);
        this.isAppendedAtTopLevel = false;
		params = params || {};
		var _ju = jsPlumbUtil, _jg = jsPlumbGeom;
		
    	this.length = params.length || 20;
    	this.width = params.width || 20;
    	this.id = params.id;
    	var direction = (params.direction || 1) < 0 ? -1 : 1,
    	    paintStyle = params.paintStyle || { lineWidth:1 },
    	    // how far along the arrow the lines folding back in come to. default is 62.3%.
    	    foldback = params.foldback || 0.623;
    	    	
    	this.computeMaxSize = function() { return self.width * 1.5; };    	
    	//this.cleanup = function() { };  // nothing to clean up for Arrows    
    	this.draw = function(component, currentConnectionPaintStyle) {

            var hxy, mid, txy, tail, cxy;
            if (component.pointAlongPathFrom) {

                if (_ju.isString(this.loc) || this.loc > 1 || this.loc < 0) {                    
                    var l = parseInt(this.loc, 10),
                        fromLoc = this.loc < 0 ? 1 : 0;
                    hxy = component.pointAlongPathFrom(fromLoc, l, false);
                    mid = component.pointAlongPathFrom(fromLoc, l - (direction * this.length / 2), false);
                    txy = _jg.pointOnLine(hxy, mid, this.length);
                }
                else if (this.loc == 1) {                
					hxy = component.pointOnPath(this.loc);					           
                    mid = component.pointAlongPathFrom(this.loc, -(this.length));
					txy = _jg.pointOnLine(hxy, mid, this.length);
					
					if (direction == -1) {
						var _ = txy;
						txy = hxy;
						hxy = _;
					}
                }
                else if (this.loc === 0) {					                    
					txy = component.pointOnPath(this.loc);                    
					mid = component.pointAlongPathFrom(this.loc, this.length);                    
					hxy = _jg.pointOnLine(txy, mid, this.length);                    
					if (direction == -1) {
						var __ = txy;
						txy = hxy;
						hxy = __;
					}
                }
                else {                    
    			    hxy = component.pointAlongPathFrom(this.loc, direction * this.length / 2);
                    mid = component.pointOnPath(this.loc);
                    txy = _jg.pointOnLine(hxy, mid, this.length);
                }

                tail = _jg.perpendicularLineTo(hxy, txy, this.width);
                cxy = _jg.pointOnLine(hxy, txy, foldback * this.length);    			
    			
    			var d = { hxy:hxy, tail:tail, cxy:cxy },
    			    strokeStyle = paintStyle.strokeStyle || currentConnectionPaintStyle.strokeStyle,
    			    fillStyle = paintStyle.fillStyle || currentConnectionPaintStyle.strokeStyle,
    			    lineWidth = paintStyle.lineWidth || currentConnectionPaintStyle.lineWidth,
                    info = {
                        component:component, 
                        d:d, 
                        lineWidth:lineWidth, 
                        strokeStyle:strokeStyle, 
                        fillStyle:fillStyle,
                        minX:Math.min(hxy.x, tail[0].x, tail[1].x),
                        maxX:Math.max(hxy.x, tail[0].x, tail[1].x),
                        minY:Math.min(hxy.y, tail[0].y, tail[1].y),
                        maxY:Math.max(hxy.y, tail[0].y, tail[1].y)
                    };    			
						    
                return info;
            }
            else return {component:component, minX:0,maxX:0,minY:0,maxY:0};
    	};
    };    
    jsPlumbUtil.extend(jsPlumb.Overlays.Arrow, AbstractOverlay);      
    
    /*
     * Class: Overlays.PlainArrow
	 * 
	 * A basic arrow.  This is in fact just one instance of the more generic case in which the tail folds back on itself to some
	 * point along the length of the arrow: in this case, that foldback point is the full length of the arrow.  so it just does
	 * a 'call' to Arrow with foldback set appropriately.       
	 */
    /*
     * Function: Constructor
     * See <Overlays.Arrow> for allowed parameters for this overlay.
     */
    jsPlumb.Overlays.PlainArrow = function(params) {
    	params = params || {};    	
    	var p = jsPlumb.extend(params, {foldback:1});
    	jsPlumb.Overlays.Arrow.call(this, p);
    	this.type = "PlainArrow";
    };
    jsPlumbUtil.extend(jsPlumb.Overlays.PlainArrow, jsPlumb.Overlays.Arrow);
        
    /*
     * Class: Overlays.Diamond
     * 
	 * A diamond. Like PlainArrow, this is a concrete case of the more generic case of the tail points converging on some point...it just
	 * happens that in this case, that point is greater than the length of the the arrow.    
	 * 
	 *      this could probably do with some help with positioning...due to the way it reuses the Arrow paint code, what Arrow thinks is the
	 *      center is actually 1/4 of the way along for this guy.  but we don't have any knowledge of pixels at this point, so we're kind of
	 *      stuck when it comes to helping out the Arrow class. possibly we could pass in a 'transpose' parameter or something. the value
	 *      would be -l/4 in this case - move along one quarter of the total length.
	 */
    /*
     * Function: Constructor
     * See <Overlays.Arrow> for allowed parameters for this overlay.
     */
    jsPlumb.Overlays.Diamond = function(params) {
    	params = params || {};    	
    	var l = params.length || 40,
    	    p = jsPlumb.extend(params, {length:l/2, foldback:2});
    	jsPlumb.Overlays.Arrow.call(this, p);
    	this.type = "Diamond";
    };
    jsPlumbUtil.extend(jsPlumb.Overlays.Diamond, jsPlumb.Overlays.Arrow);

    var _getDimensions = function(component) {
        if (component._jsPlumb.cachedDimensions == null)
            component._jsPlumb.cachedDimensions = component.getDimensions();
        return component._jsPlumb.cachedDimensions;
    };      
	
	// abstract superclass for overlays that add an element to the DOM.
    var AbstractDOMOverlay = function(params) {
		jsPlumb.DOMElementComponent.apply(this, arguments);
    	AbstractOverlay.apply(this, arguments);
		
		var jpcl = jsPlumb.CurrentLibrary;		
		this.id = params.id;
        this._jsPlumb.div = null;		
        this._jsPlumb.initialised = false;
        this._jsPlumb.component = params.component;
        this._jsPlumb.cachedDimensions = null;
        this._jsPlumb.create = params.create;
		
		this.getElement = function() {
			if (this._jsPlumb.div == null) {
                var div = this._jsPlumb.div = jpcl.getDOMElement(this._jsPlumb.create(this._jsPlumb.component));                
                div.style.position   =   "absolute";     
                var clazz = params._jsPlumb.overlayClass + " " + 
                    (this.cssClass ? this.cssClass : 
                    params.cssClass ? params.cssClass : "");        
                div.className = clazz;
                this._jsPlumb.instance.appendElement(div, this._jsPlumb.component.parent);
                this._jsPlumb.instance.getId(div);      
                this.attachListeners(div, this);
                this.canvas = div;
			}
    		return this._jsPlumb.div;
    	};
				
		this.draw = function(component, currentConnectionPaintStyle, absolutePosition) {
	    	var td = _getDimensions(this);
	    	if (td != null && td.length == 2) {
				var cxy = { x:0,y:0 };

                // absolutePosition would have been set by a call to connection.setAbsoluteOverlayPosition.
                if (absolutePosition) {
                    cxy = { x:absolutePosition[0], y:absolutePosition[1] };
                }
                else if (component.pointOnPath) {
                    var loc = this.loc, absolute = false;
                    if (jsPlumbUtil.isString(this.loc) || this.loc < 0 || this.loc > 1) {
                        loc = parseInt(this.loc, 10);
                        absolute = true;
                    }
                    cxy = component.pointOnPath(loc, absolute);  // a connection
                }
                else {
                    var locToUse = this.loc.constructor == Array ? this.loc : this.endpointLoc;
                    cxy = { x:locToUse[0] * component.w,
                            y:locToUse[1] * component.h };      
                } 
                           
				var minx = cxy.x - (td[0] / 2),
				    miny = cxy.y - (td[1] / 2);

                return {
                    component:component, 
                    d:{ minx:minx, miny:miny, td:td, cxy:cxy },
                    minX:minx, 
                    maxX:minx + td[0], 
                    minY:miny, 
                    maxY:miny + td[1]
                };								
        	}
	    	else return {minX:0,maxX:0,minY:0,maxY:0};
	    };	   	   		
	};
    jsPlumbUtil.extend(AbstractDOMOverlay, [jsPlumb.DOMElementComponent, AbstractOverlay], {
        getDimensions : function() {            
            return jsPlumb.CurrentLibrary.getSize(jsPlumb.CurrentLibrary.getElementObject(this.getElement()));            
        },
        setVisible : function(state) {
            this._jsPlumb.div.style.display = state ? "block" : "none";
        },
        /*
         * Function: clearCachedDimensions
         * Clears the cached dimensions for the label. As a performance enhancement, label dimensions are
         * cached from 1.3.12 onwards. The cache is cleared when you change the label text, of course, but
         * there are other reasons why the text dimensions might change - if you make a change through CSS, for
         * example, you might change the font size.  in that case you should explicitly call this method.
         */
        clearCachedDimensions : function() {
            this._jsPlumb.cachedDimensions = null;
        },
        cleanup : function() {
            if (this._jsPlumb.div != null) 
                jsPlumb.CurrentLibrary.removeElement(this._jsPlumb.div);
        },
        computeMaxSize : function() {
            var td = _getDimensions(this);
            return Math.max(td[0], td[1]);
        },
        reattachListeners : function(connector) {
            if (this._jsPlumb.div) {
                this.reattachListenersForElement(this._jsPlumb.div, this, connector);
            }
        },
        paint : function(p, containerExtents) {
            if (!this._jsPlumb.initialised) {
                this.getElement();
                p.component.appendDisplayElement(this._jsPlumb.div);
                this.attachListeners(this._jsPlumb.div, p.component);
                this._jsPlumb.initialised = true;
            }
            this._jsPlumb.div.style.left = (p.component.x + p.d.minx) + "px";
            this._jsPlumb.div.style.top = (p.component.y + p.d.miny) + "px";            
        }
    });
	
	/*
     * Class: Overlays.Custom
     * A Custom overlay. You supply a 'create' function which returns some DOM element, and jsPlumb positions it.
     * The 'create' function is passed a Connection or Endpoint.
     */
    /*
     * Function: Constructor
     * 
     * Parameters:
     * 	create - function for jsPlumb to call that returns a DOM element.
     * 	location - distance (as a decimal from 0 to 1 inclusive) marking where the label should sit on the connector. defaults to 0.5.
     * 	id - optional id to use for later retrieval of this overlay.
     * 	
     */
    jsPlumb.Overlays.Custom = function(params) {
    	this.type = "Custom";    	
    	AbstractDOMOverlay.apply(this, arguments);		    	        		    	    		
    };
    jsPlumbUtil.extend(jsPlumb.Overlays.Custom, AbstractDOMOverlay);

    jsPlumb.Overlays.GuideLines = function() {
        var self = this;
        self.length = 50;
        self.lineWidth = 5;
        this.type = "GuideLines";
        AbstractOverlay.apply(this, arguments);
        jsPlumb.jsPlumbUIComponent.apply(this, arguments);
        this.draw = function(connector, currentConnectionPaintStyle) {

            var head = connector.pointAlongPathFrom(self.loc, self.length / 2),
                mid = connector.pointOnPath(self.loc),
                tail = jsPlumbGeom.pointOnLine(head, mid, self.length),
                tailLine = jsPlumbGeom.perpendicularLineTo(head, tail, 40),
                headLine = jsPlumbGeom.perpendicularLineTo(tail, head, 20);

            return {
                connector:connector,
                head:head,
                tail:tail,
                headLine:headLine,
                tailLine:tailLine,                
                minX:Math.min(head.x, tail.x, headLine[0].x, headLine[1].x), 
                minY:Math.min(head.y, tail.y, headLine[0].y, headLine[1].y), 
                maxX:Math.max(head.x, tail.x, headLine[0].x, headLine[1].x), 
                maxY:Math.max(head.y, tail.y, headLine[0].y, headLine[1].y)
            };
        };

       // this.cleanup = function() { };  // nothing to clean up for GuideLines
    };
    
    /*
     * Class: Overlays.Label
     
     */
    /*
     * Function: Constructor
     * 
     * Parameters:
     * 	cssClass - optional css class string to append to css class. This string is appended "as-is", so you can of course have multiple classes
     *             defined.  This parameter is preferred to using labelStyle, borderWidth and borderStyle.
     * 	label - the label to paint.  May be a string or a function that returns a string.  Nothing will be painted if your label is null or your
     *         label function returns null.  empty strings _will_ be painted.
     * 	location - distance (as a decimal from 0 to 1 inclusive) marking where the label should sit on the connector. defaults to 0.5.
     * 	id - optional id to use for later retrieval of this overlay.
     * 
     * 	
     */
    jsPlumb.Overlays.Label =  function(params) {		   
		this.labelStyle = params.labelStyle;
        
        var labelWidth = null, labelHeight =  null, labelText = null, labelPadding = null;
		this.cssClass = this.labelStyle != null ? this.labelStyle.cssClass : null;
		var p = jsPlumb.extend({
            create : function() {
                return document.createElement("div");
            }}, params);
    	jsPlumb.Overlays.Custom.call(this, p);
		this.type = "Label";    	
        this.label = params.label || "";
        this.labelText = null;
        if (this.labelStyle) {
            var el = this.getElement();            
            this.labelStyle.font = this.labelStyle.font || "12px sans-serif";
            el.style.font = this.labelStyle.font;
            el.style.color = this.labelStyle.color || "black";
            if (this.labelStyle.fillStyle) el.style.background = this.labelStyle.fillStyle;
            if (this.labelStyle.borderWidth > 0) {
                var dStyle = this.labelStyle.borderStyle ? this.labelStyle.borderStyle : "black";
                el.style.border = this.labelStyle.borderWidth  + "px solid " + dStyle;
            }
            if (this.labelStyle.padding) el.style.padding = this.labelStyle.padding;            
        }

    };
    jsPlumbUtil.extend(jsPlumb.Overlays.Label, jsPlumb.Overlays.Custom, {
        cleanup:function() {
            this.div = null;
            this.label = null;
            this.labelText = null;
            this.cssClass = null;
            this.labelStyle = null;
        },
        getLabel : function() {
            return this.label;
        },
        /*
         * Function: setLabel
         * sets the label's, um, label.  you would think i'd call this function
         * 'setText', but you can pass either a Function or a String to this, so
         * it makes more sense as 'setLabel'. This uses innerHTML on the label div, so keep
         * that in mind if you need escaped HTML.
         */
        setLabel : function(l) {
            this.label = l;
            this.labelText = null;
            this.clearCachedDimensions();
            this.update();
            this.component.repaint();
        },
        getDimensions : function() {                
            this.update();
            return AbstractDOMOverlay.prototype.getDimensions.apply(this, arguments);
        },
        update : function() {
            if (typeof this.label == "function") {
                var lt = this.label(this);
                this.getElement().innerHTML = lt.replace(/\r\n/g, "<br/>");
            }
            else {
                if (this.labelText == null) {
                    this.labelText = this.label;
                    this.getElement().innerHTML = this.labelText.replace(/\r\n/g, "<br/>");
                }
            }
        }
    });		

 // ********************************* END OF OVERLAY DEFINITIONS ***********************************************************************
    
})();
/*
 * jsPlumb
 * 
 * Title:jsPlumb 1.5.5
 * 
 * Provides a way to visually connect elements on an HTML page, using either SVG, Canvas
 * elements, or VML.  
 * 
 * This file contains the 'flowchart' connectors, consisting of vertical and horizontal line segments.
 *
 * Copyright (c) 2010 - 2013 Simon Porritt (simon.porritt@gmail.com)
 * 
 * http://jsplumb.org
 * http://github.com/sporritt/jsplumb
 * http://code.google.com/p/jsplumb
 * 
 * Dual licensed under the MIT and GPL2 licenses.
 */
;(function() {
   
    /**
     * Function: Constructor
     * 
     * Parameters:
     * 	stub - minimum length for the stub at each end of the connector. This can be an integer, giving a value for both ends of the connections, 
     * or an array of two integers, giving separate values for each end. The default is an integer with value 30 (pixels). 
     *  gap  - gap to leave between the end of the connector and the element on which the endpoint resides. if you make this larger than stub then you will see some odd looking behaviour.  
                Like stub, this can be an array or a single value. defaults to 0 pixels for each end.     
     * cornerRadius - optional, defines the radius of corners between segments. defaults to 0 (hard edged corners).
     * alwaysRespectStubs - defaults to false. whether or not the connectors should always draw the stub, or, if the two elements
                            are in close proximity to each other (closer than the sum of the two stubs), to adjust the stubs.
     */
    var Flowchart = function(params) {
        this.type = "Flowchart";
        params = params || {};
        params.stub = params.stub == null ? 30 : params.stub;
        var self = this,
            _super =  jsPlumb.Connectors.AbstractConnector.apply(this, arguments),		
            midpoint = params.midpoint == null ? 0.5 : params.midpoint,
            points = [], segments = [],
            grid = params.grid,
            alwaysRespectStubs = params.alwaysRespectStubs,
            userSuppliedSegments = null,
            lastx = null, lasty = null, lastOrientation,	
            cornerRadius = params.cornerRadius != null ? params.cornerRadius : 0,	
            sgn = function(n) { return n < 0 ? -1 : n === 0 ? 0 : 1; },            
            /**
             * helper method to add a segment.
             */
            addSegment = function(segments, x, y, paintInfo) {
                if (lastx == x && lasty == y) return;
                var lx = lastx == null ? paintInfo.sx : lastx,
                    ly = lasty == null ? paintInfo.sy : lasty,
                    o = lx == x ? "v" : "h",
                    sgnx = sgn(x - lx),
                    sgny = sgn(y - ly);
                    
                lastx = x;
                lasty = y;				    		                
                segments.push([lx, ly, x, y, o, sgnx, sgny]);
            },
            segLength = function(s) {
                return Math.sqrt(Math.pow(s[0] - s[2], 2) + Math.pow(s[1] - s[3], 2));    
            },
            _cloneArray = function(a) { var _a = []; _a.push.apply(_a, a); return _a;},
            updateMinMax = function(a1) {
                self.bounds.minX = Math.min(self.bounds.minX, a1[2]);
                self.bounds.maxX = Math.max(self.bounds.maxX, a1[2]);
                self.bounds.minY = Math.min(self.bounds.minY, a1[3]);
                self.bounds.maxY = Math.max(self.bounds.maxY, a1[3]);    
            },
            writeSegments = function(conn, segments, paintInfo) {
                var current, next;                
                for (var i = 0; i < segments.length - 1; i++) {
                    
                    current = current || _cloneArray(segments[i]);
                    next = _cloneArray(segments[i + 1]);
                    if (cornerRadius > 0 && current[4] != next[4]) {
                        var radiusToUse = Math.min(cornerRadius, segLength(current), segLength(next));
                        // right angle. adjust current segment's end point, and next segment's start point.
                        current[2] -= current[5] * radiusToUse;
                        current[3] -= current[6] * radiusToUse;
                        next[0] += next[5] * radiusToUse;
                        next[1] += next[6] * radiusToUse;														                         			
                        var ac = (current[6] == next[5] && next[5] == 1) ||
                                 ((current[6] == next[5] && next[5] === 0) && current[5] != next[6]) ||
                                 (current[6] == next[5] && next[5] == -1),
                            sgny = next[1] > current[3] ? 1 : -1,
                            sgnx = next[0] > current[2] ? 1 : -1,
                            sgnEqual = sgny == sgnx,
                            cx = (sgnEqual && ac || (!sgnEqual && !ac)) ? next[0] : current[2],
                            cy = (sgnEqual && ac || (!sgnEqual && !ac)) ? current[3] : next[1];                                                        
                        
                        _super.addSegment(conn, "Straight", {
                            x1:current[0], y1:current[1], x2:current[2], y2:current[3]
                        });
                            
                        _super.addSegment(conn, "Arc", {
                            r:radiusToUse, 
                            x1:current[2], 
                            y1:current[3], 
                            x2:next[0], 
                            y2:next[1],
                            cx:cx,
                            cy:cy,
                            ac:ac
                        });	                                            
                    }
                    else {                 
                        // dx + dy are used to adjust for line width.
                        var dx = (current[2] == current[0]) ? 0 : (current[2] > current[0]) ? (paintInfo.lw / 2) : -(paintInfo.lw / 2),
                            dy = (current[3] == current[1]) ? 0 : (current[3] > current[1]) ? (paintInfo.lw / 2) : -(paintInfo.lw / 2);
                        _super.addSegment(conn, "Straight", {
                            x1:current[0]- dx, y1:current[1]-dy, x2:current[2] + dx, y2:current[3] + dy
                        });
                    }                    
                    current = next;
                }
                // last segment
                _super.addSegment(conn, "Straight", {
                    x1:next[0], y1:next[1], x2:next[2], y2:next[3]
                });                             
            };
        
        this.setSegments = function(s) {
            userSuppliedSegments = s;
        };
        
        this.isEditable = function() { return true; };
        
        /*
            Function: getOriginalSegments
            Gets the segments before the addition of rounded corners. This is used by the flowchart
            connector editor, since it only wants to concern itself with the original segments.
        */
        this.getOriginalSegments = function() {
            return userSuppliedSegments || segments;
        };
        
        this._compute = function(paintInfo, params) {
            
            if (params.clearEdits)
                userSuppliedSegments = null;
            
            if (userSuppliedSegments != null) {
                writeSegments(this, userSuppliedSegments, paintInfo);                
                return;
            }
            
            segments = [];
            lastx = null; lasty = null;
            lastOrientation = null;          
            
            var midx = paintInfo.startStubX + ((paintInfo.endStubX - paintInfo.startStubX) * midpoint),
                midy = paintInfo.startStubY + ((paintInfo.endStubY - paintInfo.startStubY) * midpoint);                                                                                                    
    
            var findClearedLine = function(start, mult, anchorPos, dimension) {
                    return start + (mult * (( 1 - anchorPos) * dimension) + _super.maxStub);
                },
                orientations = { x:[ 0, 1 ], y:[ 1, 0 ] },
                commonStubCalculator = function(axis) {
                    return [ paintInfo.startStubX, paintInfo.startStubY, paintInfo.endStubX, paintInfo.endStubY ];                    
                },
                stubCalculators = {
                    perpendicular:commonStubCalculator,
                    orthogonal:commonStubCalculator,
                    opposite:function(axis) {  
                        var pi = paintInfo,
                            idx = axis == "x" ? 0 : 1, 
                            areInProximity = {
                                "x":function() {                                    
                                    return ( (pi.so[idx] == 1 && ( 
                                        ( (pi.startStubX > pi.endStubX) && (pi.tx > pi.startStubX) ) ||
                                        ( (pi.sx > pi.endStubX) && (pi.tx > pi.sx))))) ||

                                        ( (pi.so[idx] == -1 && ( 
                                            ( (pi.startStubX < pi.endStubX) && (pi.tx < pi.startStubX) ) ||
                                            ( (pi.sx < pi.endStubX) && (pi.tx < pi.sx)))));
                                },
                                "y":function() {                                     
                                    return ( (pi.so[idx] == 1 && ( 
                                        ( (pi.startStubY > pi.endStubY) && (pi.ty > pi.startStubY) ) ||
                                        ( (pi.sy > pi.endStubY) && (pi.ty > pi.sy))))) ||

                                        ( (pi.so[idx] == -1 && ( 
                                        ( (pi.startStubY < pi.endStubY) && (pi.ty < pi.startStubY) ) ||
                                        ( (pi.sy < pi.endStubY) && (pi.ty < pi.sy)))));
                                }
                            };

                        if (!alwaysRespectStubs && areInProximity[axis]()) {                   
                            return {
                                "x":[(paintInfo.sx + paintInfo.tx) / 2, paintInfo.startStubY, (paintInfo.sx + paintInfo.tx) / 2, paintInfo.endStubY],
                                "y":[paintInfo.startStubX, (paintInfo.sy + paintInfo.ty) / 2, paintInfo.endStubX, (paintInfo.sy + paintInfo.ty) / 2]
                            }[axis];
                        }
                        else {
                            return [ paintInfo.startStubX, paintInfo.startStubY, paintInfo.endStubX, paintInfo.endStubY ];   
                        }
                    }
                },
                lineCalculators = {
                    perpendicular : function(axis, ss, oss, es, oes) {
                        var pi = paintInfo, 
                            sis = {
                                x:[ [ [ 1,2,3,4 ], null, [ 2,1,4,3 ] ], null, [ [ 4,3,2,1 ], null, [ 3,4,1,2 ] ] ],
                                y:[ [ [ 3,2,1,4 ], null, [ 2,3,4,1 ] ], null, [ [ 4,1,2,3 ], null, [ 1,4,3,2 ] ] ]
                            },
                            stubs = { 
                                x:[ [ pi.startStubX, pi.endStubX ] , null, [ pi.endStubX, pi.startStubX ] ],
                                y:[ [ pi.startStubY, pi.endStubY ] , null, [ pi.endStubY, pi.startStubY ] ]
                            },
                            midLines = {
                                x:[ [ midx, pi.startStubY ], [ midx, pi.endStubY ] ],
                                y:[ [ pi.startStubX, midy ], [ pi.endStubX, midy ] ]
                            },
                            linesToEnd = {
                                x:[ [ pi.endStubX, pi.startStubY ] ],
                                y:[ [ pi.startStubX, pi.endStubY ] ]
                            },
                            startToEnd = {
                                x:[ [ pi.startStubX, pi.endStubY ], [ pi.endStubX, pi.endStubY ] ],        
                                y:[ [ pi.endStubX, pi.startStubY ], [ pi.endStubX, pi.endStubY ] ]
                            },
                            startToMidToEnd = {
                                x:[ [ pi.startStubX, midy ], [ pi.endStubX, midy ], [ pi.endStubX, pi.endStubY ] ],
                                y:[ [ midx, pi.startStubY ], [ midx, pi.endStubY ], [ pi.endStubX, pi.endStubY ] ]
                            },
                            otherStubs = {
                                x:[ pi.startStubY, pi.endStubY ],
                                y:[ pi.startStubX, pi.endStubX ]                                    
                            },
                            soIdx = orientations[axis][0], toIdx = orientations[axis][1],
                            _so = pi.so[soIdx] + 1,
                            _to = pi.to[toIdx] + 1,
                            otherFlipped = (pi.to[toIdx] == -1 && (otherStubs[axis][1] < otherStubs[axis][0])) || (pi.to[toIdx] == 1 && (otherStubs[axis][1] > otherStubs[axis][0])),
                            stub1 = stubs[axis][_so][0],
                            stub2 = stubs[axis][_so][1],
                            segmentIndexes = sis[axis][_so][_to];

                        if (pi.segment == segmentIndexes[3] || (pi.segment == segmentIndexes[2] && otherFlipped)) {
                            return midLines[axis];       
                        }
                        else if (pi.segment == segmentIndexes[2] && stub2 < stub1) {
                            return linesToEnd[axis];
                        }
                        else if ((pi.segment == segmentIndexes[2] && stub2 >= stub1) || (pi.segment == segmentIndexes[1] && !otherFlipped)) {
                            return startToMidToEnd[axis];
                        }
                        else if (pi.segment == segmentIndexes[0] || (pi.segment == segmentIndexes[1] && otherFlipped)) {
                            return startToEnd[axis];  
                        }                                
                    },
                    orthogonal : function(axis, startStub, otherStartStub, endStub, otherEndStub) {                    
                        var pi = paintInfo,                                            
                            extent = {
                                "x":pi.so[0] == -1 ? Math.min(startStub, endStub) : Math.max(startStub, endStub),
                                "y":pi.so[1] == -1 ? Math.min(startStub, endStub) : Math.max(startStub, endStub)
                            }[axis];
                                                
                        return {
                            "x":[ [ extent, otherStartStub ],[ extent, otherEndStub ], [ endStub, otherEndStub ] ],
                            "y":[ [ otherStartStub, extent ], [ otherEndStub, extent ], [ otherEndStub, endStub ] ]
                        }[axis];                    
                    },
                    opposite : function(axis, ss, oss, es, oes) {                                                
                        var pi = paintInfo,
                            otherAxis = {"x":"y","y":"x"}[axis], 
                            dim = {"x":"height","y":"width"}[axis],
                            comparator = pi["is" + axis.toUpperCase() + "GreaterThanStubTimes2"];

                        if (params.sourceEndpoint.elementId == params.targetEndpoint.elementId) {
                            var _val = oss + ((1 - params.sourceEndpoint.anchor[otherAxis]) * params.sourceInfo[dim]) + _super.maxStub;
                            return {
                                "x":[ [ ss, _val ], [ es, _val ] ],
                                "y":[ [ _val, ss ], [ _val, es ] ]
                            }[axis];
                            
                        }                                                        
                        else if (!comparator || (pi.so[idx] == 1 && ss > es) || (pi.so[idx] == -1 && ss < es)) {                                            
                            return {
                                "x":[[ ss, midy ], [ es, midy ]],
                                "y":[[ midx, ss ], [ midx, es ]]
                            }[axis];
                        }
                        else if ((pi.so[idx] == 1 && ss < es) || (pi.so[idx] == -1 && ss > es)) {
                            return {
                                "x":[[ midx, pi.sy ], [ midx, pi.ty ]],
                                "y":[[ pi.sx, midy ], [ pi.tx, midy ]]
                            }[axis];
                        }                        
                    }
                };

            var stubs = stubCalculators[paintInfo.anchorOrientation](paintInfo.sourceAxis),
                idx = paintInfo.sourceAxis == "x" ? 0 : 1,
                oidx = paintInfo.sourceAxis == "x" ? 1 : 0,                            
                ss = stubs[idx],
                oss = stubs[oidx],
                es = stubs[idx + 2],
                oes = stubs[oidx + 2];

            // add the start stub segment.
            addSegment(segments, stubs[0], stubs[1], paintInfo);           

            // compute the rest of the line
            var p = lineCalculators[paintInfo.anchorOrientation](paintInfo.sourceAxis, ss, oss, es, oes);            
            if (p) {
                for (var i = 0; i < p.length; i++) {                	
                    addSegment(segments, p[i][0], p[i][1], paintInfo);
                }
            }          
            
            // line to end stub
            addSegment(segments, stubs[2], stubs[3], paintInfo);
    
            // end stub to end
            addSegment(segments, paintInfo.tx, paintInfo.ty, paintInfo);               
            
            writeSegments(this, segments, paintInfo);                            
        };	

        this.getPath = function() {
            var _last = null, _lastAxis = null, s = [], segs = userSuppliedSegments || segments;
            for (var i = 0; i < segs.length; i++) {
                var seg = segs[i], axis = seg[4], axisIndex = (axis == "v" ? 3 : 2);
                if (_last != null && _lastAxis === axis) {
                    _last[axisIndex] = seg[axisIndex];                            
                }
                else {
                    if (seg[0] != seg[2] || seg[1] != seg[3]) {
                        s.push({
                            start:[ seg[0], seg[1] ],
                            end:[ seg[2], seg[3] ]
                        });                    
                        _last = seg;
                        _lastAxis = seg[4];
                    }
                }
            }
            return s;
        };	

        this.setPath = function(path) {
            userSuppliedSegments = [];
            for (var i = 0; i < path.length; i++) {
                 var lx = path[i].start[0],
                    ly = path[i].start[1],
                    x = path[i].end[0],
                    y = path[i].end[1],
                    o = lx == x ? "v" : "h",
                    sgnx = sgn(x - lx),
                    sgny = sgn(y - ly);

                userSuppliedSegments.push([lx, ly, x, y, o, sgnx, sgny]);
            }
        };
    };

    jsPlumbUtil.extend(Flowchart, jsPlumb.Connectors.AbstractConnector);
    jsPlumb.registerConnectorType(Flowchart, "Flowchart");
})();
/*
 * jsPlumb
 *
 * Title:jsPlumb 1.5.5
 *
 * Provides a way to visually connect elements on an HTML page, using either SVG, Canvas
 * elements, or VML.
 *
 * This file contains the state machine connectors.
 *
 * Thanks to Brainstorm Mobile Solutions for supporting the development of these.
 *
 * Copyright (c) 2010 - 2013 Simon Porritt (simon.porritt@gmail.com)
 *
 * http://jsplumb.org
 * http://github.com/sporritt/jsplumb
 * http://code.google.com/p/jsplumb
 *
 * Dual licensed under the MIT and GPL2 licenses.
 */

;(function() {

	var Line = function(x1, y1, x2, y2) {

		this.m = (y2 - y1) / (x2 - x1);
		this.b = -1 * ((this.m * x1) - y1);
	
		this.rectIntersect = function(x,y,w,h) {
			var results = [], xInt, yInt;
		
			// 	try top face
			// 	the equation of the top face is y = (0 * x) + b; y = b.
			xInt = (y - this.b) / this.m;
			// test that the X value is in the line's range.
			if (xInt >= x && xInt <= (x + w)) results.push([ xInt, (this.m * xInt) + this.b ]);
		
			// try right face
			yInt = (this.m * (x + w)) + this.b;
			if (yInt >= y && yInt <= (y + h)) results.push([ (yInt - this.b) / this.m, yInt ]);
		
			// 	bottom face
			xInt = ((y + h) - this.b) / this.m;
			// test that the X value is in the line's range.
			if (xInt >= x && xInt <= (x + w)) results.push([ xInt, (this.m * xInt) + this.b ]);
		
			// try left face
			yInt = (this.m * x) + this.b;
			if (yInt >= y && yInt <= (y + h)) results.push([ (yInt - this.b) / this.m, yInt ]);

			if (results.length == 2) {
				var midx = (results[0][0] + results[1][0]) / 2, midy = (results[0][1] + results[1][1]) / 2;
				results.push([ midx,midy ]);
				// now calculate the segment inside the rectangle where the midpoint lies.
				var xseg = midx <= x + (w / 2) ? -1 : 1,
					yseg = midy <= y + (h / 2) ? -1 : 1;
				results.push([xseg, yseg]);
				return results;
			}
		
			return null;

		};
	},
	_segment = function(x1, y1, x2, y2) {
		if (x1 <= x2 && y2 <= y1) return 1;
		else if (x1 <= x2 && y1 <= y2) return 2;
		else if (x2 <= x1 && y2 >= y1) return 3;
		return 4;
	},
		
		// the control point we will use depends on the faces to which each end of the connection is assigned, specifically whether or not the
		// two faces are parallel or perpendicular.  if they are parallel then the control point lies on the midpoint of the axis in which they
		// are parellel and varies only in the other axis; this variation is proportional to the distance that the anchor points lie from the
		// center of that face.  if the two faces are perpendicular then the control point is at some distance from both the midpoints; the amount and
		// direction are dependent on the orientation of the two elements. 'seg', passed in to this method, tells you which segment the target element
		// lies in with respect to the source: 1 is top right, 2 is bottom right, 3 is bottom left, 4 is top left.
		//
		// sourcePos and targetPos are arrays of info about where on the source and target each anchor is located.  their contents are:
		//
		// 0 - absolute x
		// 1 - absolute y
		// 2 - proportional x in element (0 is left edge, 1 is right edge)
		// 3 - proportional y in element (0 is top edge, 1 is bottom edge)
		// 	
	_findControlPoint = function(midx, midy, segment, sourceEdge, targetEdge, dx, dy, distance, proximityLimit) {
        // TODO (maybe)
        // - if anchor pos is 0.5, make the control point take into account the relative position of the elements.
        if (distance <= proximityLimit) return [midx, midy];

        if (segment === 1) {
            if (sourceEdge[3] <= 0 && targetEdge[3] >= 1) return [ midx + (sourceEdge[2] < 0.5 ? -1 * dx : dx), midy ];
            else if (sourceEdge[2] >= 1 && targetEdge[2] <= 0) return [ midx, midy + (sourceEdge[3] < 0.5 ? -1 * dy : dy) ];
            else return [ midx + (-1 * dx) , midy + (-1 * dy) ];
        }
        else if (segment === 2) {
            if (sourceEdge[3] >= 1 && targetEdge[3] <= 0) return [ midx + (sourceEdge[2] < 0.5 ? -1 * dx : dx), midy ];
            else if (sourceEdge[2] >= 1 && targetEdge[2] <= 0) return [ midx, midy + (sourceEdge[3] < 0.5 ? -1 * dy : dy) ];
            else return [ midx + (1 * dx) , midy + (-1 * dy) ];
        }
        else if (segment === 3) {
            if (sourceEdge[3] >= 1 && targetEdge[3] <= 0) return [ midx + (sourceEdge[2] < 0.5 ? -1 * dx : dx), midy ];
            else if (sourceEdge[2] <= 0 && targetEdge[2] >= 1) return [ midx, midy + (sourceEdge[3] < 0.5 ? -1 * dy : dy) ];
            else return [ midx + (-1 * dx) , midy + (-1 * dy) ];
        }
        else if (segment === 4) {
            if (sourceEdge[3] <= 0 && targetEdge[3] >= 1) return [ midx + (sourceEdge[2] < 0.5 ? -1 * dx : dx), midy ];
            else if (sourceEdge[2] <= 0 && targetEdge[2] >= 1) return [ midx, midy + (sourceEdge[3] < 0.5 ? -1 * dy : dy) ];
            else return [ midx + (1 * dx) , midy + (-1 * dy) ];
        }

	};	
	
	/**
     * Class: Connectors.StateMachine
     * Provides 'state machine' connectors.
     */
	/*
	 * Function: Constructor
	 * 
	 * Parameters:
	 * curviness -	measure of how "curvy" the connectors will be.  this is translated as the distance that the
     *                Bezier curve's control point is from the midpoint of the straight line connecting the two
     *              endpoints, and does not mean that the connector is this wide.  The Bezier curve never reaches
     *              its control points; they act as gravitational masses. defaults to 10.
	 * margin	-	distance from element to start and end connectors, in pixels.  defaults to 5.
	 * proximityLimit  -   sets the distance beneath which the elements are consider too close together to bother
	 *						with fancy curves. by default this is 80 pixels.
	 * loopbackRadius	-	the radius of a loopback connector.  optional; defaults to 25.
	 * showLoopback   -   If set to false this tells the connector that it is ok to paint connections whose source and target is the same element with a connector running through the element. The default value for this is true; the connector always makes a loopback connection loop around the element rather than passing through it.
	*/
	var StateMachine = function(params) {
		params = params || {};
		this.type = "StateMachine";

		var self = this,
			_super =  jsPlumb.Connectors.AbstractConnector.apply(this, arguments),
			curviness = params.curviness || 10,
			margin = params.margin || 5,
			proximityLimit = params.proximityLimit || 80,
			clockwise = params.orientation && params.orientation === "clockwise",
			loopbackRadius = params.loopbackRadius || 25,
			showLoopback = params.showLoopback !== false;
		
		this._compute = function(paintInfo, params) {
			var w = Math.abs(params.sourcePos[0] - params.targetPos[0]),
				h = Math.abs(params.sourcePos[1] - params.targetPos[1]),
				x = Math.min(params.sourcePos[0], params.targetPos[0]),
				y = Math.min(params.sourcePos[1], params.targetPos[1]);				
		
			if (!showLoopback || (params.sourceEndpoint.elementId !== params.targetEndpoint.elementId)) {                            
				var _sx = params.sourcePos[0] < params.targetPos[0] ? 0  : w,
					_sy = params.sourcePos[1] < params.targetPos[1] ? 0:h,
					_tx = params.sourcePos[0] < params.targetPos[0] ? w : 0,
					_ty = params.sourcePos[1] < params.targetPos[1] ? h : 0;
            
				// now adjust for the margin
				if (params.sourcePos[2] === 0) _sx -= margin;
            	if (params.sourcePos[2] === 1) _sx += margin;
            	if (params.sourcePos[3] === 0) _sy -= margin;
            	if (params.sourcePos[3] === 1) _sy += margin;
            	if (params.targetPos[2] === 0) _tx -= margin;
            	if (params.targetPos[2] === 1) _tx += margin;
            	if (params.targetPos[3] === 0) _ty -= margin;
            	if (params.targetPos[3] === 1) _ty += margin;

            	//
	            // these connectors are quadratic bezier curves, having a single control point. if both anchors 
    	        // are located at 0.5 on their respective faces, the control point is set to the midpoint and you
        	    // get a straight line.  this is also the case if the two anchors are within 'proximityLimit', since
           	 	// it seems to make good aesthetic sense to do that. outside of that, the control point is positioned 
           	 	// at 'curviness' pixels away along the normal to the straight line connecting the two anchors.
	            // 
   	        	// there may be two improvements to this.  firstly, we might actually support the notion of avoiding nodes
            	// in the UI, or at least making a good effort at doing so.  if a connection would pass underneath some node,
            	// for example, we might increase the distance the control point is away from the midpoint in a bid to
            	// steer it around that node.  this will work within limits, but i think those limits would also be the likely
            	// limits for, once again, aesthetic good sense in the layout of a chart using these connectors.
            	//
            	// the second possible change is actually two possible changes: firstly, it is possible we should gradually
            	// decrease the 'curviness' as the distance between the anchors decreases; start tailing it off to 0 at some
            	// point (which should be configurable).  secondly, we might slightly increase the 'curviness' for connectors
            	// with respect to how far their anchor is from the center of its respective face. this could either look cool,
            	// or stupid, and may indeed work only in a way that is so subtle as to have been a waste of time.
            	//

				var _midx = (_sx + _tx) / 2, _midy = (_sy + _ty) / 2, 
            	    m2 = (-1 * _midx) / _midy, theta2 = Math.atan(m2),
            	    dy =  (m2 == Infinity || m2 == -Infinity) ? 0 : Math.abs(curviness / 2 * Math.sin(theta2)),
				    dx =  (m2 == Infinity || m2 == -Infinity) ? 0 : Math.abs(curviness / 2 * Math.cos(theta2)),
				    segment = _segment(_sx, _sy, _tx, _ty),
				    distance = Math.sqrt(Math.pow(_tx - _sx, 2) + Math.pow(_ty - _sy, 2)),			
	            	// calculate the control point.  this code will be where we'll put in a rudimentary element avoidance scheme; it
	            	// will work by extending the control point to force the curve to be, um, curvier.
					_controlPoint = _findControlPoint(_midx,
                                                  _midy,
                                                  segment,
                                                  params.sourcePos,
                                                  params.targetPos,
                                                  curviness, curviness,
                                                  distance,
                                                  proximityLimit);

				_super.addSegment(this, "Bezier", {
					x1:_tx, y1:_ty, x2:_sx, y2:_sy,
					cp1x:_controlPoint[0], cp1y:_controlPoint[1],
					cp2x:_controlPoint[0], cp2y:_controlPoint[1]
				});				
            }
            else {
            	// a loopback connector.  draw an arc from one anchor to the other.            	
        		var x1 = params.sourcePos[0], x2 = params.sourcePos[0], y1 = params.sourcePos[1] - margin, y2 = params.sourcePos[1] - margin, 				
					cx = x1, cy = y1 - loopbackRadius,				
					// canvas sizing stuff, to ensure the whole painted area is visible.
					_w = 2 * loopbackRadius, 
					_h = 2 * loopbackRadius,
					_x = cx - loopbackRadius, 
					_y = cy - loopbackRadius;

				paintInfo.points[0] = _x;
				paintInfo.points[1] = _y;
				paintInfo.points[2] = _w;
				paintInfo.points[3] = _h;
				
				// ADD AN ARC SEGMENT.
				_super.addSegment(this, "Arc", {
					loopback:true,
					x1:(x1 - _x) + 4,
					y1:y1 - _y,
					startAngle:0,
					endAngle: 2 * Math.PI,
					r:loopbackRadius,
					ac:!clockwise,
					x2:(x1 - _x) - 4,
					y2:y1 - _y,
					cx:cx - _x,
					cy:cy - _y
				});
            }                           
        };                        
	};
	jsPlumb.registerConnectorType(StateMachine, "StateMachine");
})();

/*
    	// a possible rudimentary avoidance scheme, old now, perhaps not useful.
        //      if (avoidSelector) {
		//		    var testLine = new Line(sourcePos[0] + _sx,sourcePos[1] + _sy,sourcePos[0] + _tx,sourcePos[1] + _ty);
		//		    var sel = jsPlumb.getSelector(avoidSelector);
		//		    for (var i = 0; i < sel.length; i++) {
		//			    var id = jsPlumb.getId(sel[i]);
		//			    if (id != sourceEndpoint.elementId && id != targetEndpoint.elementId) {
		//				    o = jsPlumb.getOffset(id), s = jsPlumb.getSize(id);
//
//						    if (o && s) {
//							    var collision = testLine.rectIntersect(o.left,o.top,s[0],s[1]);
//							    if (collision) {
								    // set the control point to be a certain distance from the midpoint of the two points that
								    // the line crosses on the rectangle.
								    // TODO where will this 75 number come from?
					//			    _controlX = collision[2][0] + (75 * collision[3][0]);
				//	/			    _controlY = collision[2][1] + (75 * collision[3][1]);
//							    }
//						    }
					//  }
	//			    }
              //}
    */

;(function() {

	var Bezier = function(params) {
        params = params || {};

    	var self = this,
			_super =  jsPlumb.Connectors.AbstractConnector.apply(this, arguments),
            stub = params.stub || 50,
            majorAnchor = params.curviness || 150,
            minorAnchor = 10;            

        this.type = "Bezier";	
        this.getCurviness = function() { return majorAnchor; };	
        
        this._findControlPoint = function(point, sourceAnchorPosition, targetAnchorPosition, sourceEndpoint, targetEndpoint) {
        	// determine if the two anchors are perpendicular to each other in their orientation.  we swap the control 
        	// points around if so (code could be tightened up)
        	var soo = sourceEndpoint.anchor.getOrientation(sourceEndpoint), 
        		too = targetEndpoint.anchor.getOrientation(targetEndpoint),
        		perpendicular = soo[0] != too[0] || soo[1] == too[1],
            	p = [];                
            	
            if (!perpendicular) {
                if (soo[0] === 0) // X
                    p.push(sourceAnchorPosition[0] < targetAnchorPosition[0] ? point[0] + minorAnchor : point[0] - minorAnchor);
                else p.push(point[0] - (majorAnchor * soo[0]));
                                 
                if (soo[1] === 0) // Y
                	p.push(sourceAnchorPosition[1] < targetAnchorPosition[1] ? point[1] + minorAnchor : point[1] - minorAnchor);
                else p.push(point[1] + (majorAnchor * too[1]));
            }
             else {
                if (too[0] === 0) // X
                	p.push(targetAnchorPosition[0] < sourceAnchorPosition[0] ? point[0] + minorAnchor : point[0] - minorAnchor);
                else p.push(point[0] + (majorAnchor * too[0]));
                
                if (too[1] === 0) // Y
                	p.push(targetAnchorPosition[1] < sourceAnchorPosition[1] ? point[1] + minorAnchor : point[1] - minorAnchor);
                else p.push(point[1] + (majorAnchor * soo[1]));
             }

            return p;                
        };        

        this._compute = function(paintInfo, p) {                                
			var sp = p.sourcePos,
				tp = p.targetPos,				
                _w = Math.abs(sp[0] - tp[0]),
                _h = Math.abs(sp[1] - tp[1]),            
                _sx = sp[0] < tp[0] ? _w : 0,
                _sy = sp[1] < tp[1] ? _h : 0,
                _tx = sp[0] < tp[0] ? 0 : _w,
                _ty = sp[1] < tp[1] ? 0 : _h,
                _CP = self._findControlPoint([_sx, _sy], sp, tp, p.sourceEndpoint, p.targetEndpoint),
                _CP2 = self._findControlPoint([_tx, _ty], tp, sp, p.targetEndpoint, p.sourceEndpoint);

			_super.addSegment(this, "Bezier", {
				x1:_sx, y1:_sy, x2:_tx, y2:_ty,
				cp1x:_CP[0], cp1y:_CP[1], cp2x:_CP2[0], cp2y:_CP2[1]
			});                    
        }; 
	};

	jsPlumb.registerConnectorType(Bezier, "Bezier");

})();
/*
 * jsPlumb
 * 
 * Title:jsPlumb 1.5.5
 * 
 * Provides a way to visually connect elements on an HTML page, using either SVG, Canvas
 * elements, or VML.  
 * 
 * This file contains the HTML5 canvas renderers.  Support for canvas was dropped in 1.4.2.
 * This is being kept around because canvas might make a comeback as a single-page solution
 * that also supports node rendering.
 *
 * Copyright (c) 2010 - 2013 Simon Porritt (http://jsplumb.org)
 * 
 * http://jsplumb.org
 * http://github.com/sporritt/jsplumb
 * http://code.google.com/p/jsplumb
 * 
 * Dual licensed under the MIT and GPL2 licenses.
 */

;(function() {

	
// ********************************* CANVAS RENDERERS FOR CONNECTORS AND ENDPOINTS *******************************************************************
		
	// TODO refactor to renderer common script.  put a ref to jsPlumb.sizeCanvas in there too.
	var _connectionBeingDragged = null,
	    _hasClass = function(el, clazz) { return jsPlumb.CurrentLibrary.hasClass(_getElementObject(el), clazz); },
	    _getElementObject = function(el) { return jsPlumb.CurrentLibrary.getElementObject(el); },
	    _getOffset = function(el) { return jsPlumb.CurrentLibrary.getOffset(_getElementObject(el)); },
	    _pageXY = function(el) { return jsPlumb.CurrentLibrary.getPageXY(el); },
	    _clientXY = function(el) { return jsPlumb.CurrentLibrary.getClientXY(el); };
	
	/*
	 * Class:CanvasMouseAdapter
	 * Provides support for mouse events on canvases.  
	 */
	var CanvasMouseAdapter = window.CanvasMouseAdapter = function() {
		var self = this;
		this.overlayPlacements = [];
		jsPlumb.jsPlumbUIComponent.apply(this, arguments);
		jsPlumbUtil.EventGenerator.apply(this, arguments);
		/**
		 * returns whether or not the given event is ojver a painted area of the canvas. 
		 */
	    this._over = function(e) {		    			  		    	
			var o = _getOffset(_getElementObject(self.canvas)),
				pageXY = _pageXY(e),
				x = pageXY[0] - o.left, y = pageXY[1] - o.top;
			if (x > 0 && y > 0 && x < self.canvas.width && y < self.canvas.height) {
				// first check overlays
				for ( var i = 0; i < self.overlayPlacements.length; i++) {
					var p = self.overlayPlacements[i];
					if (p && (p[0] <= x && p[1] >= x && p[2] <= y && p[3] >= y))
						return true;
				}		    	
				// then the canvas
				var d = self.canvas.getContext("2d").getImageData(parseInt(x, 10), parseInt(y, 10), 1, 1);
				return d.data[0] !== 0 || d.data[1] !== 0 || d.data[2] !== 0 || d.data[3] !== 0;		  
			}
			return false;
	    };
	    
	    var _mouseover = false, _mouseDown = false, _posWhenMouseDown = null, _mouseWasDown = false,
		    _nullSafeHasClass = function(el, clazz) {
		    	return el !== null && _hasClass(el, clazz);
		    };
	    this.mousemove = function(e) {		    
	    	var pageXY = _pageXY(e), clientXY = _clientXY(e),	   
	    	ee = document.elementFromPoint(clientXY[0], clientXY[1]),
	    	eventSourceWasOverlay = _nullSafeHasClass(ee, "_jsPlumb_overlay");	    	
			var _continue = _connectionBeingDragged === null && (_nullSafeHasClass(ee, "_jsPlumb_endpoint") || _nullSafeHasClass(ee, "_jsPlumb_connector"));
			if (!_mouseover && _continue && self._over(e)) {
				_mouseover = true;
				self.fire("mouseenter", self, e);		
				return true;
			}
			// TODO here there is a remote chance that the overlay the mouse moved onto
			// is actually not an overlay for the current component. a more thorough check would
			// be to ensure the overlay belonged to the current component.  
			else if (_mouseover && (!self._over(e) || !_continue) && !eventSourceWasOverlay) {
				_mouseover = false;
				self.fire("mouseexit", self, e);				
			}
			self.fire("mousemove", self, e);
	    };
	    		    		    
	    this.click = function(e) {	    		
			if (_mouseover && self._over(e) && !_mouseWasDown) 
	    		self.fire("click", self, e);		    	
	    	_mouseWasDown = false;
	    };
	    
	    this.dblclick = function(e) {
	    	if (_mouseover && self._over(e) && !_mouseWasDown) 
	    		self.fire("dblclick", self, e);		    	
	    	_mouseWasDown = false;
	    };
	    
	    this.mousedown = function(e) {
	    	if(self._over(e) && !_mouseDown) {
	    		_mouseDown = true;	    		
	    		_posWhenMouseDown = _getOffset(_getElementObject(self.canvas));
	    		self.fire("mousedown", self, e);
	    	}
	    };
	    
	    this.mouseup = function(e) {
	    	_mouseDown = false;
	    	self.fire("mouseup", self, e);
	    };

        this.contextmenu = function(e) {
          if (_mouseover && self._over(e) && !_mouseWasDown)
            self.fire("contextmenu", self, e);
          _mouseWasDown = false;
        };
	};
	jsPlumbUtil.extend(CanvasMouseAdapter, [ jsPlumb.jsPlumbUIComponent, jsPlumbUtil.EventGenerator ]);		
	
	var _newCanvas = function(params) {
		var canvas = document.createElement("canvas");
		params._jsPlumb.instance.appendElement(canvas, params.parent);
		canvas.style.position = "absolute";
		if (params["class"]) canvas.className = params["class"];
		// set an id. if no id on the element and if uuid was supplied it
		// will be used, otherwise we'll create one.
		params._jsPlumb.instance.getId(canvas, params.uuid);
		if (params.tooltip) canvas.setAttribute("title", params.tooltip);

		return canvas;
	};	

	var CanvasComponent = window.CanvasComponent = function(params) {
		CanvasMouseAdapter.apply(this, arguments);

		var displayElements = [ ];
		this.getDisplayElements = function() { return displayElements; };
		this.appendDisplayElement = function(el) { displayElements.push(el); };
	};
	jsPlumbUtil.extend(CanvasComponent, CanvasMouseAdapter, {
		setVisible:function(state) { 			
			this.canvas.style.display = state ? "block" : "none";
		}
	});
	
	var segmentMultipliers = [null, [1, -1], [1, 1], [-1, 1], [-1, -1] ];
	var maybeMakeGradient = function(ctx, style, gradientFunction) {
		if (style.gradient) {
			var g = gradientFunction();
			for ( var i = 0; i < style.gradient.stops.length; i++)
				g.addColorStop(style.gradient.stops[i][0], style.gradient.stops[i][1]);
			ctx.strokeStyle = g;
		}
	};
	var segmentRenderer = function(segment, ctx, style, dx, dy) {	
		({
			"Straight":function(segment, ctx, style, dx, dy) {
				var d = segment.params;
				ctx.save();
				maybeMakeGradient(ctx, style, function() { return ctx.createLinearGradient(d.x1, d.y1, d.x2, d.y2); });
				ctx.beginPath();
				ctx.translate(dx, dy);				
				if (style.dashstyle && style.dashstyle.split(" ").length === 2) {			
					// only a very simple dashed style is supported - having two values, which define the stroke length 
					// (as a multiple of the stroke width) and then the space length (also as a multiple of stroke width). 
					var ds = style.dashstyle.split(" ");
					if (ds.length !== 2) ds = [2, 2];
					var dss = [ ds[0] * style.lineWidth, ds[1] * style.lineWidth ],
						m = (d.x2- d.x1) / (d.y2 - d.y1),
						s = jsPlumbUtil.segment([d.x1, d.y1], [ d.x2, d.y2 ]),
						sm = segmentMultipliers[s],
						theta = Math.atan(m),
						l = Math.sqrt(Math.pow(d.x2 - d.x1, 2) + Math.pow(d.y2 - d.y1, 2)),
						repeats = Math.floor(l / (dss[0] + dss[1])),
						curPos = [d.x1, d.y1];

					
					// TODO: the question here is why could we not support this in all connector types? it's really
					// just a case of going along and asking jsPlumb for the next point on the path a few times, until it
					// reaches the end. every type of connector supports that method, after all.  but right now its only the
					// bezier connector that gives you back the new location on the path along with the x,y coordinates, which
					// we would need. we'd start out at loc=0 and ask for the point along the path that is dss[0] pixels away.
					// we then ask for the point that is (dss[0] + dss[1]) pixels away; and from that one we need not just the
					// x,y but the location, cos we're gonna plug that location back in in order to find where that dash ends.
					//
					// it also strikes me that it should be trivial to support arbitrary dash styles (having more or less than two
					// entries). you'd just iterate that array using a step size of 2, and generify the (rss[0] + rss[1])
					// computation to be sum(rss[0]..rss[n]).					

					for (var i = 0; i < repeats; i++) {
						ctx.moveTo(curPos[0], curPos[1]);

						var nextEndX = curPos[0] + (Math.abs(Math.sin(theta) * dss[0]) * sm[0]),
							nextEndY = curPos[1] + (Math.abs(Math.cos(theta) * dss[0]) * sm[1]),
							nextStartX = curPos[0] + (Math.abs(Math.sin(theta) * (dss[0] + dss[1]))  * sm[0]),
							nextStartY = curPos[1] + (Math.abs(Math.cos(theta) * (dss[0] + dss[1])) * sm[1]);

						ctx.lineTo(nextEndX, nextEndY);
						curPos = [nextStartX, nextStartY];					
					}

					// now draw the last bit
					ctx.moveTo(curPos[0], curPos[1]);
					ctx.lineTo(d.x2, d.y2);							

				}	        
		        else {
					ctx.moveTo(d.x1, d.y1);
					ctx.lineTo(d.x2, d.y2);
		        }				

				ctx.stroke();

				ctx.restore();
			},
			"Bezier":function(segment, ctx, style, dx, dy) {				
				var d = segment.params;
				ctx.save();
				maybeMakeGradient(ctx, style, function() { return ctx.createLinearGradient(d.x2 + dx, d.y2 + dy, d.x1 + dx, d.y1 + dy); });
				ctx.beginPath();
				ctx.translate(dx, dy);
				ctx.moveTo(d.x1, d.y1);
				ctx.bezierCurveTo(d.cp1x, d.cp1y, d.cp2x, d.cp2y, d.x2, d.y2);
				ctx.stroke();
				ctx.restore();
			},
			"Arc":function(segment, ctx, style, dx, dy) {
				var d = segment.params;
				ctx.save();
				ctx.beginPath();
				ctx.translate(dx, dy);				
				ctx.arc(d.cx, d.cy, d.r, segment.startAngle, segment.endAngle, d.ac);
				ctx.stroke();
				ctx.restore();
			}
		})[segment.type](segment, ctx, style, dx, dy);	
	};
	
	/**
	 * Class:CanvasConnector
	 * Superclass for Canvas Connector renderers.
	 */
	var CanvasConnector = jsPlumb.ConnectorRenderers.canvas = function(params) {
		CanvasComponent.apply(this, arguments);
		
		var _paintOneStyle = function(aStyle, dx, dy) {
			this.ctx.save();
			jsPlumb.extend(this.ctx, aStyle);

			var segments = this.getSegments();				
			for (var i = 0; i < segments.length; i++) {
				segmentRenderer(segments[i], this.ctx, aStyle, dx, dy);
			}
			this.ctx.restore();
		}.bind(this);

		var clazz = this._jsPlumb.instance.connectorClass + " " + (params.cssClass || "");
		this.canvas = _newCanvas({ 
			"class":clazz, 
			_jsPlumb:this._jsPlumb,
			parent:params.parent
		});	
		this.ctx = this.canvas.getContext("2d");
		
		this.appendDisplayElement(this.canvas);
		
		this.paint = function(style, anchor, extents) {						
			if (style != null) {							

				var xy = [ this.x, this.y ], wh = [ this.w, this.h ], p,
					dx = 0, dy = 0;

				if (extents != null) {
					if (extents.xmin < 0) {
						xy[0] += extents.xmin;
						dx = -extents.xmin;
					}
					if (extents.ymin < 0) {
						xy[1] += extents.ymin;
						dy = -extents.ymin;
					}
					wh[0] = extents.xmax + ((extents.xmin < 0) ? -extents.xmin : 0);
					wh[1] = extents.ymax + ((extents.ymin < 0) ? -extents.ymin : 0);
				}

				this.translateX = dx;
				this.translateY = dy;
				
				jsPlumbUtil.sizeElement(this.canvas, xy[0], xy[1], wh[0], wh[1]);				
				
				if (style.outlineColor != null) {
					var outlineWidth = style.outlineWidth || 1,
					outlineStrokeWidth = style.lineWidth + (2 * outlineWidth),
					outlineStyle = {
						strokeStyle:style.outlineColor,
						lineWidth:outlineStrokeWidth
					};
					_paintOneStyle(outlineStyle, dx, dy);
				}
				_paintOneStyle(style, dx, dy);
			}
		};				
	};		
	jsPlumbUtil.extend(CanvasConnector, CanvasComponent);
		
	
	/**
	 * Class:CanvasEndpoint
	 * Superclass for Canvas Endpoint renderers.
	 */
	var CanvasEndpoint = function(params) {
		CanvasComponent.apply(this, arguments);		
		var clazz = this._jsPlumb.instance.endpointClass + " " + (params.cssClass || ""),
			canvasParams = { 
			"class":clazz, 
			_jsPlumb:this._jsPlumb,
			parent:params.parent,
			tooltip:self.tooltip
		};
		this.canvas = _newCanvas(canvasParams);	
		this.ctx = this.canvas.getContext("2d");

		this.appendDisplayElement(this.canvas);
		
		this.paint = function(style, anchor, extents) {
			jsPlumbUtil.sizeElement(this.canvas, this.x, this.y, this.w, this.h);			
			if (style.outlineColor != null) {
				var outlineWidth = style.outlineWidth || 1,
				outlineStrokeWidth = style.lineWidth + (2 * outlineWidth);
				var outlineStyle = {
					strokeStyle:style.outlineColor,
					lineWidth:outlineStrokeWidth
				};
			}
			
			this._paint.apply(this, arguments);
		};
	};
	jsPlumbUtil.extend(CanvasEndpoint, CanvasComponent);
	
	jsPlumb.Endpoints.canvas.Dot = function(params) {		
		jsPlumb.Endpoints.Dot.apply(this, arguments);
		CanvasEndpoint.apply(this, arguments);
		var self = this,		
		parseValue = function(value) {
			try { return parseInt(value, 10); }
			catch(e) {
				if (value.substring(value.length - 1) == '%')
					return parseInt(value.substring(0, value - 1), 10);
			}
		},					    	
		calculateAdjustments = function(gradient) {
			var offsetAdjustment = self.defaultOffset, innerRadius = self.defaultInnerRadius;
			if (gradient.offset) offsetAdjustment = parseValue(gradient.offset);
        	if (gradient.innerRadius) innerRadius = parseValue(gradient.innerRadius);
        	return [offsetAdjustment, innerRadius];
		};
		this._paint = function(style) {
			if (style != null) {			
				var ctx = self.canvas.getContext('2d'), 
					orientation = params.endpoint.anchor.getOrientation(params.endpoint);

				jsPlumb.extend(ctx, style);							
	            if (style.gradient) {            	
	            	var adjustments = calculateAdjustments(style.gradient), 
	            	yAdjust = orientation[1] == 1 ? adjustments[0] * -1 : adjustments[0],
	            	xAdjust = orientation[0] == 1 ? adjustments[0] * -1:  adjustments[0],
	            	g = ctx.createRadialGradient(self.radius, self.radius, self.radius, self.radius + xAdjust, self.radius + yAdjust, adjustments[1]);
		            for (var i = 0; i < style.gradient.stops.length; i++)
		            	g.addColorStop(style.gradient.stops[i][0], style.gradient.stops[i][1]);
		            ctx.fillStyle = g;
	            }				
				ctx.beginPath();    
				//ctx.translate(dx, dy);						
				ctx.arc(self.radius, self.radius, self.radius, 0, Math.PI*2, true);
				ctx.closePath();				
				if (style.fillStyle || style.gradient) ctx.fill();
				if (style.strokeStyle) ctx.stroke();
			}
    	};
	};	
	jsPlumbUtil.extend(jsPlumb.Endpoints.canvas.Dot, [ jsPlumb.Endpoints.Dot, CanvasEndpoint ]);
		
	jsPlumb.Endpoints.canvas.Rectangle = function(params) {
		
		var self = this;
		jsPlumb.Endpoints.Rectangle.apply(this, arguments);
		CanvasEndpoint.apply(this, arguments);				
		
    	this._paint = function(style) {
				
			var ctx = self.canvas.getContext("2d"), 
				orientation = params.endpoint.anchor.getOrientation(params.endpoint);

			jsPlumb.extend(ctx, style);
			
			/* canvas gradient */
		    if (style.gradient) {
		    	// first figure out which direction to run the gradient in (it depends on the orientation of the anchors)
		    	var y1 = orientation[1] == 1 ? self.h : orientation[1] === 0 ? self.h / 2 : 0;
				var y2 = orientation[1] == -1 ? self.h : orientation[1] === 0 ? self.h / 2 : 0;
				var x1 = orientation[0] == 1 ? self.w : orientation[0] === 0 ? self.w / 2 : 0;
				var x2 = orientation[0] == -1 ? self.w : orientation[0] === 0 ? self.w / 2 : 0;
			    var g = ctx.createLinearGradient(x1,y1,x2,y2);
			    for (var i = 0; i < style.gradient.stops.length; i++)
	            	g.addColorStop(style.gradient.stops[i][0], style.gradient.stops[i][1]);
	            ctx.fillStyle = g;
		    }
			
			ctx.beginPath();
			ctx.rect(0, 0, self.w, self.h);
			ctx.closePath();				
			if (style.fillStyle || style.gradient) ctx.fill();
			if (style.strokeStyle) ctx.stroke();
    	};
	};		
	jsPlumbUtil.extend(jsPlumb.Endpoints.canvas.Rectangle, [ jsPlumb.Endpoints.Rectangle, CanvasEndpoint ]);
	
	jsPlumb.Endpoints.canvas.Triangle = function(params) {
	        			
		var self = this;
		jsPlumb.Endpoints.Triangle.apply(this, arguments);
		CanvasEndpoint.apply(this, arguments);			
		
    	this._paint = function(style) {    					
			var ctx = self.canvas.getContext('2d'),
				offsetX = 0, offsetY = 0, angle = 0,
				orientation = params.endpoint.anchor.getOrientation(params.endpoint);
			
			if( orientation[0] == 1 ) {
				offsetX = self.width;
				offsetY = self.height;
				angle = 180;
			}
			if( orientation[1] == -1 ) {
				offsetX = self.width;
				angle = 90;
			}
			if( orientation[1] == 1 ) {
				offsetY = self.height;
				angle = -90;
			}
			
			ctx.fillStyle = style.fillStyle;
			
			ctx.translate(offsetX, offsetY);
			ctx.rotate(angle * Math.PI/180);

			ctx.beginPath();
			ctx.moveTo(0, 0);
			ctx.lineTo(self.width/2, self.height/2);
			ctx.lineTo(0, self.height);
			ctx.closePath();
			if (style.fillStyle || style.gradient) ctx.fill();
			if (style.strokeStyle) ctx.stroke();				
    	};
	};	
	jsPlumbUtil.extend(jsPlumb.Endpoints.canvas.Triangle, [ jsPlumb.Endpoints.Triangle, CanvasEndpoint ]);
	
	/*
	 * Canvas Image Endpoint: uses the default version, which creates an <img> tag.
	 */
	jsPlumb.Endpoints.canvas.Image = jsPlumb.Endpoints.Image;
	
	/*
	 * Blank endpoint in all renderers is just the default Blank endpoint.
	 */
	jsPlumb.Endpoints.canvas.Blank = jsPlumb.Endpoints.Blank;
		
// ********************************* END OF CANVAS RENDERERS *******************************************************************    
    
    jsPlumb.Overlays.canvas.Label = jsPlumb.Overlays.Label;
	jsPlumb.Overlays.canvas.Custom = jsPlumb.Overlays.Custom;
    
    /**
     * a placeholder right now, really just exists to mirror the fact that there are SVG and VML versions of this. 
     */
    var CanvasOverlay = function() { 
    	jsPlumb.jsPlumbUIComponent.apply(this, arguments);
    };
    jsPlumbUtil.extend(CanvasOverlay, jsPlumb.jsPlumbUIComponent, {
    	setVisible : function(state) {
    	    this.visible = state;
    	    this.component.repaint();
    	}
    });
    
    var AbstractCanvasArrowOverlay = function(superclass, originalArgs) {
    	superclass.apply(this, originalArgs);
    	CanvasOverlay.apply(this, originalArgs);
    	this.paint = function(params, containerExtents) {
    		var ctx = params.component.ctx, d = params.d;
    		
    		if (d) {
    			ctx.save();
				ctx.lineWidth = params.lineWidth;
				ctx.beginPath();
				ctx.translate(params.component.translateX, params.component.translateY);
				ctx.moveTo(d.hxy.x, d.hxy.y);
				ctx.lineTo(d.tail[0].x, d.tail[0].y);
				ctx.lineTo(d.cxy.x, d.cxy.y);
				ctx.lineTo(d.tail[1].x, d.tail[1].y);
				ctx.lineTo(d.hxy.x, d.hxy.y);
				ctx.closePath();						
							
				if (params.strokeStyle) {
					ctx.strokeStyle = params.strokeStyle;
					ctx.stroke();
				}
				if (params.fillStyle) {
					ctx.fillStyle = params.fillStyle;			
					ctx.fill();
				}
				ctx.restore();
			}
    	};
    }; 
    
    jsPlumb.Overlays.canvas.Arrow = function() {
    	AbstractCanvasArrowOverlay.apply(this, [jsPlumb.Overlays.Arrow, arguments]);    	
    };
    jsPlumbUtil.extend(jsPlumb.Overlays.canvas.Arrow, [ jsPlumb.Overlays.Arrow, CanvasOverlay ] );
    
    jsPlumb.Overlays.canvas.PlainArrow = function() {
    	AbstractCanvasArrowOverlay.apply(this, [jsPlumb.Overlays.PlainArrow, arguments]);    	
    };
    jsPlumbUtil.extend(jsPlumb.Overlays.canvas.PlainArrow, [ jsPlumb.Overlays.PlainArrow, CanvasOverlay ] );
    
    jsPlumb.Overlays.canvas.Diamond = function() {
    	AbstractCanvasArrowOverlay.apply(this, [jsPlumb.Overlays.Diamond, arguments]);    	
    };		
    jsPlumbUtil.extend(jsPlumb.Overlays.canvas.Diamond, [ jsPlumb.Overlays.Diamond, CanvasOverlay ] );
})();
/*
 * jsPlumb
 * 
 * Title:jsPlumb 1.5.5
 * 
 * Provides a way to visually connect elements on an HTML page, using either SVG, Canvas
 * elements, or VML.  
 * 
 * This file contains the SVG renderers.
 *
 * Copyright (c) 2010 - 2013 Simon Porritt (http://jsplumb.org)
 * 
 * http://jsplumb.org
 * http://github.com/sporritt/jsplumb
 * http://code.google.com/p/jsplumb
 * 
 * Dual licensed under the MIT and GPL2 licenses.
 */

/**
 * SVG support for jsPlumb.
 * 
 * things to investigate:
 * 
 * gradients:  https://developer.mozilla.org/en/svg_in_html_introduction
 * css:http://tutorials.jenkov.com/svg/svg-and-css.html
 * text on a path: http://www.w3.org/TR/SVG/text.html#TextOnAPath
 * pointer events: https://developer.mozilla.org/en/css/pointer-events
 *
 * IE9 hover jquery: http://forum.jquery.com/topic/1-6-2-broke-svg-hover-events
 *
 */
;(function() {
	
// ************************** SVG utility methods ********************************************	
	
	var svgAttributeMap = {
		"joinstyle":"stroke-linejoin",
		"stroke-linejoin":"stroke-linejoin",		
		"stroke-dashoffset":"stroke-dashoffset",
		"stroke-linecap":"stroke-linecap"
	},
	STROKE_DASHARRAY = "stroke-dasharray",
	DASHSTYLE = "dashstyle",
	LINEAR_GRADIENT = "linearGradient",
	RADIAL_GRADIENT = "radialGradient",
	FILL = "fill",
	STOP = "stop",
	STROKE = "stroke",
	STROKE_WIDTH = "stroke-width",
	STYLE = "style",
	NONE = "none",
	JSPLUMB_GRADIENT = "jsplumb_gradient_",
	LINE_WIDTH = "lineWidth",
	ns = {
		svg:"http://www.w3.org/2000/svg",
		xhtml:"http://www.w3.org/1999/xhtml"
	},
	_attr = function(node, attributes) {
		for (var i in attributes)
			node.setAttribute(i, "" + attributes[i]);
	},	
	_node = function(name, attributes) {
		var n = document.createElementNS(ns.svg, name);
		attributes = attributes || {};
		attributes.version = "1.1";
		attributes.xmlns = ns.xhtml;
		_attr(n, attributes);
		return n;
	},
	_pos = function(d) { return "position:absolute;left:" + d[0] + "px;top:" + d[1] + "px"; },	
	_clearGradient = function(parent) {
		for (var i = 0; i < parent.childNodes.length; i++) {
			if (parent.childNodes[i].tagName == LINEAR_GRADIENT || parent.childNodes[i].tagName == RADIAL_GRADIENT)
				parent.removeChild(parent.childNodes[i]);
		}
	},		
	_updateGradient = function(parent, node, style, dimensions, uiComponent) {
		var id = JSPLUMB_GRADIENT + uiComponent._jsPlumb.instance.idstamp();
		// first clear out any existing gradient
		_clearGradient(parent);
		// this checks for an 'offset' property in the gradient, and in the absence of it, assumes
		// we want a linear gradient. if it's there, we create a radial gradient.
		// it is possible that a more explicit means of defining the gradient type would be
		// better. relying on 'offset' means that we can never have a radial gradient that uses
		// some default offset, for instance.
		// issue 244 suggested the 'gradientUnits' attribute; without this, straight/flowchart connectors with gradients would
		// not show gradients when the line was perfectly horizontal or vertical.
		var g;
		if (!style.gradient.offset) {
			g = _node(LINEAR_GRADIENT, {id:id, gradientUnits:"userSpaceOnUse"});
		}
		else {
			g = _node(RADIAL_GRADIENT, {
				id:id
			});			
		}
		
		parent.appendChild(g);
		
		// the svg radial gradient seems to treat stops in the reverse 
		// order to how canvas does it.  so we want to keep all the maths the same, but
		// iterate the actual style declarations in reverse order, if the x indexes are not in order.
		for (var i = 0; i < style.gradient.stops.length; i++) {
			var styleToUse = uiComponent.segment == 1 ||  uiComponent.segment == 2 ? i: style.gradient.stops.length - 1 - i,			
				stopColor = jsPlumbUtil.convertStyle(style.gradient.stops[styleToUse][1], true),
				s = _node(STOP, {"offset":Math.floor(style.gradient.stops[i][0] * 100) + "%", "stop-color":stopColor});

			g.appendChild(s);
		}
		var applyGradientTo = style.strokeStyle ? STROKE : FILL;
        //document.location.toString()
		//node.setAttribute(STYLE, applyGradientTo + ":url(#" + id + ")");
        node.setAttribute(STYLE, applyGradientTo + ":url(" + document.location.toString() + "#" + id + ")");
	},
	_applyStyles = function(parent, node, style, dimensions, uiComponent) {
		
		if (style.gradient) {
			_updateGradient(parent, node, style, dimensions, uiComponent);			
		}
		else {
			// make sure we clear any existing gradient
			_clearGradient(parent);
			node.setAttribute(STYLE, "");
		}
		
		node.setAttribute(FILL, style.fillStyle ? jsPlumbUtil.convertStyle(style.fillStyle, true) : NONE);
		node.setAttribute(STROKE, style.strokeStyle ? jsPlumbUtil.convertStyle(style.strokeStyle, true) : NONE);		
		if (style.lineWidth) {
			node.setAttribute(STROKE_WIDTH, style.lineWidth);
		}
	
		// in SVG there is a stroke-dasharray attribute we can set, and its syntax looks like
		// the syntax in VML but is actually kind of nasty: values are given in the pixel
		// coordinate space, whereas in VML they are multiples of the width of the stroked
		// line, which makes a lot more sense.  for that reason, jsPlumb is supporting both
		// the native svg 'stroke-dasharray' attribute, and also the 'dashstyle' concept from
		// VML, which will be the preferred method.  the code below this converts a dashstyle
		// attribute given in terms of stroke width into a pixel representation, by using the
		// stroke's lineWidth. 
		if (style[DASHSTYLE] && style[LINE_WIDTH] && !style[STROKE_DASHARRAY]) {
			var sep = style[DASHSTYLE].indexOf(",") == -1 ? " " : ",",
			parts = style[DASHSTYLE].split(sep),
			styleToUse = "";
			parts.forEach(function(p) {
				styleToUse += (Math.floor(p * style.lineWidth) + sep);
			});
			node.setAttribute(STROKE_DASHARRAY, styleToUse);
		}		
		else if(style[STROKE_DASHARRAY]) {
			node.setAttribute(STROKE_DASHARRAY, style[STROKE_DASHARRAY]);
		}
		
		// extra attributes such as join type, dash offset.
		for (var i in svgAttributeMap) {
			if (style[i]) {
				node.setAttribute(svgAttributeMap[i], style[i]);
			}
		}
	},
	_decodeFont = function(f) {
		var r = /([0-9].)(p[xt])\s(.*)/, 
			bits = f.match(r);

		return {size:bits[1] + bits[2], font:bits[3]};		
	},
	_classManip = function(el, add, clazz) {
		var classesToAddOrRemove = clazz.split(" "),
			className = el.className,
			curClasses = className.baseVal.split(" ");
			
		for (var i = 0; i < classesToAddOrRemove.length; i++) {
			if (add) {
				if (curClasses.indexOf(classesToAddOrRemove[i]) == -1)
					curClasses.push(classesToAddOrRemove[i]);
			}
			else {
				var idx = curClasses.indexOf(classesToAddOrRemove[i]);
				if (idx != -1)
					curClasses.splice(idx, 1);
			}
		}
		
		el.className.baseVal = curClasses.join(" ");
	},
	_addClass = function(el, clazz) { _classManip(el, true, clazz); },
	_removeClass = function(el, clazz) { _classManip(el, false, clazz); },
	_appendAtIndex = function(svg, path, idx) {
		if (svg.childNodes.length > idx) {
			svg.insertBefore(path, svg.childNodes[idx]);
		}
		else svg.appendChild(path);
	};
	
	/**
		utility methods for other objects to use.
	*/
	jsPlumbUtil.svg = {
		addClass:_addClass,
		removeClass:_removeClass,
		node:_node,
		attr:_attr,
		pos:_pos
	};
	
 // ************************** / SVG utility methods ********************************************	
	
	/*
	 * Base class for SVG components.
	 */	
	var SvgComponent = function(params) {
		var pointerEventsSpec = params.pointerEventsSpec || "all", renderer = {};
			
		jsPlumb.jsPlumbUIComponent.apply(this, params.originalArgs);
		this.canvas = null;this.path = null;this.svg = null; 
	
		var clazz = params.cssClass + " " + (params.originalArgs[0].cssClass || ""),		
			svgParams = {
				"style":"",
				"width":0,
				"height":0,
				"pointer-events":pointerEventsSpec,
				"position":"absolute"
			};				
		this.svg = _node("svg", svgParams);
		if (params.useDivWrapper) {
			this.canvas = document.createElement("div");
			this.canvas.style.position = "absolute";
			jsPlumbUtil.sizeElement(this.canvas,0,0,1,1);
			this.canvas.className = clazz;
		}
		else {
			_attr(this.svg, { "class":clazz });
			this.canvas = this.svg;
		}
			
		params._jsPlumb.appendElement(this.canvas, params.originalArgs[0].parent);
		if (params.useDivWrapper) this.canvas.appendChild(this.svg);
		
		// TODO this displayElement stuff is common between all components, across all
		// renderers.  would be best moved to jsPlumbUIComponent.
		var displayElements = [ this.canvas ];
		this.getDisplayElements = function() { 
			return displayElements; 
		};
		
		this.appendDisplayElement = function(el) {
			displayElements.push(el);
		};	
		
		this.paint = function(style, anchor, extents) {	   			
			if (style != null) {
				
				var xy = [ this.x, this.y ], wh = [ this.w, this.h ], p;
				if (extents != null) {
					if (extents.xmin < 0) xy[0] += extents.xmin;
					if (extents.ymin < 0) xy[1] += extents.ymin;
					wh[0] = extents.xmax + ((extents.xmin < 0) ? -extents.xmin : 0);
					wh[1] = extents.ymax + ((extents.ymin < 0) ? -extents.ymin : 0);
				}

				if (params.useDivWrapper) {					
					jsPlumbUtil.sizeElement(this.canvas, xy[0], xy[1], wh[0], wh[1]);
					xy[0] = 0; xy[1] = 0;
					p = _pos([ 0, 0 ]);
				}
				else
					p = _pos([ xy[0], xy[1] ]);
                
                renderer.paint.apply(this, arguments);		    			    	
                
		    	_attr(this.svg, {
	    			"style":p,
	    			"width": wh[0],
	    			"height": wh[1]
	    		});		    		    		    	
			}
	    };
		
		return {
			renderer:renderer
		};
	};
	jsPlumbUtil.extend(SvgComponent, jsPlumb.jsPlumbUIComponent, {
		cleanup:function() {
			jsPlumbUtil.removeElement(this.canvas);            
			this.svg = null;
			this.canvas = null;
			this.path = null;			
		},
		setVisible:function(v) {
			if (this.canvas) {
				this.canvas.style.display = v ? "block" : "none";
			}
			if (this.bgCanvas) {
				this.bgCanvas.style.display = v ? "block" : "none";
			}
		}
	});
	
	/*
	 * Base class for SVG connectors.
	 */ 
	var SvgConnector = jsPlumb.ConnectorRenderers.svg = function(params) {
		var self = this,
			_super = SvgComponent.apply(this, [ { 
				cssClass:params._jsPlumb.connectorClass, 
				originalArgs:arguments, 
				pointerEventsSpec:"none", 
				_jsPlumb:params._jsPlumb
			} ]);	

		/*this.pointOnPath = function(location, absolute) {
			if (!self.path) return [0,0];
			var p = absolute ? location : location * self.path.getTotalLength();
			return self.path.getPointAtLength(p);
		};*/			

		_super.renderer.paint = function(style, anchor, extents) {
			
			var segments = self.getSegments(), p = "", offset = [0,0];			
			if (extents.xmin < 0) offset[0] = -extents.xmin;
			if (extents.ymin < 0) offset[1] = -extents.ymin;			
			
			// create path from segments.	
			for (var i = 0; i < segments.length; i++) {
				p += jsPlumb.Segments.svg.SegmentRenderer.getPath(segments[i]);
				p += " ";
			}			
			
			var a = { 
					d:p,
					transform:"translate(" + offset[0] + "," + offset[1] + ")",
					"pointer-events":params["pointer-events"] || "visibleStroke"
				}, 
                outlineStyle = null,
                d = [self.x,self.y,self.w,self.h];						
			
			// outline style.  actually means drawing an svg object underneath the main one.
			if (style.outlineColor) {
				var outlineWidth = style.outlineWidth || 1,
					outlineStrokeWidth = style.lineWidth + (2 * outlineWidth);
				outlineStyle = jsPlumb.CurrentLibrary.extend({}, style);
				outlineStyle.strokeStyle = jsPlumbUtil.convertStyle(style.outlineColor);
				outlineStyle.lineWidth = outlineStrokeWidth;
				
				if (self.bgPath == null) {
					self.bgPath = _node("path", a);
			    	_appendAtIndex(self.svg, self.bgPath, 0);
		    		self.attachListeners(self.bgPath, self);
				}
				else {
					_attr(self.bgPath, a);
				}
				
				_applyStyles(self.svg, self.bgPath, outlineStyle, d, self);
			}			
			
	    	if (self.path == null) {
		    	self.path = _node("path", a);
		    	_appendAtIndex(self.svg, self.path, style.outlineColor ? 1 : 0);
	    		self.attachListeners(self.path, self);	    		    		
	    	}
	    	else {
	    		_attr(self.path, a);
	    	}
	    		    	
	    	_applyStyles(self.svg, self.path, style, d, self);
		};
		
		this.reattachListeners = function() {
			if (this.bgPath) this.reattachListenersForElement(this.bgPath, this);
			if (this.path) this.reattachListenersForElement(this.path, this);
		};
	};
	jsPlumbUtil.extend(jsPlumb.ConnectorRenderers.svg, SvgComponent);

// ******************************* svg segment renderer *****************************************************	
		
	jsPlumb.Segments.svg = {
		SegmentRenderer : {		
			getPath : function(segment) {
				return ({
					"Straight":function() {
						var d = segment.getCoordinates();
						return "M " + d.x1 + " " + d.y1 + " L " + d.x2 + " " + d.y2;	
					},
					"Bezier":function() {
						var d = segment.params;
						return "M " + d.x1 + " " + d.y1 + 
							" C " + d.cp1x + " " + d.cp1y + " " + d.cp2x + " " + d.cp2y + " " + d.x2 + " " + d.y2;			
					},
					"Arc":function() {
						var d = segment.params,
							laf = segment.sweep > Math.PI ? 1 : 0,
							sf = segment.anticlockwise ? 0 : 1;			

						return "M" + segment.x1 + " " + segment.y1 + " A " + segment.radius + " " + d.r + " 0 " + laf + "," + sf + " " + segment.x2 + " " + segment.y2;
					}
				})[segment.type]();	
			}
		}
	};
	
// ******************************* /svg segments *****************************************************
   
    /*
	 * Base class for SVG endpoints.
	 */
	var SvgEndpoint = window.SvgEndpoint = function(params) {
		var _super = SvgComponent.apply(this, [ {
				cssClass:params._jsPlumb.endpointClass, 
				originalArgs:arguments, 
				pointerEventsSpec:"all",
				useDivWrapper:true,
				_jsPlumb:params._jsPlumb
			} ]);
			
		_super.renderer.paint = function(style) {
			var s = jsPlumb.extend({}, style);
			if (s.outlineColor) {
				s.strokeWidth = s.outlineWidth;
				s.strokeStyle = jsPlumbUtil.convertStyle(s.outlineColor, true);
			}
			
			if (this.node == null) {
				this.node = this.makeNode(s);
				this.svg.appendChild(this.node);
				this.attachListeners(this.node, this);
			}
			else if (this.updateNode != null) {
				this.updateNode(this.node);
			}
			_applyStyles(this.svg, this.node, s, [ this.x, this.y, this.w, this.h ], this);
			_pos(this.node, [ this.x, this.y ]);
		}.bind(this);
				
	};
	jsPlumbUtil.extend(SvgEndpoint, SvgComponent, {
		reattachListeners : function() {
			if (this.node) this.reattachListenersForElement(this.node, this);
		}
	});
	
	/*
	 * SVG Dot Endpoint
	 */
	jsPlumb.Endpoints.svg.Dot = function() {
		jsPlumb.Endpoints.Dot.apply(this, arguments);
		SvgEndpoint.apply(this, arguments);		
		this.makeNode = function(style) { 
			return _node("circle", {
                "cx"	:	this.w / 2,
                "cy"	:	this.h / 2,
                "r"		:	this.radius
            });			
		};
		this.updateNode = function(node) {
			_attr(node, {
				"cx":this.w / 2,
				"cy":this.h  / 2,
				"r":this.radius
			});
		};
	};
	jsPlumbUtil.extend(jsPlumb.Endpoints.svg.Dot, [jsPlumb.Endpoints.Dot, SvgEndpoint]);
	
	/*
	 * SVG Rectangle Endpoint 
	 */
	jsPlumb.Endpoints.svg.Rectangle = function() {
		jsPlumb.Endpoints.Rectangle.apply(this, arguments);
		SvgEndpoint.apply(this, arguments);		
		this.makeNode = function(style) {
			return _node("rect", {
				"width"     :   this.w,
				"height"    :   this.h
			});
		};
		this.updateNode = function(node) {
			_attr(node, {
				"width":this.w,
				"height":this.h
			});
		};			
	};		
	jsPlumbUtil.extend(jsPlumb.Endpoints.svg.Rectangle, [jsPlumb.Endpoints.Rectangle, SvgEndpoint]);
	
	/*
	 * SVG Image Endpoint is the default image endpoint.
	 */
	jsPlumb.Endpoints.svg.Image = jsPlumb.Endpoints.Image;
	/*
	 * Blank endpoint in svg renderer is the default Blank endpoint.
	 */
	jsPlumb.Endpoints.svg.Blank = jsPlumb.Endpoints.Blank;	
	/*
	 * Label overlay in svg renderer is the default Label overlay.
	 */
	jsPlumb.Overlays.svg.Label = jsPlumb.Overlays.Label;
	/*
	 * Custom overlay in svg renderer is the default Custom overlay.
	 */
	jsPlumb.Overlays.svg.Custom = jsPlumb.Overlays.Custom;
		
	var AbstractSvgArrowOverlay = function(superclass, originalArgs) {
    	superclass.apply(this, originalArgs);
    	jsPlumb.jsPlumbUIComponent.apply(this, originalArgs);
        this.isAppendedAtTopLevel = false;
    	var self = this;
    	this.path = null;
    	this.paint = function(params, containerExtents) {
    		// only draws on connections, not endpoints.
    		if (params.component.svg && containerExtents) {
	    		if (this.path == null) {
	    			this.path = _node("path", {
	    				"pointer-events":"all"	
	    			});
	    			params.component.svg.appendChild(this.path);
	    			
	    			this.attachListeners(this.path, params.component);
	    			this.attachListeners(this.path, this);
	    		}
	    		var clazz = originalArgs && (originalArgs.length == 1) ? (originalArgs[0].cssClass || "") : "",
	    			offset = [0,0];

	    		if (containerExtents.xmin < 0) offset[0] = -containerExtents.xmin;
	    		if (containerExtents.ymin < 0) offset[1] = -containerExtents.ymin;
	    		
	    		_attr(this.path, { 
	    			"d"			:	makePath(params.d),
	    			"class" 	:	clazz,
	    			stroke 		: 	params.strokeStyle ? params.strokeStyle : null,
	    			fill 		: 	params.fillStyle ? params.fillStyle : null,
	    			transform	: 	"translate(" + offset[0] + "," + offset[1] + ")"
	    		});    		
	    	}
    	};
    	var makePath = function(d) {
    		return "M" + d.hxy.x + "," + d.hxy.y +
    				" L" + d.tail[0].x + "," + d.tail[0].y + 
    				" L" + d.cxy.x + "," + d.cxy.y + 
    				" L" + d.tail[1].x + "," + d.tail[1].y + 
    				" L" + d.hxy.x + "," + d.hxy.y;
    	};
    	this.reattachListeners = function() {
			if (this.path) this.reattachListenersForElement(this.path, this);
		};		
    };
    jsPlumbUtil.extend(AbstractSvgArrowOverlay, [jsPlumb.jsPlumbUIComponent, jsPlumb.Overlays.AbstractOverlay], {
    	cleanup : function() {
    		if (this.path != null) jsPlumb.CurrentLibrary.removeElement(this.path);
    	},
    	setVisible:function(v) {
    		if(this.path != null) (this.path.style.display = (v ? "block" : "none"));
    	}
    });
    
    jsPlumb.Overlays.svg.Arrow = function() {
    	AbstractSvgArrowOverlay.apply(this, [jsPlumb.Overlays.Arrow, arguments]);    	
    };
    jsPlumbUtil.extend(jsPlumb.Overlays.svg.Arrow, [ jsPlumb.Overlays.Arrow, AbstractSvgArrowOverlay ]);
    
    jsPlumb.Overlays.svg.PlainArrow = function() {
    	AbstractSvgArrowOverlay.apply(this, [jsPlumb.Overlays.PlainArrow, arguments]);    	
    };
    jsPlumbUtil.extend(jsPlumb.Overlays.svg.PlainArrow, [ jsPlumb.Overlays.PlainArrow, AbstractSvgArrowOverlay ]);
    
    jsPlumb.Overlays.svg.Diamond = function() {
    	AbstractSvgArrowOverlay.apply(this, [jsPlumb.Overlays.Diamond, arguments]);    	
    };
    jsPlumbUtil.extend(jsPlumb.Overlays.svg.Diamond, [ jsPlumb.Overlays.Diamond, AbstractSvgArrowOverlay ]);

    // a test
    jsPlumb.Overlays.svg.GuideLines = function() {
        var path = null, self = this, p1_1, p1_2;        
        jsPlumb.Overlays.GuideLines.apply(this, arguments);
        this.paint = function(params, containerExtents) {
    		if (path == null) {
    			path = _node("path");
    			params.connector.svg.appendChild(path);
    			self.attachListeners(path, params.connector);
    			self.attachListeners(path, self);

                p1_1 = _node("path");
    			params.connector.svg.appendChild(p1_1);
    			self.attachListeners(p1_1, params.connector);
    			self.attachListeners(p1_1, self);

                p1_2 = _node("path");
    			params.connector.svg.appendChild(p1_2);
    			self.attachListeners(p1_2, params.connector);
    			self.attachListeners(p1_2, self);
    		}

    		var offset =[0,0];
    		if (containerExtents.xmin < 0) offset[0] = -containerExtents.xmin;
    		if (containerExtents.ymin < 0) offset[1] = -containerExtents.ymin;

    		_attr(path, {
    			"d"		:	makePath(params.head, params.tail),
    			stroke 	: 	"red",
    			fill 	: 	null,
    			transform:"translate(" + offset[0] + "," + offset[1] + ")"
    		});

            _attr(p1_1, {
    			"d"		:	makePath(params.tailLine[0], params.tailLine[1]),
    			stroke 	: 	"blue",
    			fill 	: 	null,
    			transform:"translate(" + offset[0] + "," + offset[1] + ")"
    		});

            _attr(p1_2, {
    			"d"		:	makePath(params.headLine[0], params.headLine[1]),
    			stroke 	: 	"green",
    			fill 	: 	null,
    			transform:"translate(" + offset[0] + "," + offset[1] + ")"
    		});
    	};

        var makePath = function(d1, d2) {
            return "M " + d1.x + "," + d1.y +
                   " L" + d2.x + "," + d2.y;
        };        
    };
    jsPlumbUtil.extend(jsPlumb.Overlays.svg.GuideLines, jsPlumb.Overlays.GuideLines);
})();
/*
 * jsPlumb
 * 
 * Title:jsPlumb 1.5.5
 * 
 * Provides a way to visually connect elements on an HTML page, using either SVG, Canvas
 * elements, or VML.  
 * 
 * This file contains the VML renderers.
 *
 * Copyright (c) 2010 - 2013 Simon Porritt (http://jsplumb.org)
 * 
 * http://jsplumb.org
 * http://github.com/sporritt/jsplumb
 * http://code.google.com/p/jsplumb
 * 
 * Dual licensed under the MIT and GPL2 licenses.
 */

;(function() {
	
	// http://ajaxian.com/archives/the-vml-changes-in-ie-8
	// http://www.nczonline.net/blog/2010/01/19/internet-explorer-8-document-and-browser-modes/
	// http://www.louisremi.com/2009/03/30/changes-in-vml-for-ie8-or-what-feature-can-the-ie-dev-team-break-for-you-today/
	
	var vmlAttributeMap = {
		"stroke-linejoin":"joinstyle",
		"joinstyle":"joinstyle",		
		"endcap":"endcap",
		"miterlimit":"miterlimit"
	},
	jsPlumbStylesheet = null;
	
	if (document.createStyleSheet && document.namespaces) {			
		
		var ruleClasses = [
				".jsplumb_vml", "jsplumb\\:textbox", "jsplumb\\:oval", "jsplumb\\:rect", 
				"jsplumb\\:stroke", "jsplumb\\:shape", "jsplumb\\:group"
			],
			rule = "behavior:url(#default#VML);position:absolute;";

		jsPlumbStylesheet = document.createStyleSheet();

		for (var i = 0; i < ruleClasses.length; i++)
			jsPlumbStylesheet.addRule(ruleClasses[i], rule);

		// in this page it is also mentioned that IE requires the extra arg to the namespace
		// http://www.louisremi.com/2009/03/30/changes-in-vml-for-ie8-or-what-feature-can-the-ie-dev-team-break-for-you-today/
		// but someone commented saying they didn't need it, and it seems jsPlumb doesnt need it either.
		// var iev = document.documentMode;
		//if (!iev || iev < 8)
			document.namespaces.add("jsplumb", "urn:schemas-microsoft-com:vml");
		//else
		//	document.namespaces.add("jsplumb", "urn:schemas-microsoft-com:vml", "#default#VML");
	}
	
	jsPlumb.vml = {};
	
	var scale = 1000,

    _groupMap = {},
    _getGroup = function(container, connectorClass) {
        var id = jsPlumb.getId(container),
            g = _groupMap[id];
        if(!g) {
            g = _node("group", [0,0,scale, scale], {"class":connectorClass});
            //g.style.position=absolute;
            //g["coordsize"] = "1000,1000";
            g.style.backgroundColor="red";
            _groupMap[id] = g;
            //jsPlumb.appendElement(g, container);  // todo if this gets reinstated, remember to use the current jsplumb instance.
            //jsPlumb.CurrentLibrary.getDOMElement(container).appendChild(g);
            //document.body.appendChild(g);
        }
        return g;
    },
	_atts = function(o, atts) {
		for (var i in atts) { 
			// IE8 fix: setattribute does not work after an element has been added to the dom!
			// http://www.louisremi.com/2009/03/30/changes-in-vml-for-ie8-or-what-feature-can-the-ie-dev-team-break-for-you-today/
			//o.setAttribute(i, atts[i]);

			/*There is an additional problem when accessing VML elements by using get/setAttribute. The simple solution is following:

			if (document.documentMode==8) {
			ele.opacity=1;
			} else {
			ele.setAttribute(‘opacity’,1);
			}
			*/

			o[i] = atts[i];
		}
	},
	_node = function(name, d, atts, parent, _jsPlumb, deferToJsPlumbContainer) {
		atts = atts || {};
		var o = document.createElement("jsplumb:" + name);
		if (deferToJsPlumbContainer)
			_jsPlumb.appendElement(o, parent);
		else
			jsPlumb.CurrentLibrary.appendElement(o, parent);
		o.className = (atts["class"] ? atts["class"] + " " : "") + "jsplumb_vml";
		_pos(o, d);
		_atts(o, atts);
		return o;
	},
	_pos = function(o,d, zIndex) {
		o.style.left = d[0] + "px";		
		o.style.top =  d[1] + "px";
		o.style.width= d[2] + "px";
		o.style.height= d[3] + "px";
		o.style.position = "absolute";
		if (zIndex)
			o.style.zIndex = zIndex;
	},
	_conv = jsPlumb.vml.convertValue = function(v) {
		return Math.floor(v * scale);
	},	
	// tests if the given style is "transparent" and then sets the appropriate opacity node to 0 if so,
	// or 1 if not.  TODO in the future, support variable opacity.
	_maybeSetOpacity = function(styleToWrite, styleToCheck, type, component) {
		if ("transparent" === styleToCheck)
			component.setOpacity(type, "0.0");
		else
			component.setOpacity(type, "1.0");
	},
	_applyStyles = function(node, style, component, _jsPlumb) {
		var styleToWrite = {};
		if (style.strokeStyle) {
			styleToWrite.stroked = "true";
			var strokeColor = jsPlumbUtil.convertStyle(style.strokeStyle, true);
			styleToWrite.strokecolor = strokeColor;
			_maybeSetOpacity(styleToWrite, strokeColor, "stroke", component);
			styleToWrite.strokeweight = style.lineWidth + "px";
		}
		else styleToWrite.stroked = "false";
		
		if (style.fillStyle) {
			styleToWrite.filled = "true";
			var fillColor = jsPlumbUtil.convertStyle(style.fillStyle, true);
			styleToWrite.fillcolor = fillColor;
			_maybeSetOpacity(styleToWrite, fillColor, "fill", component);
		}
		else styleToWrite.filled = "false";
		
		if(style.dashstyle) {
			if (component.strokeNode == null) {
				component.strokeNode = _node("stroke", [0,0,0,0], { dashstyle:style.dashstyle }, node, _jsPlumb);				
			}
			else
				component.strokeNode.dashstyle = style.dashstyle;
		}					
		else if (style["stroke-dasharray"] && style.lineWidth) {
			var sep = style["stroke-dasharray"].indexOf(",") == -1 ? " " : ",",
			parts = style["stroke-dasharray"].split(sep),
			styleToUse = "";
			for(var i = 0; i < parts.length; i++) {
				styleToUse += (Math.floor(parts[i] / style.lineWidth) + sep);
			}
			if (component.strokeNode == null) {
				component.strokeNode = _node("stroke", [0,0,0,0], { dashstyle:styleToUse }, node, _jsPlumb);				
			}
			else
				component.strokeNode.dashstyle = styleToUse;
		}
		
		_atts(node, styleToWrite);
	},
	/*
	 * Base class for Vml endpoints and connectors. Extends jsPlumbUIComponent. 
	 */
	VmlComponent = function() {				
		var self = this, renderer = {};
		jsPlumb.jsPlumbUIComponent.apply(this, arguments);	

		this.opacityNodes = {
			"stroke":null,
			"fill":null
		};
		this.initOpacityNodes = function(vml) {
			self.opacityNodes.stroke = _node("stroke", [0,0,1,1], {opacity:"0.0"}, vml, self._jsPlumb.instance);
			self.opacityNodes.fill = _node("fill", [0,0,1,1], {opacity:"0.0"}, vml, self._jsPlumb.instance);							
		};
		this.setOpacity = function(type, value) {
			var node = self.opacityNodes[type];
			if (node) node.opacity = "" + value;
		};
		var displayElements = [ ];
		this.getDisplayElements = function() { 
			return displayElements; 
		};
		
		this.appendDisplayElement = function(el, doNotAppendToCanvas) {
			if (!doNotAppendToCanvas) self.canvas.parentNode.appendChild(el);
			displayElements.push(el);
		};
	};
	jsPlumbUtil.extend(VmlComponent, jsPlumb.jsPlumbUIComponent, {
		cleanup:function() {			
			if (this.bgCanvas) jsPlumbUtil.removeElement(this.bgCanvas);
			jsPlumbUtil.removeElement(this.canvas);            				
		}
	});

	/*
	 * Base class for Vml connectors. extends VmlComponent.
	 */
	var VmlConnector = jsPlumb.ConnectorRenderers.vml = function(params) {		
		this.strokeNode = null;
		this.canvas = null;
		VmlComponent.apply(this, arguments);
		var clazz = this._jsPlumb.instance.connectorClass + (params.cssClass ? (" " + params.cssClass) : "");
		this.paint = function(style) {		
			if (style !== null) {			

				// we need to be at least 1 pixel in each direction, because otherwise coordsize gets set to
				// 0 and overlays cannot paint.
				this.w = Math.max(this.w, 1);
				this.h = Math.max(this.h, 1);

				var segments = this.getSegments(), p = { "path":"" },
                    d = [this.x, this.y, this.w, this.h];
				
				// create path from segments.	
				for (var i = 0; i < segments.length; i++) {
					p.path += jsPlumb.Segments.vml.SegmentRenderer.getPath(segments[i]);
					p.path += " ";
				}

                //*
				if (style.outlineColor) {
					var outlineWidth = style.outlineWidth || 1,
					outlineStrokeWidth = style.lineWidth + (2 * outlineWidth),
					outlineStyle = {
						strokeStyle : jsPlumbUtil.convertStyle(style.outlineColor),
						lineWidth : outlineStrokeWidth
					};
					for (var aa in vmlAttributeMap) outlineStyle[aa] = style[aa];
					
					if (this.bgCanvas == null) {						
						p["class"] = clazz;
						p.coordsize = (d[2] * scale) + "," + (d[3] * scale);
						this.bgCanvas = _node("shape", d, p, params.parent, this._jsPlumb.instance, true);						
						_pos(this.bgCanvas, d);
						this.appendDisplayElement(this.bgCanvas, true);	
						this.attachListeners(this.bgCanvas, this);					
						this.initOpacityNodes(this.bgCanvas, ["stroke"]);		
					}
					else {
						p.coordsize = (d[2] * scale) + "," + (d[3] * scale);
						_pos(this.bgCanvas, d);
						_atts(this.bgCanvas, p);
					}
					
					_applyStyles(this.bgCanvas, outlineStyle, this);
				}
				//*/
				
				if (this.canvas == null) {										
					p["class"] = clazz;
					p.coordsize = (d[2] * scale) + "," + (d[3] * scale);					
					this.canvas = _node("shape", d, p, params.parent, this._jsPlumb.instance, true);					                
                    //var group = _getGroup(params.parent);                   // test of append everything to a group
                    //group.appendChild(self.canvas);                           // sort of works but not exactly;
					//params["_jsPlumb"].appendElement(self.canvas, params.parent);    //before introduction of groups

					this.appendDisplayElement(this.canvas, true);										
					this.attachListeners(this.canvas, this);					
					this.initOpacityNodes(this.canvas, ["stroke"]);		
				}
				else {
					p.coordsize = (d[2] * scale) + "," + (d[3] * scale);
					_pos(this.canvas, d);
					_atts(this.canvas, p);
				}
				
				_applyStyles(this.canvas, style, this, this._jsPlumb.instance);
			}
		};	
				
	};
	jsPlumbUtil.extend(VmlConnector, VmlComponent, {
		reattachListeners : function() {
			if (this.canvas) this.reattachListenersForElement(this.canvas, this);
		},
		setVisible:function(v) {
			if (this.canvas) {
				this.canvas.style.display = v ? "block" : "none";
			}
			if (this.bgCanvas) {
				this.bgCanvas.style.display = v ? "block" : "none";
			}
		}
	});	
	
	/*
	 * 
	 * Base class for Vml Endpoints. extends VmlComponent.
	 * 
	 */
	var VmlEndpoint = window.VmlEndpoint = function(params) {
		VmlComponent.apply(this, arguments);
		this._jsPlumb.vml = null;//, opacityStrokeNode = null, opacityFillNode = null;
		this.canvas = document.createElement("div");
		this.canvas.style.position = "absolute";
		this._jsPlumb.clazz = this._jsPlumb.instance.endpointClass + (params.cssClass ? (" " + params.cssClass) : "");

		// TODO vml endpoint adds class to VML at constructor time.  but the addClass method adds VML
		// to the enclosing DIV. what to do?  seems like it would be better to just target the div.
		// HOWEVER...vml connection has no containing div.  why not? it feels like it should.

		//var group = _getGroup(params.parent);
        //group.appendChild(self.canvas);
		params._jsPlumb.appendElement(this.canvas, params.parent);

		this.paint = function(style, anchor) {
			var p = { }, vml = this._jsPlumb.vml;				
			
			jsPlumbUtil.sizeElement(this.canvas, this.x, this.y, this.w, this.h);
			if (this._jsPlumb.vml == null) {
				p["class"] = this._jsPlumb.clazz;
				vml = this._jsPlumb.vml = this.getVml([0,0, this.w, this.h], p, anchor, this.canvas, this._jsPlumb.instance);				
				this.attachListeners(vml, this);

				this.appendDisplayElement(vml, true);
				this.appendDisplayElement(this.canvas, true);
				
				this.initOpacityNodes(vml, ["fill"]);			
			}
			else {				
				_pos(vml, [0,0, this.w, this.h]);
				_atts(vml, p);
			}
			
			_applyStyles(vml, style, this);
		};		
	};
	jsPlumbUtil.extend(VmlEndpoint, VmlComponent, {
		reattachListeners : function() {
			if (this._jsPlumb.vml) this.reattachListenersForElement(this._jsPlumb.vml, this);
		}
	});
	
// ******************************* vml segments *****************************************************	
		
	jsPlumb.Segments.vml = {
		SegmentRenderer : {		
			getPath : function(segment) {
				return ({
					"Straight":function(segment) {
						var d = segment.params;
						return "m" + _conv(d.x1) + "," + _conv(d.y1) + " l" + _conv(d.x2) + "," + _conv(d.y2) + " e";
					},
					"Bezier":function(segment) {
						var d = segment.params;
						return "m" + _conv(d.x1) + "," + _conv(d.y1) + 
				   			" c" + _conv(d.cp1x) + "," + _conv(d.cp1y) + "," + _conv(d.cp2x) + "," + _conv(d.cp2y) + "," + _conv(d.x2) + "," + _conv(d.y2) + " e";
					},
					"Arc":function(segment) {					
						var d = segment.params,
							xmin = Math.min(d.x1, d.x2),
							xmax = Math.max(d.x1, d.x2),
							ymin = Math.min(d.y1, d.y2),
							ymax = Math.max(d.y1, d.y2),														
							sf = segment.anticlockwise ? 1 : 0,
							pathType = (segment.anticlockwise ? "at " : "wa "),
							makePosString = function() {
								if (d.loopback)
									return "0,0," + _conv(2*d.r) + "," + _conv(2 * d.r);

								var xy = [
										null,
										[ function() { return [xmin, ymin ];}, function() { return [xmin - d.r, ymin - d.r ];}],
										[ function() { return [xmin - d.r, ymin ];}, function() { return [xmin, ymin - d.r ];}],
										[ function() { return [xmin - d.r, ymin - d.r ];}, function() { return [xmin, ymin ];}],
										[ function() { return [xmin, ymin - d.r ];}, function() { return [xmin - d.r, ymin ];}]
									][segment.segment][sf]();

								return _conv(xy[0]) + "," + _conv(xy[1]) + "," + _conv(xy[0] + (2*d.r)) + "," + _conv(xy[1] + (2*d.r));
							};

						return pathType + " " + makePosString() + "," + _conv(d.x1) + "," + _conv(d.y1) + "," + _conv(d.x2) + "," + _conv(d.y2) + " e";												
					}
						
				})[segment.type](segment);	
			}
		}
	};
	
// ******************************* /vml segments *****************************************************	

// ******************************* vml endpoints *****************************************************
	
	jsPlumb.Endpoints.vml.Dot = function() {
		jsPlumb.Endpoints.Dot.apply(this, arguments);
		VmlEndpoint.apply(this, arguments);
		this.getVml = function(d, atts, anchor, parent, _jsPlumb) { return _node("oval", d, atts, parent, _jsPlumb); };
	};
	jsPlumbUtil.extend(jsPlumb.Endpoints.vml.Dot, VmlEndpoint);
	
	jsPlumb.Endpoints.vml.Rectangle = function() {
		jsPlumb.Endpoints.Rectangle.apply(this, arguments);
		VmlEndpoint.apply(this, arguments);
		this.getVml = function(d, atts, anchor, parent, _jsPlumb) { return _node("rect", d, atts, parent, _jsPlumb); };
	};
	jsPlumbUtil.extend(jsPlumb.Endpoints.vml.Rectangle, VmlEndpoint);
	
	/*
	 * VML Image Endpoint is the same as the default image endpoint.
	 */
	jsPlumb.Endpoints.vml.Image = jsPlumb.Endpoints.Image;
	
	/**
	 * placeholder for Blank endpoint in vml renderer.
	 */
	jsPlumb.Endpoints.vml.Blank = jsPlumb.Endpoints.Blank;
	
// ******************************* /vml endpoints *****************************************************	

// ******************************* vml overlays *****************************************************
	
	/**
	 * VML Label renderer. uses the default label renderer (which adds an element to the DOM)
	 */
	jsPlumb.Overlays.vml.Label  = jsPlumb.Overlays.Label;
	
	/**
	 * VML Custom renderer. uses the default Custom renderer (which adds an element to the DOM)
	 */
	jsPlumb.Overlays.vml.Custom = jsPlumb.Overlays.Custom;
	
	/**
	 * Abstract VML arrow superclass
	 */
	var AbstractVmlArrowOverlay = function(superclass, originalArgs) {
    	superclass.apply(this, originalArgs);
    	VmlComponent.apply(this, originalArgs);
    	var self = this, path = null;
    	self.canvas = null; 
    	self.isAppendedAtTopLevel = true;
    	var getPath = function(d) {    		
    		return "m " + _conv(d.hxy.x) + "," + _conv(d.hxy.y) +
    		       " l " + _conv(d.tail[0].x) + "," + _conv(d.tail[0].y) + 
    		       " " + _conv(d.cxy.x) + "," + _conv(d.cxy.y) + 
    		       " " + _conv(d.tail[1].x) + "," + _conv(d.tail[1].y) + 
    		       " x e";
    	};
    	this.paint = function(params, containerExtents) {
    		// only draws for connectors, not endpoints.
    		if (params.component.canvas && containerExtents) {
	    		var p = {}, d = params.d, connector = params.component;
				if (params.strokeStyle) {
					p.stroked = "true";
					p.strokecolor = jsPlumbUtil.convertStyle(params.strokeStyle, true);    				
				}
				if (params.lineWidth) p.strokeweight = params.lineWidth + "px";
				if (params.fillStyle) {
					p.filled = "true";
					p.fillcolor = params.fillStyle;
				}			

				var xmin = Math.min(d.hxy.x, d.tail[0].x, d.tail[1].x, d.cxy.x),
					ymin = Math.min(d.hxy.y, d.tail[0].y, d.tail[1].y, d.cxy.y),
					xmax = Math.max(d.hxy.x, d.tail[0].x, d.tail[1].x, d.cxy.x),
					ymax = Math.max(d.hxy.y, d.tail[0].y, d.tail[1].y, d.cxy.y),
					w = Math.abs(xmax - xmin),
					h = Math.abs(ymax - ymin),
					dim = [xmin, ymin, w, h];

				// for VML, we create overlays using shapes that have the same dimensions and
				// coordsize as their connector - overlays calculate themselves relative to the
				// connector (it's how it's been done since the original canvas implementation, because
				// for canvas that makes sense).
				p.path = getPath(d);
				p.coordsize = (connector.w * scale) + "," + (connector.h * scale);			
				
				dim[0] = connector.x;
				dim[1] = connector.y;
				dim[2] = connector.w;
				dim[3] = connector.h;
				
	    		if (self.canvas == null) {
	    			var overlayClass = connector._jsPlumb.overlayClass || "";
	    			var clazz = originalArgs && (originalArgs.length == 1) ? (originalArgs[0].cssClass || "") : "";
	    			p["class"] = clazz + " " + overlayClass;
					self.canvas = _node("shape", dim, p, connector.canvas.parentNode, connector._jsPlumb.instance, true);								
					connector.appendDisplayElement(self.canvas, true);
					self.attachListeners(self.canvas, connector);
					self.attachListeners(self.canvas, self);
				}
				else {				
					_pos(self.canvas, dim);
					_atts(self.canvas, p);
				}    		
			}
    	};
    	
    	this.reattachListeners = function() {
			if (self.canvas) self.reattachListenersForElement(self.canvas, self);
		};

		this.cleanup = function() {
    		if (self.canvas != null) jsPlumb.CurrentLibrary.removeElement(self.canvas);
    	};
    };
    jsPlumbUtil.extend(AbstractVmlArrowOverlay, [VmlComponent, jsPlumb.Overlays.AbstractOverlay], {
    	setVisible : function(state) {
    	    this.canvas.style.display = state ? "block" : "none";
    	}
    });
	
	jsPlumb.Overlays.vml.Arrow = function() {
    	AbstractVmlArrowOverlay.apply(this, [jsPlumb.Overlays.Arrow, arguments]);    	
    };
    jsPlumbUtil.extend(jsPlumb.Overlays.vml.Arrow, [ jsPlumb.Overlays.Arrow, AbstractVmlArrowOverlay ]);
    
    jsPlumb.Overlays.vml.PlainArrow = function() {
    	AbstractVmlArrowOverlay.apply(this, [jsPlumb.Overlays.PlainArrow, arguments]);    	
    };
    jsPlumbUtil.extend(jsPlumb.Overlays.vml.PlainArrow, [ jsPlumb.Overlays.PlainArrow, AbstractVmlArrowOverlay ]);
    
    jsPlumb.Overlays.vml.Diamond = function() {
    	AbstractVmlArrowOverlay.apply(this, [jsPlumb.Overlays.Diamond, arguments]);    	
    };
    jsPlumbUtil.extend(jsPlumb.Overlays.vml.Diamond, [ jsPlumb.Overlays.Diamond, AbstractVmlArrowOverlay ]);
    
// ******************************* /vml overlays *****************************************************    
    
})();
/*
 * jsPlumb
 * 
 * Title:jsPlumb 1.5.5
 * 
 * Provides a way to visually connect elements on an HTML page, using either SVG, Canvas
 * elements, or VML.  
 * 
 * This file contains the jQuery adapter.
 *
 * Copyright (c) 2010 - 2013 Simon Porritt (http://jsplumb.org)
 * 
 * http://jsplumb.org
 * http://github.com/sporritt/jsplumb
 * http://code.google.com/p/jsplumb
 * 
 * Dual licensed under the MIT and GPL2 licenses.
 */ 
/* 
 * the library specific functions, such as find offset, get id, get attribute, extend etc.  
 * the full list is:
 * 
 * addClass				adds a class to the given element
 * animate				calls the underlying library's animate functionality
 * appendElement		appends a child element to a parent element.
 * bind					binds some event to an element
 * dragEvents			a dictionary of event names
 * extend				extend some js object with another.  probably not overly necessary; jsPlumb could just do this internally.
 * getDragObject		gets the object that is being dragged, by extracting it from the arguments passed to a drag callback
 * getDragScope			gets the drag scope for a given element.
 * getDropScope			gets the drop scope for a given element.
 * getElementObject		turns an id or dom element into an element object of the underlying library's type.
 * getOffset			gets an element's offset
 * getOriginalEvent     gets the original browser event from some wrapper event
 * getPageXY			gets the page event's xy location.
 * getParent			gets the parent of some element.
 * getScrollLeft		gets an element's scroll left.  TODO: is this actually used?  will it be?
 * getScrollTop			gets an element's scroll top.  TODO: is this actually used?  will it be?
 * getSize				gets an element's size.
 * getUIPosition		gets the position of some element that is currently being dragged, by extracting it from the arguments passed to a drag callback.
 * hasClass				returns whether or not the given element has the given class.
 * initDraggable		initializes an element to be draggable 
 * initDroppable		initializes an element to be droppable
 * isDragSupported		returns whether or not drag is supported for some element.
 * isDropSupported		returns whether or not drop is supported for some element.
 * removeClass			removes a class from a given element.
 * removeElement		removes some element completely from the DOM. 
 * setDragFilter		sets a filter for some element that indicates areas of the element that should not respond to dragging.
 * setDraggable			sets whether or not some element should be draggable.
 * setDragScope			sets the drag scope for a given element.
 * setOffset			sets the offset of some element.
 * trigger				triggers some event on an element.
 * unbind				unbinds some listener from some element.
 */
(function($) {	
	
	//var getBoundingClientRectSupported = "getBoundingClientRect" in document.documentElement;

	var _getElementObject = function(el) {			
		return typeof(el) == "string" ? $("#" + el) : $(el);
	};

	jsPlumb.CurrentLibrary = {					        
		
		/**
		 * adds the given class to the element object.
		 */
		addClass : function(el, clazz) {
			el = _getElementObject(el);
			try {
				if (el[0].className.constructor == SVGAnimatedString) {
					jsPlumbUtil.svg.addClass(el[0], clazz);                    
				}
			}
			catch (e) {
				// SVGAnimatedString not supported; no problem.
			}
            try {                
                el.addClass(clazz);
            }
            catch (e) {
                // you probably have jQuery 1.9 and Firefox.  
            }
		},
		
		/**
		 * animates the given element.
		 */
		animate : function(el, properties, options) {
			el.animate(properties, options);
		},				
		
		/**
		 * appends the given child to the given parent.

TODO: REMOVE!

		 */
		appendElement : function(child, parent) {
			_getElementObject(parent).append(child);			
		},   

		/**
		* executes an ajax call.
		*/
		ajax : function(params) {
			params = params || {};
			params.type = params.type || "get";
			$.ajax(params);
		},
		
		/**
		 * event binding wrapper.  it just so happens that jQuery uses 'bind' also.  yui3, for example,
		 * uses 'on'.
		 */
		bind : function(el, event, callback) {
			el = _getElementObject(el);
			el.bind(event, callback);
		},

		destroyDraggable : function(el) {
			if ($(el).data("draggable"))
				$(el).draggable("destroy");
		},

		destroyDroppable : function(el) {
			if ($(el).data("droppable"))
				$(el).droppable("destroy");
		},
		
		/**
         * mapping of drag events for jQuery
         */
		dragEvents : {
			'start':'start', 'stop':'stop', 'drag':'drag', 'step':'step',
			'over':'over', 'out':'out', 'drop':'drop', 'complete':'complete'
		},
				
		/**
		 * wrapper around the library's 'extend' functionality (which it hopefully has.
		 * otherwise you'll have to do it yourself). perhaps jsPlumb could do this for you
		 * instead.  it's not like its hard.
		 */
		extend : function(o1, o2) {
			return $.extend(o1, o2);
		},		
		
		getClientXY : function(eventObject) {
			return [eventObject.clientX, eventObject.clientY];
		},
		
		/**
		 * takes the args passed to an event function and returns you an object representing that which is being dragged.
		 */
		getDragObject : function(eventArgs) {
			return eventArgs[1].draggable || eventArgs[1].helper;
		},
		
		getDragScope : function(el) {
			return $(el).draggable("option", "scope");
		},

		getDropEvent : function(args) {
			return args[0];
		},
		
		getDropScope : function(el) {
			return $(el).droppable("option", "scope");		
		},

		/**
		* gets a DOM element from the given input, which might be a string (in which case we just do document.getElementById),
		* a selector (in which case we return el[0]), or a DOM element already (we assume this if it's not either of the other
		* two cases).  this is the opposite of getElementObject below.
		*/
		getDOMElement : function(el) {
			if (el == null) return null;
			if (typeof(el) == "string") return document.getElementById(el);
			else if (el.context || el.length != null) return el[0];
			else return el;
		},
	
		/**
		 * gets an "element object" from the given input.  this means an object that is used by the
		 * underlying library on which jsPlumb is running.  'el' may already be one of these objects,
		 * in which case it is returned as-is.  otherwise, 'el' is a String, the library's lookup 
		 * function is used to find the element, using the given String as the element's id.
		 * 
		 */		
		getElementObject : _getElementObject,
		
		/**
		  * gets the offset for the element object.  this should return a js object like this:
		  *
		  * { left:xxx, top: xxx }
		 */
		getOffset : function(el) {
			return el.offset();
		},

		getOriginalEvent : function(e) {
			return e.originalEvent;
		},
		
		getPageXY : function(eventObject) {
			return [eventObject.pageX, eventObject.pageY];
		},
		
		getParent : function(el) {
			return _getElementObject(el).parent();
		},
														
		getScrollLeft : function(el) {
			return el.scrollLeft();
		},
		
		getScrollTop : function(el) {
			return el.scrollTop();
		},
		
		getSelector : function(context, spec) {
            if (arguments.length == 2)
                return _getElementObject(context).find(spec);
            else
                return $(context);
		},
		
		/**
		 * gets the size for the element object, in an array : [ width, height ].
		 */
		getSize : function(el) {
			el = $(el);
			return [el.outerWidth(), el.outerHeight()];
		},

        getTagName : function(el) {
            var e = _getElementObject(el);
            return e.length > 0 ? e[0].tagName : null;
        },
		
		/**
		 * takes the args passed to an event function and returns you an object that gives the
		 * position of the object being moved, as a js object with the same params as the result of
		 * getOffset, ie: { left: xxx, top: xxx }.
		 * 
		 * different libraries have different signatures for their event callbacks.  
		 * see getDragObject as well
		 */
		getUIPosition : function(eventArgs, zoom) {
			
			zoom = zoom || 1;
			// this code is a workaround for the case that the element being dragged has a margin set on it. jquery UI passes
			// in the wrong offset if the element has a margin (it doesn't take the margin into account).  the getBoundingClientRect
			// method, which is in pretty much all browsers now, reports the right numbers.  but it introduces a noticeable lag, which
			// i don't like.
            
			/*if ( getBoundingClientRectSupported ) {
				var r = eventArgs[1].helper[0].getBoundingClientRect();
				return { left : r.left, top: r.top };
			} else {*/
			if (eventArgs.length == 1) {
				ret = { left: eventArgs[0].pageX, top:eventArgs[0].pageY };
			}
			else {
				var ui = eventArgs[1],
				  _offset = ui.offset;
				  
				ret = _offset || ui.absolutePosition;
				
				// adjust ui position to account for zoom, because jquery ui does not do this.
				ui.position.left /= zoom;
				ui.position.top /= zoom;
			}
            return { left:ret.left / zoom, top: ret.top / zoom };
		},		
		
		hasClass : function(el, clazz) {
			return el.hasClass(clazz);
		},
		
		/**
		 * initialises the given element to be draggable.
		 */
		initDraggable : function(el, options, isPlumbedComponent, _jsPlumb) {
			options = options || {};
			el = $(el);

			options.start = jsPlumbUtil.wrap(options.start, function() {
				$("body").addClass(_jsPlumb.dragSelectClass);
			}, false);

			options.stop = jsPlumbUtil.wrap(options.stop, function() {
				$("body").removeClass(_jsPlumb.dragSelectClass);
			});

			// remove helper directive if present and no override
			if (!options.doNotRemoveHelper)
				options.helper = null;
			if (isPlumbedComponent)
				options.scope = options.scope || jsPlumb.Defaults.Scope;
			el.draggable(options);
		},
		
		/**
		 * initialises the given element to be droppable.
		 */
		initDroppable : function(el, options) {
			options.scope = options.scope || jsPlumb.Defaults.Scope;
			$(el).droppable(options);
		},
		
		isAlreadyDraggable : function(el) {
			return $(el).hasClass("ui-draggable");
		},
		
		/**
		 * returns whether or not drag is supported (by the library, not whether or not it is disabled) for the given element.
		 */
		isDragSupported : function(el, options) {
			return $(el).draggable;
		},				
						
		/**
		 * returns whether or not drop is supported (by the library, not whether or not it is disabled) for the given element.
		 */
		isDropSupported : function(el, options) {
			return $(el).droppable;
		},							
		
		/**
		 * removes the given class from the element object.
		 */
		removeClass : function(el, clazz) {
			el = _getElementObject(el);
			try {
				if (el[0].className.constructor == SVGAnimatedString) {
					jsPlumbUtil.svg.removeClass(el[0], clazz);
                    return;
				}
			}
			catch (e) {
				// SVGAnimatedString not supported; no problem.
			}
			el.removeClass(clazz);
		},
		
		removeElement : function(element) {			
			_getElementObject(element).remove();
		},		

		setDragFilter : function(el, filter) {
			if (jsPlumb.CurrentLibrary.isAlreadyDraggable(el))
				el.draggable("option", "cancel", filter);
		},
		
		setDraggable : function(el, draggable) {
			el.draggable("option", "disabled", !draggable);
		},
		
		setDragScope : function(el, scope) {
			el.draggable("option", "scope", scope);
		},
		
		setOffset : function(el, o) {
			_getElementObject(el).offset(o);
		},
		
		/**
		 * note that jquery ignores the name of the event you wanted to trigger, and figures it out for itself.
		 * the other libraries do not.  yui, in fact, cannot even pass an original event.  we have to pull out stuff
		 * from the originalEvent to put in an options object for YUI. 
		 * @param el
		 * @param event
		 * @param originalEvent
		 */
		trigger : function(el, event, originalEvent) {
			var h = jQuery._data(_getElementObject(el)[0], "handle");
            h(originalEvent);
		},
		
		unbind : function(el, event, callback) {
			el = _getElementObject(el);
			el.unbind(event, callback);
		}
	};
	
	$(document).ready(jsPlumb.init);
	
})(jQuery);









jsPlumb.ready(function() {
    //alert("test");

    var color = "gray";

		var instance = jsPlumb.getInstance({
			// notice the 'curviness' argument to this Bezier curve.  the curves on this page are far smoother
			// than the curves on the first demo, which use the default curviness value.			
			Connector : [ "Bezier", { curviness:30 } ],
			DragOptions : { cursor: "pointer", zIndex:2000 },
			PaintStyle : { strokeStyle:color, lineWidth:2 },

			EndpointStyle : { radius:9, fillStyle:color },
			HoverPaintStyle : {strokeStyle:"#ec9f2e" },
			EndpointHoverStyle : {fillStyle:"#ec9f2e" },
			Container:"mainPanel"
		});


    var chartWindow2 = jsPlumb.getSelector("#chartWindow2");

    instance.addEndpoint(chartWindow2, {
					uuid:"chartWindow2-right",
					anchor:"Right",
					maxConnections:-1
				});


    var chartWindow11 = jsPlumb.getSelector("#chartWindow11");

    instance.addEndpoint(chartWindow11, {
					uuid:"chartWindow11-left",
					anchor:"Left",
					maxConnections:-1
				});


    instance.connect({uuids:["chartWindow2-right", "chartWindow11-left"]});


    var chartWindow3 = jsPlumb.getSelector("#chartWindow3");
    instance.addEndpoint(chartWindow3, {
					uuid:"chartWindow3-right",
					anchor:"Right",
					maxConnections:-1
				});

    var chartWindow12 = jsPlumb.getSelector("#chartWindow12");
    instance.addEndpoint(chartWindow12, {
					uuid:"chartWindow12-left",
					anchor:"Left",
					maxConnections:-1
				});

    var chartWindow13 = jsPlumb.getSelector("#chartWindow13");
    instance.addEndpoint(chartWindow13, {
					uuid:"chartWindow13-left",
					anchor:"Left",
					maxConnections:-1
				});

    var chartWindow14 = jsPlumb.getSelector("#chartWindow14");
    instance.addEndpoint(chartWindow14, {
					uuid:"chartWindow14-left",
					anchor:"Left",
					maxConnections:-1
				});

    instance.connect({uuids:["chartWindow3-right", "chartWindow12-left"]});
    instance.connect({uuids:["chartWindow3-right", "chartWindow13-left"]});
    instance.connect({uuids:["chartWindow3-right", "chartWindow14-left"]});
    

    var chartWindow4 = jsPlumb.getSelector("#chartWindow4");
    instance.addEndpoint(chartWindow4, {
					uuid:"chartWindow4-right",
					anchor:"Right",
					maxConnections:-1
				});

    var chartWindow15 = jsPlumb.getSelector("#chartWindow4");
    instance.addEndpoint(chartWindow14, {
					uuid:"chartWindow14-left",
					anchor:"Left",
					maxConnections:-1
				});

    instance.connect({uuids:["chartWindow4-right", "chartWindow14-left"]});


    var chartWindow15 = jsPlumb.getSelector("#chartWindow15");
    instance.addEndpoint(chartWindow15, {
					uuid:"chartWindow15-left",
					anchor:"Left",
					maxConnections:-1
				});
    instance.connect({uuids:["chartWindow4-right", "chartWindow15-left"]});


    var chartWindow5 = jsPlumb.getSelector("#chartWindow5");
    instance.addEndpoint(chartWindow5, {
					uuid:"chartWindow5-right",
					anchor:"Right",
					maxConnections:-1
				});

    var chartWindow16 = jsPlumb.getSelector("#chartWindow16");
    instance.addEndpoint(chartWindow16, {
					uuid:"chartWindow16-left",
					anchor:"Left",
					maxConnections:-1
				});
    instance.connect({uuids:["chartWindow4-right", "chartWindow15-left"]});

    instance.connect({uuids:["chartWindow5-right", "chartWindow14-left"]});
    instance.connect({uuids:["chartWindow5-right", "chartWindow15-left"]});
    instance.connect({uuids:["chartWindow5-right", "chartWindow16-left"]});


    var chartWindow6 = jsPlumb.getSelector("#chartWindow6");
    instance.addEndpoint(chartWindow6, {
					uuid:"chartWindow6-right",
					anchor:"Right",
					maxConnections:-1
				});

    var chartWindow17 = jsPlumb.getSelector("#chartWindow17");
    instance.addEndpoint(chartWindow17, {
					uuid:"chartWindow17-left",
					anchor:"Left",
					maxConnections:-1
				});

    instance.connect({uuids:["chartWindow6-right", "chartWindow17-left"]});

    var chartWindow7 = jsPlumb.getSelector("#chartWindow7");
    instance.addEndpoint(chartWindow7, {
					uuid:"chartWindow7-right",
					anchor:"Right",
					maxConnections:-1
				});

    instance.connect({uuids:["chartWindow7-right", "chartWindow17-left"]});



    var chartWindow22 = jsPlumb.getSelector("#chartWindow22");
    instance.addEndpoint(chartWindow22, {
					uuid:"chartWindow22-right",
					anchor:"Right",
					maxConnections:-1
				});

    var chartWindow24 = jsPlumb.getSelector("#chartWindow24");
    instance.addEndpoint(chartWindow24, {
					uuid:"chartWindow24-left",
					anchor:"Left",
					maxConnections:-1
				});

    instance.connect({uuids:["chartWindow22-right", "chartWindow24-left"]});


     var chartWindow19 = jsPlumb.getSelector("#chartWindow19");
    instance.addEndpoint(chartWindow19, {
					uuid:"chartWindow19-left",
					anchor:"Left",
					maxConnections:-1
				});

    instance.addEndpoint(chartWindow11, {
					uuid:"chartWindow11-right",
					anchor:"Right",
					maxConnections:-1
				});

    instance.addEndpoint(chartWindow12, {
					uuid:"chartWindow12-right",
					anchor:"Right",
					maxConnections:-1
				});

    instance.addEndpoint(chartWindow13, {
					uuid:"chartWindow13-right",
					anchor:"Right",
					maxConnections:-1
				});

    instance.connect({uuids:["chartWindow11-right", "chartWindow19-left"]});
    instance.connect({uuids:["chartWindow12-right", "chartWindow19-left"]});
    instance.connect({uuids:["chartWindow13-right", "chartWindow19-left"]});


     var chartWindow20 = jsPlumb.getSelector("#chartWindow20");
     instance.addEndpoint(chartWindow20, {
					uuid:"chartWindow20-left",
					anchor:"Left",
					maxConnections:-1
				});

     instance.connect({uuids:["chartWindow12-right", "chartWindow20-left"]});
     instance.connect({uuids:["chartWindow13-right", "chartWindow20-left"]});


    instance.addEndpoint(chartWindow14, {
					uuid:"chartWindow14-right",
					anchor:"Right",
					maxConnections:-1
				});

    instance.addEndpoint(chartWindow15, {
					uuid:"chartWindow15-right",
					anchor:"Right",
					maxConnections:-1
				});

    instance.addEndpoint(chartWindow16, {
					uuid:"chartWindow16-right",
					anchor:"Right",
					maxConnections:-1
				});

    instance.addEndpoint(chartWindow17, {
					uuid:"chartWindow17-right",
					anchor:"Right",
					maxConnections:-1
				});


 instance.connect({uuids:["chartWindow14-right", "chartWindow20-left"]});
 instance.connect({uuids:["chartWindow15-right", "chartWindow20-left"]});
 instance.connect({uuids:["chartWindow16-right", "chartWindow20-left"]});
 instance.connect({uuids:["chartWindow17-right", "chartWindow20-left"]});


 instance.addEndpoint(chartWindow19, {
					uuid:"chartWindow19-right",
					anchor:"Right",
					maxConnections:-1
				});

 instance.addEndpoint(chartWindow20, {
					uuid:"chartWindow20-right",
					anchor:"Right",
					maxConnections:-1
				});

 instance.addEndpoint(chartWindow22, {
					uuid:"chartWindow22-left",
					anchor:"Left",
					maxConnections:-1
				});

 instance.connect({uuids:["chartWindow19-right", "chartWindow22-left"]});
 instance.connect({uuids:["chartWindow20-right", "chartWindow22-left"]});


});
(function() {
  $(function() {
    return jQuery("#login-button").click(function() {
      jQuery.ajax('/sessions', {
        type: 'POST',
        data: {
          email: jQuery("#email").val(),
          password: jQuery("#password").val()
        },
        error: function(jqXHR, textStatus, errorThrown) {
          console.log("Response: " + textStatus);
          jQuery("#login-message").show();
          return jQuery("#login-message").append("Invalid username or password");
        },
        success: function(data, textStatus, jqXHR) {
          console.log("Logged in");
          jQuery("#login-modal").modal("hide");
          return window.location.replace(window.location.href);
        }
      });
      return $("#chartWindow2").click(function() {
        return alert("test");
      });
    });
  });

}).call(this);
(function() {


}).call(this);
(function() {


}).call(this);
// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// the compiled file.
//
// WARNING: THE FIRST BLANK LINE MARKS THE END OF WHAT'S TO BE PROCESSED, ANY BLANK LINE SHOULD
// GO AFTER THE REQUIRES BELOW.
//





;
